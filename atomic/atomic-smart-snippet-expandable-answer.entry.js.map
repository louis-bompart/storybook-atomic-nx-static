{"file":"atomic-smart-snippet-expandable-answer.entry.esm.js","mappings":"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","names":[],"sources":["src/components/common/smart-snippets/atomic-smart-snippet-expandable-answer/atomic-smart-snippet-expandable-answer.pcss?tag=atomic-smart-snippet-expandable-answer&encapsulation=shadow","src/components/common/smart-snippets/atomic-smart-snippet-expandable-answer/atomic-smart-snippet-expandable-answer.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n@import '../../../../global/mixins.pcss';\r\n\r\n/**\r\n * @prop --atomic-smart-snippet-gradient-start: At which height to start fading out a truncated answer.\r\n */\r\n:host {\r\n  atomic-smart-snippet-answer {\r\n    @mixin set-font-size var(--atomic-text-lg);\r\n\r\n    display: block;\r\n    overflow: hidden;\r\n    height: var(--collapsed-size);\r\n\r\n    --gradient-start: var(\r\n      --atomic-smart-snippet-gradient-start,\r\n      calc(max(var(--collapsed-size) - (var(--line-height) * 1.5), var(--collapsed-size) * 0.5))\r\n    );\r\n    color: var(--atomic-on-background);\r\n    mask-image: linear-gradient(black, black var(--gradient-start), transparent 100%);\r\n\r\n    &.loaded {\r\n      transition: height ease-in-out 0.25s;\r\n    }\r\n  }\r\n\r\n  button atomic-icon {\r\n    @apply relative top-0.5;\r\n  }\r\n\r\n  .expanded {\r\n    atomic-smart-snippet-answer {\r\n      height: var(--full-height);\r\n      mask-image: none;\r\n    }\r\n\r\n    button atomic-icon {\r\n      @apply -scale-y-100 top-0;\r\n    }\r\n  }\r\n}\r\n","import {InlineLink} from '@coveo/headless';\r\nimport {\r\n  h,\r\n  Component,\r\n  State,\r\n  Prop,\r\n  Element,\r\n  Watch,\r\n  Event,\r\n  EventEmitter,\r\n} from '@stencil/core';\r\nimport ArrowDown from '../../../../images/arrow-down.svg';\r\nimport {listenOnce} from '../../../../utils/event-utils';\r\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\r\nimport {AnyBindings} from '../../interface/bindings';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-smart-snippet-expandable-answer',\r\n  styleUrl: 'atomic-smart-snippet-expandable-answer.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSmartSnippetExpandableAnswer {\r\n  @InitializeBindings() public bindings!: AnyBindings;\r\n  public error!: Error;\r\n  @Element() public host!: HTMLElement;\r\n\r\n  @Prop({reflect: true}) expanded!: boolean;\r\n  @Prop() htmlContent!: string;\r\n  /**\r\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\r\n   */\r\n  @Prop({reflect: true}) maximumHeight = 250;\r\n  /**\r\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\r\n   */\r\n  @Prop({reflect: true}) collapsedHeight = 180;\r\n  /**\r\n   * Sets the style of the snippet.\r\n   *\r\n   * Example:\r\n   * ```ts\r\n   * expandableAnswer.snippetStyle = `\r\n   *   b {\r\n   *     color: blue;\r\n   *   }\r\n   * `;\r\n   * ```\r\n   */\r\n  @Prop() snippetStyle?: string;\r\n\r\n  @State() fullHeight?: number;\r\n\r\n  @Event() expand!: EventEmitter;\r\n  @Event() collapse!: EventEmitter;\r\n  @Event() selectInlineLink!: EventEmitter<InlineLink>;\r\n  @Event() beginDelayedSelectInlineLink!: EventEmitter<InlineLink>;\r\n  @Event() cancelPendingSelectInlineLink!: EventEmitter<InlineLink>;\r\n\r\n  private validateProps() {\r\n    if (this.maximumHeight < this.collapsedHeight) {\r\n      throw 'maximumHeight must be equal or greater than collapsedHeight';\r\n    }\r\n  }\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n  }\r\n\r\n  @Watch('fullHeight')\r\n  public fullHeightUpdated() {\r\n    this.host.style.setProperty('--full-height', `${this.fullHeight}px`);\r\n    this.host.style.setProperty(\r\n      '--collapsed-size',\r\n      `${this.showButton ? this.collapsedHeight : this.fullHeight}px`\r\n    );\r\n  }\r\n\r\n  private establishInitialHeight() {\r\n    const answerElement = document.createElement('atomic-smart-snippet-answer');\r\n    answerElement.htmlContent = this.htmlContent;\r\n    answerElement.innerStyle = this.snippetStyle;\r\n    answerElement.style.visibility = 'hidden';\r\n    answerElement.style.position = 'absolute';\r\n    return new Promise<number>((resolve) => {\r\n      listenOnce(answerElement, 'answerSizeUpdated', (event) => {\r\n        answerElement.remove();\r\n        resolve((event as CustomEvent<{height: number}>).detail.height);\r\n      });\r\n      this.host.parentElement!.appendChild(answerElement);\r\n    });\r\n  }\r\n\r\n  private get showButton() {\r\n    return this.fullHeight! > this.maximumHeight;\r\n  }\r\n\r\n  private get isExpanded() {\r\n    return this.expanded || !this.showButton;\r\n  }\r\n\r\n  public async componentWillLoad() {\r\n    this.fullHeight = await this.establishInitialHeight();\r\n  }\r\n\r\n  public renderAnswer() {\r\n    return (\r\n      <div part=\"truncated-answer\">\r\n        <atomic-smart-snippet-answer\r\n          exportparts=\"answer\"\r\n          htmlContent={this.htmlContent}\r\n          innerStyle={this.snippetStyle}\r\n          onAnswerSizeUpdated={(e) => (this.fullHeight = e.detail.height)}\r\n          onSelectInlineLink={(e) => this.selectInlineLink.emit(e.detail)}\r\n          onBeginDelayedSelectInlineLink={(e) =>\r\n            this.beginDelayedSelectInlineLink.emit(e.detail)\r\n          }\r\n          onCancelPendingSelectInlineLink={(e) =>\r\n            this.cancelPendingSelectInlineLink.emit(e.detail)\r\n          }\r\n        ></atomic-smart-snippet-answer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public renderButton() {\r\n    if (!this.showButton) {\r\n      return;\r\n    }\r\n    return (\r\n      <button\r\n        onClick={() =>\r\n          this.isExpanded ? this.collapse.emit() : this.expand.emit()\r\n        }\r\n        class=\"text-primary hover:underline mb-4\"\r\n        part={this.isExpanded ? 'show-less-button' : 'show-more-button'}\r\n      >\r\n        {this.bindings.i18n.t(this.isExpanded ? 'show-less' : 'show-more')}\r\n        <atomic-icon\r\n          icon={ArrowDown}\r\n          class=\"w-3 ml-2 align-baseline\"\r\n        ></atomic-icon>\r\n      </button>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div class={this.isExpanded ? 'expanded' : ''}>\r\n        {this.renderAnswer()}\r\n        {this.renderButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}