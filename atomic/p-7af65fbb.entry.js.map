{"version":3,"names":["atomicNotificationsCss","AtomicNotificationsStyle0","AtomicNotifyTrigger","this","headingLevel","initialize","notifyTrigger","buildNotifyTrigger","bindings","engine","generateAriaMessage","notifications","length","map","text","i","i18n","t","n","join","renderNotification","h","part","class","icon","_a","InfoIcon","renderNotifications","render","Hidden","ariaMessage","Fragment","Heading","level","notifyTriggerState","__decorate","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/search/atomic-notification/atomic-notifications.pcss?tag=atomic-notifications&encapsulation=shadow","src/components/search/atomic-notification/atomic-notifications.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n","import {\r\n  NotifyTrigger,\r\n  NotifyTriggerState,\r\n  buildNotifyTrigger,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Fragment, Prop} from '@stencil/core';\r\nimport InfoIcon from '../../../images/info.svg';\r\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Heading} from '../../common/heading';\r\nimport {Hidden} from '../../common/hidden';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).\r\n *\r\n * @part notifications - The wrapper around the notifications.\r\n * @part notification - The wrapper around a single notification.\r\n * @part icon - The icon of the notification.\r\n * @part text - The text of the notification.\r\n */\r\n@Component({\r\n  tag: 'atomic-notifications',\r\n  styleUrl: 'atomic-notifications.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicNotifyTrigger implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  protected notifyTrigger!: NotifyTrigger;\r\n\r\n  @BindStateToController('notifyTrigger')\r\n  @State()\r\n  private notifyTriggerState?: NotifyTriggerState;\r\n  @State() public error!: Error;\r\n\r\n  @AriaLiveRegion('notifications') ariaMessage!: string;\r\n\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n\r\n  /**\r\n   * Specifies an icon to display at the left-end of a notification.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly\r\n   */\r\n  @Prop({reflect: true}) public icon?: string;\r\n\r\n  public initialize() {\r\n    this.notifyTrigger = buildNotifyTrigger(this.bindings.engine);\r\n  }\r\n\r\n  public generateAriaMessage() {\r\n    if (this.notifications.length === 1) {\r\n      return this.notifications[0];\r\n    }\r\n    return this.notifications\r\n      .map((text, i) =>\r\n        this.bindings.i18n.t('notification-n', {n: i + 1, text})\r\n      )\r\n      .join('\\n');\r\n  }\r\n\r\n  public renderNotification(text: string) {\r\n    return (\r\n      <div\r\n        part=\"notification\"\r\n        class=\"shadow-lg bg-background border border-neutral-dark rounded-md p-6 flex items-center\"\r\n      >\r\n        <atomic-icon\r\n          icon={this.icon ?? InfoIcon}\r\n          part=\"icon\"\r\n          class=\"w-7 h-7 mr-6 text-neutral-dark\"\r\n        />\r\n        <span part=\"text\" class=\"leading-5 text-base text-on-background\">\r\n          {text}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public renderNotifications() {\r\n    return (\r\n      <div part=\"notifications\" class=\"flex flex-col gap-4\">\r\n        {this.notifications.map((text) => this.renderNotification(text))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.notifications.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    this.ariaMessage = this.generateAriaMessage();\r\n\r\n    return (\r\n      <Fragment>\r\n        <Heading level={this.headingLevel ?? 0} class=\"accessibility-only\">\r\n          {this.bindings.i18n.t('notifications')}\r\n        </Heading>\r\n        {this.renderNotifications()}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  private get notifications(): string[] {\r\n    return this.notifyTriggerState?.notifications || [];\r\n  }\r\n}\r\n"],"mappings":"klBAAA,MAAMA,EAAyB,w+tCAC/B,MAAAC,EAAeD,E,iXC6BFE,EAAmB,M,yBAcAC,KAAAC,aAAe,E,yEAAA,E,oBAWtC,UAAAC,GACLF,KAAKG,cAAgBC,EAAmBJ,KAAKK,SAASC,O,CAGjD,mBAAAC,GACL,GAAIP,KAAKQ,cAAcC,SAAW,EAAG,CACnC,OAAOT,KAAKQ,cAAc,E,CAE5B,OAAOR,KAAKQ,cACTE,KAAI,CAACC,EAAMC,IACVZ,KAAKK,SAASQ,KAAKC,EAAE,iBAAkB,CAACC,EAAGH,EAAI,EAAGD,WAEnDK,KAAK,K,CAGH,kBAAAC,CAAmBN,G,MACxB,OACEO,EAAA,OACEC,KAAK,eACLC,MAAM,uFAENF,EAAA,eACEG,MAAMC,EAAAtB,KAAKqB,QAAI,MAAAC,SAAA,EAAAA,EAAIC,EACnBJ,KAAK,OACLC,MAAM,mCAERF,EAAA,QAAMC,KAAK,OAAOC,MAAM,0CACrBT,G,CAMF,mBAAAa,GACL,OACEN,EAAA,OAAKC,KAAK,gBAAgBC,MAAM,uBAC7BpB,KAAKQ,cAAcE,KAAKC,GAASX,KAAKiB,mBAAmBN,K,CAKzD,MAAAc,G,MACL,IAAKzB,KAAKQ,cAAcC,OAAQ,CAC9B,OAAOS,EAACQ,EAAM,K,CAGhB1B,KAAK2B,YAAc3B,KAAKO,sBAExB,OACEW,EAACU,EAAQ,KACPV,EAACW,EAAO,CAACC,OAAOR,EAAAtB,KAAKC,gBAAY,MAAAqB,SAAA,EAAAA,EAAI,EAAGF,MAAM,sBAC3CpB,KAAKK,SAASQ,KAAKC,EAAE,kBAEvBd,KAAKwB,sB,CAKZ,iBAAYhB,G,MACV,QAAOc,EAAAtB,KAAK+B,sBAAkB,MAAAT,SAAA,SAAAA,EAAEd,gBAAiB,E,GAnFtBwB,EAAA,CAA5BC,K,+BAKOD,EAAA,CAFPE,EAAsB,kB,yCAKUF,EAAA,CAAhCG,EAAe,kB"}