{"file":"event-utils-8de63ec3.js","mappings":"SAAgB,gBAAgB,CAAI,IAAY,EAAE,MAAS;IACzD,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE;QAC3B,MAAM;;QAEN,OAAO,EAAE,IAAI;;QAEb,UAAU,EAAE,IAAI;;QAEhB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;AACL,CAAC;SAce,UAAU,CACxB,OAAoB,EACpB,IAAY,EACZ,QAA4C,EAC5C,OAA2C;IAE3C,MAAM,SAAS,GAAkB,CAAC,GAAU;QAC1C,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QACtD,OAAO,QAAQ,KAAK,QAAQ;cACxB,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC;cACvC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KACjC,CAAC;IACF,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;AACrD;;;;","names":[],"sources":["src/utils/event-utils.ts"],"sourcesContent":["export function buildCustomEvent<T>(name: string, detail: T) {\n  return new CustomEvent(name, {\n    detail,\n    // Event will bubble up the DOM until it is caught\n    bubbles: true,\n    // Allows to verify if event is caught (cancelled). If it's not caught, it won't be initialized.\n    cancelable: true,\n    // Allows to compose Atomic components inside one another, event will go across DOM/Shadow DOM\n    composed: true,\n  });\n}\n\nexport function listenOnce<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  type: K,\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void,\n  options?: boolean | AddEventListenerOptions\n): void;\nexport function listenOnce(\n  element: HTMLElement,\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions\n): void;\nexport function listenOnce(\n  element: HTMLElement,\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions\n): void {\n  const _listener: EventListener = (evt: Event) => {\n    element.removeEventListener(type, _listener, options);\n    typeof listener === 'object'\n      ? listener.handleEvent.call(element, evt)\n      : listener.call(element, evt);\n  };\n  element.addEventListener(type, _listener, options);\n}\n"],"version":3}