{"file":"props-utils-36d102c2.js","mappings":";;;;SASgB,OAAO,CAAC,IAAqB;IAC3C,OAAO,CAAC,SAA6B,EAAE,YAAoB;QACzD,MAAM,EAAC,iBAAiB,EAAC,GAAG,SAAS,CAAC;QACtC,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO,CAAC,KAAK,CACX,+FAA+F,CAChG,CAAC;YACF,OAAO;SACR;QAED,SAAS,CAAC,iBAAiB,GAAG;;YAC5B,MAAM,MAAM,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,KAAK,YAAY,CAAC;YAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACpC,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC;YAC/C,mBAAmB,CACjB,MAAM,EACN,QAAQ,EACR,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EACtB,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,mCAAI,KAAK,CAC3B,CAAC;YACF,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9B,CAAC;KACH,CAAC;AACJ,CAAC;SAEe,SAAS;IACvB,OAAO,CAAC,SAA6B,EAAE,YAAoB;QACzD,MAAM,EAAC,iBAAiB,EAAC,GAAG,SAAS,CAAC;QAEtC,MAAM,qBAAqB,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;QAEzD,SAAS,CAAC,iBAAiB,GAAG;YAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC5B,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC9B,OAAO;aACR;YAED,IAAI;gBACF,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;oBACzB,IAAI,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;iBACnC;qBAAM;oBACL,OAAO,CAAC,KAAK,CACX,YAAY,qBAAqB,qBAAqB,EACtD,UAAU,CAAC,IAAI,CAAC,CACjB,CAAC;iBACH;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CACX,iCAAiC,qBAAqB,WAAW,EACjE,CAAC,CACF,CAAC;aACH;YAED,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/B,CAAC;KACH,CAAC;AACJ,CAAC;AAED,SAAS,2BAA2B,CAAC,cAAsB;;IACzD,MAAM,qCAAqC,GAAG,gBAAgB,CAAC;IAC/D,MAAM,CAAC,GAAG,uBAAuB,CAAC,GAChC,MAAA,cAAc,CAAC,QAAQ,CAAC,qCAAqC,CAAC,mCAAI,EAAE,CAAC;IAEvE,MAAM,6BAA6B,GAAG,QAAQ,CAAC;IAC/C,OAAO,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,uBAAuB,CAAC,KAC3D,uBAAuB,CAAC,OAAO,CAAC,6BAA6B,EAAE,IAAI,CAAC,CACrE,CAAC;AACJ,CAAC;SAEe,mBAAmB,CACjC,MAAc,EACd,WAA8C,EAC9C,UAA2C,EAC3C,WAAoB;IAEpB,MAAM,GAAG,GAAG,qBAAqB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACtD,MAAM,CAAC,MAAM,CACX,WAAW,EACX,WAAW,GAAG,yBAAyB,CAAC,GAAG,CAAC,GAAG,GAAG,CACnD,CAAC;AACJ,CAAC;AAED,SAAS,yBAAyB,CAAC,GAA2B;IAC5D,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAC/B,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM;QACtB,GAAG,GAAG;QACN,CAAC,GAAG,GAAG,2BAA2B,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,KACrD,QAAQ,CAAC,IAAI,EAAE,CAChB;KACF,CAAC,EACF,EAAE,CACH,CAAC;AACJ,CAAC;AAED,SAAS,qBAAqB,CAC5B,MAAc,EACd,UAA2C;IAE3C,MAAM,WAAW,GAA2B,EAAE,CAAC;IAC/C,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;IAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC7C,SAAS;SACV;QAED,MAAM,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;QACvE,WAAW,CAAC,QAAQ,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;KAC9C;IACD,OAAO,WAAW,CAAC;AACrB;;;;","names":[],"sources":["src/utils/props-utils.ts"],"sourcesContent":["import {isArray} from '@coveo/bueno';\nimport {ComponentInterface, getElement} from '@stencil/core';\nimport {camelToKebab, kebabToCamel} from './utils';\n\ninterface MapPropOptions {\n  attributePrefix?: string;\n  splitValues?: boolean;\n}\n\nexport function MapProp(opts?: MapPropOptions) {\n  return (component: ComponentInterface, variableName: string) => {\n    const {componentWillLoad} = component;\n    if (!componentWillLoad) {\n      console.error(\n        'The \"componentWillLoad\" lifecycle method has to be defined for the MapProp decorator to work.'\n      );\n      return;\n    }\n\n    component.componentWillLoad = function () {\n      const prefix = (opts && opts.attributePrefix) || variableName;\n      const variable = this[variableName];\n      const attributes = getElement(this).attributes;\n      mapAttributesToProp(\n        prefix,\n        variable,\n        Array.from(attributes),\n        opts?.splitValues ?? false\n      );\n      componentWillLoad.call(this);\n    };\n  };\n}\n\nexport function ArrayProp() {\n  return (component: ComponentInterface, variableName: string) => {\n    const {componentWillLoad} = component;\n\n    const attributeWithBrackets = camelToKebab(variableName);\n\n    component.componentWillLoad = function () {\n      const value = this[variableName];\n      if (!value || isArray(value)) {\n        componentWillLoad?.call(this);\n        return;\n      }\n\n      try {\n        const valueAsArray = JSON.parse(value);\n        if (isArray(valueAsArray)) {\n          this[variableName] = valueAsArray;\n        } else {\n          console.error(\n            `Property ${attributeWithBrackets} should be an array`,\n            getElement(this)\n          );\n        }\n      } catch (e) {\n        console.error(\n          `Error while parsing attribute ${attributeWithBrackets} as array`,\n          e\n        );\n      }\n\n      componentWillLoad?.call(this);\n    };\n  };\n}\n\nfunction splitAttributeValueOnCommas(attributeValue: string) {\n  const splitButIgnoreEscapeSymbolsExpression = /(?:\\\\.|[^,])+/g;\n  const [...valuesWithEscapeSymbols] =\n    attributeValue.matchAll(splitButIgnoreEscapeSymbolsExpression) ?? [];\n\n  const removeEscapeSymbolsExpression = /\\\\(.)/g;\n  return valuesWithEscapeSymbols.map(([valuesWithEscapeSymbols]) =>\n    valuesWithEscapeSymbols.replace(removeEscapeSymbolsExpression, '$1')\n  );\n}\n\nexport function mapAttributesToProp(\n  prefix: string,\n  mapVariable: Record<string, string | string[]>,\n  attributes: {name: string; value: string}[],\n  splitValues: boolean\n) {\n  const map = attributesToStringMap(prefix, attributes);\n  Object.assign(\n    mapVariable,\n    splitValues ? stringMapToStringArrayMap(map) : map\n  );\n}\n\nfunction stringMapToStringArrayMap(map: Record<string, string>) {\n  return Object.entries(map).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: splitAttributeValueOnCommas(value).map((subValue) =>\n        subValue.trim()\n      ),\n    }),\n    {}\n  );\n}\n\nfunction attributesToStringMap(\n  prefix: string,\n  attributes: {name: string; value: string}[]\n) {\n  const mapVariable: Record<string, string> = {};\n  const kebabPrefix = camelToKebab(prefix) + '-';\n  for (let i = 0; i < attributes.length; i++) {\n    const attribute = attributes[i];\n    if (attribute.name.indexOf(kebabPrefix) !== 0) {\n      continue;\n    }\n\n    const property = kebabToCamel(attribute.name.replace(kebabPrefix, ''));\n    mapVariable[property] = `${attribute.value}`;\n  }\n  return mapVariable;\n}\n"],"version":3}