{"file":"atomic-focus-trap.entry.esm.js","mappings":"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","names":[],"sources":["src/components/common/atomic-focus-trap.tsx"],"sourcesContent":["import {Component, Element, Listen, Prop, Watch} from '@stencil/core';\r\nimport {getFirstFocusableDescendant} from '../../utils/accessibility-utils';\r\nimport {\r\n  isAncestorOf,\r\n  defer,\r\n  getFocusedElement,\r\n  getParent,\r\n} from '../../utils/utils';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-focus-trap',\r\n  shadow: false,\r\n})\r\nexport class AtomicFocusTrap {\r\n  @Element() private host!: HTMLElement;\r\n  @Prop() public active = false;\r\n  /**\r\n   * The source to focus when the focus trap becomes inactive.\r\n   */\r\n  @Prop({mutable: true}) source?: HTMLElement;\r\n  /**\r\n   * The container to hide from the tabindex and accessibility DOM when the focus trap is inactive.\r\n   */\r\n  @Prop({mutable: true}) container?: HTMLElement;\r\n\r\n  /**\r\n   * Whether the element should be hidden from screen readers & not interactive with the tab, when not active.\r\n   */\r\n  @Prop() shouldHideSelf = true;\r\n\r\n  /**\r\n   * The common ancestor of the focus trap and of all the elements that should be inaccessible when inside the focus trap.\r\n   */\r\n  @Prop() scope = document.body;\r\n\r\n  private readonly hiddenElements: Element[] = [];\r\n\r\n  hide(element: Element) {\r\n    // aria-hidden -> already hidden\r\n    // aria-live or atomic-aria-live -> must not be hidden otherwise it won't announce dynamic changes in the live region\r\n    if (\r\n      element.hasAttribute('aria-hidden') ||\r\n      element.hasAttribute('aria-live') ||\r\n      element.tagName.toLowerCase() === 'atomic-aria-live'\r\n    ) {\r\n      return;\r\n    }\r\n    element.setAttribute('aria-hidden', 'true');\r\n    this.hiddenElements.push(element);\r\n  }\r\n\r\n  showAll() {\r\n    let el: Element | undefined;\r\n    while ((el = this.hiddenElements.pop())) {\r\n      el.removeAttribute('aria-hidden');\r\n    }\r\n  }\r\n\r\n  hideSiblingsRecursively(element: Element | ShadowRoot) {\r\n    const parent = getParent(element);\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    Array.from(parent.children as HTMLCollection).forEach((sibling) => {\r\n      if (sibling === element) {\r\n        return;\r\n      }\r\n      if (\r\n        sibling.assignedSlot &&\r\n        isAncestorOf(this.host, sibling.assignedSlot)\r\n      ) {\r\n        return;\r\n      }\r\n      this.hide(sibling);\r\n    });\r\n    if (parent !== this.scope) {\r\n      this.hideSiblingsRecursively(parent);\r\n    }\r\n  }\r\n\r\n  showSelf() {\r\n    this.parentToHide.removeAttribute('aria-hidden');\r\n    this.parentToHide.removeAttribute('tabindex');\r\n  }\r\n\r\n  hideSelf() {\r\n    if (this.shouldHideSelf) {\r\n      this.parentToHide.setAttribute('aria-hidden', 'true');\r\n      this.parentToHide.setAttribute('tabindex', '-1');\r\n    }\r\n  }\r\n\r\n  async onDeactivated(isInitialLoad: boolean) {\r\n    this.showAll();\r\n    if (!isInitialLoad) {\r\n      await defer();\r\n      this.source?.focus();\r\n    }\r\n    this.hideSelf();\r\n  }\r\n\r\n  async onActivated(isInitialLoad: boolean) {\r\n    this.showSelf();\r\n    if (!isInitialLoad) {\r\n      await defer();\r\n      getFirstFocusableDescendant(this.host)?.focus();\r\n    }\r\n    this.hideSiblingsRecursively(this.host);\r\n  }\r\n\r\n  @Watch('active')\r\n  async activeChanged(active: boolean, wasActive: boolean) {\r\n    const isInitialLoad = active === wasActive;\r\n    if (active) {\r\n      await this.onActivated(isInitialLoad);\r\n    } else {\r\n      await this.onDeactivated(isInitialLoad);\r\n    }\r\n  }\r\n\r\n  @Listen('focusin', {target: 'document'})\r\n  onFocusChanged(e: FocusEvent) {\r\n    const elementIsPartOfHost = (focusedElement: Element | ShadowRoot) =>\r\n      isAncestorOf(this.host, focusedElement);\r\n\r\n    const elementIsPartOfScope = (focusedElement: Element | ShadowRoot) =>\r\n      isAncestorOf(this.scope, focusedElement);\r\n\r\n    if (!e.target || !this.active) {\r\n      return;\r\n    }\r\n\r\n    const focusedElement = getFocusedElement();\r\n\r\n    if (\r\n      focusedElement &&\r\n      (elementIsPartOfHost(focusedElement) ||\r\n        !elementIsPartOfScope(focusedElement))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    getFirstFocusableDescendant(this.host)?.focus();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.activeChanged(this.active, this.active);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.showAll();\r\n  }\r\n\r\n  private get parentToHide() {\r\n    return this.container ?? this.host;\r\n  }\r\n}\r\n"],"version":3}