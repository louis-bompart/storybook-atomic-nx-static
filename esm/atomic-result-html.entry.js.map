{"file":"atomic-result-html.entry.js","mappings":";;;;;;;;;;;;;;;;;;;;MAqBa,gBAAgB;;;;;;QAkBG,aAAQ,GAAG,IAAI,CAAC;;;wBAAL,IAAI;;IAEtC,MAAM;QACX,MAAM,WAAW,GAAG,8BAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACnB,OAAO;SACR;QAED,QACE,mBAAa,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAgB,EACxE;KACH;;;AA7B4B;IAA5B,kBAAkB,EAAE;kDAA4B;AACxB;IAAxB,aAAa,EAAE;gDAAyB;;;;","names":[],"sources":["src/components/search/result-template-components/atomic-result-html/atomic-result-html.tsx"],"sourcesContent":["import {Result} from '@coveo/headless';\r\nimport {Component, Prop, h, Element, State} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-html` component renders the HTML value of a string result field.\r\n *\r\n * There is an inherent XSS security concern associated with the usage of this component.\r\n *\r\n * Use only with fields for which you are certain the data is harmless.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-html',\r\n  shadow: false,\r\n})\r\nexport class AtomicResultHtml implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   *  The result field which the component should use.\r\n   * If set, Atomic searches for the specified field in the `Result` object first.\r\n   * If there's no such a field, Atomic searches through the `Result.raw` object.\r\n   * It's important to include the necessary field in the `ResultList` component.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).\r\n   */\r\n  @Prop({reflect: true}) public sanitize = true;\r\n\r\n  public render() {\r\n    const resultValue = getStringValueFromResultOrNull(this.result, this.field);\r\n    if (!resultValue) {\r\n      this.host.remove();\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <atomic-html value={resultValue} sanitize={this.sanitize}></atomic-html>\r\n    );\r\n  }\r\n}\r\n"],"version":3}