{"file":"atomic-insight-tab.entry.js","mappings":";;;;;;;;;;;AAAA,MAAM,mBAAmB,GAAG,2tuCAA2tuC,CAAC;AACxvuC,+BAAe,mBAAmB;;;;;;;;;;;;MCoBrB,gBAAgB;;;QAInB,UAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;;;;QAeV,UAAK,GAAG,UAAU,CAAC;;;;;QAMJ,WAAM,GAAG,KAAK,CAAC;QAOpD,gBAAW,GAAgB,SAAQ,CAAC;;;qBAbN,UAAU;sBAMM,KAAK;;;;;;IAa3D,MAAM,MAAM;QACV,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;KACnB;IAEM,UAAU;QACf,IAAI,CAAC,GAAG,GAAGA,EAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC/C,OAAO,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAC;YACtD,YAAY,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CACnC,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAC9C,CAAC;KACH;IAEM,kBAAkB;QACvB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;IAEM,oBAAoB;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;YACtC,OAAO;SACR;QAED,MAAM,aAAa,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;QAC5E,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC1B,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC9B;QAED,QACE,EAAC,MAAM,IACL,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAC,KAAK,EACV,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAC9B,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,EAClE,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EACxC,OAAO,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAE/B,IAAI,CAAC,KAAK,CACJ,EACT;KACH;;;AA1E4B;IAA5B,kBAAkB,EAAE;kDAAmC;AAMhD;IAFP,qBAAqB,CAAC,KAAK,CAAC;kDAEM;;;;;","names":["buildInsightTab"],"sources":["src/components/insight/atomic-insight-tab/atomic-insight-tab.pcss?tag=atomic-insight-tab&encapsulation=shadow","src/components/insight/atomic-insight-tab/atomic-insight-tab.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\n.active {\r\n  &::after {\r\n    @apply block absolute rounded w-full bg-primary bottom-0 h-1;\r\n    content: '';\r\n  }\r\n}\r\n\r\n[part='tab'] {\r\n  max-width: 150px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n","import {Unsubscribe} from '@coveo/headless';\r\nimport {Component, h, Prop, State, Method, Element} from '@stencil/core';\r\nimport {buildInsightTab, InsightTab, InsightTabState} from '..';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {Button} from '../../common/button';\r\nimport {dispatchTabLoaded, TabCommon} from '../../common/tabs/tab-common';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-tab',\r\n  styleUrl: './atomic-insight-tab.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightTab\r\n  implements TabCommon, InitializableComponent<InsightBindings>\r\n{\r\n  private tab!: InsightTab;\r\n  private tabId = randomID('insight-tab');\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n\r\n  @State() public error!: Error;\r\n\r\n  @BindStateToController('tab')\r\n  @State()\r\n  private tabState!: InsightTabState;\r\n\r\n  /**\r\n   * The label that will be shown to the user.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n\r\n  /**\r\n   * Whether this tab is active upon rendering.\r\n   * If multiple tabs are set to active on render, the last one to be rendered will override the others.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public active = false;\r\n\r\n  /**\r\n   * The expression that will be passed to the search as a `cq` paramenter upon being selected.\r\n   */\r\n  @Prop() public expression!: string;\r\n\r\n  private unsubscribe: Unsubscribe = () => {};\r\n\r\n  /**\r\n   * Activates the tab.\r\n   */\r\n  @Method()\r\n  async select() {\r\n    this.tab.select();\r\n  }\r\n\r\n  public initialize() {\r\n    this.tab = buildInsightTab(this.bindings.engine, {\r\n      options: {expression: this.expression, id: this.tabId},\r\n      initialState: {isActive: this.active},\r\n    });\r\n    this.unsubscribe = this.tab.subscribe(\r\n      () => (this.active = this.tab.state.isActive)\r\n    );\r\n  }\r\n\r\n  public componentDidRender() {\r\n    dispatchTabLoaded(this.host);\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  public render() {\r\n    if (!this.bindings.store.isAppLoaded()) {\r\n      return;\r\n    }\r\n\r\n    const buttonClasses = ['relative', 'pb-3', 'mt-1', 'mr-6', 'font-semibold'];\r\n    if (this.tabState.isActive) {\r\n      buttonClasses.push('active');\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        style=\"text-transparent\"\r\n        part=\"tab\"\r\n        class={buttonClasses.join(' ')}\r\n        ariaLabel={this.bindings.i18n.t('tab-search', {label: this.label})}\r\n        ariaPressed={`${this.tabState.isActive}`}\r\n        onClick={() => this.tab.select()}\r\n      >\r\n        {this.label}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n"],"version":3}