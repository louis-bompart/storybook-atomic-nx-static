{"version":3,"names":["atomicAutomaticFacetCss","AtomicAutomaticFacetStyle0","AtomicAutomaticFacet","focusTarget","this","headerFocus","FocusTargetController","numberOfSelectedValues","facet","state","values","filter","value","isSelected","length","renderValue","facetValue","onClick","displayValue","getFieldValueCaption","field","bindings","i18n","h","FacetValueCheckbox","numberOfResults","FacetValueLabelHighlight","renderValuesContainer","children","query","FacetValuesGroup","label","class","part","renderValues","map","toggleSelect","isNullOrUndefined","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","numberOfActiveValues","isCollapsed","headingLevel","onToggleCollapse","headerRef","el","setTarget","render","searchStatus","hasError","Hidden","FacetContainer","__decorate","InitializeBindings","atomicAutomaticFacetGeneratorCss","AtomicAutomaticFacetGeneratorStyle0","AtomicAutomaticFacetGenerator","desiredCount","numberOfValues","collapseFacetsAfter","initialize","validateProps","buildSearchStatus","engine","automaticFacetGenerator","buildAutomaticFacetGenerator","options","updateCollapseFacetsDependingOnFacetsVisibility","collapseAfter","numberOfVisibleFacets","Math","max","Schema","collapseFacetAfter","NumberValue","min","required","validate","shouldCollapseFacet","index","automaticFacets","automaticFacetGeneratorState","key","facetId","firstSearchExecuted","Array","from","_","FacetPlaceholder","BindStateToController"],"sources":["src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.pcss?tag=atomic-automatic-facet&encapsulation=shadow","src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.tsx","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\r\n","import {isNullOrUndefined} from '@coveo/bueno';\r\nimport {AutomaticFacet, SearchStatus, FacetValue} from '@coveo/headless';\r\nimport {Component, Prop, State, h, VNode} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\r\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * An automatic facet is a special type of facet generated by the automatic facets feature.\r\n * Unlike regular facets, which need to be explicitly defined and requested in the query,\r\n * automatic facets are dynamically generated by the index in response to the query.\r\n *\r\n * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`\r\n * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet',\r\n  styleUrl: 'atomic-automatic-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicAutomaticFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facetId!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facet!: AutomaticFacet;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public searchStatus!: SearchStatus;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed!: boolean;\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget() {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facet.state.values.filter((value) => this.isSelected(value))\r\n      .length;\r\n  }\r\n\r\n  private isSelected(value: FacetValue) {\r\n    return value.state === 'selected';\r\n  }\r\n\r\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.facet.state.field,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return (\r\n      <FacetValueCheckbox\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={this.isSelected(facetValue)}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n      >\r\n        <FacetValueLabelHighlight\r\n          displayValue={displayValue}\r\n          isSelected={this.isSelected(facetValue)}\r\n        ></FacetValueLabelHighlight>\r\n      </FacetValueCheckbox>\r\n    );\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[], query?: string) {\r\n    return (\r\n      <FacetValuesGroup\r\n        i18n={this.bindings.i18n}\r\n        label={this.facet.state.label}\r\n        query={query}\r\n      >\r\n        <ul class={'mt-3'} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facet.state.values.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private get label() {\r\n    return isNullOrUndefined(this.facet.state.label)\r\n      ? this.facet.state.field\r\n      : this.facet.state.label;\r\n  }\r\n\r\n  public renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTarget.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={0}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTarget.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatus.state.hasError) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && this.renderValues()}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n","@import '../../../../global/global.pcss';\r\n","import {NumberValue, Schema} from '@coveo/bueno';\r\nimport {\r\n  AutomaticFacetGenerator,\r\n  AutomaticFacetGeneratorState,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildAutomaticFacetGenerator,\r\n  buildSearchStatus,\r\n} from '@coveo/headless';\r\nimport {Component, Method, Prop, State, h} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\r\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\r\n * and requested in the query, automatic facets are dynamically generated by the index\r\n * in response to the search query.\r\n *\r\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet-generator',\r\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\r\n  shadow: false,\r\n})\r\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\r\n  @BindStateToController('automaticFacetGenerator')\r\n  @State()\r\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\r\n\r\n  public searchStatus!: SearchStatus;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n\r\n  /**\r\n   * The desired count of automatic facets.\r\n   *\r\n   * Minimum: `1`\r\n   * Maximum: `20`\r\n   * @defaultValue `5`\r\n   */\r\n  @Prop({reflect: true}) public desiredCount = 5;\r\n\r\n  /**\r\n   * The desired number of automatically generated facet values.\r\n   *\r\n   * Minimum: `1`\r\n   * @defaultValue `8`\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n\r\n  @State() private collapseFacetsAfter = -1;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\r\n      this.bindings.engine,\r\n      {\r\n        options: {\r\n          desiredCount: this.desiredCount,\r\n          numberOfValues: this.numberOfValues,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  @Method()\r\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\r\n    collapseAfter: number,\r\n    numberOfVisibleFacets: number\r\n  ) {\r\n    if (collapseAfter === -1) {\r\n      this.collapseFacetsAfter = -1;\r\n      return;\r\n    }\r\n    this.collapseFacetsAfter = Math.max(\r\n      0,\r\n      collapseAfter - numberOfVisibleFacets\r\n    );\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\r\n    }).validate({\r\n      collapseFacetAfter: this.collapseFacetsAfter,\r\n    });\r\n  }\r\n\r\n  private shouldCollapseFacet(index: number): boolean {\r\n    if (this.collapseFacetsAfter === -1) {\r\n      return false;\r\n    }\r\n    return this.collapseFacetsAfter\r\n      ? index + 1 > this.collapseFacetsAfter\r\n      : true;\r\n  }\r\n\r\n  public render() {\r\n    const automaticFacets =\r\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\r\n        return (\r\n          <atomic-automatic-facet\r\n            key={facet.state.field}\r\n            field={facet.state.field}\r\n            facetId={facet.state.field}\r\n            facet={facet}\r\n            searchStatus={this.searchStatus}\r\n            isCollapsed={this.shouldCollapseFacet(index)}\r\n          ></atomic-automatic-facet>\r\n        );\r\n      });\r\n    if (!this.searchStatus.state.firstSearchExecuted) {\r\n      return Array.from({length: this.desiredCount}, (_, index) => (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfValues}\r\n          isCollapsed={this.shouldCollapseFacet(index)}\r\n        />\r\n      ));\r\n    }\r\n\r\n    return automaticFacets;\r\n  }\r\n}\r\n"],"mappings":"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"}