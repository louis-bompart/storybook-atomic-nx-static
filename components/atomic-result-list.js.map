{"file":"atomic-result-list.js","mappings":"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","names":["AtomicResultList","buildResultList","buildResultsPerPage","buildInteractiveResult"],"sources":["src/components/search/result-lists/atomic-result-list/atomic-result-list.pcss?tag=atomic-result-list&encapsulation=shadow","src/components/search/result-lists/atomic-result-list/atomic-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../../../common/item-list/styles/table-display.pcss';\r\n@import '../../../common/item-list/styles/list-display.pcss';\r\n@import '../../../common/item-list/styles/grid-display.pcss';\r\n","import {\r\n  ResultList,\r\n  ResultListState,\r\n  buildResultList,\r\n  ResultsPerPageState,\r\n  ResultsPerPage,\r\n  buildResultsPerPage,\r\n  buildInteractiveResult,\r\n  Result,\r\n} from '@coveo/headless';\r\nimport {Component, Element, State, Prop, Method, h} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {DisplayGrid} from '../../../common/item-list/display-grid';\r\nimport {\r\n  DisplayTableData,\r\n  DisplayTable,\r\n  DisplayTableRow,\r\n} from '../../../common/item-list/display-table';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n  ItemTarget,\r\n  getItemListDisplayClasses,\r\n} from '../../../common/layout/display-options';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.\r\n *\r\n * @part result-list - The element containing every result of a result list\r\n * @part outline - The element displaying an outline or a divider around a result\r\n * @part result-list-grid-clickable-container - The parent of the result & the clickable link encompassing it, when results are displayed as a grid\r\n * @part result-list-grid-clickable - The clickable link encompassing the result when results are displayed as a grid\r\n * @part result-table - The element of the result table containing a heading and a body\r\n * @part result-table-heading - The element containing the row of cells in the result table's heading\r\n * @part result-table-heading-row - The element containing cells of the result table's heading\r\n * @part result-table-heading-cell - The element representing a cell of the result table's heading\r\n * @part result-table-body - The element containing the rows of the result table's body\r\n * @part result-table-row - The element containing the cells of a row in the result table's body\r\n * @part result-table-row-odd - The element containing the cells of an odd row in the result table's body\r\n * @part result-table-row-even - The element containing the cells of an even row in the result table's body\r\n * @part result-table-cell - The element representing a cell of the result table's body\r\n */\r\n@Component({\r\n  tag: 'atomic-result-list',\r\n  styleUrl: 'atomic-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultList implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public resultList!: ResultList;\r\n  public resultsPerPage!: ResultsPerPage;\r\n  private loadingFlag = randomID('firstResultLoaded-');\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private resultListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('resultList')\r\n  @State()\r\n  private resultListState!: ResultListState;\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  private resultsPerPageState!: ResultsPerPageState;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n  @State() private templateHasError = false;\r\n\r\n  /**\r\n   * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.\r\n   */\r\n  @Prop({reflect: true}) public display: ItemDisplayLayout = 'list';\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) public density: ItemDisplayDensity = 'normal';\r\n\r\n  /**\r\n   * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)).\r\n   * This property is only leveraged when `display` is `grid`.\r\n   * @defaultValue `_self`\r\n   */\r\n  @Prop() gridCellLinkTarget: ItemTarget = '_self';\r\n\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true, mutable: true})\r\n  public imageSize: ItemDisplayImageSize = 'icon';\r\n\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   *\r\n   * @param resultRenderingFunction\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  public get focusTarget() {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  public initialize() {\r\n    if (this.host.innerHTML.includes('<atomic-result-children')) {\r\n      console.warn(\r\n        'Folded results will not render any children for the \"atomic-result-list\". Please use \"atomic-folded-result-list\" instead.'\r\n      );\r\n    }\r\n    this.resultList = buildResultList(this.bindings.engine);\r\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.resultListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\r\n      getIsLoading: () => this.resultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    this.resultListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        hasError={this.resultListState.hasError}\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n        hasItems={this.resultListState.hasResults}\r\n      >\r\n        <DisplayWrapper display={this.display} listClasses={listClasses}>\r\n          <ResultsPlaceholdersGuard\r\n            density={this.density}\r\n            display={this.display}\r\n            imageSize={this.imageSize}\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n            hasItems={this.resultListState.hasResults}\r\n          >\r\n            {this.display === 'table'\r\n              ? this.renderAsTable()\r\n              : this.display === 'grid'\r\n                ? this.renderAsGrid()\r\n                : this.renderAsList()}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicResult(result: Result) {\r\n    return {\r\n      interactiveResult: buildInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.resultListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.resultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      imageSize: this.imageSize,\r\n      display: this.display,\r\n    };\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.resultListState.firstSearchExecuted &&\r\n        this.resultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private renderAsGrid() {\r\n    return this.resultListState.results.map((result, i) => {\r\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n      return (\r\n        <DisplayGrid\r\n          item={result}\r\n          {...propsForAtomicResult.interactiveResult}\r\n          setRef={(element) =>\r\n            element && this.resultListCommon.setNewResultRef(element, i)\r\n          }\r\n        >\r\n          <atomic-result {...this} {...propsForAtomicResult}></atomic-result>\r\n        </DisplayGrid>\r\n      );\r\n    });\r\n  }\r\n\r\n  private renderAsTable() {\r\n    if (!this.resultListState.hasResults) {\r\n      return;\r\n    }\r\n    const listClasses = this.computeListDisplayClasses();\r\n    const firstItem = this.resultListState.results[0];\r\n\r\n    const propsForTableColumns = {\r\n      firstItem,\r\n      templateContentForFirstItem:\r\n        this.itemTemplateProvider.getTemplateContent(firstItem),\r\n    };\r\n\r\n    return (\r\n      <DisplayTable\r\n        {...propsForTableColumns}\r\n        listClasses={listClasses}\r\n        logger={this.bindings.engine.logger}\r\n        itemRenderingFunction={this.itemRenderingFunction}\r\n        host={this.host}\r\n      >\r\n        {this.resultListState.results.map((result, i) => {\r\n          const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n          return (\r\n            <DisplayTableRow\r\n              {...propsForAtomicResult}\r\n              rowIndex={i}\r\n              setRef={(element) =>\r\n                element && this.resultListCommon.setNewResultRef(element, i)\r\n              }\r\n            >\r\n              <DisplayTableData\r\n                {...propsForTableColumns}\r\n                {...propsForAtomicResult}\r\n                renderItem={(content) => {\r\n                  return (\r\n                    <atomic-result\r\n                      {...propsForAtomicResult}\r\n                      content={content}\r\n                    ></atomic-result>\r\n                  );\r\n                }}\r\n              ></DisplayTableData>\r\n            </DisplayTableRow>\r\n          );\r\n        })}\r\n      </DisplayTable>\r\n    );\r\n  }\r\n\r\n  private renderAsList() {\r\n    return this.resultListState.results.map((result, i) => {\r\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n      return (\r\n        <atomic-result\r\n          {...propsForAtomicResult}\r\n          ref={(element) =>\r\n            element && this.resultListCommon.setNewResultRef(element, i)\r\n          }\r\n          part=\"outline\"\r\n        ></atomic-result>\r\n      );\r\n    });\r\n  }\r\n}\r\n"],"version":3}