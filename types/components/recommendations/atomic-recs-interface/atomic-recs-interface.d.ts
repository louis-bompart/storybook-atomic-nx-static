import { RecommendationEngine, RecommendationEngineConfiguration, PlatformEnvironment } from '@coveo/headless/recommendation';
import { i18n } from 'i18next';
import { RecsLogLevel } from '..';
import { i18nCompatibilityVersion } from '../../../components';
import { InitializeEvent } from '../../../utils/initialization-utils';
import { CommonBindings } from '../../common/interface/bindings';
import { BaseAtomicInterface } from '../../common/interface/interface-common';
import { AtomicRecsStore } from './store';
export type RecsInitializationOptions = RecommendationEngineConfiguration;
export type RecsBindings = CommonBindings<RecommendationEngine, AtomicRecsStore, HTMLAtomicRecsInterfaceElement>;
/**
 * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.
 */
export declare class AtomicRecsInterface implements BaseAtomicInterface<RecommendationEngine> {
    private store;
    private commonInterfaceHelper;
    private initialized;
    host: HTMLAtomicRecsInterfaceElement;
    error?: Error;
    /**
     * The recommendation interface [query pipeline](https://docs.coveo.com/en/180/).
     *
     * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the query pipeline should instead be configured in the target engine.
     */
    pipeline?: string;
    /**
     * The recommendation interface [search hub](https://docs.coveo.com/en/1342/).
     *
     * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the search hub should instead be configured in the target engine.
     */
    searchHub?: string;
    /**
     * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items.
     * By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
     *
     * Example: "America/Montreal"
     */
    timezone?: string;
    /**
     * The recommendation interface headless engine.
     */
    engine?: RecommendationEngine;
    /**
     * Whether analytics should be enabled.
     */
    analytics: boolean;
    /**
     * The recommendation interface i18next instance.
     */
    i18n: i18n;
    /**
     * The severity level of the messages to log in the console.
     */
    logLevel?: RecsLogLevel;
    /**
     * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
     */
    localizationCompatibilityVersion: i18nCompatibilityVersion;
    /**
     * The recommendation interface language.
     */
    language: string;
    /**
     * A list of non-default fields to include in the query results.
     *
     * Specify the property as an array using a JSON string representation:
     * ```html
     * <atomic-recs-interface fields-to-include='["fieldA", "fieldB"]'></atomic-recs-interface>
     * ```
     */
    fieldsToInclude: string[] | string;
    /**
     * The language assets path. By default, this will be a relative URL pointing to `./lang`.
     *
     * Example: "/mypublicpath/languages"
     *
     */
    languageAssetsPath: string;
    /**
     * The icon assets path. By default, this will be a relative URL pointing to `./assets`.
     *
     * Example: "/mypublicpath/icons"
     *
     */
    iconAssetsPath: string;
    /**
     * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.
     * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,
     * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers
     * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').
     * Otherwise you may see console errors such as
     *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]
     *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
     * @example:
     * ```html
     * <script nonce="<YOUR_GENERATED_NONCE>">
     *  import {setNonce} from '@coveo/atomic';
     *  setNonce('<YOUR_GENERATED_NONCE>');
     * </script>
     * ```
     */
    CspNonce?: string;
    constructor();
    get bindings(): RecsBindings;
    connectedCallback(): void;
    componentWillLoad(): void;
    /**
     * Initializes the connection with the headless recommendation engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
     */
    initialize(options: RecsInitializationOptions): Promise<void>;
    /**
     * Initializes the connection with an already preconfigured headless recommendation engine.
     * This bypasses the properties set on the component, such as analytics, recommendation, searchHub, language, timezone & logLevel.
     */
    initializeWithRecommendationEngine(engine: RecommendationEngine): Promise<void>;
    /**
     *
     * Fetches new recommendations.
     */
    getRecommendations(): Promise<void>;
    getOrganizationEndpoints(organizationId: string, env?: PlatformEnvironment): Promise<{
        platform: string;
        analytics: string;
        search: string;
        admin: string;
    }>;
    updateIconAssetsPath(): void;
    handleInitialization(event: InitializeEvent): void;
    updateLanguage(): void;
    toggleAnalytics(): void;
    registerFieldsToInclude(): void;
    private internalInitialization;
    private initEngine;
    render(): any;
}
