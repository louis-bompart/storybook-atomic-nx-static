{"file":"atomic-insight-numeric-facet.entry.cjs.js","mappings":"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","names":["defaultNumberFormatter","FocusTargetController","buildInsightNumericFacet","buildInsightNumericRange","buildInsightNumericFilter","buildInsightFacetConditionsManager","parseDependsOn","buildInsightSearchStatus","formatHumanReadable","initializePopover","loadInsightNumericFacetSetActions","h","FacetGuard","FacetContainer","FacetHeader","FacetPlaceholder","NumericFacetValuesContainer","NumericFacetValueLink","shouldDisplayInputForFacetRange","randomID","Schema","StringValue","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.pcss?tag=atomic-insight-numeric-facet&encapsulation=shadow","src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.tsx"],"sourcesContent":["@import '../../common/facets/numeric-facet-common.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  buildInsightFacetConditionsManager,\n  buildInsightNumericFacet,\n  buildInsightNumericFilter,\n  buildInsightNumericRange,\n  buildInsightSearchStatus,\n  InsightCategoryFacetValueRequest,\n  InsightFacetConditionsManager,\n  InsightFacetValueRequest,\n  InsightNumericFacet,\n  InsightNumericFacetState,\n  InsightNumericFilter,\n  InsightNumericFilterState,\n  InsightNumericRangeRequest,\n  InsightRangeFacetRangeAlgorithm,\n  InsightRangeFacetSortCriterion,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n  loadInsightNumericFacetSetActions,\n} from '..';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {MapProp} from '../../../utils/props-utils';\nimport {randomID} from '../../../utils/utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {shouldDisplayInputForFacetRange} from '../../common/facets/facet-common';\nimport {FacetInfo} from '../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../common/facets/facet-guard';\nimport {FacetHeader} from '../../common/facets/facet-header/facet-header';\nimport {NumberInputType} from '../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {formatHumanReadable} from '../../common/facets/numeric-facet/formatter';\nimport {NumericFacetValueLink} from '../../common/facets/numeric-facet/value-link';\nimport {NumericFacetValuesContainer} from '../../common/facets/numeric-facet/values-container';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../common/formats/format-common';\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-numeric-facet',\n  styleUrl: './atomic-insight-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightNumericFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetForRange?: InsightNumericFacet;\n  public facetForInput?: InsightNumericFacet;\n  public filter?: InsightNumericFilter;\n  public searchStatus!: InsightSearchStatus;\n  private manualRanges: (InsightNumericRangeRequest & {label?: string})[] = [];\n  private dependenciesManager?: InsightFacetConditionsManager;\n\n  @Element() private host!: HTMLElement;\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: InsightNumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: InsightNumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: InsightNumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true})\n  public rangeAlgorithm: InsightRangeFacetRangeAlgorithm = 'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    this.validateProps();\n    this.computeFacetId();\n    this.initializeFacetForInput();\n    this.initializeFacetForRange();\n    this.initializeFilter();\n    this.initializeDependenciesManager();\n    this.initializeSearchStatus();\n    this.registerFacetToStore();\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public disconnectedCallback() {\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private initializeFacetForInput() {\n    if (!this.withInput) {\n      return;\n    }\n    this.facetForInput = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    if (this.numberOfValues <= 0) {\n      return;\n    }\n\n    this.manualRanges = Array.from(\n      this.host.querySelectorAll('atomic-numeric-range')\n    ).map(({start, end, endInclusive, label}) => ({\n      ...buildInsightNumericRange({start, end, endInclusive}),\n      label,\n    }));\n\n    this.facetForRange = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    if (!this.withInput) {\n      return;\n    }\n\n    this.filter = buildInsightNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildInsightFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId:\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\n        conditions: parseDependsOn<\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private initializeSearchStatus() {\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) =>\n        formatHumanReadable({\n          facetValue: value,\n          logger: this.bindings.engine.logger,\n          i18n: this.bindings.i18n,\n          field: this.field,\n          manualRanges: this.manualRanges,\n          formatter: this.formatter,\n        }),\n    });\n\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\n        this.bindings.store.state.numericFacets[this.facetId!];\n    }\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadInsightNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    const {\n      searchStatusState: {firstSearchExecuted, hasError},\n      bindings: {i18n},\n      label,\n      numberOfSelectedValues,\n      isCollapsed,\n      headingLevel,\n      focusTarget,\n      withInput,\n      filter,\n    } = this;\n    return (\n      <FacetGuard\n        enabled={this.enabled}\n        firstSearchExecuted={firstSearchExecuted}\n        hasError={hasError}\n        hasResults={this.shouldRenderFacet}\n      >\n        {firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={i18n}\n              label={label}\n              onClearFilters={() => {\n                focusTarget.focusAfterSearch();\n                if (this.filterState?.range) {\n                  this.filter?.clear();\n                  return;\n                }\n                this.facetForRange?.deselectAll();\n              }}\n              numberOfActiveValues={numberOfSelectedValues}\n              isCollapsed={isCollapsed}\n              headingLevel={headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => focusTarget.setTarget(el)}\n            />\n            {!isCollapsed && [\n              this.shouldRenderValues && this.renderValues(),\n              this.shouldRenderInput && (\n                <atomic-facet-number-input\n                  type={withInput!}\n                  bindings={this.bindings}\n                  label={label}\n                  filter={filter!}\n                  filterState={filter!.state}\n                ></atomic-facet-number-input>\n              ),\n            ]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            isCollapsed={this.isCollapsed}\n            numberOfValues={this.numberOfValues}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValues() {\n    const {\n      displayValuesAs,\n      field,\n      manualRanges,\n      label,\n      bindings: {\n        i18n,\n        engine: {logger},\n      },\n    } = this;\n\n    return (\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\n        {this.valuesToRender.map((value) => (\n          <NumericFacetValueLink\n            formatter={this.formatter}\n            displayValuesAs={displayValuesAs}\n            facetValue={value}\n            field={field}\n            i18n={i18n}\n            logger={logger}\n            manualRanges={manualRanges}\n            onClick={() =>\n              this.displayValuesAs === 'link'\n                ? this.facetForRange!.toggleSingleSelect(value)\n                : this.facetForRange!.toggleSelect(value)\n            }\n          />\n        ))}\n      </NumericFacetValuesContainer>\n    );\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\n        .length || 0\n    );\n  }\n\n  private get shouldRenderValues() {\n    return (\n      !this.hasInputRange &&\n      this.numberOfValues > 0 &&\n      !!this.valuesToRender.length\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.searchStatusState,\n      facetValues: this.facetForInput?.state.values || [],\n      hasInput: !!this.withInput,\n    });\n  }\n\n  private computeFacetId() {\n    if (this.facetId) {\n      return;\n    }\n\n    if (this.bindings.store.get('numericFacets')[this.field]) {\n      this.facetId = randomID(`${this.field}_`);\n    }\n\n    this.facetId = this.field;\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.facetState.enabled;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get hasValues() {\n    if (this.facetForInput?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get enabled() {\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\n  }\n\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n    });\n  }\n}\n"],"version":3}