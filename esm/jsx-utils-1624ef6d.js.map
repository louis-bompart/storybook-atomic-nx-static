{"file":"jsx-utils-1624ef6d.js","mappings":";;MAUa,eAAe,GAA8C,CAAC,EACzE,QAAQ,EACR,GAAG,EACH,MAAM,EACN,KAAK,GACN;IACC,MAAM,mBAAmB,GAAG,QAAQ,CAAC;IACrC,MAAM,0BAA0B,GAAG,QAAQ,CAAC;IAC5C,MAAM,yBAAyB,GAAG,CAAC,QAAgB,KACjD,GAAG,mBAAmB,GAAG,0BAA0B,GAAG,QAAQ,GAAG,mBAAmB,EAAE,CAAC;IACzF,MAAM,uBAAuB,GAAG,CAAC,WAAmB,KAClD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAE/B,MAAM,eAAe,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK;QACpC,QAAQ;QACR,yBAAyB,CAAC,QAAQ,CAAC;KACpC,CAAC,CACH,CAAC;IACF,MAAM,+BAA+B,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;QAC3D,aAAa,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC;QACnC,KAAK;QACL,GAAG,eAAe;KACnB,CAAC,CAAC;IAEH,QACE,EAAC,QAAQ,QACN,+BAA+B;SAC7B,KAAK,CAAC,mBAAmB,CAAC;SAC1B,GAAG,CAAC,CAAC,IAAI,KACR,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC;UACvC,uBAAuB,CAAC,IAAI,CAAC;UAC7B,IAAI,CACT,CACM,EACX;AACJ;;;;","names":[],"sources":["src/utils/jsx-utils.tsx"],"sourcesContent":["import {Fragment, FunctionalComponent, h, VNode} from '@stencil/core';\r\nimport {AnyBindings} from '../components/common/interface/bindings';\r\n\r\nexport interface LocalizedStringProps {\r\n  bindings: AnyBindings;\r\n  key: string;\r\n  params: Record<string, VNode | string>;\r\n  count?: number;\r\n}\r\n\r\nexport const LocalizedString: FunctionalComponent<LocalizedStringProps> = ({\r\n  bindings,\r\n  key,\r\n  params,\r\n  count,\r\n}) => {\r\n  const delimitingCharacter = '\\u001d'; // Unicode group separator\r\n  const placeholderPrefixCharacter = '\\u001a'; // Unicode substitute character\r\n  const getPlaceholderForParamKey = (paramKey: string) =>\r\n    `${delimitingCharacter}${placeholderPrefixCharacter}${paramKey}${delimitingCharacter}`;\r\n  const getParamFromPlaceholder = (placeholder: string) =>\r\n    params[placeholder.slice(1)];\r\n\r\n  const placeholdersMap = Object.fromEntries(\r\n    Object.keys(params).map((paramKey) => [\r\n      paramKey,\r\n      getPlaceholderForParamKey(paramKey),\r\n    ])\r\n  );\r\n  const localizedStringWithPlaceholders = bindings.i18n.t(key, {\r\n    interpolation: {escapeValue: false},\r\n    count,\r\n    ...placeholdersMap,\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      {localizedStringWithPlaceholders\r\n        .split(delimitingCharacter)\r\n        .map((text) =>\r\n          text.startsWith(placeholderPrefixCharacter)\r\n            ? getParamFromPlaceholder(text)\r\n            : text\r\n        )}\r\n    </Fragment>\r\n  );\r\n};\r\n"],"version":3}