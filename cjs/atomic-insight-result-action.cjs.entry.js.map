{"file":"atomic-insight-result-action.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,4BAA4B,GAAG,uluCAAuluC,CAAC;AAC7nuC,wCAAe,4BAA4B;;;;;;;;;;;;ACmB3C,IAAK,OAMJ;AAND,WAAK,OAAO;IACV,8CAAmC,CAAA;IACnC,wCAA6B,CAAA;IAC7B,kCAAuB,CAAA;IACvB,oCAAyB,CAAA;IACzB,sCAA2B,CAAA;AAC7B,CAAC,EANI,OAAO,KAAP,OAAO,QAMX;MASY,yBAAyB;;;;;;;QAgBN,SAAI,GAAG,EAAE,CAAC;;;;QAKV,YAAO,GAAG,EAAE,CAAC;;;;QAKb,WAAM,GAAqB,EAAE,CAAC;;oBAVvB,EAAE;uBAKC,EAAE;sBAKe,EAAE;;IAEnD,OAAO;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC,CAAC;KACrE;IAEO,OAAO;QACb,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;QAED,QAAQ,IAAI,CAAC,MAAM;YACjB,KAAK,OAAO,CAAC,eAAe;gBAC1B,OAAO,QAAQ,CAAC;YAClB,KAAK,OAAO,CAAC,YAAY;gBACvB,OAAO,UAAU,CAAC;YACpB,KAAK,OAAO,CAAC,SAAS;gBACpB,OAAO,aAAa,CAAC;YACvB,KAAK,OAAO,CAAC,UAAU;gBACrB,OAAO,QAAQ,CAAC;YAClB,KAAK,OAAO,CAAC,WAAW;gBACtB,OAAO,SAAS,CAAC;YACnB;gBACE,OAAO,aAAa,CAAC;SACxB;KACF;IAEM,MAAM;QACX,QACEA,QAACC,qBAAU,qDACT,UAAU,EAAC,eAAe,EAC1B,KAAK,EAAC,iBAAiB,EACvB,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EACpB,KAAK,EAAE,IAAI,CAAC,OAAO,EACnB,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,EACF;KACH;;AA9D4B;IAA5BC,sCAAkB,EAAE;2DAA4B;AACxB;IAAxBC,sCAAa,EAAE;yDAAyB;;;;;","names":["h","IconButton","InitializeBindings","ResultContext"],"sources":["src/components/insight/atomic-insight-result-action/atomic-insight-result-action.pcss?tag=atomic-insight-result-action","src/components/insight/atomic-insight-result-action/atomic-insight-result-action.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n:host {\n  &::part(result-action-button) {\n    @apply flex items-center justify-center;\n    @apply h-8 w-8;\n  }\n}\n","import {Result} from '@coveo/headless';\nimport {Component, Event, EventEmitter, Prop, State, h} from '@stencil/core';\nimport AttachIcon from '../../../images/attach.svg';\nimport CopyIcon from '../../../images/copy-dark.svg';\nimport EmailIcon from '../../../images/email.svg';\nimport QuickviewIcon from '../../../images/preview.svg';\nimport FeedIcon from '../../../images/share-post.svg';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {IconButton} from '../../common/iconButton';\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../../search/result-template-components/result-template-decorators';\n\nexport interface InsightResultActionClickedEvent {\n  action: string;\n  result: Result;\n}\n\nenum Actions {\n  CopyToClipboard = 'copyToClipboard',\n  AttachToCase = 'attachToCase',\n  Quickview = 'quickview',\n  PostToFeed = 'postToFeed',\n  SendAsEmail = 'sendAsEmail',\n}\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-action',\n  styleUrl: 'atomic-insight-result-action.pcss',\n})\nexport class AtomicInsightResultAction implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n  @State() public error!: Error;\n\n  @Event({\n    eventName: 'atomicInsightResultActionClicked',\n    composed: true,\n    cancelable: true,\n    bubbles: true,\n  })\n  private actionClicked!: EventEmitter<InsightResultActionClickedEvent>;\n\n  /**\n   * Specify the result action icon to display.\n   */\n  @Prop({mutable: true}) public icon = '';\n\n  /**\n   * The text tooltip to show on the result action icon.\n   */\n  @Prop({mutable: true}) public tooltip = '';\n\n  /**\n   * The type of action to perform when the result action is clicked. This will be sent along the event fired when the button is clicked.\n   */\n  @Prop({mutable: true}) public action: Actions | string = '';\n\n  private onClick() {\n    this.actionClicked.emit({action: this.action, result: this.result});\n  }\n\n  private getIcon() {\n    if (this.icon) {\n      return this.icon;\n    }\n\n    switch (this.action) {\n      case Actions.CopyToClipboard:\n        return CopyIcon;\n      case Actions.AttachToCase:\n        return AttachIcon;\n      case Actions.Quickview:\n        return QuickviewIcon;\n      case Actions.PostToFeed:\n        return FeedIcon;\n      case Actions.SendAsEmail:\n        return EmailIcon;\n      default:\n        return QuickviewIcon;\n    }\n  }\n\n  public render() {\n    return (\n      <IconButton\n        partPrefix=\"result-action\"\n        style=\"outline-neutral\"\n        icon={this.getIcon()}\n        title={this.tooltip}\n        onClick={() => this.onClick()}\n      />\n    );\n  }\n}\n"],"version":3}