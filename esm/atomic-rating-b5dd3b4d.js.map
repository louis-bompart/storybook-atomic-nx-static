{"file":"atomic-rating-b5dd3b4d.js","mappings":";;;;;;;;;MAWa,MAAM,GAAqC,CAAC,KAAK;;IAC5D,MAAM,KAAK,GACT,CAAC,CAAC,KAAK,CAAC,mBAAmB,GAAG,KAAK,CAAC,kBAAkB,IAAI,GAAG,EAAE,QAAQ,EAAE;QACzE,GAAG,CAAC;IACN,MAAM,QAAQ,GAAG,GAAG,MAAA,KAAK,CAAC,QAAQ,mCAAI,IAAI,KAAK,CAAC;IAEhD,MAAM,UAAU,GAAG,CAAC,MAAe;QACjC,QACE,mBACE,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,YAAY,MAAM,GAAG,aAAa,GAAG,eAAe,EAAE,EAC7D,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAC,GAC7B,EACf;KACH,CAAC;IAEF,MAAM,gBAAgB,GAAG;QACvB,MAAM,gBAAgB,GAAY,EAAE,CAAC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC,EAAE,EAAE;YACjD,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SAC1C;QACD,OAAO,gBAAgB,CAAC;KACzB,CAAC;IAEF,MAAM,iBAAiB,GAAG;QACxB,MAAM,iBAAiB,GAAY,EAAE,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC,EAAE,EAAE;YACjD,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1C;QACD,OAAO,iBAAiB,CAAC;KAC1B,CAAC;IAEF,QACE,WACE,KAAK,EAAC,gBAAgB,EACtB,IAAI,EAAC,cAAc,EACnB,IAAI,EAAC,KAAK,gBACE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;YAChC,KAAK,EAAE,KAAK,CAAC,mBAAmB;YAChC,GAAG,EAAE,KAAK,CAAC,kBAAkB;SAC9B,CAAC;QAEF,WAAK,KAAK,EAAC,kBAAkB,IAAE,gBAAgB,EAAE,CAAO;QACxD,WACE,KAAK,EAAC,wDAAwD,EAC9D,KAAK,EAAE,EAAC,KAAK,EAAC,IAEb,iBAAiB,EAAE,CAChB,CACF,EACN;AACJ,EAAE;MAEW,oBAAoB,GAAG,CAClC,KAAc,EACd,KAAa;IAEb,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;IAC7C,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CACb,oBAAoB,KAAK,iBAAiB,KAAK,gBAAgB,CAChE,CAAC;KACH;IACD,OAAO,aAAa,CAAC;AACvB;;;;","names":[],"sources":["src/components/common/atomic-rating/atomic-rating.tsx"],"sourcesContent":["import {FunctionalComponent, h, VNode} from '@stencil/core';\nimport {i18n} from 'i18next';\n\ninterface RatingProps {\n  i18n: i18n;\n  numberOfTotalIcons: number;\n  numberOfActiveIcons: number;\n  icon: string;\n  iconSize?: number;\n}\n\nexport const Rating: FunctionalComponent<RatingProps> = (props) => {\n  const width =\n    ((props.numberOfActiveIcons / props.numberOfTotalIcons) * 100).toString() +\n    '%';\n  const iconSize = `${props.iconSize ?? 0.75}rem`;\n\n  const renderIcon = (active: boolean) => {\n    return (\n      <atomic-icon\n        icon={props.icon}\n        class={`shrink-0 ${active ? 'icon-active' : 'icon-inactive'}`}\n        style={{width: iconSize, height: iconSize}}\n      ></atomic-icon>\n    );\n  };\n\n  const emptyIconDisplay = () => {\n    const emptyIconDisplay: VNode[] = [];\n    for (let i = 0; i < props.numberOfTotalIcons; i++) {\n      emptyIconDisplay.push(renderIcon(false));\n    }\n    return emptyIconDisplay;\n  };\n\n  const filledIconDisplay = () => {\n    const filledIconDisplay: VNode[] = [];\n    for (let i = 0; i < props.numberOfTotalIcons; i++) {\n      filledIconDisplay.push(renderIcon(true));\n    }\n    return filledIconDisplay;\n  };\n\n  return (\n    <div\n      class=\"relative w-max\"\n      part=\"value-rating\"\n      role=\"img\"\n      aria-label={props.i18n.t('stars', {\n        count: props.numberOfActiveIcons,\n        max: props.numberOfTotalIcons,\n      })}\n    >\n      <div class=\"z-0 flex gap-0.5\">{emptyIconDisplay()}</div>\n      <div\n        class=\"absolute left-0 top-0 z-1 flex gap-0.5 overflow-hidden\"\n        style={{width}}\n      >\n        {filledIconDisplay()}\n      </div>\n    </div>\n  );\n};\n\nexport const computeNumberOfStars = (\n  value: unknown,\n  field: string\n): number | null => {\n  if (value === null) {\n    return null;\n  }\n  const valueAsNumber = parseFloat(`${value}`);\n  if (Number.isNaN(valueAsNumber)) {\n    throw new Error(\n      `Could not parse \"${value}\" from field \"${field}\" as a number.`\n    );\n  }\n  return valueAsNumber;\n};\n"],"version":3}