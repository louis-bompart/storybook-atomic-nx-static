{"file":"checkbox-e58c9d55.js","mappings":";;;;;;MAkBa,QAAQ,GAAuC,CAAC,KAAK;;IAChE,MAAM,QAAQ,GAAG,MAAA,KAAK,CAAC,IAAI,mCAAI,UAAU,CAAC;IAE1C,MAAM,UAAU,GAAG;QACjB,kHAAkH;KACnH,CAAC;IACF,MAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzB,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,UAAU,CAAC,IAAI,CACb,2EAA2E,CAC5E,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,UAAU,CAAC,CAAC;KACnC;SAAM;QACL,UAAU,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IACD,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,MAAM,UAAU,GAAG;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,EAAE,EAAE,KAAK,CAAC,EAAE;QACZ,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;QAC3B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;QACrB,cAAc,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE;QACxC,YAAY,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,KAAK,CAAC,IAAI;QAC3C,KAAK,EAAE,KAAK,CAAC,IAAI;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;KACf,CAAC;IAEF,QACE,iBACM,UAAU,EACd,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,gBAAM,OAAA,MAAA,KAAK,CAAC,QAAQ,sDAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,WAAW,EAAE,CAAC,CAAC,eAAK,OAAA,MAAA,KAAK,CAAC,WAAW,sDAAG,CAAC,CAAC,CAAA,EAAA;QAE1C,mBACE,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EACxB,KAAK,EAAE,SAAS,KAAK,CAAC,OAAO,GAAG,OAAO,GAAG,QAAQ,EAAE,EACpD,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,KAAK,CAAC,QAAQ,GACP,CACR,EACT;AACJ;;;;","names":[],"sources":["src/components/common/checkbox.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\nimport Tick from '../../images/checkbox.svg';\r\n\r\nexport interface CheckboxProps {\r\n  checked: boolean;\r\n  onToggle(checked: boolean): void;\r\n  key?: string | number;\r\n  id?: string;\r\n  class?: string;\r\n  text?: string;\r\n  part?: string;\r\n  iconPart?: string;\r\n  ariaLabel?: string;\r\n  ariaCurrent?: string;\r\n  ref?(element?: HTMLElement): void;\r\n  onMouseDown?(evt: MouseEvent): void;\r\n}\r\n\r\nexport const Checkbox: FunctionalComponent<CheckboxProps> = (props) => {\r\n  const partName = props.part ?? 'checkbox';\r\n\r\n  const classNames = [\r\n    'w-4 h-4 grid place-items-center rounded no-outline hover:border-primary-light focus-visible:border-primary-light',\r\n  ];\r\n  const parts = [partName];\r\n  if (props.checked) {\r\n    classNames.push(\r\n      'selected bg-primary hover:bg-primary-light focus-visible:bg-primary-light'\r\n    );\r\n    parts.push(`${partName}-checked`);\r\n  } else {\r\n    classNames.push('border border-neutral-dark');\r\n  }\r\n  if (props.class) {\r\n    classNames.push(props.class);\r\n  }\r\n\r\n  const attributes = {\r\n    key: props.key,\r\n    id: props.id,\r\n    class: classNames.join(' '),\r\n    part: parts.join(' '),\r\n    'aria-checked': props.checked.toString(),\r\n    'aria-label': props.ariaLabel ?? props.text,\r\n    value: props.text,\r\n    ref: props.ref,\r\n  };\r\n\r\n  return (\r\n    <button\r\n      {...attributes}\r\n      role=\"checkbox\"\r\n      onClick={() => props.onToggle?.(!props.checked)}\r\n      onMouseDown={(e) => props.onMouseDown?.(e)}\r\n    >\r\n      <atomic-icon\r\n        style={{stroke: 'white'}}\r\n        class={`w-3/5 ${props.checked ? 'block' : 'hidden'}`}\r\n        icon={Tick}\r\n        part={props.iconPart}\r\n      ></atomic-icon>\r\n    </button>\r\n  );\r\n};\r\n"],"version":3}