{"version":3,"names":["defaultTemplate","content","document","createDocumentFragment","linkEl","createElement","appendChild","conditions","TemplateProvider","constructor","props","buildManager","makeDefaultTemplate","this","templateManager","registerResultTemplates","customTemplates","Promise","all","templateElements","map","async","resultTemplateElement","template","getTemplate","setTemplateHasError","templates","length","includeDefaultTemplate","concat","filter","registerTemplates","setResultTemplateRegistered","getTemplateContent","item","selectTemplate","templatesRegistered","getResultTemplateRegistered","hasError","getTemplateHasError"],"sources":["src/components/common/template-provider/template-provider.ts"],"sourcesContent":["import {Template, TemplatesManager} from '@coveo/headless';\n\nexport interface TemplateElement<ItemType> extends HTMLElement {\n  getTemplate(): Promise<Template<ItemType, DocumentFragment> | null>;\n}\n\nexport interface TemplateProviderProps<ItemType> {\n  getResultTemplateRegistered(): boolean;\n  setResultTemplateRegistered(value: boolean): void;\n  getTemplateHasError(): boolean;\n  setTemplateHasError(value: boolean): void;\n  templateElements: TemplateElement<ItemType>[];\n  includeDefaultTemplate: boolean;\n}\n\nfunction defaultTemplate() {\n  const content = document.createDocumentFragment();\n  const linkEl = document.createElement('atomic-result-link');\n  content.appendChild(linkEl);\n  return {\n    content,\n    conditions: [],\n  };\n}\n\nexport class TemplateProvider<ItemType> {\n  private templateManager: TemplatesManager<ItemType, DocumentFragment>;\n\n  constructor(\n    private props: TemplateProviderProps<ItemType>,\n    private buildManager: () => TemplatesManager<ItemType, DocumentFragment>,\n    private makeDefaultTemplate: () => Template<\n      ItemType,\n      DocumentFragment\n    > = defaultTemplate\n  ) {\n    this.templateManager = this.buildManager();\n    this.registerResultTemplates();\n  }\n\n  private async registerResultTemplates() {\n    const customTemplates = await Promise.all(\n      this.props.templateElements.map(async (resultTemplateElement) => {\n        const template = await resultTemplateElement.getTemplate();\n        if (!template) {\n          this.props.setTemplateHasError(true);\n        }\n        return template;\n      })\n    );\n\n    const templates = (\n      !customTemplates.length && this.props.includeDefaultTemplate\n        ? [this.makeDefaultTemplate()]\n        : []\n    ).concat(\n      customTemplates.filter((template) => template) as Template<\n        ItemType,\n        DocumentFragment\n      >[]\n    );\n\n    this.templateManager.registerTemplates(...templates);\n    this.props.setResultTemplateRegistered(true);\n  }\n\n  public getTemplateContent(item: ItemType) {\n    return this.templateManager.selectTemplate(item)!;\n  }\n\n  public get templatesRegistered() {\n    return this.props.getResultTemplateRegistered();\n  }\n\n  public get hasError() {\n    return this.props.getTemplateHasError();\n  }\n}\n"],"mappings":"AAeA,SAASA,IACP,MAAMC,EAAUC,SAASC,yBACzB,MAAMC,EAASF,SAASG,cAAc,sBACtCJ,EAAQK,YAAYF,GACpB,MAAO,CACLH,UACAM,WAAY,GAEhB,C,MAEaC,EAGX,WAAAC,CACUC,EACAC,EACAC,EAGJZ,GALIa,KAAAH,QACAG,KAAAF,eACAE,KAAAD,sBAKRC,KAAKC,gBAAkBD,KAAKF,eAC5BE,KAAKE,yB,CAGC,6BAAMA,GACZ,MAAMC,QAAwBC,QAAQC,IACpCL,KAAKH,MAAMS,iBAAiBC,KAAIC,MAAOC,IACrC,MAAMC,QAAiBD,EAAsBE,cAC7C,IAAKD,EAAU,CACbV,KAAKH,MAAMe,oBAAoB,K,CAEjC,OAAOF,CAAQ,KAInB,MAAMG,IACHV,EAAgBW,QAAUd,KAAKH,MAAMkB,uBAClC,CAACf,KAAKD,uBACN,IACJiB,OACAb,EAAgBc,QAAQP,GAAaA,KAMvCV,KAAKC,gBAAgBiB,qBAAqBL,GAC1Cb,KAAKH,MAAMsB,4BAA4B,K,CAGlC,kBAAAC,CAAmBC,GACxB,OAAOrB,KAAKC,gBAAgBqB,eAAeD,E,CAG7C,uBAAWE,GACT,OAAOvB,KAAKH,MAAM2B,6B,CAGpB,YAAWC,GACT,OAAOzB,KAAKH,MAAM6B,qB"}