{"version":3,"names":["Switch","props","attributes","onClick","_a","onToggle","call","checked","ariaLabel","String","part","tabIndex","title","containerClasses","join","handleClasses","buttonClasses","withToggle","h","role","class","CopyButton","Button","style","isCopied","error","icon","CopyIcon","FeedbackButton","variant","active","ariaPressed","Thumbs","global","factory","exports","this","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","onError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","unclosedElement","completeUnclosedElement","symbol","replacements","escapeHtml","customRenderer","unwrappedText","withClosedElement","transformMarkdownToHtml","GeneratedMarkdownContent","answerAsHtml","DOMPurify","sanitize","answer","ADD_ATTR","isStreaming","innerHTML","GeneratedTextContent","GeneratedContentContainer","children","answerContentFormat","value","TextIcon","titleKey","tooltipKey","StepsIcon","BulletsIcon","IdeaIcon","RephraseButtons","i18n","option","isActive","answerStyle","onChange","RetryPrompt","buttonLabel","ShowButton","isCollapsed","ArrowBottomIcon","ArrowTopIcon","SourceCitations","isVisible","label","GeneratedAnswerCommon","storage","SafeStorage","contentClasses","_data","readStoredData","insertFeedbackModal","modalRef","document","createElement","generatedAnswer","getGeneratedAnswer","host","insertAdjacentElement","storedData","getParsedJSON","StorageItems","GENERATED_ANSWER_DATA","writeStoredData","data","setJSON","newData","getGeneratedAnswerStatus","isHidden","getGeneratedAnswerState","isGenerating","_b","hasAnswer","_c","hasError","_d","getBindings","_e","hasRetryableError","getSearchStatusState","isRetryable","shouldBeHidden","citations","undefined","isAnswerVisible","toggleTooltip","key","hasClipboard","navigator","clipboard","writeText","copyToClipboardTooltip","getCopyError","getCopied","copyToClipboard","setCopied","logCopyToClipboard","setCopyError","engine","logger","setTimeout","clickOnShowButton","expanded","collapse","expand","getCitation","citation","renderCitations","buildInteractiveCitation","logCitationHover","interactiveCitation","id","sendHoverEndEvent","citationHoverTimeMs","exportparts","renderFeedbackAndCopyButtons","liked","disliked","like","clickDislike","feedbackSubmitted","isOpen","dislike","onChangeAnswerStyle","responseFormat","rephrase","renderRephraseButtons","renderDisclaimer","slot","renderShowButton","collapsible","canRender","renderGeneratingAnswerLabel","renderContent","Heading","show","hide","retry","render"],"sources":["src/components/common/switch.tsx","src/components/common/generated-answer/copy-button.tsx","src/components/common/generated-answer/feedback-button.tsx","node_modules/marked/lib/marked.umd.js","src/components/common/generated-answer/generated-content/markdown-utils.ts","src/components/common/generated-answer/generated-content/generated-markdown-content.tsx","src/components/common/generated-answer/generated-content/generated-text-content.tsx","src/components/common/generated-answer/generated-content-container.tsx","src/components/common/generated-answer/rephrase-buttons.tsx","src/components/common/generated-answer/retry-prompt.tsx","src/components/common/generated-answer/show-button.tsx","src/components/common/generated-answer/source-citations.tsx","src/components/common/generated-answer/generated-answer-common.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\n\r\nexport interface SwitchProps {\r\n  checked?: boolean;\r\n  onToggle?(checked: boolean): void;\r\n  ariaLabel?: string;\r\n  part?: string;\r\n  tabIndex?: number;\r\n  title?: string;\r\n  withToggle?: boolean;\r\n}\r\n\r\nexport const Switch: FunctionalComponent<SwitchProps> = (props) => {\r\n  const attributes = {\r\n    onClick: () => props.onToggle?.(!props.checked),\r\n    'arial-label': props.ariaLabel,\r\n    'aria-checked': String(!!props.checked),\r\n    part: props.part,\r\n    tabIndex: props.tabIndex,\r\n    title: props.title,\r\n  };\r\n\r\n  const containerClasses = [\r\n    'w-12',\r\n    'h-6',\r\n    'p-1',\r\n    'rounded-full',\r\n    props.checked ? 'bg-primary' : 'bg-neutral',\r\n  ].join(' ');\r\n\r\n  const handleClasses = [\r\n    'w-4',\r\n    'h-4',\r\n    'rounded-full',\r\n    'bg-white',\r\n    props.checked ? 'ml-6' : '',\r\n  ].join(' ');\r\n\r\n  const buttonClasses = [\r\n    'rounded-full',\r\n    'btn-outline-neutral',\r\n    props.withToggle ? 'flex' : 'hidden',\r\n  ].join(' ');\r\n\r\n  return (\r\n    <button role=\"switch\" {...attributes} class={buttonClasses}>\r\n      <div class={containerClasses}>\r\n        <div class={handleClasses}></div>\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport CopyIcon from '../../../images/copy.svg';\r\nimport {Button} from '../button';\r\n\r\ninterface CopyButtonProps {\r\n  title: string;\r\n  isCopied: boolean;\r\n  error: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const CopyButton: FunctionalComponent<CopyButtonProps> = (props) => {\r\n  return (\r\n    <Button\r\n      title={props.title}\r\n      part=\"copy-button\"\r\n      style={'text-transparent'}\r\n      class={`p-2 rounded-md ${props.isCopied ? 'copied' : ''} ${\r\n        props.error ? 'error' : ''\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <div class=\"icon-container text-neutral-dark\">\r\n        <atomic-icon class=\"w-5\" icon={CopyIcon}></atomic-icon>\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport Thumbs from '../../../images/thumbs.svg';\r\nimport {Button} from '../button';\r\n\r\ntype FeedbackVariant = 'like' | 'dislike';\r\n\r\ninterface FeedbackButtonProps {\r\n  title: string;\r\n  variant: FeedbackVariant;\r\n  active: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const FeedbackButton: FunctionalComponent<FeedbackButtonProps> = (\r\n  props\r\n) => {\r\n  return (\r\n    <Button\r\n      title={props.title}\r\n      style=\"text-transparent\"\r\n      part=\"feedback-button\"\r\n      class={`feedback-button p-2 rounded-md ${props.variant} ${\r\n        props.active ? 'active' : ''\r\n      }`}\r\n      onClick={props.onClick}\r\n      ariaPressed={`${props.active}`}\r\n    >\r\n      <atomic-icon class=\"w-5\" icon={Thumbs}></atomic-icon>\r\n    </Button>\r\n  );\r\n};\r\n","/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Gets the original marked default options.\n     */\n    function _getDefaults() {\n        return {\n            async: false,\n            breaks: false,\n            extensions: null,\n            gfm: true,\n            hooks: null,\n            pedantic: false,\n            renderer: null,\n            silent: false,\n            tokenizer: null,\n            walkTokens: null\n        };\n    }\n    exports.defaults = _getDefaults();\n    function changeDefaults(newDefaults) {\n        exports.defaults = newDefaults;\n    }\n\n    /**\n     * Helpers\n     */\n    const escapeTest = /[&<>\"']/;\n    const escapeReplace = new RegExp(escapeTest.source, 'g');\n    const escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\n    const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\n    const escapeReplacements = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n    const getEscapeReplacement = (ch) => escapeReplacements[ch];\n    function escape$1(html, encode) {\n        if (encode) {\n            if (escapeTest.test(html)) {\n                return html.replace(escapeReplace, getEscapeReplacement);\n            }\n        }\n        else {\n            if (escapeTestNoEncode.test(html)) {\n                return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n            }\n        }\n        return html;\n    }\n    const unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n    function unescape(html) {\n        // explicitly match decimal, hex, and named HTML entities\n        return html.replace(unescapeTest, (_, n) => {\n            n = n.toLowerCase();\n            if (n === 'colon')\n                return ':';\n            if (n.charAt(0) === '#') {\n                return n.charAt(1) === 'x'\n                    ? String.fromCharCode(parseInt(n.substring(2), 16))\n                    : String.fromCharCode(+n.substring(1));\n            }\n            return '';\n        });\n    }\n    const caret = /(^|[^\\[])\\^/g;\n    function edit(regex, opt) {\n        let source = typeof regex === 'string' ? regex : regex.source;\n        opt = opt || '';\n        const obj = {\n            replace: (name, val) => {\n                let valSource = typeof val === 'string' ? val : val.source;\n                valSource = valSource.replace(caret, '$1');\n                source = source.replace(name, valSource);\n                return obj;\n            },\n            getRegex: () => {\n                return new RegExp(source, opt);\n            }\n        };\n        return obj;\n    }\n    function cleanUrl(href) {\n        try {\n            href = encodeURI(href).replace(/%25/g, '%');\n        }\n        catch (e) {\n            return null;\n        }\n        return href;\n    }\n    const noopTest = { exec: () => null };\n    function splitCells(tableRow, count) {\n        // ensure that every cell-delimiting pipe has a space\n        // before it to distinguish it from an escaped pipe\n        const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n            let escaped = false;\n            let curr = offset;\n            while (--curr >= 0 && str[curr] === '\\\\')\n                escaped = !escaped;\n            if (escaped) {\n                // odd number of slashes means | is escaped\n                // so we leave it alone\n                return '|';\n            }\n            else {\n                // add space before unescaped |\n                return ' |';\n            }\n        }), cells = row.split(/ \\|/);\n        let i = 0;\n        // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n        if (!cells[0].trim()) {\n            cells.shift();\n        }\n        if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n            cells.pop();\n        }\n        if (count) {\n            if (cells.length > count) {\n                cells.splice(count);\n            }\n            else {\n                while (cells.length < count)\n                    cells.push('');\n            }\n        }\n        for (; i < cells.length; i++) {\n            // leading or trailing whitespace is ignored per the gfm spec\n            cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n        }\n        return cells;\n    }\n    /**\n     * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n     * /c*$/ is vulnerable to REDOS.\n     *\n     * @param str\n     * @param c\n     * @param invert Remove suffix of non-c chars instead. Default falsey.\n     */\n    function rtrim(str, c, invert) {\n        const l = str.length;\n        if (l === 0) {\n            return '';\n        }\n        // Length of suffix matching the invert condition.\n        let suffLen = 0;\n        // Step left until we fail to match the invert condition.\n        while (suffLen < l) {\n            const currChar = str.charAt(l - suffLen - 1);\n            if (currChar === c && !invert) {\n                suffLen++;\n            }\n            else if (currChar !== c && invert) {\n                suffLen++;\n            }\n            else {\n                break;\n            }\n        }\n        return str.slice(0, l - suffLen);\n    }\n    function findClosingBracket(str, b) {\n        if (str.indexOf(b[1]) === -1) {\n            return -1;\n        }\n        let level = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '\\\\') {\n                i++;\n            }\n            else if (str[i] === b[0]) {\n                level++;\n            }\n            else if (str[i] === b[1]) {\n                level--;\n                if (level < 0) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function outputLink(cap, link, raw, lexer) {\n        const href = link.href;\n        const title = link.title ? escape$1(link.title) : null;\n        const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n        if (cap[0].charAt(0) !== '!') {\n            lexer.state.inLink = true;\n            const token = {\n                type: 'link',\n                raw,\n                href,\n                title,\n                text,\n                tokens: lexer.inlineTokens(text)\n            };\n            lexer.state.inLink = false;\n            return token;\n        }\n        return {\n            type: 'image',\n            raw,\n            href,\n            title,\n            text: escape$1(text)\n        };\n    }\n    function indentCodeCompensation(raw, text) {\n        const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n        if (matchIndentToCode === null) {\n            return text;\n        }\n        const indentToCode = matchIndentToCode[1];\n        return text\n            .split('\\n')\n            .map(node => {\n            const matchIndentInNode = node.match(/^\\s+/);\n            if (matchIndentInNode === null) {\n                return node;\n            }\n            const [indentInNode] = matchIndentInNode;\n            if (indentInNode.length >= indentToCode.length) {\n                return node.slice(indentToCode.length);\n            }\n            return node;\n        })\n            .join('\\n');\n    }\n    /**\n     * Tokenizer\n     */\n    class _Tokenizer {\n        options;\n        rules; // set by the lexer\n        lexer; // set by the lexer\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        space(src) {\n            const cap = this.rules.block.newline.exec(src);\n            if (cap && cap[0].length > 0) {\n                return {\n                    type: 'space',\n                    raw: cap[0]\n                };\n            }\n        }\n        code(src) {\n            const cap = this.rules.block.code.exec(src);\n            if (cap) {\n                const text = cap[0].replace(/^ {1,4}/gm, '');\n                return {\n                    type: 'code',\n                    raw: cap[0],\n                    codeBlockStyle: 'indented',\n                    text: !this.options.pedantic\n                        ? rtrim(text, '\\n')\n                        : text\n                };\n            }\n        }\n        fences(src) {\n            const cap = this.rules.block.fences.exec(src);\n            if (cap) {\n                const raw = cap[0];\n                const text = indentCodeCompensation(raw, cap[3] || '');\n                return {\n                    type: 'code',\n                    raw,\n                    lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                    text\n                };\n            }\n        }\n        heading(src) {\n            const cap = this.rules.block.heading.exec(src);\n            if (cap) {\n                let text = cap[2].trim();\n                // remove trailing #s\n                if (/#$/.test(text)) {\n                    const trimmed = rtrim(text, '#');\n                    if (this.options.pedantic) {\n                        text = trimmed.trim();\n                    }\n                    else if (!trimmed || / $/.test(trimmed)) {\n                        // CommonMark requires space before trailing #s\n                        text = trimmed.trim();\n                    }\n                }\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[1].length,\n                    text,\n                    tokens: this.lexer.inline(text)\n                };\n            }\n        }\n        hr(src) {\n            const cap = this.rules.block.hr.exec(src);\n            if (cap) {\n                return {\n                    type: 'hr',\n                    raw: cap[0]\n                };\n            }\n        }\n        blockquote(src) {\n            const cap = this.rules.block.blockquote.exec(src);\n            if (cap) {\n                // precede setext continuation with 4 spaces so it isn't a setext\n                let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n                text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                const tokens = this.lexer.blockTokens(text);\n                this.lexer.state.top = top;\n                return {\n                    type: 'blockquote',\n                    raw: cap[0],\n                    tokens,\n                    text\n                };\n            }\n        }\n        list(src) {\n            let cap = this.rules.block.list.exec(src);\n            if (cap) {\n                let bull = cap[1].trim();\n                const isordered = bull.length > 1;\n                const list = {\n                    type: 'list',\n                    raw: '',\n                    ordered: isordered,\n                    start: isordered ? +bull.slice(0, -1) : '',\n                    loose: false,\n                    items: []\n                };\n                bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n                if (this.options.pedantic) {\n                    bull = isordered ? bull : '[*+-]';\n                }\n                // Get next list item\n                const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n                let raw = '';\n                let itemContents = '';\n                let endsWithBlankLine = false;\n                // Check if current bullet point can start a new List Item\n                while (src) {\n                    let endEarly = false;\n                    if (!(cap = itemRegex.exec(src))) {\n                        break;\n                    }\n                    if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                        break;\n                    }\n                    raw = cap[0];\n                    src = src.substring(raw.length);\n                    let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                    let nextLine = src.split('\\n', 1)[0];\n                    let indent = 0;\n                    if (this.options.pedantic) {\n                        indent = 2;\n                        itemContents = line.trimStart();\n                    }\n                    else {\n                        indent = cap[2].search(/[^ ]/); // Find first non-space char\n                        indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                        itemContents = line.slice(indent);\n                        indent += cap[1].length;\n                    }\n                    let blankLine = false;\n                    if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                        raw += nextLine + '\\n';\n                        src = src.substring(nextLine.length + 1);\n                        endEarly = true;\n                    }\n                    if (!endEarly) {\n                        const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                        const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                        const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                        const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                        // Check if following lines should be included in List Item\n                        while (src) {\n                            const rawLine = src.split('\\n', 1)[0];\n                            nextLine = rawLine;\n                            // Re-align to follow commonmark nesting rules\n                            if (this.options.pedantic) {\n                                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            }\n                            // End list item if found code fences\n                            if (fencesBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new heading\n                            if (headingBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new bullet\n                            if (nextBulletRegex.test(nextLine)) {\n                                break;\n                            }\n                            // Horizontal rule found\n                            if (hrRegex.test(src)) {\n                                break;\n                            }\n                            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                                itemContents += '\\n' + nextLine.slice(indent);\n                            }\n                            else {\n                                // not enough indentation\n                                if (blankLine) {\n                                    break;\n                                }\n                                // paragraph continuation unless last line was a different block level element\n                                if (line.search(/[^ ]/) >= 4) { // indented code block\n                                    break;\n                                }\n                                if (fencesBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (headingBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (hrRegex.test(line)) {\n                                    break;\n                                }\n                                itemContents += '\\n' + nextLine;\n                            }\n                            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                                blankLine = true;\n                            }\n                            raw += rawLine + '\\n';\n                            src = src.substring(rawLine.length + 1);\n                            line = nextLine.slice(indent);\n                        }\n                    }\n                    if (!list.loose) {\n                        // If the previous item ended with a blank line, the list is loose\n                        if (endsWithBlankLine) {\n                            list.loose = true;\n                        }\n                        else if (/\\n *\\n *$/.test(raw)) {\n                            endsWithBlankLine = true;\n                        }\n                    }\n                    let istask = null;\n                    let ischecked;\n                    // Check for task list items\n                    if (this.options.gfm) {\n                        istask = /^\\[[ xX]\\] /.exec(itemContents);\n                        if (istask) {\n                            ischecked = istask[0] !== '[ ] ';\n                            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                        }\n                    }\n                    list.items.push({\n                        type: 'list_item',\n                        raw,\n                        task: !!istask,\n                        checked: ischecked,\n                        loose: false,\n                        text: itemContents,\n                        tokens: []\n                    });\n                    list.raw += raw;\n                }\n                // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n                list.items[list.items.length - 1].raw = raw.trimEnd();\n                (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n                list.raw = list.raw.trimEnd();\n                // Item child tokens handled here at end because we needed to have the final item to trim it first\n                for (let i = 0; i < list.items.length; i++) {\n                    this.lexer.state.top = false;\n                    list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                    if (!list.loose) {\n                        // Check if list should be loose\n                        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                        const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                        list.loose = hasMultipleLineBreaks;\n                    }\n                }\n                // Set all items to loose if list is loose\n                if (list.loose) {\n                    for (let i = 0; i < list.items.length; i++) {\n                        list.items[i].loose = true;\n                    }\n                }\n                return list;\n            }\n        }\n        html(src) {\n            const cap = this.rules.block.html.exec(src);\n            if (cap) {\n                const token = {\n                    type: 'html',\n                    block: true,\n                    raw: cap[0],\n                    pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                    text: cap[0]\n                };\n                return token;\n            }\n        }\n        def(src) {\n            const cap = this.rules.block.def.exec(src);\n            if (cap) {\n                const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n                const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n                const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n                return {\n                    type: 'def',\n                    tag,\n                    raw: cap[0],\n                    href,\n                    title\n                };\n            }\n        }\n        table(src) {\n            const cap = this.rules.block.table.exec(src);\n            if (!cap) {\n                return;\n            }\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const headers = splitCells(cap[1]);\n            const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n            const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: [],\n                align: [],\n                rows: []\n            };\n            if (headers.length !== aligns.length) {\n                // header and align columns must be equal, rows can be different.\n                return;\n            }\n            for (const align of aligns) {\n                if (/^ *-+: *$/.test(align)) {\n                    item.align.push('right');\n                }\n                else if (/^ *:-+: *$/.test(align)) {\n                    item.align.push('center');\n                }\n                else if (/^ *:-+ *$/.test(align)) {\n                    item.align.push('left');\n                }\n                else {\n                    item.align.push(null);\n                }\n            }\n            for (const header of headers) {\n                item.header.push({\n                    text: header,\n                    tokens: this.lexer.inline(header)\n                });\n            }\n            for (const row of rows) {\n                item.rows.push(splitCells(row, item.header.length).map(cell => {\n                    return {\n                        text: cell,\n                        tokens: this.lexer.inline(cell)\n                    };\n                }));\n            }\n            return item;\n        }\n        lheading(src) {\n            const cap = this.rules.block.lheading.exec(src);\n            if (cap) {\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                    text: cap[1],\n                    tokens: this.lexer.inline(cap[1])\n                };\n            }\n        }\n        paragraph(src) {\n            const cap = this.rules.block.paragraph.exec(src);\n            if (cap) {\n                const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                    ? cap[1].slice(0, -1)\n                    : cap[1];\n                return {\n                    type: 'paragraph',\n                    raw: cap[0],\n                    text,\n                    tokens: this.lexer.inline(text)\n                };\n            }\n        }\n        text(src) {\n            const cap = this.rules.block.text.exec(src);\n            if (cap) {\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text: cap[0],\n                    tokens: this.lexer.inline(cap[0])\n                };\n            }\n        }\n        escape(src) {\n            const cap = this.rules.inline.escape.exec(src);\n            if (cap) {\n                return {\n                    type: 'escape',\n                    raw: cap[0],\n                    text: escape$1(cap[1])\n                };\n            }\n        }\n        tag(src) {\n            const cap = this.rules.inline.tag.exec(src);\n            if (cap) {\n                if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                    this.lexer.state.inLink = true;\n                }\n                else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                    this.lexer.state.inLink = false;\n                }\n                if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                    this.lexer.state.inRawBlock = true;\n                }\n                else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                    this.lexer.state.inRawBlock = false;\n                }\n                return {\n                    type: 'html',\n                    raw: cap[0],\n                    inLink: this.lexer.state.inLink,\n                    inRawBlock: this.lexer.state.inRawBlock,\n                    block: false,\n                    text: cap[0]\n                };\n            }\n        }\n        link(src) {\n            const cap = this.rules.inline.link.exec(src);\n            if (cap) {\n                const trimmedUrl = cap[2].trim();\n                if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                    // commonmark requires matching angle brackets\n                    if (!(/>$/.test(trimmedUrl))) {\n                        return;\n                    }\n                    // ending angle bracket cannot be escaped\n                    const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                    if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                        return;\n                    }\n                }\n                else {\n                    // find closing parenthesis\n                    const lastParenIndex = findClosingBracket(cap[2], '()');\n                    if (lastParenIndex > -1) {\n                        const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                        const linkLen = start + cap[1].length + lastParenIndex;\n                        cap[2] = cap[2].substring(0, lastParenIndex);\n                        cap[0] = cap[0].substring(0, linkLen).trim();\n                        cap[3] = '';\n                    }\n                }\n                let href = cap[2];\n                let title = '';\n                if (this.options.pedantic) {\n                    // split pedantic href and title\n                    const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                    if (link) {\n                        href = link[1];\n                        title = link[3];\n                    }\n                }\n                else {\n                    title = cap[3] ? cap[3].slice(1, -1) : '';\n                }\n                href = href.trim();\n                if (/^</.test(href)) {\n                    if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                        // pedantic allows starting angle bracket without ending angle bracket\n                        href = href.slice(1);\n                    }\n                    else {\n                        href = href.slice(1, -1);\n                    }\n                }\n                return outputLink(cap, {\n                    href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                    title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n                }, cap[0], this.lexer);\n            }\n        }\n        reflink(src, links) {\n            let cap;\n            if ((cap = this.rules.inline.reflink.exec(src))\n                || (cap = this.rules.inline.nolink.exec(src))) {\n                const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n                const link = links[linkString.toLowerCase()];\n                if (!link) {\n                    const text = cap[0].charAt(0);\n                    return {\n                        type: 'text',\n                        raw: text,\n                        text\n                    };\n                }\n                return outputLink(cap, link, cap[0], this.lexer);\n            }\n        }\n        emStrong(src, maskedSrc, prevChar = '') {\n            let match = this.rules.inline.emStrongLDelim.exec(src);\n            if (!match)\n                return;\n            // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n            if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n                return;\n            const nextChar = match[1] || match[2] || '';\n            if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n                // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n                const lLength = [...match[0]].length - 1;\n                let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n                const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n                endReg.lastIndex = 0;\n                // Clip maskedSrc to same section of string as src (move to lexer?)\n                maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n                while ((match = endReg.exec(maskedSrc)) != null) {\n                    rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                    if (!rDelim)\n                        continue; // skip single * in __abc*abc__\n                    rLength = [...rDelim].length;\n                    if (match[3] || match[4]) { // found another Left Delim\n                        delimTotal += rLength;\n                        continue;\n                    }\n                    else if (match[5] || match[6]) { // either Left or Right Delim\n                        if (lLength % 3 && !((lLength + rLength) % 3)) {\n                            midDelimTotal += rLength;\n                            continue; // CommonMark Emphasis Rules 9-10\n                        }\n                    }\n                    delimTotal -= rLength;\n                    if (delimTotal > 0)\n                        continue; // Haven't found enough closing delimiters\n                    // Remove extra characters. *a*** -> *a*\n                    rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                    // char length can be >1 for unicode characters;\n                    const lastCharLength = [...match[0]][0].length;\n                    const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                    // Create `em` if smallest delimiter has odd char count. *a***\n                    if (Math.min(lLength, rLength) % 2) {\n                        const text = raw.slice(1, -1);\n                        return {\n                            type: 'em',\n                            raw,\n                            text,\n                            tokens: this.lexer.inlineTokens(text)\n                        };\n                    }\n                    // Create 'strong' if smallest delimiter has even char count. **a***\n                    const text = raw.slice(2, -2);\n                    return {\n                        type: 'strong',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n            }\n        }\n        codespan(src) {\n            const cap = this.rules.inline.code.exec(src);\n            if (cap) {\n                let text = cap[2].replace(/\\n/g, ' ');\n                const hasNonSpaceChars = /[^ ]/.test(text);\n                const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n                if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                    text = text.substring(1, text.length - 1);\n                }\n                text = escape$1(text, true);\n                return {\n                    type: 'codespan',\n                    raw: cap[0],\n                    text\n                };\n            }\n        }\n        br(src) {\n            const cap = this.rules.inline.br.exec(src);\n            if (cap) {\n                return {\n                    type: 'br',\n                    raw: cap[0]\n                };\n            }\n        }\n        del(src) {\n            const cap = this.rules.inline.del.exec(src);\n            if (cap) {\n                return {\n                    type: 'del',\n                    raw: cap[0],\n                    text: cap[2],\n                    tokens: this.lexer.inlineTokens(cap[2])\n                };\n            }\n        }\n        autolink(src) {\n            const cap = this.rules.inline.autolink.exec(src);\n            if (cap) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = escape$1(cap[1]);\n                    href = 'mailto:' + text;\n                }\n                else {\n                    text = escape$1(cap[1]);\n                    href = text;\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text\n                        }\n                    ]\n                };\n            }\n        }\n        url(src) {\n            let cap;\n            if (cap = this.rules.inline.url.exec(src)) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = escape$1(cap[0]);\n                    href = 'mailto:' + text;\n                }\n                else {\n                    // do extended autolink path validation\n                    let prevCapZero;\n                    do {\n                        prevCapZero = cap[0];\n                        cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                    } while (prevCapZero !== cap[0]);\n                    text = escape$1(cap[0]);\n                    if (cap[1] === 'www.') {\n                        href = 'http://' + cap[0];\n                    }\n                    else {\n                        href = cap[0];\n                    }\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text\n                        }\n                    ]\n                };\n            }\n        }\n        inlineText(src) {\n            const cap = this.rules.inline.text.exec(src);\n            if (cap) {\n                let text;\n                if (this.lexer.state.inRawBlock) {\n                    text = cap[0];\n                }\n                else {\n                    text = escape$1(cap[0]);\n                }\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text\n                };\n            }\n        }\n    }\n\n    /**\n     * Block-Level Grammar\n     */\n    const newline = /^(?: *(?:\\n|$))+/;\n    const blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\n    const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n    const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n    const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n    const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n    const lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n        .replace(/bull/g, bullet) // lists can interrupt\n        .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n        .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n        .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n        .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n        .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n        .getRegex();\n    const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n    const blockText = /^[^\\n]+/;\n    const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n    const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n        .replace('label', _blockLabel)\n        .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n        .getRegex();\n    const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n        .replace(/bull/g, bullet)\n        .getRegex();\n    const _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n        + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n        + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n        + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n        + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n        + '|tr|track|ul';\n    const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n    const html = edit('^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')', 'i')\n        .replace('comment', _comment)\n        .replace('tag', _tag)\n        .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const paragraph = edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n        .replace('paragraph', paragraph)\n        .getRegex();\n    /**\n     * Normal Block Grammar\n     */\n    const blockNormal = {\n        blockquote,\n        code: blockCode,\n        def,\n        fences,\n        heading,\n        hr,\n        html,\n        lheading,\n        list,\n        newline,\n        paragraph,\n        table: noopTest,\n        text: blockText\n    };\n    /**\n     * GFM Block Grammar\n     */\n    const gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('blockquote', ' {0,3}>')\n        .replace('code', ' {4}[^\\\\n]')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockGfm = {\n        ...blockNormal,\n        table: gfmTable,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n            .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n            .replace('table', gfmTable) // interrupt paragraphs with table\n            .replace('blockquote', ' {0,3}>')\n            .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n            .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n            .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n            .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n            .getRegex()\n    };\n    /**\n     * Pedantic grammar (original John Gruber's loose markdown specification)\n     */\n    const blockPedantic = {\n        ...blockNormal,\n        html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n            + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n            + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n            .replace('comment', _comment)\n            .replace(/tag/g, '(?!(?:'\n            + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n            + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n            + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n            .getRegex(),\n        def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n        heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n        fences: noopTest, // fences not supported\n        lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' *#{1,6} *[^\\n]')\n            .replace('lheading', lheading)\n            .replace('|table', '')\n            .replace('blockquote', ' {0,3}>')\n            .replace('|fences', '')\n            .replace('|list', '')\n            .replace('|html', '')\n            .replace('|tag', '')\n            .getRegex()\n    };\n    /**\n     * Inline-Level Grammar\n     */\n    const escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n    const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n    const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n    const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n    // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n    const _punctuation = '\\\\p{P}\\\\p{S}';\n    const punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n        .replace(/punctuation/g, _punctuation).getRegex();\n    // sequences em should skip over [title](link), `code`, <html>\n    const blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\n    const emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n        + '|[^*]+(?=[^*])' // Consume to delim\n        + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n        + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n        + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n        + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n        + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n        + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    // (6) Not allowed for _\n    const emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n        + '|[^_]+(?=[^_])' // Consume to delim\n        + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n        + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n        + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n        + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n        + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const anyPunctuation = edit(/\\\\([punct])/, 'gu')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n        .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n        .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n        .getRegex();\n    const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n    const tag = edit('^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n        .replace('comment', _inlineComment)\n        .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n    const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n        .replace('label', _inlineLabel)\n        .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n        .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n        .getRegex();\n    const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n        .replace('label', _inlineLabel)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n        .replace('reflink', reflink)\n        .replace('nolink', nolink)\n        .getRegex();\n    /**\n     * Normal Inline Grammar\n     */\n    const inlineNormal = {\n        _backpedal: noopTest, // only used for GFM url\n        anyPunctuation,\n        autolink,\n        blockSkip,\n        br,\n        code: inlineCode,\n        del: noopTest,\n        emStrongLDelim,\n        emStrongRDelimAst,\n        emStrongRDelimUnd,\n        escape,\n        link,\n        nolink,\n        punctuation,\n        reflink,\n        reflinkSearch,\n        tag,\n        text: inlineText,\n        url: noopTest\n    };\n    /**\n     * Pedantic Inline Grammar\n     */\n    const inlinePedantic = {\n        ...inlineNormal,\n        link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n            .replace('label', _inlineLabel)\n            .getRegex(),\n        reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n            .replace('label', _inlineLabel)\n            .getRegex()\n    };\n    /**\n     * GFM Inline Grammar\n     */\n    const inlineGfm = {\n        ...inlineNormal,\n        escape: edit(escape).replace('])', '~|])').getRegex(),\n        url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n            .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n            .getRegex(),\n        _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n        del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n        text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n    };\n    /**\n     * GFM + Line Breaks Inline Grammar\n     */\n    const inlineBreaks = {\n        ...inlineGfm,\n        br: edit(br).replace('{2,}', '*').getRegex(),\n        text: edit(inlineGfm.text)\n            .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n            .replace(/\\{2,\\}/g, '*')\n            .getRegex()\n    };\n    /**\n     * exports\n     */\n    const block = {\n        normal: blockNormal,\n        gfm: blockGfm,\n        pedantic: blockPedantic\n    };\n    const inline = {\n        normal: inlineNormal,\n        gfm: inlineGfm,\n        breaks: inlineBreaks,\n        pedantic: inlinePedantic\n    };\n\n    /**\n     * Block Lexer\n     */\n    class _Lexer {\n        tokens;\n        options;\n        state;\n        tokenizer;\n        inlineQueue;\n        constructor(options) {\n            // TokenList cannot be created in one go\n            this.tokens = [];\n            this.tokens.links = Object.create(null);\n            this.options = options || exports.defaults;\n            this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n            this.tokenizer = this.options.tokenizer;\n            this.tokenizer.options = this.options;\n            this.tokenizer.lexer = this;\n            this.inlineQueue = [];\n            this.state = {\n                inLink: false,\n                inRawBlock: false,\n                top: true\n            };\n            const rules = {\n                block: block.normal,\n                inline: inline.normal\n            };\n            if (this.options.pedantic) {\n                rules.block = block.pedantic;\n                rules.inline = inline.pedantic;\n            }\n            else if (this.options.gfm) {\n                rules.block = block.gfm;\n                if (this.options.breaks) {\n                    rules.inline = inline.breaks;\n                }\n                else {\n                    rules.inline = inline.gfm;\n                }\n            }\n            this.tokenizer.rules = rules;\n        }\n        /**\n         * Expose Rules\n         */\n        static get rules() {\n            return {\n                block,\n                inline\n            };\n        }\n        /**\n         * Static Lex Method\n         */\n        static lex(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.lex(src);\n        }\n        /**\n         * Static Lex Inline Method\n         */\n        static lexInline(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.inlineTokens(src);\n        }\n        /**\n         * Preprocessing\n         */\n        lex(src) {\n            src = src\n                .replace(/\\r\\n|\\r/g, '\\n');\n            this.blockTokens(src, this.tokens);\n            for (let i = 0; i < this.inlineQueue.length; i++) {\n                const next = this.inlineQueue[i];\n                this.inlineTokens(next.src, next.tokens);\n            }\n            this.inlineQueue = [];\n            return this.tokens;\n        }\n        blockTokens(src, tokens = []) {\n            if (this.options.pedantic) {\n                src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n            }\n            else {\n                src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                    return leading + '    '.repeat(tabs.length);\n                });\n            }\n            let token;\n            let lastToken;\n            let cutSrc;\n            let lastParagraphClipped;\n            while (src) {\n                if (this.options.extensions\n                    && this.options.extensions.block\n                    && this.options.extensions.block.some((extTokenizer) => {\n                        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                            src = src.substring(token.raw.length);\n                            tokens.push(token);\n                            return true;\n                        }\n                        return false;\n                    })) {\n                    continue;\n                }\n                // newline\n                if (token = this.tokenizer.space(src)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.length === 1 && tokens.length > 0) {\n                        // if there's a single \\n as a spacer, it's terminating the last line,\n                        // so move it there so that we don't get unnecessary paragraph tags\n                        tokens[tokens.length - 1].raw += '\\n';\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.code(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    // An indented code block cannot interrupt a paragraph.\n                    if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // fences\n                if (token = this.tokenizer.fences(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // heading\n                if (token = this.tokenizer.heading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // hr\n                if (token = this.tokenizer.hr(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // blockquote\n                if (token = this.tokenizer.blockquote(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // list\n                if (token = this.tokenizer.list(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // html\n                if (token = this.tokenizer.html(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // def\n                if (token = this.tokenizer.def(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.raw;\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else if (!this.tokens.links[token.tag]) {\n                        this.tokens.links[token.tag] = {\n                            href: token.href,\n                            title: token.title\n                        };\n                    }\n                    continue;\n                }\n                // table (gfm)\n                if (token = this.tokenizer.table(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // lheading\n                if (token = this.tokenizer.lheading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // top-level paragraph\n                // prevent paragraph consuming extensions by clipping 'src' to extension start\n                cutSrc = src;\n                if (this.options.extensions && this.options.extensions.startBlock) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startBlock.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    lastParagraphClipped = (cutSrc.length !== src.length);\n                    src = src.substring(token.raw.length);\n                    continue;\n                }\n                // text\n                if (token = this.tokenizer.text(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && lastToken.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            this.state.top = true;\n            return tokens;\n        }\n        inline(src, tokens = []) {\n            this.inlineQueue.push({ src, tokens });\n            return tokens;\n        }\n        /**\n         * Lexing/Compiling\n         */\n        inlineTokens(src, tokens = []) {\n            let token, lastToken, cutSrc;\n            // String with links masked to avoid interference with em and strong\n            let maskedSrc = src;\n            let match;\n            let keepPrevChar, prevChar;\n            // Mask out reflinks\n            if (this.tokens.links) {\n                const links = Object.keys(this.tokens.links);\n                if (links.length > 0) {\n                    while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                        if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                        }\n                    }\n                }\n            }\n            // Mask out other blocks\n            while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n            }\n            // Mask out escaped characters\n            while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n            }\n            while (src) {\n                if (!keepPrevChar) {\n                    prevChar = '';\n                }\n                keepPrevChar = false;\n                // extensions\n                if (this.options.extensions\n                    && this.options.extensions.inline\n                    && this.options.extensions.inline.some((extTokenizer) => {\n                        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                            src = src.substring(token.raw.length);\n                            tokens.push(token);\n                            return true;\n                        }\n                        return false;\n                    })) {\n                    continue;\n                }\n                // escape\n                if (token = this.tokenizer.escape(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // tag\n                if (token = this.tokenizer.tag(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // link\n                if (token = this.tokenizer.link(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // reflink, nolink\n                if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // em & strong\n                if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.codespan(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // br\n                if (token = this.tokenizer.br(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // del (gfm)\n                if (token = this.tokenizer.del(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // autolink\n                if (token = this.tokenizer.autolink(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // url (gfm)\n                if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // text\n                // prevent inlineText consuming extensions by clipping 'src' to extension start\n                cutSrc = src;\n                if (this.options.extensions && this.options.extensions.startInline) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startInline.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (token = this.tokenizer.inlineText(cutSrc)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                        prevChar = token.raw.slice(-1);\n                    }\n                    keepPrevChar = true;\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            return tokens;\n        }\n    }\n\n    /**\n     * Renderer\n     */\n    class _Renderer {\n        options;\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        code(code, infostring, escaped) {\n            const lang = (infostring || '').match(/^\\S*/)?.[0];\n            code = code.replace(/\\n$/, '') + '\\n';\n            if (!lang) {\n                return '<pre><code>'\n                    + (escaped ? code : escape$1(code, true))\n                    + '</code></pre>\\n';\n            }\n            return '<pre><code class=\"language-'\n                + escape$1(lang)\n                + '\">'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        blockquote(quote) {\n            return `<blockquote>\\n${quote}</blockquote>\\n`;\n        }\n        html(html, block) {\n            return html;\n        }\n        heading(text, level, raw) {\n            // ignore IDs\n            return `<h${level}>${text}</h${level}>\\n`;\n        }\n        hr() {\n            return '<hr>\\n';\n        }\n        list(body, ordered, start) {\n            const type = ordered ? 'ol' : 'ul';\n            const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n            return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n        }\n        listitem(text, task, checked) {\n            return `<li>${text}</li>\\n`;\n        }\n        checkbox(checked) {\n            return '<input '\n                + (checked ? 'checked=\"\" ' : '')\n                + 'disabled=\"\" type=\"checkbox\">';\n        }\n        paragraph(text) {\n            return `<p>${text}</p>\\n`;\n        }\n        table(header, body) {\n            if (body)\n                body = `<tbody>${body}</tbody>`;\n            return '<table>\\n'\n                + '<thead>\\n'\n                + header\n                + '</thead>\\n'\n                + body\n                + '</table>\\n';\n        }\n        tablerow(content) {\n            return `<tr>\\n${content}</tr>\\n`;\n        }\n        tablecell(content, flags) {\n            const type = flags.header ? 'th' : 'td';\n            const tag = flags.align\n                ? `<${type} align=\"${flags.align}\">`\n                : `<${type}>`;\n            return tag + content + `</${type}>\\n`;\n        }\n        /**\n         * span level renderer\n         */\n        strong(text) {\n            return `<strong>${text}</strong>`;\n        }\n        em(text) {\n            return `<em>${text}</em>`;\n        }\n        codespan(text) {\n            return `<code>${text}</code>`;\n        }\n        br() {\n            return '<br>';\n        }\n        del(text) {\n            return `<del>${text}</del>`;\n        }\n        link(href, title, text) {\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return text;\n            }\n            href = cleanHref;\n            let out = '<a href=\"' + href + '\"';\n            if (title) {\n                out += ' title=\"' + title + '\"';\n            }\n            out += '>' + text + '</a>';\n            return out;\n        }\n        image(href, title, text) {\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return text;\n            }\n            href = cleanHref;\n            let out = `<img src=\"${href}\" alt=\"${text}\"`;\n            if (title) {\n                out += ` title=\"${title}\"`;\n            }\n            out += '>';\n            return out;\n        }\n        text(text) {\n            return text;\n        }\n    }\n\n    /**\n     * TextRenderer\n     * returns only the textual part of the token\n     */\n    class _TextRenderer {\n        // no need for block level renderers\n        strong(text) {\n            return text;\n        }\n        em(text) {\n            return text;\n        }\n        codespan(text) {\n            return text;\n        }\n        del(text) {\n            return text;\n        }\n        html(text) {\n            return text;\n        }\n        text(text) {\n            return text;\n        }\n        link(href, title, text) {\n            return '' + text;\n        }\n        image(href, title, text) {\n            return '' + text;\n        }\n        br() {\n            return '';\n        }\n    }\n\n    /**\n     * Parsing & Compiling\n     */\n    class _Parser {\n        options;\n        renderer;\n        textRenderer;\n        constructor(options) {\n            this.options = options || exports.defaults;\n            this.options.renderer = this.options.renderer || new _Renderer();\n            this.renderer = this.options.renderer;\n            this.renderer.options = this.options;\n            this.textRenderer = new _TextRenderer();\n        }\n        /**\n         * Static Parse Method\n         */\n        static parse(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parse(tokens);\n        }\n        /**\n         * Static Parse Inline Method\n         */\n        static parseInline(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parseInline(tokens);\n        }\n        /**\n         * Parse Loop\n         */\n        parse(tokens, top = true) {\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const token = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                    const genericToken = token;\n                    const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                    if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                switch (token.type) {\n                    case 'space': {\n                        continue;\n                    }\n                    case 'hr': {\n                        out += this.renderer.hr();\n                        continue;\n                    }\n                    case 'heading': {\n                        const headingToken = token;\n                        out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                        continue;\n                    }\n                    case 'code': {\n                        const codeToken = token;\n                        out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                        continue;\n                    }\n                    case 'table': {\n                        const tableToken = token;\n                        let header = '';\n                        // header\n                        let cell = '';\n                        for (let j = 0; j < tableToken.header.length; j++) {\n                            cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                        }\n                        header += this.renderer.tablerow(cell);\n                        let body = '';\n                        for (let j = 0; j < tableToken.rows.length; j++) {\n                            const row = tableToken.rows[j];\n                            cell = '';\n                            for (let k = 0; k < row.length; k++) {\n                                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                            }\n                            body += this.renderer.tablerow(cell);\n                        }\n                        out += this.renderer.table(header, body);\n                        continue;\n                    }\n                    case 'blockquote': {\n                        const blockquoteToken = token;\n                        const body = this.parse(blockquoteToken.tokens);\n                        out += this.renderer.blockquote(body);\n                        continue;\n                    }\n                    case 'list': {\n                        const listToken = token;\n                        const ordered = listToken.ordered;\n                        const start = listToken.start;\n                        const loose = listToken.loose;\n                        let body = '';\n                        for (let j = 0; j < listToken.items.length; j++) {\n                            const item = listToken.items[j];\n                            const checked = item.checked;\n                            const task = item.task;\n                            let itemBody = '';\n                            if (item.task) {\n                                const checkbox = this.renderer.checkbox(!!checked);\n                                if (loose) {\n                                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                            item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                        }\n                                    }\n                                    else {\n                                        item.tokens.unshift({\n                                            type: 'text',\n                                            text: checkbox + ' '\n                                        });\n                                    }\n                                }\n                                else {\n                                    itemBody += checkbox + ' ';\n                                }\n                            }\n                            itemBody += this.parse(item.tokens, loose);\n                            body += this.renderer.listitem(itemBody, task, !!checked);\n                        }\n                        out += this.renderer.list(body, ordered, start);\n                        continue;\n                    }\n                    case 'html': {\n                        const htmlToken = token;\n                        out += this.renderer.html(htmlToken.text, htmlToken.block);\n                        continue;\n                    }\n                    case 'paragraph': {\n                        const paragraphToken = token;\n                        out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                        continue;\n                    }\n                    case 'text': {\n                        let textToken = token;\n                        let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                        while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                            textToken = tokens[++i];\n                            body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                        }\n                        out += top ? this.renderer.paragraph(body) : body;\n                        continue;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n        /**\n         * Parse Inline Tokens\n         */\n        parseInline(tokens, renderer) {\n            renderer = renderer || this.renderer;\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const token = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                    const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                    if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                switch (token.type) {\n                    case 'escape': {\n                        const escapeToken = token;\n                        out += renderer.text(escapeToken.text);\n                        break;\n                    }\n                    case 'html': {\n                        const tagToken = token;\n                        out += renderer.html(tagToken.text);\n                        break;\n                    }\n                    case 'link': {\n                        const linkToken = token;\n                        out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                        break;\n                    }\n                    case 'image': {\n                        const imageToken = token;\n                        out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                        break;\n                    }\n                    case 'strong': {\n                        const strongToken = token;\n                        out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                        break;\n                    }\n                    case 'em': {\n                        const emToken = token;\n                        out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                        break;\n                    }\n                    case 'codespan': {\n                        const codespanToken = token;\n                        out += renderer.codespan(codespanToken.text);\n                        break;\n                    }\n                    case 'br': {\n                        out += renderer.br();\n                        break;\n                    }\n                    case 'del': {\n                        const delToken = token;\n                        out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                        break;\n                    }\n                    case 'text': {\n                        const textToken = token;\n                        out += renderer.text(textToken.text);\n                        break;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n    }\n\n    class _Hooks {\n        options;\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        static passThroughHooks = new Set([\n            'preprocess',\n            'postprocess',\n            'processAllTokens'\n        ]);\n        /**\n         * Process markdown before marked\n         */\n        preprocess(markdown) {\n            return markdown;\n        }\n        /**\n         * Process HTML after marked is finished\n         */\n        postprocess(html) {\n            return html;\n        }\n        /**\n         * Process all tokens before walk tokens\n         */\n        processAllTokens(tokens) {\n            return tokens;\n        }\n    }\n\n    class Marked {\n        defaults = _getDefaults();\n        options = this.setOptions;\n        parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n        parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n        Parser = _Parser;\n        Renderer = _Renderer;\n        TextRenderer = _TextRenderer;\n        Lexer = _Lexer;\n        Tokenizer = _Tokenizer;\n        Hooks = _Hooks;\n        constructor(...args) {\n            this.use(...args);\n        }\n        /**\n         * Run callback for every token\n         */\n        walkTokens(tokens, callback) {\n            let values = [];\n            for (const token of tokens) {\n                values = values.concat(callback.call(this, token));\n                switch (token.type) {\n                    case 'table': {\n                        const tableToken = token;\n                        for (const cell of tableToken.header) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                        for (const row of tableToken.rows) {\n                            for (const cell of row) {\n                                values = values.concat(this.walkTokens(cell.tokens, callback));\n                            }\n                        }\n                        break;\n                    }\n                    case 'list': {\n                        const listToken = token;\n                        values = values.concat(this.walkTokens(listToken.items, callback));\n                        break;\n                    }\n                    default: {\n                        const genericToken = token;\n                        if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                                const tokens = genericToken[childTokens].flat(Infinity);\n                                values = values.concat(this.walkTokens(tokens, callback));\n                            });\n                        }\n                        else if (genericToken.tokens) {\n                            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                        }\n                    }\n                }\n            }\n            return values;\n        }\n        use(...args) {\n            const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n            args.forEach((pack) => {\n                // copy options to new object\n                const opts = { ...pack };\n                // set async to true if it was set to true before\n                opts.async = this.defaults.async || opts.async || false;\n                // ==-- Parse \"addon\" extensions --== //\n                if (pack.extensions) {\n                    pack.extensions.forEach((ext) => {\n                        if (!ext.name) {\n                            throw new Error('extension name required');\n                        }\n                        if ('renderer' in ext) { // Renderer extensions\n                            const prevRenderer = extensions.renderers[ext.name];\n                            if (prevRenderer) {\n                                // Replace extension with func to run new extension but fall back if false\n                                extensions.renderers[ext.name] = function (...args) {\n                                    let ret = ext.renderer.apply(this, args);\n                                    if (ret === false) {\n                                        ret = prevRenderer.apply(this, args);\n                                    }\n                                    return ret;\n                                };\n                            }\n                            else {\n                                extensions.renderers[ext.name] = ext.renderer;\n                            }\n                        }\n                        if ('tokenizer' in ext) { // Tokenizer Extensions\n                            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                                throw new Error(\"extension level must be 'block' or 'inline'\");\n                            }\n                            const extLevel = extensions[ext.level];\n                            if (extLevel) {\n                                extLevel.unshift(ext.tokenizer);\n                            }\n                            else {\n                                extensions[ext.level] = [ext.tokenizer];\n                            }\n                            if (ext.start) { // Function to check for start of token\n                                if (ext.level === 'block') {\n                                    if (extensions.startBlock) {\n                                        extensions.startBlock.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startBlock = [ext.start];\n                                    }\n                                }\n                                else if (ext.level === 'inline') {\n                                    if (extensions.startInline) {\n                                        extensions.startInline.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startInline = [ext.start];\n                                    }\n                                }\n                            }\n                        }\n                        if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                            extensions.childTokens[ext.name] = ext.childTokens;\n                        }\n                    });\n                    opts.extensions = extensions;\n                }\n                // ==-- Parse \"overwrite\" extensions --== //\n                if (pack.renderer) {\n                    const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                    for (const prop in pack.renderer) {\n                        if (!(prop in renderer)) {\n                            throw new Error(`renderer '${prop}' does not exist`);\n                        }\n                        if (prop === 'options') {\n                            // ignore options property\n                            continue;\n                        }\n                        const rendererProp = prop;\n                        const rendererFunc = pack.renderer[rendererProp];\n                        const prevRenderer = renderer[rendererProp];\n                        // Replace renderer with func to run extension, but fall back if false\n                        renderer[rendererProp] = (...args) => {\n                            let ret = rendererFunc.apply(renderer, args);\n                            if (ret === false) {\n                                ret = prevRenderer.apply(renderer, args);\n                            }\n                            return ret || '';\n                        };\n                    }\n                    opts.renderer = renderer;\n                }\n                if (pack.tokenizer) {\n                    const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                    for (const prop in pack.tokenizer) {\n                        if (!(prop in tokenizer)) {\n                            throw new Error(`tokenizer '${prop}' does not exist`);\n                        }\n                        if (['options', 'rules', 'lexer'].includes(prop)) {\n                            // ignore options, rules, and lexer properties\n                            continue;\n                        }\n                        const tokenizerProp = prop;\n                        const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                        const prevTokenizer = tokenizer[tokenizerProp];\n                        // Replace tokenizer with func to run extension, but fall back if false\n                        // @ts-expect-error cannot type tokenizer function dynamically\n                        tokenizer[tokenizerProp] = (...args) => {\n                            let ret = tokenizerFunc.apply(tokenizer, args);\n                            if (ret === false) {\n                                ret = prevTokenizer.apply(tokenizer, args);\n                            }\n                            return ret;\n                        };\n                    }\n                    opts.tokenizer = tokenizer;\n                }\n                // ==-- Parse Hooks extensions --== //\n                if (pack.hooks) {\n                    const hooks = this.defaults.hooks || new _Hooks();\n                    for (const prop in pack.hooks) {\n                        if (!(prop in hooks)) {\n                            throw new Error(`hook '${prop}' does not exist`);\n                        }\n                        if (prop === 'options') {\n                            // ignore options property\n                            continue;\n                        }\n                        const hooksProp = prop;\n                        const hooksFunc = pack.hooks[hooksProp];\n                        const prevHook = hooks[hooksProp];\n                        if (_Hooks.passThroughHooks.has(prop)) {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (arg) => {\n                                if (this.defaults.async) {\n                                    return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                        return prevHook.call(hooks, ret);\n                                    });\n                                }\n                                const ret = hooksFunc.call(hooks, arg);\n                                return prevHook.call(hooks, ret);\n                            };\n                        }\n                        else {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (...args) => {\n                                let ret = hooksFunc.apply(hooks, args);\n                                if (ret === false) {\n                                    ret = prevHook.apply(hooks, args);\n                                }\n                                return ret;\n                            };\n                        }\n                    }\n                    opts.hooks = hooks;\n                }\n                // ==-- Parse WalkTokens extensions --== //\n                if (pack.walkTokens) {\n                    const walkTokens = this.defaults.walkTokens;\n                    const packWalktokens = pack.walkTokens;\n                    opts.walkTokens = function (token) {\n                        let values = [];\n                        values.push(packWalktokens.call(this, token));\n                        if (walkTokens) {\n                            values = values.concat(walkTokens.call(this, token));\n                        }\n                        return values;\n                    };\n                }\n                this.defaults = { ...this.defaults, ...opts };\n            });\n            return this;\n        }\n        setOptions(opt) {\n            this.defaults = { ...this.defaults, ...opt };\n            return this;\n        }\n        lexer(src, options) {\n            return _Lexer.lex(src, options ?? this.defaults);\n        }\n        parser(tokens, options) {\n            return _Parser.parse(tokens, options ?? this.defaults);\n        }\n        #parseMarkdown(lexer, parser) {\n            return (src, options) => {\n                const origOpt = { ...options };\n                const opt = { ...this.defaults, ...origOpt };\n                // Show warning if an extension set async to true but the parse was called with async: false\n                if (this.defaults.async === true && origOpt.async === false) {\n                    if (!opt.silent) {\n                        console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                    }\n                    opt.async = true;\n                }\n                const throwError = this.#onError(!!opt.silent, !!opt.async);\n                // throw error in case of non string input\n                if (typeof src === 'undefined' || src === null) {\n                    return throwError(new Error('marked(): input parameter is undefined or null'));\n                }\n                if (typeof src !== 'string') {\n                    return throwError(new Error('marked(): input parameter is of type '\n                        + Object.prototype.toString.call(src) + ', string expected'));\n                }\n                if (opt.hooks) {\n                    opt.hooks.options = opt;\n                }\n                if (opt.async) {\n                    return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                        .then(src => lexer(src, opt))\n                        .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                        .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                        .then(tokens => parser(tokens, opt))\n                        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                        .catch(throwError);\n                }\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    let tokens = lexer(src, opt);\n                    if (opt.hooks) {\n                        tokens = opt.hooks.processAllTokens(tokens);\n                    }\n                    if (opt.walkTokens) {\n                        this.walkTokens(tokens, opt.walkTokens);\n                    }\n                    let html = parser(tokens, opt);\n                    if (opt.hooks) {\n                        html = opt.hooks.postprocess(html);\n                    }\n                    return html;\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n            };\n        }\n        #onError(silent, async) {\n            return (e) => {\n                e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n                if (silent) {\n                    const msg = '<p>An error occurred:</p><pre>'\n                        + escape$1(e.message + '', true)\n                        + '</pre>';\n                    if (async) {\n                        return Promise.resolve(msg);\n                    }\n                    return msg;\n                }\n                if (async) {\n                    return Promise.reject(e);\n                }\n                throw e;\n            };\n        }\n    }\n\n    const markedInstance = new Marked();\n    function marked(src, opt) {\n        return markedInstance.parse(src, opt);\n    }\n    /**\n     * Sets the default options.\n     *\n     * @param options Hash of options\n     */\n    marked.options =\n        marked.setOptions = function (options) {\n            markedInstance.setOptions(options);\n            marked.defaults = markedInstance.defaults;\n            changeDefaults(marked.defaults);\n            return marked;\n        };\n    /**\n     * Gets the original marked default options.\n     */\n    marked.getDefaults = _getDefaults;\n    marked.defaults = exports.defaults;\n    /**\n     * Use Extension\n     */\n    marked.use = function (...args) {\n        markedInstance.use(...args);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n    /**\n     * Run callback for every token\n     */\n    marked.walkTokens = function (tokens, callback) {\n        return markedInstance.walkTokens(tokens, callback);\n    };\n    /**\n     * Compiles markdown to HTML without enclosing `p` tag.\n     *\n     * @param src String of markdown source to be compiled\n     * @param options Hash of options\n     * @return String of compiled HTML\n     */\n    marked.parseInline = markedInstance.parseInline;\n    /**\n     * Expose\n     */\n    marked.Parser = _Parser;\n    marked.parser = _Parser.parse;\n    marked.Renderer = _Renderer;\n    marked.TextRenderer = _TextRenderer;\n    marked.Lexer = _Lexer;\n    marked.lexer = _Lexer.lex;\n    marked.Tokenizer = _Tokenizer;\n    marked.Hooks = _Hooks;\n    marked.parse = marked;\n    const options = marked.options;\n    const setOptions = marked.setOptions;\n    const use = marked.use;\n    const walkTokens = marked.walkTokens;\n    const parseInline = marked.parseInline;\n    const parse = marked;\n    const parser = _Parser.parse;\n    const lexer = _Lexer.lex;\n\n    exports.Hooks = _Hooks;\n    exports.Lexer = _Lexer;\n    exports.Marked = Marked;\n    exports.Parser = _Parser;\n    exports.Renderer = _Renderer;\n    exports.TextRenderer = _TextRenderer;\n    exports.Tokenizer = _Tokenizer;\n    exports.getDefaults = _getDefaults;\n    exports.lexer = lexer;\n    exports.marked = marked;\n    exports.options = options;\n    exports.parse = parse;\n    exports.parseInline = parseInline;\n    exports.parser = parser;\n    exports.setOptions = setOptions;\n    exports.use = use;\n    exports.walkTokens = walkTokens;\n\n}));\n//# sourceMappingURL=marked.umd.js.map\n","import {marked} from 'marked';\r\n\r\nconst unclosedElement = /(\\*{1,3}|`)($|\\w[\\w\\s]*$)/;\r\n\r\nconst completeUnclosedElement = (text: string) => {\r\n  const match = unclosedElement.exec(text);\r\n  if (match) {\r\n    const symbol = match[1];\r\n\r\n    const replacements: Record<string, string> = {\r\n      '***':\r\n        '<strong part=\"answer-strong\"><em part=\"answer-emphasis\">$2</em></strong>',\r\n      '**': '<strong part=\"answer-strong\">$2</strong>',\r\n      '*': '<em part=\"answer-emphasis\">$2</em>',\r\n      '`': '<code part=\"answer-inline-code\">$2</code>',\r\n    };\r\n\r\n    return text.replace(unclosedElement, replacements[symbol]);\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\nconst escapeHtml = (text: string) => {\r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;');\r\n};\r\n\r\nconst customRenderer = {\r\n  blockquote(quote: string) {\r\n    return `<blockquote part=\"answer-quote-block\">${quote}</blockquote>`;\r\n  },\r\n\r\n  code(code: string) {\r\n    return `<pre part=\"answer-code-block\"><code>${escapeHtml(code)}</code></pre>`;\r\n  },\r\n\r\n  codespan(text: string) {\r\n    return `<code part=\"answer-inline-code\">${text}</code>`;\r\n  },\r\n\r\n  em(text: string) {\r\n    return `<em part=\"answer-emphasis\">${text}</em>`;\r\n  },\r\n\r\n  heading(text: string, level: number) {\r\n    return `<div part=\"answer-heading-${level}\" aria-label=\"${text}\">${text}</div>`;\r\n  },\r\n\r\n  list(body: string, ordered: boolean, start: number | '') {\r\n    const type = ordered ? 'ol' : 'ul';\r\n    const part = ordered ? 'answer-ordered-list' : 'answer-unordered-list';\r\n\r\n    const tag =\r\n      ordered && start !== 1\r\n        ? `<${type} part=\"${part}\" start=\"${start}\">`\r\n        : `<${type} part=\"${part}\">`;\r\n\r\n    return `${tag}${body}</${type}>`;\r\n  },\r\n\r\n  /**\r\n   * Custom Marked renderer to remove wrapping `<p>` element around list item content.\r\n   * @param text The element text content.\r\n   * @returns The list item element to render.\r\n   */\r\n  listitem(text: string) {\r\n    const unwrappedText = text\r\n      .replace(/^<p[^>]*>/, '')\r\n      .replace(/<\\/p>\\n?$/, '');\r\n    const withClosedElement = completeUnclosedElement(unwrappedText);\r\n    return `<li part=\"answer-list-item\">${withClosedElement}</li>`;\r\n  },\r\n\r\n  paragraph(text: string) {\r\n    return `<p part=\"answer-paragraph\">${text}</p>`;\r\n  },\r\n\r\n  strong(text: string) {\r\n    return `<strong part=\"answer-strong\">${text}</strong>`;\r\n  },\r\n\r\n  /**\r\n   * Custom Marked renderer to wrap `<table>` element in a scrolling container.\r\n   * @param header The table header content.\r\n   * @param body The table body content.\r\n   * @returns The element to render.\r\n   */\r\n  table(header: string, body: string) {\r\n    return `<div part=\"answer-table-container\" class=\"scrollable-table\"><table part=\"answer-table\"><thead>${header}</thead><tbody>${body}</tbody></table></div>`;\r\n  },\r\n\r\n  tablecell(\r\n    content: string,\r\n    flags: {header: boolean; align: 'center' | 'left' | 'right' | null}\r\n  ) {\r\n    const type = flags.header ? 'th' : 'td';\r\n    const part = flags.header ? 'answer-table-header' : 'answer-table-content';\r\n    const tag = flags.align\r\n      ? `<${type} part=\"${part}\" align=\"${flags.align}\">`\r\n      : `<${type} part=\"${part}\">`;\r\n\r\n    return `${tag}${content}</${type}>`;\r\n  },\r\n\r\n  /**\r\n   * Custom Marked renderer to complete unclosed inline elements such as bold, italic, and code.\r\n   * @param text The text content.\r\n   * @returns The corrected text content.\r\n   */\r\n  text(text: string) {\r\n    return completeUnclosedElement(text);\r\n  },\r\n};\r\n\r\nexport const transformMarkdownToHtml = (text: string): string => {\r\n  return marked.use({renderer: customRenderer}).parse(text) as string;\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport DOMPurify from 'dompurify';\r\nimport {transformMarkdownToHtml} from './markdown-utils';\r\n\r\ninterface GeneratedMarkdownContentProps {\r\n  answer?: string;\r\n  isStreaming: boolean;\r\n}\r\n\r\nexport const GeneratedMarkdownContent: FunctionalComponent<\r\n  GeneratedMarkdownContentProps\r\n> = (props) => {\r\n  const answerAsHtml = DOMPurify.sanitize(\r\n    transformMarkdownToHtml(props.answer ?? ''),\r\n    {ADD_ATTR: ['part']}\r\n  );\r\n\r\n  return (\r\n    <div\r\n      part=\"generated-text\"\r\n      class={`mb-0 text-on-background ${props.isStreaming ? 'cursor' : ''}`}\r\n      innerHTML={answerAsHtml}\r\n    />\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\n\r\ninterface GeneratedTextContentProps {\r\n  answer?: string;\r\n  isStreaming: boolean;\r\n}\r\n\r\nexport const GeneratedTextContent: FunctionalComponent<\r\n  GeneratedTextContentProps\r\n> = (props) => {\r\n  return (\r\n    <p\r\n      part=\"generated-text\"\r\n      class={`mb-0 text-on-background whitespace-pre-wrap ${\r\n        props.isStreaming ? 'cursor' : ''\r\n      }`}\r\n    >\r\n      {props.answer}\r\n    </p>\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {GeneratedMarkdownContent} from './generated-content/generated-markdown-content';\r\nimport {GeneratedTextContent} from './generated-content/generated-text-content';\r\n\r\ninterface GeneratedContentContainerProps {\r\n  answer?: string;\r\n  answerContentFormat?: string;\r\n  isStreaming: boolean;\r\n}\r\n\r\nexport const GeneratedContentContainer: FunctionalComponent<\r\n  GeneratedContentContainerProps\r\n> = (props, children) => {\r\n  return (\r\n    <div part=\"generated-container\" class=\"mt-6\">\r\n      {props.answerContentFormat === 'text/markdown' ? (\r\n        <GeneratedMarkdownContent\r\n          answer={props.answer}\r\n          isStreaming={props.isStreaming}\r\n        />\r\n      ) : (\r\n        <GeneratedTextContent\r\n          answer={props.answer}\r\n          isStreaming={props.isStreaming}\r\n        />\r\n      )}\r\n      <div class=\"footer mt-6\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import {GeneratedAnswerStyle} from '@coveo/headless';\r\nimport {FunctionalComponent, h} from '@stencil/core';\r\nimport {i18n} from 'i18next';\r\nimport BulletsIcon from '../../../images/bullets.svg';\r\nimport IdeaIcon from '../../../images/idea.svg';\r\nimport StepsIcon from '../../../images/steps.svg';\r\nimport TextIcon from '../../../images/text.svg';\r\nimport {Button} from '../button';\r\n\r\ninterface RephraseOption {\r\n  value: GeneratedAnswerStyle;\r\n  icon: string;\r\n  titleKey: string;\r\n  tooltipKey: string;\r\n}\r\n\r\nconst options: RephraseOption[] = [\r\n  {\r\n    value: 'default',\r\n    icon: TextIcon,\r\n    titleKey: 'auto',\r\n    tooltipKey: 'auto-tooltip',\r\n  },\r\n  {\r\n    value: 'step',\r\n    icon: StepsIcon,\r\n    titleKey: 'steps',\r\n    tooltipKey: 'steps-tooltip',\r\n  },\r\n  {\r\n    value: 'bullet',\r\n    icon: BulletsIcon,\r\n    titleKey: 'bullets',\r\n    tooltipKey: 'bullets-tooltip',\r\n  },\r\n  {\r\n    titleKey: 'summary',\r\n    value: 'concise',\r\n    icon: IdeaIcon,\r\n    tooltipKey: 'summary',\r\n  },\r\n];\r\n\r\ninterface RephraseButtonProps {\r\n  answerStyle: string;\r\n  i18n: i18n;\r\n  onChange: (answerStyle: GeneratedAnswerStyle) => void;\r\n}\r\n\r\nexport const RephraseButtons: FunctionalComponent<RephraseButtonProps> = (\r\n  props\r\n) => {\r\n  const {i18n} = props;\r\n  return (\r\n    <div part=\"rephrase-buttons\" class=\"shrink-0\">\r\n      <p part=\"rephrase-label\" class=\"mb-2 text-neutral-dark shrink-0\">\r\n        {i18n.t('rephrase')}\r\n      </p>\r\n      <div\r\n        part=\"rephrase-buttons-container\"\r\n        class=\"flex flex-wrap gap-2 ml-auto border border-solid rounded-md p-1\"\r\n      >\r\n        {options.map((option) => {\r\n          const isActive = props.answerStyle === option.value;\r\n          return (\r\n            <Button\r\n              title={i18n.t(option.tooltipKey)}\r\n              part=\"rephrase-button\"\r\n              style=\"text-transparent\"\r\n              class={`flex items-center rounded ${isActive ? 'active' : ''}`}\r\n              onClick={() => {\r\n                props.onChange(option.value);\r\n              }}\r\n              ariaPressed={String(isActive)}\r\n            >\r\n              <div class=\"icon-container text-neutral-dark h-full mx-auto shrink-0 relative\">\r\n                <atomic-icon icon={option.icon}></atomic-icon>\r\n              </div>\r\n              <div\r\n                part=\"rephrase-button-label\"\r\n                class=\"hidden text-neutral-dark\"\r\n              >\r\n                {i18n.t(option.titleKey)}\r\n              </div>\r\n            </Button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {Button} from '../button';\r\n\r\ninterface RetryPromptProps {\r\n  message: string;\r\n  buttonLabel: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const RetryPrompt: FunctionalComponent<RetryPromptProps> = (props) => (\r\n  <div part=\"retry-container\" class=\"mt-4\">\r\n    <div class=\"mx-auto text-center text-neutral-dark\">{props.message}</div>\r\n    <Button\r\n      class=\"block px-4 py-2 mt-4 mx-auto\"\r\n      style=\"outline-primary\"\r\n      onClick={props.onClick}\r\n    >\r\n      {props.buttonLabel}\r\n    </Button>\r\n  </div>\r\n);\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {i18n} from 'i18next';\r\nimport ArrowBottomIcon from '../../../images/arrow-bottom-rounded.svg';\r\nimport ArrowTopIcon from '../../../images/arrow-top-rounded.svg';\r\nimport {Button} from '../button';\r\n\r\ninterface ShowButtonProps {\r\n  i18n: i18n;\r\n  isCollapsed: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ShowButton: FunctionalComponent<ShowButtonProps> = (props) => (\r\n  <Button\r\n    style=\"text-primary\"\r\n    part=\"answer-show-button\"\r\n    class=\"hidden items-center hover:bg-transparent\"\r\n    onClick={() => props.onClick()}\r\n  >\r\n    <div class=\"font-light text-base\">\r\n      {props.isCollapsed\r\n        ? props.i18n.t('show-more')\r\n        : props.i18n.t('show-less')}\r\n    </div>\r\n    <atomic-icon\r\n      part=\"answer-show-icon\"\r\n      class=\"w-3.5 ml-2\"\r\n      icon={props.isCollapsed ? ArrowBottomIcon : ArrowTopIcon}\r\n    ></atomic-icon>\r\n  </Button>\r\n);\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\n\r\ninterface SourceCitationsProps {\r\n  label: string;\r\n  isVisible: boolean;\r\n}\r\n\r\nexport const SourceCitations: FunctionalComponent<SourceCitationsProps> = (\r\n  props,\r\n  children\r\n) =>\r\n  props.isVisible ? (\r\n    <div class=\"source-citations\">\r\n      <p part=\"citations-label\" class=\"mb-2 text-neutral-dark shrink-0\">\r\n        {props.label}\r\n      </p>\r\n      <ol class=\"list-none citations-container gap-2 flex items-center flex-wrap\">\r\n        {children}\r\n      </ol>\r\n    </div>\r\n  ) : null;\r\n","import {\r\n  GeneratedAnswer,\r\n  GeneratedAnswerCitation,\r\n  GeneratedAnswerState,\r\n  GeneratedAnswerStyle,\r\n  InteractiveCitation,\r\n  InteractiveCitationProps,\r\n  SearchStatusState,\r\n} from '@coveo/headless';\r\nimport {h} from '@stencil/core';\r\nimport {\r\n  GeneratedAnswerData,\r\n  SafeStorage,\r\n  StorageItems,\r\n} from '../../../utils/local-storage-utils';\r\nimport {Heading} from '../heading';\r\nimport {AnyBindings} from '../interface/bindings';\r\nimport {Switch} from '../switch';\r\nimport {CopyButton} from './copy-button';\r\nimport {FeedbackButton} from './feedback-button';\r\nimport {GeneratedContentContainer} from './generated-content-container';\r\nimport {RephraseButtons} from './rephrase-buttons';\r\nimport {RetryPrompt} from './retry-prompt';\r\nimport {ShowButton} from './show-button';\r\nimport {SourceCitations} from './source-citations';\r\n\r\ninterface GeneratedAnswerCommonOptions {\r\n  host: HTMLElement;\r\n  withToggle?: boolean;\r\n  collapsible?: boolean;\r\n  getGeneratedAnswer: () => GeneratedAnswer | undefined;\r\n  getGeneratedAnswerState: () => GeneratedAnswerState | undefined;\r\n  getSearchStatusState: () => SearchStatusState | undefined;\r\n  getBindings: () => AnyBindings;\r\n  getCopied: () => boolean;\r\n  setCopied: (isCopied: boolean) => void;\r\n  getCopyError: () => boolean;\r\n  setCopyError: (copyError: boolean) => void;\r\n  setAriaMessage: (message: string) => void;\r\n  buildInteractiveCitation: (\r\n    props: InteractiveCitationProps\r\n  ) => InteractiveCitation;\r\n}\r\n\r\nexport class GeneratedAnswerCommon {\r\n  private storage: SafeStorage = new SafeStorage();\r\n  private _data: GeneratedAnswerData;\r\n  private modalRef?: HTMLAtomicGeneratedAnswerFeedbackModalElement;\r\n\r\n  private contentClasses =\r\n    'mt-0 mb-4 border border-neutral shadow-lg p-6 bg-background rounded-lg p-6 text-on-background';\r\n\r\n  constructor(private props: GeneratedAnswerCommonOptions) {\r\n    this._data = this.readStoredData();\r\n  }\r\n\r\n  public insertFeedbackModal() {\r\n    this.modalRef = document.createElement(\r\n      'atomic-generated-answer-feedback-modal'\r\n    );\r\n    this.modalRef.generatedAnswer = this.props.getGeneratedAnswer()!;\r\n    this.props.host.insertAdjacentElement('beforebegin', this.modalRef);\r\n  }\r\n\r\n  public readStoredData(): GeneratedAnswerData {\r\n    const {withToggle} = this.props;\r\n    const storedData = this.storage.getParsedJSON<GeneratedAnswerData>(\r\n      StorageItems.GENERATED_ANSWER_DATA,\r\n      {isVisible: true}\r\n    );\r\n\r\n    // This check ensures that the answer is visible when the toggle is hidden and visible is set to false in the local storage.\r\n    return {isVisible: (withToggle && storedData.isVisible) || !withToggle};\r\n  }\r\n\r\n  public writeStoredData(data: GeneratedAnswerData) {\r\n    this.storage.setJSON(StorageItems.GENERATED_ANSWER_DATA, data);\r\n  }\r\n\r\n  get data() {\r\n    return this._data;\r\n  }\r\n\r\n  set data(newData: GeneratedAnswerData) {\r\n    this._data = newData;\r\n  }\r\n\r\n  public getGeneratedAnswerStatus() {\r\n    const isHidden = !this.props.getGeneratedAnswerState()?.isVisible;\r\n    const isGenerating = !!this.props.getGeneratedAnswerState()?.isStreaming;\r\n    const hasAnswer = !!this.props.getGeneratedAnswerState()?.answer;\r\n    const hasError = !!this.props.getGeneratedAnswerState()?.error;\r\n\r\n    if (isHidden) {\r\n      return this.props.getBindings().i18n.t('generated-answer-hidden');\r\n    }\r\n\r\n    if (isGenerating) {\r\n      return this.props.getBindings().i18n.t('generating-answer');\r\n    }\r\n\r\n    if (hasError) {\r\n      return this.props.getBindings().i18n.t('answer-could-not-be-generated');\r\n    }\r\n\r\n    if (hasAnswer) {\r\n      return this.props.getBindings().i18n.t('answer-generated', {\r\n        answer: this.props.getGeneratedAnswerState()?.answer,\r\n      });\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private get hasRetryableError() {\r\n    return (\r\n      !this.props.getSearchStatusState()?.hasError &&\r\n      this.props.getGeneratedAnswerState()?.error?.isRetryable\r\n    );\r\n  }\r\n\r\n  private get shouldBeHidden() {\r\n    const {answer, citations} = this.props.getGeneratedAnswerState() ?? {};\r\n    return (\r\n      answer === undefined && !citations?.length && !this.hasRetryableError\r\n    );\r\n  }\r\n\r\n  private get isAnswerVisible() {\r\n    return this.props.getGeneratedAnswerState()?.isVisible;\r\n  }\r\n\r\n  private get toggleTooltip() {\r\n    const key = this.isAnswerVisible\r\n      ? 'generated-answer-toggle-on'\r\n      : 'generated-answer-toggle-off';\r\n    return this.props.getBindings().i18n.t(key);\r\n  }\r\n\r\n  private get hasClipboard() {\r\n    return !!navigator?.clipboard?.writeText;\r\n  }\r\n\r\n  private get copyToClipboardTooltip() {\r\n    if (this.props.getCopyError()) {\r\n      return this.props.getBindings().i18n.t('failed-to-copy-generated-answer');\r\n    }\r\n\r\n    return !this.props.getCopied()\r\n      ? this.props.getBindings().i18n.t('copy-generated-answer')\r\n      : this.props.getBindings().i18n.t('generated-answer-copied');\r\n  }\r\n\r\n  private async copyToClipboard(answer: string) {\r\n    try {\r\n      await navigator.clipboard.writeText(answer);\r\n      this.props.setCopied(true);\r\n      this.props.getGeneratedAnswer()?.logCopyToClipboard();\r\n    } catch (error) {\r\n      this.props.setCopyError(true);\r\n      this.props\r\n        .getBindings()\r\n        .engine.logger.error(`Failed to copy to clipboard: ${error}`);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.props.setCopied(false);\r\n      this.props.setCopyError(false);\r\n    }, 2000);\r\n  }\r\n\r\n  private clickOnShowButton() {\r\n    if (this.props.getGeneratedAnswerState()?.expanded) {\r\n      this.props.getGeneratedAnswer()?.collapse();\r\n    } else {\r\n      this.props.getGeneratedAnswer()?.expand();\r\n    }\r\n  }\r\n\r\n  private getCitation(citation: GeneratedAnswerCitation) {\r\n    const {title} = citation;\r\n    const {i18n} = this.props.getBindings();\r\n\r\n    return title.trim() !== ''\r\n      ? citation\r\n      : {...citation, title: i18n.t('no-title')};\r\n  }\r\n\r\n  private renderCitations() {\r\n    const {\r\n      getGeneratedAnswerState,\r\n      buildInteractiveCitation,\r\n      getGeneratedAnswer,\r\n    } = this.props;\r\n    const {citations} = getGeneratedAnswerState() ?? {};\r\n    const {logCitationHover} = getGeneratedAnswer() ?? {};\r\n\r\n    return citations?.map(\r\n      (citation: GeneratedAnswerCitation, index: number) => {\r\n        const interactiveCitation = buildInteractiveCitation({\r\n          options: {\r\n            citation,\r\n          },\r\n        });\r\n        return (\r\n          <li key={citation.id} class=\"max-w-full\">\r\n            <atomic-citation\r\n              citation={this.getCitation(citation)}\r\n              index={index}\r\n              sendHoverEndEvent={(citationHoverTimeMs: number) => {\r\n                logCitationHover?.(citation.id, citationHoverTimeMs);\r\n              }}\r\n              interactiveCitation={interactiveCitation}\r\n              exportparts=\"citation,citation-popover\"\r\n            />\r\n          </li>\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  private renderFeedbackAndCopyButtons() {\r\n    const {\r\n      getGeneratedAnswerState,\r\n      getBindings,\r\n      getGeneratedAnswer,\r\n      getCopied,\r\n      getCopyError,\r\n    } = this.props;\r\n    const {i18n} = getBindings();\r\n    const {liked, disliked, answer, isStreaming} =\r\n      getGeneratedAnswerState() ?? {};\r\n\r\n    const containerClasses = [\r\n      'feedback-buttons',\r\n      'flex',\r\n      'h-9',\r\n      'absolute',\r\n      'top-6',\r\n      'shrink-0',\r\n      'gap-2',\r\n      this.props.withToggle ? 'right-20' : 'right-6',\r\n    ].join(' ');\r\n\r\n    if (isStreaming) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div class={containerClasses}>\r\n        <FeedbackButton\r\n          title={i18n.t('this-answer-was-helpful')}\r\n          variant=\"like\"\r\n          active={!!liked}\r\n          onClick={() => getGeneratedAnswer()?.like()}\r\n        />\r\n        <FeedbackButton\r\n          title={i18n.t('this-answer-was-not-helpful')}\r\n          variant=\"dislike\"\r\n          active={!!disliked}\r\n          onClick={() => this.clickDislike()}\r\n        />\r\n        {this.hasClipboard ? (\r\n          <CopyButton\r\n            title={this.copyToClipboardTooltip}\r\n            isCopied={getCopied()}\r\n            error={getCopyError()}\r\n            onClick={async () => {\r\n              if (answer) {\r\n                await this.copyToClipboard(answer);\r\n              }\r\n            }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private clickDislike() {\r\n    if (\r\n      this.modalRef &&\r\n      !this.props.getGeneratedAnswerState()?.feedbackSubmitted\r\n    ) {\r\n      this.modalRef.isOpen = true;\r\n    }\r\n    this.props.getGeneratedAnswer()?.dislike();\r\n  }\r\n\r\n  private onChangeAnswerStyle(answerStyle: GeneratedAnswerStyle) {\r\n    if (\r\n      this.props.getGeneratedAnswerState()?.responseFormat.answerStyle !==\r\n      answerStyle\r\n    ) {\r\n      this.props.getGeneratedAnswer()?.rephrase({\r\n        ...this.props.getGeneratedAnswerState()?.responseFormat,\r\n        answerStyle,\r\n      });\r\n    }\r\n  }\r\n\r\n  private renderRephraseButtons() {\r\n    const {getGeneratedAnswerState, getBindings} = this.props;\r\n    const {i18n} = getBindings();\r\n    const {isStreaming, responseFormat} = getGeneratedAnswerState() ?? {};\r\n    const {answerStyle} = responseFormat ?? {};\r\n\r\n    if (isStreaming) {\r\n      return null;\r\n    }\r\n    return (\r\n      <RephraseButtons\r\n        answerStyle={answerStyle ?? 'default'}\r\n        i18n={i18n}\r\n        onChange={(answerStyle) => this.onChangeAnswerStyle(answerStyle)}\r\n      />\r\n    );\r\n  }\r\n\r\n  private renderDisclaimer() {\r\n    const {getGeneratedAnswerState, getBindings} = this.props;\r\n    const {i18n} = getBindings();\r\n    const {isStreaming} = getGeneratedAnswerState() ?? {};\r\n\r\n    if (isStreaming) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div class=\"text-neutral-dark text-xs\">\r\n        <slot name=\"disclaimer\" slot=\"disclaimer\">\r\n          {i18n.t('generated-answer-disclaimer')}\r\n        </slot>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderShowButton() {\r\n    const {getGeneratedAnswerState, getBindings, collapsible} = this.props;\r\n    const {i18n} = getBindings();\r\n    const {expanded, isStreaming} = getGeneratedAnswerState() ?? {};\r\n    const canRender = collapsible && !isStreaming;\r\n\r\n    if (!canRender) {\r\n      return null;\r\n    }\r\n    return (\r\n      <ShowButton\r\n        i18n={i18n}\r\n        onClick={() => this.clickOnShowButton()}\r\n        isCollapsed={!expanded}\r\n      ></ShowButton>\r\n    );\r\n  }\r\n\r\n  private renderGeneratingAnswerLabel() {\r\n    const {getGeneratedAnswerState, getBindings, collapsible} = this.props;\r\n    const {i18n} = getBindings();\r\n    const {isStreaming} = getGeneratedAnswerState() ?? {};\r\n\r\n    const canRender = collapsible && isStreaming;\r\n\r\n    if (!canRender) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div\r\n        part=\"is-generating\"\r\n        class=\"hidden text-primary font-light text-base\"\r\n      >\r\n        {i18n.t('generating-answer')}...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderContent() {\r\n    const {getGeneratedAnswerState, getBindings, getGeneratedAnswer} =\r\n      this.props;\r\n    const {i18n} = getBindings();\r\n    const {isStreaming, answer, citations, answerContentFormat} =\r\n      getGeneratedAnswerState() ?? {};\r\n\r\n    return (\r\n      <div part=\"generated-content\">\r\n        <div class=\"flex items-center\">\r\n          <Heading\r\n            level={0}\r\n            part=\"header-label\"\r\n            class=\"text-bg-primary font-medium inline-block rounded-md py-2 px-2.5\"\r\n          >\r\n            {i18n.t('generated-answer-title')}\r\n          </Heading>\r\n          <div class=\"flex h-9 items-center ml-auto\">\r\n            <Switch\r\n              part=\"toggle\"\r\n              checked={this.isAnswerVisible}\r\n              onToggle={(checked) => {\r\n                checked\r\n                  ? getGeneratedAnswer()?.show()\r\n                  : getGeneratedAnswer()?.hide();\r\n              }}\r\n              ariaLabel={i18n.t('generated-answer-title')}\r\n              title={this.toggleTooltip}\r\n              withToggle={this.props.withToggle}\r\n            ></Switch>\r\n          </div>\r\n        </div>\r\n        {this.hasRetryableError && this.isAnswerVisible ? (\r\n          <RetryPrompt\r\n            onClick={() => getGeneratedAnswer()?.retry()}\r\n            buttonLabel={i18n.t('retry')}\r\n            message={i18n.t('retry-stream-message')}\r\n          />\r\n        ) : null}\r\n\r\n        {!this.hasRetryableError && this.isAnswerVisible ? (\r\n          <GeneratedContentContainer\r\n            answer={answer}\r\n            answerContentFormat={answerContentFormat}\r\n            isStreaming={!!isStreaming}\r\n          >\r\n            {this.renderFeedbackAndCopyButtons()}\r\n            <SourceCitations\r\n              label={i18n.t('citations')}\r\n              isVisible={!!citations?.length}\r\n            >\r\n              {this.renderCitations()}\r\n            </SourceCitations>\r\n\r\n            {this.renderRephraseButtons()}\r\n          </GeneratedContentContainer>\r\n        ) : null}\r\n\r\n        {!this.hasRetryableError && this.isAnswerVisible && (\r\n          <div part=\"generated-answer-footer\" class=\"flex justify-end mt-6\">\r\n            {this.renderGeneratingAnswerLabel()}\r\n            {this.renderShowButton()}\r\n            {this.renderDisclaimer()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.shouldBeHidden) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div>\r\n        <aside class={`mx-auto ${this.contentClasses}`} part=\"container\">\r\n          <article>{this.renderContent()}</article>\r\n        </aside>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}