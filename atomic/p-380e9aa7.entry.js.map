{"version":3,"names":["atomicRatingFacetCss","AtomicRatingFacetStyle0","AtomicRatingFacet","this","label","numberOfIntervals","maxValueInIndex","minValueInIndex","displayValuesAs","icon","Star","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","validateProps","Schema","StringValue","constrainTo","validate","initialize","searchStatus","buildSearchStatus","bindings","engine","initializeFacet","initializeDependenciesManager","options","facetId","field","numberOfValues","currentValues","generateCurrentValues","sortCriteria","generateAutomaticRanges","facet","buildNumericFacet","state","facetInfo","i18n","t","element","host","isHidden","store","registerFacet","format","value","formatFacetValue","content","ratingContent","initializePopover","hasValues","valuesToRender","length","numberOfActiveValues","numberOfSelectedValues","disconnectedCallback","isConnected","_a","dependenciesManager","stopWatching","searchStatusState","hasError","enabled","scaleFactor","facetState","values","filter","buildFacetConditionsManager","conditions","parseDependsOn","i","push","buildNumericRange","start","Math","round","end","endInclusive","facetValue","count","max","h","Rating","numberOfTotalIcons","numberOfActiveIcons","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","onToggleCollapse","headerRef","el","setTarget","renderValue","onClick","displayValue","isSelected","FacetValueCheckbox","numberOfResults","FacetValueLink","renderValuesContainer","children","FacetValuesGroup","class","part","renderValues","map","toggleSingleSelect","toggleSelect","render","Hidden","firstSearchExecuted","FacetPlaceholder","FacetContainer","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-rating-facet/atomic-rating-facet.pcss?tag=atomic-rating-facet&encapsulation=shadow","src/components/search/facets/atomic-rating-facet/atomic-rating-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/atomic-rating/atomic-rating.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  NumericFacet,\n  buildNumericFacet,\n  NumericFacetState,\n  NumericFacetOptions,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  NumericFacetValue,\n  NumericRangeRequest,\n  buildNumericRange,\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\nimport Star from '../../../../images/star.svg';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {Rating} from '../../../common/atomic-rating/atomic-rating';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/facet-value-link';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.\n * It only supports numeric fields.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and toggles to expand or collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-count - The facet value count, common for all displays.\n * @part value-rating - The facet value rating, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n */\n@Component({\n  tag: 'atomic-rating-facet',\n  styleUrl: 'atomic-rating-facet.pcss',\n  shadow: true,\n})\nexport class AtomicRatingFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: NumericFacet;\n  private dependenciesManager?: FacetConditionsManager;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.\n   */\n  @Prop({reflect: true}) public numberOfIntervals = 5;\n  /**\n   * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.\n   */\n  @Prop({reflect: true}) public maxValueInIndex = this.numberOfIntervals;\n  /**\n   * The minimum value of the field.\n   */\n  @Prop({reflect: true}) public minValueInIndex = 1;\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * The SVG icon to use to display the rating.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   *\n   * When using a custom icon, at least part of your icon should have the color set to `fill=\"currentColor\"`.\n   * This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\n   *\n   * - `--atomic-rating-icon-active-color`\n   * - `--atomic-rating-icon-inactive-color`\n\n   */\n  @Prop({reflect: true}) public icon = Star;\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-rating-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-rating-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-rating-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-rating-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n    });\n  }\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.initializeFacet();\n    this.initializeDependenciesManager();\n  }\n\n  private initializeFacet() {\n    const options: NumericFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfIntervals,\n      currentValues: this.generateCurrentValues(),\n      sortCriteria: 'descending',\n      generateAutomaticRanges: false,\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n    this.facet = buildNumericFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n      content: (value) => this.ratingContent(value),\n    });\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => !!this.valuesToRender.length,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return (\n      this.searchStatusState.hasError ||\n      !this.facet.state.enabled ||\n      !this.valuesToRender.length\n    );\n  }\n\n  private get scaleFactor() {\n    return this.maxValueInIndex / this.numberOfIntervals;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facetState.values.filter(({state}) => state === 'selected')\n      .length;\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private generateCurrentValues() {\n    const currentValues: NumericRangeRequest[] = [];\n    for (let i = this.minValueInIndex; i <= this.numberOfIntervals; i++) {\n      currentValues.push(\n        buildNumericRange({\n          start: Math.round(i * this.scaleFactor * 100) / 100,\n          end: Math.round((i + 1) * this.scaleFactor * 100) / 100,\n          endInclusive: false,\n        })\n      );\n    }\n    return currentValues;\n  }\n\n  private formatFacetValue(facetValue: NumericFacetValue) {\n    if (facetValue.start === this.maxValueInIndex) {\n      return this.bindings.i18n.t('stars-only', {count: facetValue.start});\n    }\n    return this.bindings.i18n.t('stars', {\n      count: facetValue.start,\n      max: this.maxValueInIndex,\n    });\n  }\n\n  private ratingContent(facetValue: NumericFacetValue) {\n    return (\n      <Rating\n        i18n={this.bindings.i18n}\n        numberOfTotalIcons={this.maxValueInIndex}\n        numberOfActiveIcons={facetValue.start}\n        icon={this.icon}\n      ></Rating>\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={this.headingLevel}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    switch (this.displayValuesAs) {\n      case 'checkbox':\n        return (\n          <FacetValueCheckbox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n          >\n            {this.ratingContent(facetValue)}\n          </FacetValueCheckbox>\n        );\n      case 'link':\n        return (\n          <FacetValueLink\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n          >\n            {this.ratingContent(facetValue)}\n          </FacetValueLink>\n        );\n    }\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) =>\n        this.renderValue(value, () =>\n          this.displayValuesAs === 'link'\n            ? this.facet.toggleSingleSelect(value)\n            : this.facet.toggleSelect(value)\n        )\n      )\n    );\n  }\n\n  private get valuesToRender() {\n    return this.facet.state.values.filter(\n      (value) => value.numberOfResults || value.state !== 'idle'\n    );\n  }\n\n  public render() {\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatusState.firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfIntervals}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.valuesToRender.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && this.renderValues()}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"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"}