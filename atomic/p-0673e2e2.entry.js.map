{"version":3,"names":["atomicResultListCss","AtomicResultListStyle0","AtomicResultList","this","loadingFlag","randomID","resultTemplateRegistered","templateHasError","display","density","gridCellLinkTarget","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","focusTarget","nextNewResultTarget","FocusTargetController","initialize","host","innerHTML","includes","console","warn","resultList","buildResultList","bindings","engine","resultsPerPage","buildResultsPerPage","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","resultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","store","render","updateBreakpoints","listClasses","computeListDisplayClasses","h","ItemListGuard","key","hasError","hasTemplate","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","isAppLoaded","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","renderAsTable","renderAsGrid","renderAsList","getPropsForAtomicResult","result","interactiveResult","buildInteractiveResult","options","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","getItemListDisplayClasses","map","i","propsForAtomicResult","DisplayGrid","item","setRef","element","setNewResultRef","firstItem","propsForTableColumns","templateContentForFirstItem","DisplayTable","logger","DisplayTableRow","rowIndex","DisplayTableData","renderItem","ref","part","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/result-lists/atomic-result-list/atomic-result-list.pcss?tag=atomic-result-list&encapsulation=shadow","src/components/search/result-lists/atomic-result-list/atomic-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\n@import '../../../common/item-list/styles/table-display.pcss';\n@import '../../../common/item-list/styles/list-display.pcss';\n@import '../../../common/item-list/styles/grid-display.pcss';\n","import {\n  ResultList,\n  ResultListState,\n  buildResultList,\n  ResultsPerPageState,\n  ResultsPerPage,\n  buildResultsPerPage,\n  buildInteractiveResult,\n  Result,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Method, h} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\nimport {DisplayGrid} from '../../../common/item-list/display-grid';\nimport {\n  DisplayTableData,\n  DisplayTable,\n  DisplayTableRow,\n} from '../../../common/item-list/display-table';\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\nimport {\n  ItemListCommon,\n  ItemRenderingFunction,\n} from '../../../common/item-list/item-list-common';\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n  ItemTarget,\n  getItemListDisplayClasses,\n} from '../../../common/layout/display-options';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.\n *\n * @part result-list - The element containing every result of a result list\n * @part outline - The element displaying an outline or a divider around a result\n * @part result-list-grid-clickable-container - The parent of the result & the clickable link encompassing it, when results are displayed as a grid\n * @part result-list-grid-clickable - The clickable link encompassing the result when results are displayed as a grid\n * @part result-table - The element of the result table containing a heading and a body\n * @part result-table-heading - The element containing the row of cells in the result table's heading\n * @part result-table-heading-row - The element containing cells of the result table's heading\n * @part result-table-heading-cell - The element representing a cell of the result table's heading\n * @part result-table-body - The element containing the rows of the result table's body\n * @part result-table-row - The element containing the cells of a row in the result table's body\n * @part result-table-row-odd - The element containing the cells of an odd row in the result table's body\n * @part result-table-row-even - The element containing the cells of an even row in the result table's body\n * @part result-table-cell - The element representing a cell of the result table's body\n */\n@Component({\n  tag: 'atomic-result-list',\n  styleUrl: 'atomic-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicResultList implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public resultList!: ResultList;\n  public resultsPerPage!: ResultsPerPage;\n  private loadingFlag = randomID('firstResultLoaded-');\n  private itemRenderingFunction: ItemRenderingFunction;\n  private nextNewResultTarget?: FocusTargetController;\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private resultListCommon!: ItemListCommon;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultList')\n  @State()\n  private resultListState!: ResultListState;\n  @BindStateToController('resultsPerPage')\n  @State()\n  private resultsPerPageState!: ResultsPerPageState;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  /**\n   * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.\n   */\n  @Prop({reflect: true}) public display: ItemDisplayLayout = 'list';\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) public density: ItemDisplayDensity = 'normal';\n\n  /**\n   * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)).\n   * This property is only leveraged when `display` is `grid`.\n   * @defaultValue `_self`\n   */\n  @Prop() gridCellLinkTarget: ItemTarget = '_self';\n\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true, mutable: true})\n  public imageSize: ItemDisplayImageSize = 'icon';\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n\n  public get focusTarget() {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public initialize() {\n    if (this.host.innerHTML.includes('<atomic-result-children')) {\n      console.warn(\n        'Folded results will not render any children for the \"atomic-result-list\". Please use \"atomic-folded-result-list\" instead.'\n      );\n    }\n    this.resultList = buildResultList(this.bindings.engine);\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.resultListCommon = new ItemListCommon({\n      engineSubscribe: this.bindings.engine.subscribe,\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\n      getIsLoading: () => this.resultListState.isLoading,\n      host: this.host,\n      loadingFlag: this.loadingFlag,\n      nextNewItemTarget: this.focusTarget,\n      store: this.bindings.store,\n    });\n  }\n\n  public render() {\n    this.resultListCommon.updateBreakpoints();\n    const listClasses = this.computeListDisplayClasses();\n\n    return (\n      <ItemListGuard\n        hasError={this.resultListState.hasError}\n        hasTemplate={this.resultTemplateRegistered}\n        templateHasError={this.itemTemplateProvider.hasError}\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\n        hasItems={this.resultListState.hasResults}\n      >\n        <DisplayWrapper display={this.display} listClasses={listClasses}>\n          <ResultsPlaceholdersGuard\n            density={this.density}\n            display={this.display}\n            imageSize={this.imageSize}\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\n          ></ResultsPlaceholdersGuard>\n          <ItemDisplayGuard\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\n            hasItems={this.resultListState.hasResults}\n          >\n            {this.display === 'table'\n              ? this.renderAsTable()\n              : this.display === 'grid'\n                ? this.renderAsGrid()\n                : this.renderAsList()}\n          </ItemDisplayGuard>\n        </DisplayWrapper>\n      </ItemListGuard>\n    );\n  }\n\n  private getPropsForAtomicResult(result: Result) {\n    return {\n      interactiveResult: buildInteractiveResult(this.bindings.engine, {\n        options: {result},\n      }),\n      result,\n      renderingFunction: this.itemRenderingFunction,\n      loadingFlag: this.loadingFlag,\n      key: this.resultListCommon.getResultId(\n        result.uniqueId,\n        this.resultListState.searchResponseId,\n        this.density,\n        this.imageSize\n      ),\n      content: this.itemTemplateProvider.getTemplateContent(result),\n      store: this.bindings.store,\n      density: this.density,\n      imageSize: this.imageSize,\n      display: this.display,\n    };\n  }\n\n  private computeListDisplayClasses() {\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\n\n    return getItemListDisplayClasses(\n      this.display,\n      this.density,\n      this.imageSize,\n      this.resultListState.firstSearchExecuted &&\n        this.resultListState.isLoading,\n      displayPlaceholders\n    );\n  }\n\n  private renderAsGrid() {\n    return this.resultListState.results.map((result, i) => {\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\n      return (\n        <DisplayGrid\n          item={result}\n          {...propsForAtomicResult.interactiveResult}\n          setRef={(element) =>\n            element && this.resultListCommon.setNewResultRef(element, i)\n          }\n        >\n          <atomic-result {...this} {...propsForAtomicResult}></atomic-result>\n        </DisplayGrid>\n      );\n    });\n  }\n\n  private renderAsTable() {\n    if (!this.resultListState.hasResults) {\n      return;\n    }\n    const listClasses = this.computeListDisplayClasses();\n    const firstItem = this.resultListState.results[0];\n\n    const propsForTableColumns = {\n      firstItem,\n      templateContentForFirstItem:\n        this.itemTemplateProvider.getTemplateContent(firstItem),\n    };\n\n    return (\n      <DisplayTable\n        {...propsForTableColumns}\n        listClasses={listClasses}\n        logger={this.bindings.engine.logger}\n        itemRenderingFunction={this.itemRenderingFunction}\n        host={this.host}\n      >\n        {this.resultListState.results.map((result, i) => {\n          const propsForAtomicResult = this.getPropsForAtomicResult(result);\n          return (\n            <DisplayTableRow\n              {...propsForAtomicResult}\n              rowIndex={i}\n              setRef={(element) =>\n                element && this.resultListCommon.setNewResultRef(element, i)\n              }\n            >\n              <DisplayTableData\n                {...propsForTableColumns}\n                {...propsForAtomicResult}\n                renderItem={(content) => {\n                  return (\n                    <atomic-result\n                      {...propsForAtomicResult}\n                      content={content}\n                    ></atomic-result>\n                  );\n                }}\n              ></DisplayTableData>\n            </DisplayTableRow>\n          );\n        })}\n      </DisplayTable>\n    );\n  }\n\n  private renderAsList() {\n    return this.resultListState.results.map((result, i) => {\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\n      return (\n        <atomic-result\n          {...propsForAtomicResult}\n          ref={(element) =>\n            element && this.resultListCommon.setNewResultRef(element, i)\n          }\n          part=\"outline\"\n        ></atomic-result>\n      );\n    });\n  }\n}\n"],"mappings":"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"}