{"file":"atomic-commerce-pager.entry.cjs.js","mappings":"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","names":["ArrowLeftIcon","ArrowRightIcon","randomID","buildProductListing","buildSearch","h","PagerGuard","PagerNavigation","PagerPreviousButton","PagerPageButtons","PagerPageButton","PagerNextButton","FocusTargetController","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-pager/commerce-pager-utils.ts","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.pcss?tag=atomic-commerce-pager&encapsulation=shadow","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.tsx"],"sourcesContent":["const minimumPage = 0;\n\ninterface Range {\n  start: number;\n  end: number;\n}\n\nexport function getCurrentPagesRange(\n  page: number,\n  desiredNumberOfPages: number,\n  maxPage: number\n): number[] {\n  let range = buildRange(page, desiredNumberOfPages);\n  range = shiftRightIfNeeded(range);\n  range = shiftLeftIfNeeded(range, maxPage);\n  return buildCurrentPages(range);\n}\n\nfunction buildRange(page: number, desiredNumberOfPages: number): Range {\n  const isEven = desiredNumberOfPages % 2 === 0;\n  const leftCapacity = Math.floor(desiredNumberOfPages / 2);\n  const rightCapacity = isEven ? leftCapacity - 1 : leftCapacity;\n\n  const start = page - leftCapacity;\n  const end = page + rightCapacity;\n\n  return {start, end};\n}\n\nfunction shiftRightIfNeeded(range: Range) {\n  const leftExcess = Math.max(minimumPage - range.start, 0);\n  const start = range.start + leftExcess;\n  const end = range.end + leftExcess;\n\n  return {start, end};\n}\n\nfunction shiftLeftIfNeeded(range: Range, maxPage: number) {\n  const rightExcess = Math.max(range.end - maxPage, 0);\n  const start = Math.max(range.start - rightExcess, minimumPage);\n  const end = range.end - rightExcess;\n\n  return {start, end};\n}\n\nfunction buildCurrentPages(range: Range) {\n  const currentPages: number[] = [];\n\n  for (let counter = range.start; counter <= range.end; ++counter) {\n    currentPages.push(counter);\n  }\n\n  return currentPages;\n}\n","@import '../../../global/global.pcss';\n","import {\n  Pagination,\n  PaginationState,\n  ProductListing,\n  Search,\n  buildProductListing,\n  buildSearch,\n} from '@coveo/headless/commerce';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerGuard} from '../../common/pager/pager-guard';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\nimport {getCurrentPagesRange} from './commerce-pager-utils';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n *\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-pager',\n  styleUrl: 'atomic-commerce-pager.pcss',\n  shadow: true,\n})\nexport class AtomicCommercePager\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  public pager!: Pagination;\n  public listingOrSearch!: ProductListing | Search;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PaginationState;\n\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon = ArrowRightIcon;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-commerce-pager-');\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.listingOrSearch = buildProductListing(this.bindings.engine);\n    } else {\n      this.listingOrSearch = buildSearch(this.bindings.engine);\n    }\n    this.pager = this.listingOrSearch.pagination();\n  }\n\n  public render() {\n    const pagesRange = getCurrentPagesRange(\n      this.pagerState.page,\n      this.numberOfPages,\n      this.pagerState.totalPages - 1\n    );\n\n    return (\n      <PagerGuard\n        hasError={false}\n        hasResults={this.pagerState.totalPages > 1}\n        isAppLoaded={this.bindings.store.isAppLoaded()}\n      >\n        <PagerNavigation label={this.bindings.i18n.t('pagination')}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={this.pagerState.page === 0}\n            ariaLabel={this.bindings.i18n.t('previous')}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons>\n            {pagesRange.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={pageNumber === this.pagerState.page}\n                  ariaLabel={this.bindings.i18n.t('page-number', {\n                    pageNumber,\n                  })}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  ref={(el) => {\n                    const isSelected = pageNumber === this.pagerState.page;\n                    if (isSelected && el) {\n                      this.focusTarget.setTarget(el);\n                    }\n                  }}\n                  text={(pageNumber + 1).toLocaleString(\n                    this.bindings.i18n.language\n                  )}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={this.pagerState.page >= this.pagerState.totalPages}\n            ariaLabel={this.bindings.i18n.t('next')}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  private get focusTarget() {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n    return this.activePage;\n  }\n}\n"],"version":3}