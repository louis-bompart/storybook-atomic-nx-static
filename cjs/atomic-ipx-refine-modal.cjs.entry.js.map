{"file":"atomic-ipx-refine-modal.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,6muCAA6muC,CAAC;AAC9ouC,mCAAe,uBAAuB;;;;;;;;;;;;MC6BzB,oBAAoB;;;QAoBO,WAAM,GAAG,KAAK,CAAC;;;;;;;QAQvB,wBAAmB,GAAG,CAAC,CAAC;;;;;;sBARP,KAAK;mCAQA,CAAC;;IAMrD,YAAY,CAAC,MAAe;QAC1B,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE;gBAClD,IAAI,CAAC,IAAI,CAAC,MAAM,CACdA,wCAAsB,CACpB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,EACtC,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC/B,CACF,CAAC;aACH;SACF;KACF;IAEM,UAAU;QACf,IAAI,CAAC,iBAAiB,GAAGC,eAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,GAAGC,eAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC7D;IAEO,YAAY;QAClB,QACEC,iBAAK,KAAK,EAAC,kCAAkC,IAC1C,IAAI,CAAC,sBAAsB,CAAC,cAAc,KACzCA,QAACC,aAAM,IACL,OAAO,EAAE,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,EACnD,KAAK,EAAC,cAAc,EACpB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,CAAC,EAC/C,KAAK,EAAC,WAAW,GACT,CACX,CACG,EACN;KACH;IAEO,UAAU;QAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,MAAM,EAAE;YAClD,OAAOD,QAACE,0BAAM,OAAU,CAAC;SAC1B;QAED,QACEF,mBAAO,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,4CAA4C,IAClE,IAAI,CAAC,YAAY,EAAE,EACpBA,kBAAM,IAAI,EAAC,QAAQ,GAAQ,CACrB,EACR;KACH;IAEM,MAAM;QACX,QACEA,QAACG,UAAI,uDACHH,QAACI,mCAAiB,qDAChB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,EACpC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,EACzC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,EACtC,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,QAAQ,EAAC,SAAS,EAClB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,IAEpC,IAAI,CAAC,UAAU,EAAE,CACA,CACf,EACP;KACH;IAEM,gBAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;KAC9B;;;;;;AAtG4B;IAA5BC,sCAAkB,EAAE;sDAA4B;AAK1C;IAFNC,yCAAqB,CAAC,cAAc,CAAC;+DAEO;AAItC;IAFNA,yCAAqB,CAAC,mBAAmB,CAAC;oEAEY;;;;;","names":["getClonedFacetElements","buildBreadcrumbManager","buildQuerySummary","h","Button","Hidden","Host","RefineModalCommon","InitializeBindings","BindStateToController"],"sources":["src/components/ipx/atomic-ipx-refine-modal/atomic-ipx-refine-modal.pcss?tag=atomic-ipx-refine-modal&encapsulation=shadow","src/components/ipx/atomic-ipx-refine-modal/atomic-ipx-refine-modal.tsx"],"sourcesContent":["@import '../../common/refine-modal/refine-modal-common.pcss';\r\n\r\n:host::part(container) {\r\n  @apply rounded;\r\n}\r\n","import {\r\n  BreadcrumbManager,\r\n  BreadcrumbManagerState,\r\n  buildBreadcrumbManager,\r\n  buildQuerySummary,\r\n  QuerySummary,\r\n  QuerySummaryState,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Button} from '../../common/button';\r\nimport {Hidden} from '../../common/hidden';\r\nimport {\r\n  getClonedFacetElements,\r\n  RefineModalCommon,\r\n} from '../../common/refine-modal/refine-modal-common';\r\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-ipx-refine-modal',\r\n  styleUrl: 'atomic-ipx-refine-modal.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicIPXRefineModal implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @Element() public host!: HTMLElement;\r\n\r\n  @BindStateToController('querySummary')\r\n  @State()\r\n  public querySummaryState!: QuerySummaryState;\r\n\r\n  @BindStateToController('breadcrumbManager')\r\n  @State()\r\n  public breadcrumbManagerState!: BreadcrumbManagerState;\r\n\r\n  @State()\r\n  public error!: Error;\r\n\r\n  @State()\r\n  public interfaceDimensions?: DOMRect;\r\n\r\n  @Prop({mutable: true}) openButton?: HTMLElement;\r\n\r\n  @Prop({reflect: true, mutable: true}) isOpen = false;\r\n\r\n  /**\r\n   * The number of expanded facets inside the refine modal.\r\n   * Remaining facets are automatically collapsed.\r\n   *\r\n   * Using the value `0` collapses all facets.\r\n   */\r\n  @Prop({reflect: true}) public collapseFacetsAfter = 0;\r\n\r\n  private breadcrumbManager!: BreadcrumbManager;\r\n  public querySummary!: QuerySummary;\r\n\r\n  @Watch('isOpen')\r\n  watchEnabled(isOpen: boolean) {\r\n    if (isOpen) {\r\n      if (!this.host.querySelector('div[slot=\"facets\"]')) {\r\n        this.host.append(\r\n          getClonedFacetElements(\r\n            this.bindings.store.getFacetElements(),\r\n            this.collapseFacetsAfter,\r\n            this.bindings.interfaceElement\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public initialize() {\r\n    this.breadcrumbManager = buildBreadcrumbManager(this.bindings.engine);\r\n    this.querySummary = buildQuerySummary(this.bindings.engine);\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <div class=\"w-full flex justify-between mb-3\">\r\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\r\n          <Button\r\n            onClick={() => this.breadcrumbManager.deselectAll()}\r\n            style=\"text-primary\"\r\n            text={this.bindings.i18n.t('clear-all-filters')}\r\n            class=\"px-2 py-1\"\r\n          ></Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderBody() {\r\n    if (!this.bindings.store.getFacetElements().length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <aside slot=\"body\" class=\"flex flex-col w-full adjust-for-scroll-bar\">\r\n        {this.renderHeader()}\r\n        <slot name=\"facets\"></slot>\r\n      </aside>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Host>\r\n        <RefineModalCommon\r\n          bindings={this.bindings}\r\n          host={this.host}\r\n          isOpen={this.isOpen}\r\n          onClose={() => (this.isOpen = false)}\r\n          querySummaryState={this.querySummaryState}\r\n          title={this.bindings.i18n.t('filters')}\r\n          openButton={this.openButton}\r\n          boundary=\"element\"\r\n          scope={this.bindings.interfaceElement}\r\n        >\r\n          {this.renderBody()}\r\n        </RefineModalCommon>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    this.host.style.display = '';\r\n  }\r\n}\r\n"],"version":3}