{"version":3,"names":["AtomicResultNumber","this","formatter","defaultNumberFormatter","valueToDisplay","setFormat","event","preventDefault","stopPropagation","detail","parseValue","value","ResultTemplatesHelpers","getResultProperty","result","field","valueAsNumber","parseFloat","Number","isNaN","error","Error","formatValue","bindings","i18n","languages","toString","updateValueToDisplay","componentWillRender","render","host","remove","__decorate","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-number/atomic-result-number.tsx"],"sourcesContent":["import {Result, ResultTemplatesHelpers} from '@coveo/headless';\nimport {Component, Prop, Element, State, Listen} from '@stencil/core';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-number` component renders the value of a number result field.\n *\n * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.\n */\n@Component({\n  tag: 'atomic-result-number',\n  shadow: false,\n})\nexport class AtomicResultNumber {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The field that the component should use.\n   * The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first.\n   * Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.\n   */\n  @Prop({reflect: true}) field!: string;\n\n  @State() formatter: NumberFormatter = defaultNumberFormatter;\n\n  @State() valueToDisplay: string | null = null;\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  private parseValue() {\n    const value = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      this.field\n    );\n    if (value === null) {\n      return null;\n    }\n    const valueAsNumber = parseFloat(`${value}`);\n    if (Number.isNaN(valueAsNumber)) {\n      this.error = new Error(\n        `Could not parse \"${value}\" from field \"${this.field}\" as a number.`\n      );\n      return null;\n    }\n    return valueAsNumber;\n  }\n\n  private formatValue(value: number) {\n    try {\n      return this.formatter(value, this.bindings.i18n.languages as string[]);\n    } catch (error) {\n      this.error = error as Error;\n      return value.toString();\n    }\n  }\n\n  private updateValueToDisplay() {\n    const value = this.parseValue();\n    if (value !== null) {\n      this.valueToDisplay = this.formatValue(value);\n    }\n  }\n\n  componentWillRender() {\n    this.updateValueToDisplay();\n  }\n\n  public render() {\n    if (this.valueToDisplay === null) {\n      this.host.remove();\n      return;\n    }\n    return this.valueToDisplay;\n  }\n}\n"],"mappings":"4oBAmBaA,EAAkB,M,yBAepBC,KAAAC,UAA6BC,EAE7BF,KAAAG,eAAgC,K,yDAFHD,E,oBAEG,I,CAGlC,SAAAE,CAAUC,GACfA,EAAMC,iBACND,EAAME,kBACNP,KAAKC,UAAYI,EAAMG,M,CAGjB,UAAAC,GACN,MAAMC,EAAQC,EAAuBC,kBACnCZ,KAAKa,OACLb,KAAKc,OAEP,GAAIJ,IAAU,KAAM,CAClB,OAAO,I,CAET,MAAMK,EAAgBC,WAAW,GAAGN,KACpC,GAAIO,OAAOC,MAAMH,GAAgB,CAC/Bf,KAAKmB,MAAQ,IAAIC,MACf,oBAAoBV,kBAAsBV,KAAKc,uBAEjD,OAAO,I,CAET,OAAOC,C,CAGD,WAAAM,CAAYX,GAClB,IACE,OAAOV,KAAKC,UAAUS,EAAOV,KAAKsB,SAASC,KAAKC,U,CAChD,MAAOL,GACPnB,KAAKmB,MAAQA,EACb,OAAOT,EAAMe,U,EAIT,oBAAAC,GACN,MAAMhB,EAAQV,KAAKS,aACnB,GAAIC,IAAU,KAAM,CAClBV,KAAKG,eAAiBH,KAAKqB,YAAYX,E,EAI3C,mBAAAiB,GACE3B,KAAK0B,sB,CAGA,MAAAE,GACL,GAAI5B,KAAKG,iBAAmB,KAAM,CAChCH,KAAK6B,KAAKC,SACV,M,CAEF,OAAO9B,KAAKG,c,6BApEe4B,EAAA,CAA5BC,K,+BACwBD,EAAA,CAAxBE,K"}