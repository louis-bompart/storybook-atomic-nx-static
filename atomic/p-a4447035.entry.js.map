{"version":3,"names":["AtomicFormatNumber","this","format","value","languages","toLocaleString","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","componentWillLoad","dispatchNumberFormatEvent","host","error","render","h","key","element"],"sources":["src/components/search/formats/atomic-format-number.tsx"],"sourcesContent":["import {Component, Element, Prop, State, h} from '@stencil/core';\nimport {\n  dispatchNumberFormatEvent,\n  NumberFormatter,\n} from '../../common/formats/format-common';\n\n/**\n * The `atomic-format-number` component is used for number formatting.\n * The numerical format of compatible parents will be set according to the properties of this component.\n */\n@Component({\n  tag: 'atomic-format-number',\n  shadow: true,\n})\nexport class AtomicFormatNumber {\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The minimum number of integer digits to use.\n   */\n  @Prop({reflect: true}) public minimumIntegerDigits?: number;\n  /**\n   * The minimum number of fraction digits to use.\n   */\n  @Prop({reflect: true}) public minimumFractionDigits?: number;\n  /**\n   * The maximum number of fraction digits to use.\n   */\n  @Prop({reflect: true}) public maximumFractionDigits?: number;\n  /**\n   * The minimum number of significant digits to use.\n   */\n  @Prop({reflect: true}) public minimumSignificantDigits?: number;\n  /**\n   * The maximum number of significant digits to use.\n   */\n  @Prop({reflect: true}) public maximumSignificantDigits?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchNumberFormatEvent(\n        (value, languages) => this.format(value, languages),\n        this.host\n      );\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private format: NumberFormatter = (value, languages) => {\n    return value.toLocaleString(languages, {\n      minimumIntegerDigits: this.minimumIntegerDigits,\n      minimumFractionDigits: this.minimumFractionDigits,\n      maximumFractionDigits: this.maximumFractionDigits,\n      minimumSignificantDigits: this.minimumSignificantDigits,\n      maximumSignificantDigits: this.maximumSignificantDigits,\n    });\n  };\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"mappings":"oHAcaA,EAAkB,M,yBAqCrBC,KAAAC,OAA0B,CAACC,EAAOC,IACjCD,EAAME,eAAeD,EAAW,CACrCE,qBAAsBL,KAAKK,qBAC3BC,sBAAuBN,KAAKM,sBAC5BC,sBAAuBP,KAAKO,sBAC5BC,yBAA0BR,KAAKQ,yBAC/BC,yBAA0BT,KAAKS,2B,mNAjBnC,iBAAAC,GACE,IACEC,GACE,CAACT,EAAOC,IAAcH,KAAKC,OAAOC,EAAOC,IACzCH,KAAKY,K,CAEP,MAAOC,GACPb,KAAKa,MAAQA,C,EAcV,MAAAC,GACL,GAAId,KAAKa,MAAO,CACd,OACEE,EAAA,0BAAAC,IAAA,2CACEC,QAASjB,KAAKY,KACdC,MAAOb,KAAKa,O"}