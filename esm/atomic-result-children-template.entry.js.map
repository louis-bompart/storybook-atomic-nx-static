{"file":"atomic-result-children-template.entry.js","mappings":";;;;;;;;;;;;;;;;;;;;MAmBa,4BAA4B;IAqBvC;;;;;;;;;QATe,eAAU,GAA8B,EAAE,CAAC;QAErB,cAAS,GAA6B,EAAE,CAAC;QAEzC,iBAAY,GAC/C,EAAE,CAAC;;0BALkD,EAAE;QAUvD,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC;YACnD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,CAAC,GAAG;gBACZ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;aAClB;YACD,YAAY,EAAE,CAAC,wBAAwB,CAAC;SACzC,CAAC,CAAC;KACJ;;;;IAMM,MAAM,WAAW;QACtB,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3E;IAEM,iBAAiB;QACtB,IAAI,CAAC,oBAAoB,CAAC,eAAe,GAAG,mBAAmB,CAC7D,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,YAAY,CAClB,CAAC;KACH;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5D;;;AAlCoC;IAApC,OAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;+DAAiD;AAEzC;IAApC,OAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;kEACxB;;;;","names":[],"sources":["src/components/search/result-templates/atomic-result-children-template/atomic-result-children-template.tsx"],"sourcesContent":["import {ResultTemplate, ResultTemplateCondition} from '@coveo/headless';\r\nimport {Component, Element, Prop, State, Method} from '@stencil/core';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {\r\n  makeMatchConditions,\r\n  ResultTemplateCommon,\r\n} from '../../../common/result-templates/result-template-common';\r\n\r\n/**\r\n * The `atomic-result-children-template` component determines the format of the child results, depending on the conditions that are defined for each template. A `template` element must be the child of an `atomic-result-children-template`, and an `atomic-result-children` must be the parent of each `atomic-result-children-template`.\r\n *\r\n * Note: Any `<script>` tags defined inside of a `<template>` element will not be executed when results are being rendered.\r\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\r\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\r\n */\r\n@Component({\r\n  tag: 'atomic-result-children-template',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultChildrenTemplate {\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * A function that must return true on results for the result template to apply.\r\n   * Set programmatically before initialization, not via attribute.\r\n   *\r\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\r\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\r\n   */\r\n  @Prop() public conditions: ResultTemplateCondition[] = [];\r\n\r\n  @MapProp({splitValues: true}) public mustMatch: Record<string, string[]> = {};\r\n\r\n  @MapProp({splitValues: true}) public mustNotMatch: Record<string, string[]> =\r\n    {};\r\n\r\n  public resultTemplateCommon: ResultTemplateCommon;\r\n\r\n  constructor() {\r\n    this.resultTemplateCommon = new ResultTemplateCommon({\r\n      host: this.host,\r\n      setError: (err) => {\r\n        this.error = err;\r\n      },\r\n      validParents: ['atomic-result-children'],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the appropriate result template based on conditions applied.\r\n   */\r\n  @Method()\r\n  public async getTemplate(): Promise<ResultTemplate<DocumentFragment> | null> {\r\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\r\n  }\r\n\r\n  public componentWillLoad() {\r\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\r\n      this.mustMatch,\r\n      this.mustNotMatch\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return this.resultTemplateCommon.renderIfError(this.error);\r\n  }\r\n}\r\n"],"version":3}