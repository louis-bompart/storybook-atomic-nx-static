{"file":"atomic-insight-folded-result-list.entry.js","mappings":"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","names":["buildInsightResultsPerPage","buildInsightFoldedResultList","buildInsightInteractiveResult"],"sources":["src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.pcss?tag=atomic-insight-folded-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\n@import '../styles/list-display.pcss';\n","import {\n  Component,\n  Element,\n  State,\n  Prop,\n  Listen,\n  Method,\n  h,\n} from '@stencil/core';\nimport {\n  InsightResultsPerPageState,\n  InsightResultsPerPage,\n  buildInsightFoldedResultList,\n  InsightFoldedResultList,\n  InsightFoldedResultListState,\n  buildInsightResultsPerPage,\n  InsightFoldedCollection,\n  buildInsightInteractiveResult,\n} from '../..';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\nimport {extractUnfoldedItem} from '../../../common/interface/item';\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\nimport {\n  ItemListCommon,\n  ItemRenderingFunction,\n} from '../../../common/item-list/item-list-common';\nimport {FoldedItemListStateContextEvent} from '../../../common/item-list/item-list-decorators';\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n  getItemListDisplayClasses,\n} from '../../../common/layout/display-options';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-folded-result-list',\n  styleUrl: 'atomic-insight-folded-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicInsightFoldedResultList\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public foldedResultList!: InsightFoldedResultList;\n  public resultsPerPage!: InsightResultsPerPage;\n  private itemRenderingFunction: ItemRenderingFunction;\n  private loadingFlag = randomID('firstResultLoaded-');\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private nextNewResultTarget?: FocusTargetController;\n  private display: ItemDisplayLayout = 'list';\n  private itemListCommon!: ItemListCommon;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('foldedResultList')\n  @State()\n  public foldedResultListState!: InsightFoldedResultListState;\n  @BindStateToController('resultsPerPage')\n  @State()\n  public resultsPerPageState!: InsightResultsPerPageState;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\n  /**\n   * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.\n   *\n   * @defaultValue `foldingcollection`\n   */\n  @Prop({reflect: true}) public collectionField?: string;\n  /**\n   * The name of the field that determines whether a certain result is a top result containing other child results within a collection.\n   *\n   * @defaultValue `foldingparent`\n   */\n  @Prop({reflect: true}) public parentField?: string;\n  /**\n   * The name of the field that uniquely identifies a result within a collection.\n   *\n   * @defaultValue `foldingchild`\n   */\n  @Prop({reflect: true}) public childField?: string;\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n\n  @Listen('atomic/resolveFoldedResultList')\n  resolveFoldedResultList(event: FoldedItemListStateContextEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.detail(this.foldedResultList);\n  }\n\n  @Listen('atomic/loadCollection')\n  loadCollection(event: CustomEvent<InsightFoldedCollection>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.foldedResultList.loadCollection(event.detail);\n  }\n\n  public initialize() {\n    try {\n      this.foldedResultList = this.initFolding();\n      this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\n    } catch (e) {\n      this.error = e as Error;\n    }\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-insight-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.itemListCommon = new ItemListCommon({\n      engineSubscribe: this.bindings.engine.subscribe,\n      getCurrentNumberOfItems: () => this.foldedResultListState.results.length,\n      getIsLoading: () => this.foldedResultListState.isLoading,\n      host: this.host,\n      loadingFlag: this.loadingFlag,\n      nextNewItemTarget: this.focusTarget,\n      store: this.bindings.store,\n    });\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  private initFolding(props = {options: {}}): InsightFoldedResultList {\n    return buildInsightFoldedResultList(this.bindings.engine, {\n      options: {\n        ...props.options,\n        folding: {\n          collectionField: this.collectionField,\n          parentField: this.parentField,\n          childField: this.childField,\n        },\n      },\n    });\n  }\n\n  public render() {\n    this.itemListCommon.updateBreakpoints();\n    const listClasses = this.computeListDisplayClasses();\n\n    return (\n      <ItemListGuard\n        firstRequestExecuted={this.foldedResultListState.firstSearchExecuted}\n        hasItems={this.foldedResultListState.hasResults}\n        hasTemplate={this.resultTemplateRegistered}\n        templateHasError={this.itemTemplateProvider.hasError}\n        hasError={this.foldedResultListState.hasError}\n      >\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\n          <ResultsPlaceholdersGuard\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\n            display={this.display}\n            density={this.density}\n            imageSize={this.imageSize}\n          ></ResultsPlaceholdersGuard>\n          <ItemDisplayGuard\n            firstRequestExecuted={\n              this.foldedResultListState.firstSearchExecuted\n            }\n            hasItems={this.foldedResultListState.hasResults}\n          >\n            {this.foldedResultListState.results.map((collection, i) => {\n              const atomicInsightResultProps =\n                this.getPropsForAtomicInsightResult(collection);\n              return (\n                <atomic-insight-result\n                  {...atomicInsightResultProps}\n                  part=\"outline\"\n                  ref={(element) =>\n                    element && this.itemListCommon.setNewResultRef(element, i)\n                  }\n                ></atomic-insight-result>\n              );\n            })}\n          </ItemDisplayGuard>\n        </DisplayWrapper>\n      </ItemListGuard>\n    );\n  }\n\n  private computeListDisplayClasses() {\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\n\n    return getItemListDisplayClasses(\n      this.display,\n      this.density,\n      this.imageSize,\n      this.foldedResultListState.firstSearchExecuted &&\n        this.foldedResultListState.isLoading,\n      displayPlaceholders\n    );\n  }\n\n  private getPropsForAtomicInsightResult(collection: InsightFoldedCollection) {\n    const result = extractUnfoldedItem(collection);\n\n    return {\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\n        options: {result},\n      }),\n      result,\n      renderingFunction: this.itemRenderingFunction,\n      loadingFlag: this.loadingFlag,\n      key: this.itemListCommon.getResultId(\n        result.uniqueId,\n        this.foldedResultListState.searchResponseId,\n        this.density,\n        this.imageSize\n      ),\n      content: this.itemTemplateProvider.getTemplateContent(result),\n      store: this.bindings.store,\n      density: this.density,\n      display: this.display,\n      imageSize: this.imageSize,\n    };\n  }\n}\n"],"version":3}