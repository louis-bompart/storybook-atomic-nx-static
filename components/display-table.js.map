{"file":"display-table.js","mappings":";;;AA2BA,MAAM,oBAAoB,GAAG,CAAC,KAAwB;IACpD,IAAI,KAAK,CAAC,qBAAqB,EAAE;QAC/B,OAAO,yCAAyC,CAAC,KAAK,CAAC,CAAC;KACzD;IACD,OAAO,oCAAoC,CAAC,KAAK,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,yCAAyC,GAAG,CAChD,KAAqE;IAErE,MAAM,0BAA0B,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAEjE,MAAM,kCAAkC,GAAG,KAAK,CAAC,qBAAsB,CACrE,KAAK,CAAC,SAAS,EACf,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAC9B,CAAC;IACF,0BAA0B,CAAC,SAAS,GAAG,kCAAkC,CAAC;IAE1E,OAAO,KAAK,CAAC,IAAI,CACf,0BAA0B,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CACjE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,oCAAoC,GAAG,CAC3C,KAA6D,KAE7D,KAAK,CAAC,IAAI,CACR,KAAK,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CACxE,CAAC;MAES,YAAY,GAA2C,CAClE,KAAK,EACL,QAAQ;IAER,MAAM,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAEjD,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;QACxB,KAAK,CAAC,MAAM,CAAC,KAAK,CAChB,2EAA2E,EAC3E,KAAK,CAAC,IAAI,CACX,CAAC;KACH;IAED,QACE,aAAO,KAAK,EAAE,aAAa,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAC,cAAc;QACjE,aAAO,IAAI,EAAC,sBAAsB;YAChC,UAAI,IAAI,EAAC,0BAA0B,IAChC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,MACvB,UAAI,IAAI,EAAC,2BAA2B;gBAClC,mBAAa,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,OAAO,CAAE,GAAgB,CAC9D,CACN,CAAC,CACC,CACC;QACR,aAAO,IAAI,EAAC,mBAAmB,OAAK,QAAQ,CAAS,CAC/C,EACR;AACJ,EAAE;MAEW,eAAe,GAA8C,CACxE,EAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAC,EACvB,QAAQ;IAER,QACE,UACE,GAAG,EAAE,GAAG,EACR,IAAI,EACF,mBAAmB;aAClB,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,uBAAuB,GAAG,sBAAsB,CAAC,EAEzE,GAAG,EAAE,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,CAAC,OAE7B,QAAQ,CACT,EACL;AACJ,EAAE;MAEW,gBAAgB,GAIzB,CAAC,KAAK;IACR,MAAM,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAEjD,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM;QAC7B,MAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAE,GAAG,KAAK,CAAC,GAAG,CAAC;QACtD,QACE,UAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,mBAAmB,IACnC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CACtB,EACL;KACH,CAAC,CAAC;AACL;;;;","names":[],"sources":["src/components/common/item-list/display-table.tsx"],"sourcesContent":["import {FunctionalComponent, VNode, h} from '@stencil/core';\nimport {tableElementTagName} from '../../search/atomic-table-result/table-element-utils';\nimport {AnyItem} from '../interface/item';\nimport {ItemRenderingFunction} from './item-list-common';\n\ninterface TableColumnsProps {\n  templateContentForFirstItem: DocumentFragment;\n  firstItem: AnyItem;\n  itemRenderingFunction?: ItemRenderingFunction;\n}\n\nexport interface DisplayTableProps extends TableColumnsProps {\n  logger: Pick<Console, 'error'>;\n  host: HTMLElement;\n  listClasses: string;\n}\n\nexport interface TableDataProps extends TableColumnsProps {\n  key: string;\n}\n\nexport interface DisplayTableRowProps {\n  key: string;\n  rowIndex: number;\n  setRef: (element?: HTMLElement) => void;\n}\n\nconst getFieldTableColumns = (props: TableColumnsProps) => {\n  if (props.itemRenderingFunction) {\n    return getFieldTableColumnsFromRenderingFunction(props);\n  }\n  return getFieldTableColumnsFromHTMLTemplate(props);\n};\n\nconst getFieldTableColumnsFromRenderingFunction = (\n  props: Pick<TableColumnsProps, 'itemRenderingFunction' | 'firstItem'>\n): HTMLAtomicTableElementElement[] => {\n  const contentOfRenderingFunction = document.createElement('div');\n\n  const contentOfRenderingFunctionAsString = props.itemRenderingFunction!(\n    props.firstItem,\n    document.createElement('div')\n  );\n  contentOfRenderingFunction.innerHTML = contentOfRenderingFunctionAsString;\n\n  return Array.from(\n    contentOfRenderingFunction.querySelectorAll(tableElementTagName)\n  );\n};\n\nconst getFieldTableColumnsFromHTMLTemplate = (\n  props: Pick<DisplayTableProps, 'templateContentForFirstItem'>\n): HTMLAtomicTableElementElement[] =>\n  Array.from(\n    props.templateContentForFirstItem.querySelectorAll(tableElementTagName)\n  );\n\nexport const DisplayTable: FunctionalComponent<DisplayTableProps> = (\n  props,\n  children\n) => {\n  const fieldColumns = getFieldTableColumns(props);\n\n  if (!fieldColumns.length) {\n    props.logger.error(\n      'atomic-table-element elements missing in the template to display columns.',\n      props.host\n    );\n  }\n\n  return (\n    <table class={`list-root ${props.listClasses}`} part=\"result-table\">\n      <thead part=\"result-table-heading\">\n        <tr part=\"result-table-heading-row\">\n          {fieldColumns.map((column) => (\n            <th part=\"result-table-heading-cell\">\n              <atomic-text value={column.getAttribute('label')!}></atomic-text>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody part=\"result-table-body\">{...children}</tbody>\n    </table>\n  );\n};\n\nexport const DisplayTableRow: FunctionalComponent<DisplayTableRowProps> = (\n  {key, rowIndex, setRef},\n  children\n) => {\n  return (\n    <tr\n      key={key}\n      part={\n        'result-table-row ' +\n        (rowIndex % 2 === 1 ? 'result-table-row-even' : 'result-table-row-odd')\n      }\n      ref={(element) => setRef(element)}\n    >\n      {...children}\n    </tr>\n  );\n};\n\nexport const DisplayTableData: FunctionalComponent<\n  TableDataProps & {\n    renderItem: (content: HTMLAtomicTableElementElement) => VNode;\n  }\n> = (props) => {\n  const fieldColumns = getFieldTableColumns(props);\n\n  return fieldColumns.map((column) => {\n    const key = column.getAttribute('label')! + props.key;\n    return (\n      <td key={key} part=\"result-table-cell\">\n        {props.renderItem(column)}\n      </td>\n    );\n  });\n};\n"],"version":3}