{"file":"atomic-insight-smart-snippet.js","mappings":";;;;;;;;AAAA,MAAM,4BAA4B,GAAG,y2wCAAy2wC,CAAC;AAC/4wC,wCAAe,4BAA4B;;;;;;;;;;;;MCsB9BA,2BAAyB;;;;;QAa5B,OAAE,GAAG,QAAQ,EAAE,CAAC;;;;QAOM,iBAAY,GAAG,CAAC,CAAC;;;;QAKxB,kBAAa,GAAG,GAAG,CAAC;;;;QAIpB,oBAAe,GAAG,GAAG,CAAC;QAgBpC,iBAAY,GAAG,KAAK,CAAC;;4BAzBe,CAAC;6BAKP,GAAG;+BAID,GAAG;;4BAgBpB,KAAK;;IAEtB,UAAU;QACf,IAAI,CAAC,YAAY,GAAGC,EAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB,CAAC;YAC/C,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,YAAY,EAAE,6CAA6C;YAC3D,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI;YACxB,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,kBAAkB,EAAE,MAAM,IAAI,CAAC,eAAe;YAC9C,gBAAgB,EAAE,MAAM,IAAI,CAAC,aAAa;YAC1C,oBAAoB,EAAE,MAAM,IAAI,CAAC,iBAAiB;YAClD,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;SACjD,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,MACrC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAChD,CAAC;KACH;IAEO,WAAW,CAAC,GAAgB;QAClC,IAAI,CAAC,QAAQ,GAAG,GAAwD,CAAC;KAC1E;IAEO,eAAe,CAAC,MAAe;QACrC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;KAC5B;IAEM,mBAAmB;QACxB,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;YACtE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC7B;KACF;IAEM,kBAAkB;QACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;YACrC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;KACzC;;;;;;;;;;;AAzF4B;IAA5B,kBAAkB,EAAE;6DAAmC;AAKjD;IAFN,qBAAqB,CAAC,cAAc,CAAC;sEAEc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicInsightSmartSnippet","buildInsightSmartSnippet"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.pcss?tag=atomic-insight-smart-snippet&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {Component, Prop, State, Element} from '@stencil/core';\nimport {\n  buildInsightSmartSnippet,\n  InsightSmartSnippet,\n  InsightSmartSnippetState,\n} from '../..';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet',\n  styleUrl: 'atomic-insight-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: InsightSmartSnippetState;\n  public error!: Error;\n\n  @Element() public host!: HTMLElement;\n\n  private id = randomID();\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n  private smartSnippetCommon!: SmartSnippetCommon;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  @State() feedbackSent = false;\n\n  public initialize() {\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n    this.smartSnippetCommon = new SmartSnippetCommon({\n      id: this.id,\n      modalTagName: 'atomic-insight-smart-snippet-feedback-modal',\n      getHost: () => this.host,\n      getBindings: () => this.bindings,\n      getModalRef: () => this.modalRef,\n      getHeadingLevel: () => this.headingLevel,\n      getCollapsedHeight: () => this.collapsedHeight,\n      getMaximumHeight: () => this.maximumHeight,\n      getSmartSnippetState: () => this.smartSnippetState,\n      getSmartSnippet: () => this.smartSnippet,\n      getSnippetStyle: () => this.snippetStyle,\n      getFeedbackSent: () => this.feedbackSent,\n      setModalRef: this.setModalRef.bind(this),\n      setFeedbackSent: this.setFeedbackSent.bind(this),\n    });\n    this.bindings.store.waitUntilAppLoaded(() =>\n      this.smartSnippetCommon.hideDuringRender(false)\n    );\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicInsightSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public componentDidRender() {\n    if (this.bindings.store.isAppLoaded()) {\n      this.smartSnippetCommon.hideDuringRender(false);\n    }\n  }\n\n  public render() {\n    return this.smartSnippetCommon.render();\n  }\n}\n"],"version":3}