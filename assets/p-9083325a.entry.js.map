{"version":3,"names":["FacetSegmentedValue","props","compactCount","Intl","NumberFormat","i18n","language","notation","format","numberOfResults","count","toLocaleString","ariaLabel","t","value","displayValue","h","key","Button","style","part","isSelected","onClick","class","ariaPressed","toString","title","text","atomicSegmentedFacetCss","AtomicSegmentedFacetStyle0","AtomicSegmentedFacet","this","filterFacetCount","injectionDepth","numberOfValues","sortCriteria","dependsOn","allowedValues","customSort","initialize","searchStatus","buildSearchStatus","bindings","engine","facet","buildFacet","options","facetOptions","facetId","state","dependenciesManager","buildFacetConditionsManager","conditions","parseDependsOn","disconnectedCallback","stopWatching","renderValuesContainer","children","classes","FacetValuesGroup","label","renderValue","facetValue","getFieldValueCaption","field","searchQuery","facetState","facetSearch","query","renderValues","values","map","toggleSingleSelect","renderLabel","hasBreadcrumbs","length","undefined","render","hasError","enabled","Hidden","firstSearchExecuted","__decorate","InitializeBindings","BindStateToController","MapProp","ArrayProp"],"sources":["src/components/search/facets/facet-segmented-value/facet-segmented-value.tsx","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.pcss?tag=atomic-segmented-facet&encapsulation=shadow","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\nimport {Button} from '../../../common/button';\r\nimport {FacetValueProps} from '../../../common/facets/facet-common';\r\n\r\nexport const FacetSegmentedValue: FunctionalComponent<FacetValueProps> = (\r\n  props\r\n) => {\r\n  const compactCount = new Intl.NumberFormat(props.i18n.language, {\r\n    notation: 'compact',\r\n  }).format(props.numberOfResults);\r\n\r\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\r\n\r\n  const ariaLabel = props.i18n.t('facet-value', {\r\n    value: props.displayValue,\r\n    count: props.numberOfResults,\r\n  });\r\n\r\n  return (\r\n    <li key={props.displayValue}>\r\n      <Button\r\n        style=\"square-neutral\"\r\n        part={`value-box${props.isSelected ? ' value-box-selected' : ''}`}\r\n        onClick={() => props.onClick()}\r\n        class={`value-box flex box-border h-full items-center p-2 group ${\r\n          props.isSelected\r\n            ? 'selected border-primary shadow-inner-primary'\r\n            : 'hover:border-primary-light focus-visible:border-primary-light'\r\n        }`}\r\n        ariaPressed={props.isSelected.toString()}\r\n        ariaLabel={ariaLabel}\r\n      >\r\n        <span\r\n          title={props.displayValue}\r\n          part=\"value-label\"\r\n          class={`value-label truncate ${\r\n            props.isSelected\r\n              ? 'text-primary'\r\n              : 'group-hover:text-primary-light group-focus:text-primary'\r\n          }`}\r\n        >\r\n          {props.displayValue}\r\n        </span>\r\n        <span\r\n          title={count}\r\n          part=\"value-count\"\r\n          class={`value-box-count truncate pl-1 w-auto mt-0 text-sm ${\r\n            props.isSelected\r\n              ? 'text-primary'\r\n              : 'text-neutral-dark group-hover:text-primary-light group-focus:text-primary'\r\n          }`}\r\n        >\r\n          {props.i18n.t('between-parentheses', {\r\n            text: compactCount,\r\n          })}\r\n        </span>\r\n      </Button>\r\n    </li>\r\n  );\r\n};\r\n","@import '../../../common/facets/facet-common.pcss';\r\n@import '../facet-segmented-value/facet-segmented-value.pcss';\r\n","import {\r\n  buildFacet,\r\n  buildFacetConditionsManager,\r\n  buildSearchStatus,\r\n  CategoryFacetValueRequest,\r\n  Facet,\r\n  FacetConditionsManager,\r\n  FacetOptions,\r\n  FacetSortCriterion,\r\n  FacetState,\r\n  FacetValue,\r\n  FacetValueRequest,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n} from '@coveo/headless';\r\nimport {Component, h, Prop, State, VNode} from '@stencil/core';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {FacetSegmentedValue} from '../facet-segmented-value/facet-segmented-value';\r\n\r\n/**\r\n * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.\r\n * @part segmented-container - The container that holds the segmented facets.\r\n * @part label - The facet value label.\r\n * @part values - The facet values container.\r\n * @part value-box - The facet value.\r\n * @part value-box-selected - The selected facet value.\r\n * @part placeholder - The placeholder displayed when the facet is loading.\r\n */\r\n@Component({\r\n  tag: 'atomic-segmented-facet',\r\n  styleUrl: 'atomic-segmented-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSegmentedFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public searchStatus!: SearchStatus;\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: FacetState;\r\n  public facet!: Facet;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label?: string;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop() public injectionDepth = 1000;\r\n  /**\r\n   * The number of values to request for this facet.\r\n   * Also determines the number of additional values to request each time more values are shown.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 6;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * @example\r\n   * ```html\r\n   * <atomic-segmented-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-segmented-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-segmented-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-segmented-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-segmented-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n  /**\r\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\r\n   *\r\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\r\n   * the current result set).\r\n   *\r\n   * @example\r\n   *\r\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\r\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\r\n   * them.\r\n   *\r\n   * ```html\r\n   * <atomic-segmented-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-segmented-facet>\r\n   * ```\r\n   *\r\n   * The maximum amount of allowed values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public allowedValues: string[] | string = '[]';\r\n\r\n  /**\r\n   * Identifies the facet values that must appear at the top, in this order.\r\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\r\n   *\r\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\r\n   *\r\n   * @example\r\n   *\r\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\r\n   *\r\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\r\n   *\r\n   * ```html\r\n   * <atomic-segmented-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-segmented-facet>\r\n   * ```\r\n   * The maximum amount of custom sort values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public customSort: string[] | string = '[]';\r\n\r\n  private dependenciesManager!: FacetConditionsManager;\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n\r\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\r\n    this.facetId = this.facet.state.facetId;\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.dependenciesManager.stopWatching();\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[]) {\r\n    const classes = 'box-container flex h-10';\r\n    return (\r\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\r\n        <ul class={classes} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.field,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n    const isSelected = facetValue.state !== 'idle';\r\n\r\n    return (\r\n      <FacetSegmentedValue\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={isSelected}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n        searchQuery={this.facetState.facetSearch.query}\r\n      ></FacetSegmentedValue>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facetState.values.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private renderLabel() {\r\n    if (!this.label) {\r\n      return;\r\n    }\r\n    return (\r\n      <b class=\"mr-2\" part=\"label\">\r\n        {this.label}:\r\n      </b>\r\n    );\r\n  }\r\n\r\n  private get facetOptions(): FacetOptions {\r\n    return {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfValues,\r\n      sortCriteria: this.sortCriteria,\r\n      facetSearch: {numberOfValues: this.numberOfValues},\r\n      filterFacetCount: this.filterFacetCount,\r\n      injectionDepth: this.injectionDepth,\r\n      hasBreadcrumbs: false,\r\n      allowedValues: this.allowedValues.length\r\n        ? [...this.allowedValues]\r\n        : undefined,\r\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatus.state.hasError || !this.facet.state.enabled) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    if (!this.searchStatus.state.firstSearchExecuted) {\r\n      return (\r\n        <div\r\n          part=\"placeholder\"\r\n          aria-hidden\r\n          class=\"h-8 w-48 bg-neutral animate-pulse rounded\"\r\n        ></div>\r\n      );\r\n    }\r\n\r\n    if (!this.facetState.values.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        part=\"segmented-container\"\r\n        class=\"flex whitespace-nowrap h-10 items-center\"\r\n      >\r\n        {this.renderLabel()}\r\n        {this.renderValues()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}