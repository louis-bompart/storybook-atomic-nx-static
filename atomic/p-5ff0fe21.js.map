{"version":3,"names":["extractUnfoldedItem","anyResult","result","ItemTemplateProvider","TemplateProvider","constructor","props","super","buildResultTemplatesManager","bindings","engine","getTemplateContent"],"sources":["src/components/common/interface/item.ts","src/components/common/item-list/item-template-provider.ts"],"sourcesContent":["import {FoldedResult, Result} from '@coveo/headless';\r\nimport {Product} from '@coveo/headless/commerce';\r\nimport {InsightResult} from '../../insight';\r\n\r\nexport type AnyItem = FoldedResult | AnyUnfoldedItem | Product;\r\nexport type AnyUnfoldedItem = Result | InsightResult;\r\n\r\nexport function extractUnfoldedItem(anyResult: AnyItem): AnyUnfoldedItem {\r\n  return (anyResult as FoldedResult).result || anyResult;\r\n}\r\n","import {Result, buildResultTemplatesManager} from '@coveo/headless';\r\nimport {AnyBindings} from '../interface/bindings';\r\nimport {AnyItem, extractUnfoldedItem} from '../interface/item';\r\nimport {\r\n  TemplateProvider,\r\n  TemplateProviderProps,\r\n} from '../template-provider/template-provider';\r\n\r\nexport class ItemTemplateProvider extends TemplateProvider<Result> {\r\n  constructor(props: TemplateProviderProps<Result> & {bindings: AnyBindings}) {\r\n    super(props, () => buildResultTemplatesManager(props.bindings.engine));\r\n  }\r\n\r\n  public getTemplateContent(result: AnyItem) {\r\n    return super.getTemplateContent(extractUnfoldedItem(result));\r\n  }\r\n}\r\n"],"mappings":"iFAOgBA,EAAoBC,GAClC,OAAQA,EAA2BC,QAAUD,CAC/C,C,MCDaE,UAA6BC,EACxC,WAAAC,CAAYC,GACVC,MAAMD,GAAO,IAAME,EAA4BF,EAAMG,SAASC,S,CAGzD,kBAAAC,CAAmBT,GACxB,OAAOK,MAAMI,mBAAmBX,EAAoBE,G"}