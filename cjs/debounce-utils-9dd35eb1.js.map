{"file":"debounce-utils-9dd35eb1.js","mappings":";;SAegB,mBAAmB,CACjC,OAA8B;IAE9B,IAAI,OAAO,GAAmB,EAAE,CAAC;IACjC,IAAI,UAAU,GAA0C,IAAI,CAAC;IAE7D,SAAS,aAAa;QACpB,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,OAAO,EAAE,CAAC;SAClB;aAAM;YACL,aAAa,CAAC,UAAW,CAAC,CAAC;YAC3B,UAAU,GAAG,IAAI,CAAC;SACnB;KACF;IAED,SAAS,oBAAoB,CAAC,EAAU;QACtC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,OAAO;QACL,OAAO,CAAC,OAAmB,EAAE,QAAiB;YAC5C,IAAI,QAAQ,EAAE;gBACZ,oBAAoB,CAAC,QAAQ,CAAC,CAAC;aAChC;YACD,OAAO,CAAC,IAAI,CAAC,EAAC,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC;YACtC,IAAI,UAAU,KAAK,IAAI,EAAE;gBACvB,aAAa,EAAE,CAAC;gBAChB,UAAU,GAAG,WAAW,CAAC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;aACxD;SACF;QACD,KAAK;YACH,OAAO,GAAG,EAAE,CAAC;SACd;QACD,oBAAoB;KACrB,CAAC;AACJ,CAAC;SAEe,QAAQ,CAItB,OAEmD,EACnD,IAAY;IAEZ,IAAI,KAAoC,CAAC;IAEzC,OAAO,CAAC,GAAG,IAAuB;QAChC,YAAY,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO;YACzB,KAAK,GAAG,UAAU,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SAC3D,CAAC,CAAC;KACJ,CAAC;AACJ;;;;;","names":[],"sources":["src/utils/debounce-utils.tsx"],"sourcesContent":["export interface DebouncedQueueOptions {\r\n  delay: number;\r\n}\r\n\r\nexport interface DebouncedQueue {\r\n  enqueue(execute: () => void, uniqueId?: string): void;\r\n  clear(): void;\r\n  cancelActionIfQueued(id: string): void;\r\n}\r\n\r\ninterface QueuedAction {\r\n  id?: string;\r\n  execute: () => void;\r\n}\r\n\r\nexport function buildDebouncedQueue(\r\n  options: DebouncedQueueOptions\r\n): DebouncedQueue {\r\n  let actions: QueuedAction[] = [];\r\n  let intervalId: ReturnType<typeof setInterval> | null = null;\r\n\r\n  function dequeueAction() {\r\n    const action = actions.shift();\r\n    if (action) {\r\n      action.execute();\r\n    } else {\r\n      clearInterval(intervalId!);\r\n      intervalId = null;\r\n    }\r\n  }\r\n\r\n  function cancelActionIfQueued(id: string) {\r\n    actions = actions.filter((action) => action.id !== id);\r\n  }\r\n\r\n  return {\r\n    enqueue(execute: () => void, uniqueId?: string) {\r\n      if (uniqueId) {\r\n        cancelActionIfQueued(uniqueId);\r\n      }\r\n      actions.push({id: uniqueId, execute});\r\n      if (intervalId === null) {\r\n        dequeueAction();\r\n        intervalId = setInterval(dequeueAction, options.delay);\r\n      }\r\n    },\r\n    clear() {\r\n      actions = [];\r\n    },\r\n    cancelActionIfQueued,\r\n  };\r\n}\r\n\r\nexport function debounce<\r\n  ExecuteParameters extends unknown[],\r\n  ExecuteReturnType,\r\n>(\r\n  execute: (\r\n    ...args: ExecuteParameters\r\n  ) => Promise<ExecuteReturnType> | ExecuteReturnType,\r\n  wait: number\r\n) {\r\n  let timer: ReturnType<typeof setTimeout>;\r\n\r\n  return (...args: ExecuteParameters): Promise<ExecuteReturnType> => {\r\n    clearTimeout(timer);\r\n    return new Promise((resolve) => {\r\n      timer = setTimeout(() => resolve(execute(...args)), wait);\r\n    });\r\n  };\r\n}\r\n"],"version":3}