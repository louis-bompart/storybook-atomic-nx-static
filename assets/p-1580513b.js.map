{"version":3,"names":["buildCustomEvent","name","detail","CustomEvent","bubbles","cancelable","composed","listenOnce","element","type","listener","options","_listener","evt","removeEventListener","handleEvent","call","addEventListener"],"sources":["src/utils/event-utils.ts"],"sourcesContent":["export function buildCustomEvent<T>(name: string, detail: T) {\r\n  return new CustomEvent(name, {\r\n    detail,\r\n    // Event will bubble up the DOM until it is caught\r\n    bubbles: true,\r\n    // Allows to verify if event is caught (cancelled). If it's not caught, it won't be initialized.\r\n    cancelable: true,\r\n    // Allows to compose Atomic components inside one another, event will go across DOM/Shadow DOM\r\n    composed: true,\r\n  });\r\n}\r\n\r\nexport function listenOnce<K extends keyof HTMLElementEventMap>(\r\n  element: HTMLElement,\r\n  type: K,\r\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void,\r\n  options?: boolean | AddEventListenerOptions\r\n): void;\r\nexport function listenOnce(\r\n  element: HTMLElement,\r\n  type: string,\r\n  listener: EventListenerOrEventListenerObject,\r\n  options?: boolean | AddEventListenerOptions\r\n): void;\r\nexport function listenOnce(\r\n  element: HTMLElement,\r\n  type: string,\r\n  listener: EventListenerOrEventListenerObject,\r\n  options?: boolean | AddEventListenerOptions\r\n): void {\r\n  const _listener: EventListener = (evt: Event) => {\r\n    element.removeEventListener(type, _listener, options);\r\n    typeof listener === 'object'\r\n      ? listener.handleEvent.call(element, evt)\r\n      : listener.call(element, evt);\r\n  };\r\n  element.addEventListener(type, _listener, options);\r\n}\r\n"],"mappings":"SAAgBA,EAAoBC,EAAcC,GAChD,OAAO,IAAIC,YAAYF,EAAM,CAC3BC,SAEAE,QAAS,KAETC,WAAY,KAEZC,SAAU,MAEd,C,SAcgBC,EACdC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAA4BC,IAChCL,EAAQM,oBAAoBL,EAAMG,EAAWD,UACtCD,IAAa,SAChBA,EAASK,YAAYC,KAAKR,EAASK,GACnCH,EAASM,KAAKR,EAASK,EAAI,EAEjCL,EAAQS,iBAAiBR,EAAMG,EAAWD,EAC5C,Q"}