{"file":"atomic-insight-smart-snippet.js","mappings":";;;;;;;;AAAA,MAAM,4BAA4B,GAAG,y2wCAAy2wC,CAAC;AAC/4wC,wCAAe,4BAA4B;;;;;;;;;;;;MCsB9BA,2BAAyB;;;;;QAa5B,OAAE,GAAG,QAAQ,EAAE,CAAC;;;;QAOM,iBAAY,GAAG,CAAC,CAAC;;;;QAKxB,kBAAa,GAAG,GAAG,CAAC;;;;QAIpB,oBAAe,GAAG,GAAG,CAAC;QAgBpC,iBAAY,GAAG,KAAK,CAAC;;4BAzBe,CAAC;6BAKP,GAAG;+BAID,GAAG;;4BAgBpB,KAAK;;IAEtB,UAAU;QACf,IAAI,CAAC,YAAY,GAAGC,EAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB,CAAC;YAC/C,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,YAAY,EAAE,6CAA6C;YAC3D,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI;YACxB,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,kBAAkB,EAAE,MAAM,IAAI,CAAC,eAAe;YAC9C,gBAAgB,EAAE,MAAM,IAAI,CAAC,aAAa;YAC1C,oBAAoB,EAAE,MAAM,IAAI,CAAC,iBAAiB;YAClD,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;SACjD,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,MACrC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAChD,CAAC;KACH;IAEO,WAAW,CAAC,GAAgB;QAClC,IAAI,CAAC,QAAQ,GAAG,GAAwD,CAAC;KAC1E;IAEO,eAAe,CAAC,MAAe;QACrC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;KAC5B;IAEM,mBAAmB;QACxB,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;YACtE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC7B;KACF;IAEM,kBAAkB;QACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;YACrC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;KACzC;;;;;;;;;;;AAzF4B;IAA5B,kBAAkB,EAAE;6DAAmC;AAKjD;IAFN,qBAAqB,CAAC,cAAc,CAAC;sEAEc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicInsightSmartSnippet","buildInsightSmartSnippet"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.pcss?tag=atomic-insight-smart-snippet&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\r\n","import {Component, Prop, State, Element} from '@stencil/core';\r\nimport {\r\n  buildInsightSmartSnippet,\r\n  InsightSmartSnippet,\r\n  InsightSmartSnippetState,\r\n} from '../..';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n  BindStateToController,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-smart-snippet',\r\n  styleUrl: 'atomic-insight-smart-snippet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightSmartSnippet\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public smartSnippet!: InsightSmartSnippet;\r\n\r\n  @BindStateToController('smartSnippet')\r\n  @State()\r\n  public smartSnippetState!: InsightSmartSnippetState;\r\n  public error!: Error;\r\n\r\n  @Element() public host!: HTMLElement;\r\n\r\n  private id = randomID();\r\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\r\n  private smartSnippetCommon!: SmartSnippetCommon;\r\n\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n\r\n  /**\r\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\r\n   */\r\n  @Prop({reflect: true}) maximumHeight = 250;\r\n  /**\r\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\r\n   */\r\n  @Prop({reflect: true}) collapsedHeight = 180;\r\n\r\n  /**\r\n   * Sets the style of the snippet.\r\n   *\r\n   * Example:\r\n   * ```ts\r\n   * smartSnippet.snippetStyle = `\r\n   *   b {\r\n   *     color: blue;\r\n   *   }\r\n   * `;\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) snippetStyle?: string;\r\n\r\n  @State() feedbackSent = false;\r\n\r\n  public initialize() {\r\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\r\n    this.smartSnippetCommon = new SmartSnippetCommon({\r\n      id: this.id,\r\n      modalTagName: 'atomic-insight-smart-snippet-feedback-modal',\r\n      getHost: () => this.host,\r\n      getBindings: () => this.bindings,\r\n      getModalRef: () => this.modalRef,\r\n      getHeadingLevel: () => this.headingLevel,\r\n      getCollapsedHeight: () => this.collapsedHeight,\r\n      getMaximumHeight: () => this.maximumHeight,\r\n      getSmartSnippetState: () => this.smartSnippetState,\r\n      getSmartSnippet: () => this.smartSnippet,\r\n      getSnippetStyle: () => this.snippetStyle,\r\n      getFeedbackSent: () => this.feedbackSent,\r\n      setModalRef: this.setModalRef.bind(this),\r\n      setFeedbackSent: this.setFeedbackSent.bind(this),\r\n    });\r\n    this.bindings.store.waitUntilAppLoaded(() =>\r\n      this.smartSnippetCommon.hideDuringRender(false)\r\n    );\r\n  }\r\n\r\n  private setModalRef(ref: HTMLElement) {\r\n    this.modalRef = ref as HTMLAtomicInsightSmartSnippetFeedbackModalElement;\r\n  }\r\n\r\n  private setFeedbackSent(isSent: boolean) {\r\n    this.feedbackSent = isSent;\r\n  }\r\n\r\n  public componentWillUpdate() {\r\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\r\n      this.setFeedbackSent(false);\r\n    }\r\n  }\r\n\r\n  public componentDidRender() {\r\n    if (this.bindings.store.isAppLoaded()) {\r\n      this.smartSnippetCommon.hideDuringRender(false);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.smartSnippetCommon.render();\r\n  }\r\n}\r\n"],"version":3}