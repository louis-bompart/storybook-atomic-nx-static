{"file":"atomic-result-text.atomic-text.entry.js","mappings":"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","names":["HighlightUtils","ResultTemplatesHelpers","__decorate"],"sources":["src/components/search/result-template-components/atomic-result-text/atomic-result-text.tsx","src/components/search/atomic-text/atomic-text.tsx"],"sourcesContent":["import {isArray} from '@coveo/bueno';\nimport {HighlightUtils, Result, ResultTemplatesHelpers} from '@coveo/headless';\nimport {Component, Prop, h, Element, Host, State} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-text` component renders the value of a string result field.\n */\n@Component({\n  tag: 'atomic-result-text',\n  shadow: false,\n})\nexport class AtomicResultText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The result field which the component should use.\n   * This will look in the Result object first, and then in the Result.raw object for the fields.\n   * It is important to include the necessary field in the `atomic-search-interface` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\n   */\n  @Prop({reflect: true}) public shouldHighlight = true;\n\n  /**\n   * The locale key for the text to display when the configured field has no value.\n   */\n  @Prop({reflect: true}) public default?: string;\n\n  private renderWithHighlights(\n    value: string,\n    highlights: HighlightUtils.HighlightKeyword[]\n  ) {\n    try {\n      const openingDelimiter = '_openingDelimiter_';\n      const closingDelimiter = '_closingDelimiter_';\n      const highlightedValue = HighlightUtils.highlightString({\n        content: value,\n        openingDelimiter,\n        closingDelimiter,\n        highlights,\n      });\n      const innerHTML = highlightedValue\n        .replace(new RegExp(openingDelimiter, 'g'), '<b>')\n        .replace(new RegExp(closingDelimiter, 'g'), '</b>');\n      // deepcode ignore ReactSetInnerHtml: This is not React code\n      return <Host innerHTML={innerHTML}></Host>;\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private possiblyWarnOnBadFieldType() {\n    const resultValueRaw = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      this.field\n    );\n    if (isArray(resultValueRaw)) {\n      this.bindings.engine.logger.error(\n        `atomic-result-text cannot be used with multi value field \"${this.field}\" with values \"${resultValueRaw}\". Use atomic-result-multi-value-text instead.`,\n        this\n      );\n    }\n  }\n\n  public render() {\n    const resultValueAsString = getStringValueFromResultOrNull(\n      this.result,\n      this.field\n    );\n    if (!resultValueAsString && !this.default) {\n      this.possiblyWarnOnBadFieldType();\n      this.host.remove();\n      return;\n    }\n\n    if (!resultValueAsString && this.default) {\n      this.possiblyWarnOnBadFieldType();\n      return (\n        <atomic-text\n          value={getFieldValueCaption(\n            this.field,\n            this.default,\n            this.bindings.i18n\n          )}\n        ></atomic-text>\n      );\n    }\n\n    const textValue = `${resultValueAsString}`;\n    const highlightsValue = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      `${this.field}Highlights`\n    ) as HighlightUtils.HighlightKeyword[];\n\n    if (this.shouldHighlight && highlightsValue) {\n      return this.renderWithHighlights(textValue, highlightsValue);\n    }\n\n    return getFieldValueCaption(this.field, textValue, this.bindings.i18n);\n  }\n}\n","import {Component, Prop, State} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.\n */\n@Component({\n  tag: 'atomic-text',\n  shadow: true,\n})\nexport class AtomicText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n\n  private strings = {\n    value: () =>\n      this.bindings.i18n.t(this.value, {\n        count: this.count,\n      }),\n  };\n  @State() public error!: Error;\n\n  /**\n   * The string key value.\n   */\n  @Prop({reflect: true}) public value!: string;\n  /**\n   * The count value used for plurals.\n   */\n  @Prop({reflect: true}) public count?: number;\n\n  public connectedCallback() {\n    if (!this.value) {\n      this.error = new Error('The \"value\" attribute must be defined.');\n    }\n  }\n\n  public render() {\n    return this.strings.value();\n  }\n}\n"],"version":3}