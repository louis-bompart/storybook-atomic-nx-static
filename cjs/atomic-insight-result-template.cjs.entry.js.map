{"file":"atomic-insight-result-template.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;MAgBa,2BAA2B;IA8CtC;;QAxCO,oBAAe,GAAqC,EAAE,CAAC;;;;;;;;QAS/C,eAAU,GAAqC,EAAE,CAAC;;;;;;QAqB5B,cAAS,GAA6B,EAAE,CAAC;;;;;;QAOzC,iBAAY,GAC/C,EAAE,CAAC;;0BA7ByD,EAAE;;;QAgC9D,IAAI,CAAC,oBAAoB,GAAG,IAAIA,yCAAoB,CAAC;YACnD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,CAAC,GAAG;gBACZ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;aAClB;YACD,YAAY,EAAE;gBACZ,4BAA4B;gBAC5B,mCAAmC;aACpC;YACD,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;KACJ;IAEM,iBAAiB;QACtB,IAAI,CAAC,UAAU,GAAGC,0CAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3E,IAAI,CAAC,oBAAoB,CAAC,eAAe,GAAGC,wCAAmB,CAC7D,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,YAAY,CAClB,CAAC;KACH;;;;IAMM,MAAM,WAAW;QACtB,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3E;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5D;;;AA1CoC;IAApCC,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;8DAAiD;AAOzC;IAApCA,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;iEACxB;;;;","names":["ResultTemplateCommon","makeDefinedConditions","makeMatchConditions","MapProp"],"sources":["src/components/insight/result-templates/atomic-insight-result-template/atomic-insight-result-template.tsx"],"sourcesContent":["import {Component, Element, Prop, Method, State} from '@stencil/core';\nimport {InsightResultTemplate, InsightResultTemplateCondition} from '../..';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeDefinedConditions,\n  makeMatchConditions,\n  ResultTemplateCommon,\n} from '../../../common/result-templates/result-template-common';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-template',\n  shadow: true,\n})\nexport class AtomicInsightResultTemplate {\n  private resultTemplateCommon: ResultTemplateCommon;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLDivElement;\n  public matchConditions: InsightResultTemplateCondition[] = [];\n\n  /**\n   * A function that must return true on results for the result template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\n   */\n  @Prop() public conditions: InsightResultTemplateCondition[] = [];\n\n  /**\n   * The field that, when defined on a result item, would allow the template to be applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n\n  /**\n   * The field that, when defined on a result item, would prevent the template from being applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  /**\n   * The field and values that define which result items the condition must be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`\n   */\n  @MapProp({splitValues: true}) public mustMatch: Record<string, string[]> = {};\n\n  /**\n   * The field and values that define which result items the condition must not be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\"`\n   */\n  @MapProp({splitValues: true}) public mustNotMatch: Record<string, string[]> =\n    {};\n\n  constructor() {\n    this.resultTemplateCommon = new ResultTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: [\n        'atomic-insight-result-list',\n        'atomic-insight-folded-result-list',\n      ],\n      allowEmpty: true,\n    });\n  }\n\n  public componentWillLoad() {\n    this.conditions = makeDefinedConditions(this.ifDefined, this.ifNotDefined);\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the appropriate result template based on conditions applied.\n   */\n  @Method()\n  public async getTemplate(): Promise<InsightResultTemplate<DocumentFragment> | null> {\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.resultTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"version":3}