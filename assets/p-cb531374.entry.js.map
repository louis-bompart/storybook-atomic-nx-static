{"version":3,"names":["atomicInsightFoldedResultListCss","AtomicInsightFoldedResultListStyle0","AtomicInsightFoldedResultList","this","loadingFlag","randomID","display","resultTemplateRegistered","templateHasError","density","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","resolveFoldedResultList","event","preventDefault","stopPropagation","detail","foldedResultList","loadCollection","initialize","initFolding","resultsPerPage","buildInsightResultsPerPage","bindings","engine","e","error","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","host","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","itemListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","foldedResultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","focusTarget","store","nextNewResultTarget","FocusTargetController","props","options","buildInsightFoldedResultList","folding","collectionField","parentField","childField","render","updateBreakpoints","listClasses","computeListDisplayClasses","h","ItemListGuard","key","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","hasTemplate","hasError","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","isAppLoaded","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","map","collection","i","atomicInsightResultProps","getPropsForAtomicInsightResult","part","ref","element","setNewResultRef","getItemListDisplayClasses","result","extractUnfoldedItem","interactiveResult","buildInsightInteractiveResult","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.pcss?tag=atomic-insight-folded-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../styles/list-display.pcss';\r\n","import {\r\n  Component,\r\n  Element,\r\n  State,\r\n  Prop,\r\n  Listen,\r\n  Method,\r\n  h,\r\n} from '@stencil/core';\r\nimport {\r\n  InsightResultsPerPageState,\r\n  InsightResultsPerPage,\r\n  buildInsightFoldedResultList,\r\n  InsightFoldedResultList,\r\n  InsightFoldedResultListState,\r\n  buildInsightResultsPerPage,\r\n  InsightFoldedCollection,\r\n  buildInsightInteractiveResult,\r\n} from '../..';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {extractUnfoldedItem} from '../../../common/interface/item';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {FoldedItemListStateContextEvent} from '../../../common/item-list/item-list-decorators';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n  getItemListDisplayClasses,\r\n} from '../../../common/layout/display-options';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-folded-result-list',\r\n  styleUrl: 'atomic-insight-folded-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightFoldedResultList\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public foldedResultList!: InsightFoldedResultList;\r\n  public resultsPerPage!: InsightResultsPerPage;\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private loadingFlag = randomID('firstResultLoaded-');\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private display: ItemDisplayLayout = 'list';\r\n  private itemListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('foldedResultList')\r\n  @State()\r\n  public foldedResultListState!: InsightFoldedResultListState;\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  public resultsPerPageState!: InsightResultsPerPageState;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n  @State() private templateHasError = false;\r\n\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\r\n  /**\r\n   * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.\r\n   *\r\n   * @defaultValue `foldingcollection`\r\n   */\r\n  @Prop({reflect: true}) public collectionField?: string;\r\n  /**\r\n   * The name of the field that determines whether a certain result is a top result containing other child results within a collection.\r\n   *\r\n   * @defaultValue `foldingparent`\r\n   */\r\n  @Prop({reflect: true}) public parentField?: string;\r\n  /**\r\n   * The name of the field that uniquely identifies a result within a collection.\r\n   *\r\n   * @defaultValue `foldingchild`\r\n   */\r\n  @Prop({reflect: true}) public childField?: string;\r\n\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  @Listen('atomic/resolveFoldedResultList')\r\n  resolveFoldedResultList(event: FoldedItemListStateContextEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.detail(this.foldedResultList);\r\n  }\r\n\r\n  @Listen('atomic/loadCollection')\r\n  loadCollection(event: CustomEvent<InsightFoldedCollection>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.foldedResultList.loadCollection(event.detail);\r\n  }\r\n\r\n  public initialize() {\r\n    try {\r\n      this.foldedResultList = this.initFolding();\r\n      this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\r\n    } catch (e) {\r\n      this.error = e as Error;\r\n    }\r\n\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-insight-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.itemListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.foldedResultListState.results.length,\r\n      getIsLoading: () => this.foldedResultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  private initFolding(props = {options: {}}): InsightFoldedResultList {\r\n    return buildInsightFoldedResultList(this.bindings.engine, {\r\n      options: {\r\n        ...props.options,\r\n        folding: {\r\n          collectionField: this.collectionField,\r\n          parentField: this.parentField,\r\n          childField: this.childField,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    this.itemListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        firstRequestExecuted={this.foldedResultListState.firstSearchExecuted}\r\n        hasItems={this.foldedResultListState.hasResults}\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        hasError={this.foldedResultListState.hasError}\r\n      >\r\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\r\n          <ResultsPlaceholdersGuard\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n            display={this.display}\r\n            density={this.density}\r\n            imageSize={this.imageSize}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={\r\n              this.foldedResultListState.firstSearchExecuted\r\n            }\r\n            hasItems={this.foldedResultListState.hasResults}\r\n          >\r\n            {this.foldedResultListState.results.map((collection, i) => {\r\n              const atomicInsightResultProps =\r\n                this.getPropsForAtomicInsightResult(collection);\r\n              return (\r\n                <atomic-insight-result\r\n                  {...atomicInsightResultProps}\r\n                  part=\"outline\"\r\n                  ref={(element) =>\r\n                    element && this.itemListCommon.setNewResultRef(element, i)\r\n                  }\r\n                ></atomic-insight-result>\r\n              );\r\n            })}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.foldedResultListState.firstSearchExecuted &&\r\n        this.foldedResultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicInsightResult(collection: InsightFoldedCollection) {\r\n    const result = extractUnfoldedItem(collection);\r\n\r\n    return {\r\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.itemListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.foldedResultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      display: this.display,\r\n      imageSize: this.imageSize,\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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"}