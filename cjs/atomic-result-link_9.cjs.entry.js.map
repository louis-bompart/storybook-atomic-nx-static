{"file":"atomic-result-link.atomic-result-placeholder.atomic-result-section-actions.atomic-result-section-badges.atomic-result-section-bottom-metadata.atomic-result-section-excerpt.atomic-result-section-title.atomic-result-section-visual.atomic-result-table-placeholder.entry.cjs.js","mappings":"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","names":["buildCustomEvent","getDefaultSlotFromHost","getAttributesFromLinkSlot","isUndefined","buildStringTemplateFromResult","h","LinkWithItemAnalytics","InitializeBindings","ResultContext","InteractiveResultContext","placeholderClasses","getItemDisplayClasses","hideEmptySection"],"sources":["src/components/search/result-template-components/atomic-result-link/atomic-result-link.pcss?tag=atomic-result-link","src/components/search/result-template-components/atomic-result-link/atomic-result-link.tsx","src/components/common/atomic-result-placeholder/atomic-result-placeholder.pcss?tag=atomic-result-placeholder&encapsulation=shadow","src/components/common/atomic-result-placeholder/atomic-result-placeholder.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-actions.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-badges.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-bottom-metadata.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-excerpt.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-title.tsx","src/components/search/result-template-components/atomic-result-sections/atomic-result-section-visual.tsx","src/components/search/atomic-result-table-placeholder/atomic-result-table-placeholder.pcss?tag=atomic-result-table-placeholder&encapsulation=shadow","src/components/search/atomic-result-table-placeholder/atomic-result-table-placeholder.tsx"],"sourcesContent":["@import '../../../../global/mixins.pcss';\n\natomic-result-link {\n  a {\n    @mixin link-style;\n  }\n}\n","import {isUndefined} from '@coveo/bueno';\nimport {InteractiveResult} from '@coveo/headless';\nimport {Component, h, Prop, Element} from '@stencil/core';\nimport {buildCustomEvent} from '../../../../utils/event-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {buildStringTemplateFromResult} from '../../../../utils/result-utils';\nimport {getDefaultSlotFromHost} from '../../../../utils/slot-utils';\nimport {AnyUnfoldedItem} from '../../../common/interface/item';\nimport {getAttributesFromLinkSlot} from '../../../common/item-link/attributes-slot';\nimport {LinkWithItemAnalytics} from '../../../common/item-link/item-link';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {\n  InteractiveResultContext,\n  ResultContext,\n} from '../result-template-decorators';\n\n/**\n * The `atomic-result-link` component automatically transforms a search result title into a clickable link that points to the original item.\n * @slot default - Lets you display alternative content inside the link\n * @slot attributes - Lets you pass [attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) down to the link element, overriding other attributes, to be used exclusively with an \"a\" tag such as `<a slot=\"attributes\" target=\"_blank\" download></a>`.\n */\n@Component({\n  tag: 'atomic-result-link',\n  styleUrl: 'atomic-result-link.pcss',\n  shadow: false,\n})\nexport class AtomicResultLink implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public error!: Error;\n\n  @ResultContext() private result!: AnyUnfoldedItem;\n  @InteractiveResultContext() private interactiveResult!: InteractiveResult;\n\n  @Element() private host!: HTMLElement;\n\n  /**\n   * Specifies a template literal from which to generate the `href` attribute value (see\n   * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).\n   *\n   * The template literal can reference any number of result properties from the parent result. It can also reference the window object.\n   *\n   * For example, the following markup generates an `href` value such as `http://uri.com?id=itemTitle`, using the result's `clickUri` and `itemtitle` fields.\n   * ```html\n   * <atomic-result-link href-template='${clickUri}?id=${raw.itemtitle}'></atomic-result-link>\n   * ```\n   */\n  @Prop({reflect: true}) hrefTemplate?: string;\n\n  private hasDefaultSlot!: boolean;\n  private linkAttributes?: Attr[];\n  private stopPropagation?: boolean;\n\n  public initialize() {\n    this.host.dispatchEvent(\n      buildCustomEvent(\n        'atomic/resolveStopPropagation',\n        (stopPropagation: boolean) => {\n          this.stopPropagation = stopPropagation;\n        }\n      )\n    );\n  }\n\n  public connectedCallback() {\n    const slotName = 'attributes';\n    this.hasDefaultSlot = !!getDefaultSlotFromHost(this.host);\n    this.linkAttributes = getAttributesFromLinkSlot(this.host, slotName);\n  }\n\n  public render() {\n    const href = isUndefined(this.hrefTemplate)\n      ? this.result.clickUri\n      : buildStringTemplateFromResult(\n          this.hrefTemplate,\n          this.result,\n          this.bindings\n        );\n\n    return (\n      <LinkWithItemAnalytics\n        href={href}\n        onSelect={() => this.interactiveResult.select()}\n        onBeginDelayedSelect={() => this.interactiveResult.beginDelayedSelect()}\n        onCancelPendingSelect={() =>\n          this.interactiveResult.cancelPendingSelect()\n        }\n        attributes={this.linkAttributes}\n        stopPropagation={this.stopPropagation}\n      >\n        {this.hasDefaultSlot ? (\n          <slot />\n        ) : (\n          <atomic-result-text\n            field=\"title\"\n            default=\"no-title\"\n          ></atomic-result-text>\n        )}\n      </LinkWithItemAnalytics>\n    );\n  }\n}\n","@import '../template-system/template-system.pcss';\n\n@mixin atomic-template-system map(post-css-map-for-sections, search);\n\n.result-root {\n  &.display-grid {\n    atomic-result-section-actions {\n      display: none;\n    }\n  }\n\n  .badge {\n    width: 14rem;\n  }\n\n  .action {\n    width: 10rem;\n  }\n\n  .title {\n    display: grid;\n    grid-auto-flow: column;\n    grid-gap: 0.5rem;\n    height: var(--line-height);\n    width: 30rem;\n    max-width: 100%;\n  }\n\n  .fields-placeholder {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, min(11rem, 40%));\n    grid-column-gap: 0.5rem;\n\n    .field-value-placeholder {\n      height: var(--font-size);\n      margin: calc((var(--line-height) - var(--font-size)) / 2) 0;\n    }\n  }\n}\n","import {Component, h, Prop} from '@stencil/core';\nimport {\n  ItemDisplayLayout,\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  getItemDisplayClasses,\n} from '../../common/layout/display-options';\n\nconst placeholderClasses = 'block bg-neutral w-full h-full rounded';\n\n/**\n * The `atomic-result-placeholder` component provides an intermediate visual state that is rendered before the first results are available.\n * @internal\n */\n@Component({\n  tag: 'atomic-result-placeholder',\n  styleUrl: 'atomic-result-placeholder.pcss',\n  shadow: true,\n})\nexport class AtomicResultPlaceholder {\n  @Prop() display!: ItemDisplayLayout;\n  @Prop() density!: ItemDisplayDensity;\n  @Prop() imageSize!: ItemDisplayImageSize;\n\n  private renderExcerptLine(width: string) {\n    return (\n      <div\n        style={{\n          height: 'var(--line-height)',\n          width,\n        }}\n      >\n        <div\n          class={placeholderClasses}\n          style={{height: 'var(--font-size)'}}\n        ></div>\n      </div>\n    );\n  }\n\n  public render() {\n    return (\n      <div\n        class={`result-root placeholder with-sections animate-pulse ${getItemDisplayClasses(\n          this.display,\n          this.density,\n          this.imageSize\n        )\n          .join(' ')\n          .trim()}`}\n      >\n        <atomic-result-section-visual>\n          <div class={placeholderClasses}></div>\n        </atomic-result-section-visual>\n        <atomic-result-section-badges>\n          <div class={`badge ${placeholderClasses}`}></div>\n        </atomic-result-section-badges>\n        <atomic-result-section-actions>\n          <div class={`action ${placeholderClasses}`}></div>\n        </atomic-result-section-actions>\n        <atomic-result-section-title>\n          <div class={`title ${placeholderClasses}`}></div>\n        </atomic-result-section-title>\n        <atomic-result-section-excerpt>\n          {this.renderExcerptLine('100%')}\n          {this.renderExcerptLine('95%')}\n          {this.renderExcerptLine('98%')}\n        </atomic-result-section-excerpt>\n        <atomic-result-section-bottom-metadata>\n          <div class=\"fields-placeholder\">\n            {Array.from({length: 4}, () => (\n              <div\n                class={`field-value-placeholder ${placeholderClasses}`}\n              ></div>\n            ))}\n          </div>\n        </atomic-result-section-bottom-metadata>\n      </div>\n    );\n  }\n}\n","import {Element, Component} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\n\n/**\n * This section allows the information seeker to perform an action on an item without having to view its details.\n * For example, in Commerce you can add an item to the cart directly or add it to a wish list to view at a later time.\n *\n * Behavior:\n * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.\n * ** You should ensure that elements inside of it have `height: var(--line-height)`.\n * * Is a wrapping flexbox with a gap.\n * * May appear over, next to, or beneath the visual section.\n */\n@Component({\n  tag: 'atomic-result-section-actions',\n  shadow: false,\n})\nexport class AtomicResultSectionActions {\n  @Element() private host!: HTMLElement;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","import {Element, Component} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\n\n/**\n * This section provides badges that highlight special features of the item.\n *\n * Behavior:\n * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.\n * ** You should ensure that elements inside of it have `height: var(--line-height)`.\n * * Is a wrapping flexbox with a gap.\n * * May appear over, next to, or beneath the visual section.\n */\n@Component({\n  tag: 'atomic-result-section-badges',\n  shadow: false,\n})\nexport class AtomicResultSectionBadges {\n  @Element() private host!: HTMLElement;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","import {Element, Component} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\n\n/**\n * This section displays additional descriptive information about the item.\n *\n * Behavior:\n * * Has a maximum height of two lines.\n * ** We recommend that you use `atomic-result-fields-list` to ensure that the fields in this section don’t overflow.\n * * Exposes the `--line-height` variable so child elements can adjust to the current line height.\n * * Has a defined CSS `color` property for text.\n * * Has a font weight.\n */\n@Component({\n  tag: 'atomic-result-section-bottom-metadata',\n  shadow: false,\n})\nexport class AtomicResultSectionBottomMetadata {\n  @Element() private host!: HTMLElement;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","import {Element, Component} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\n\n/**\n * This section contains an informative summary of the item's content.\n *\n * Behavior:\n * * Has a fixed height of one to three lines, depending on the layout and density.\n * * Ellipses overflowing text.\n * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.\n * * Has a defined CSS `color` property for text.\n */\n@Component({\n  tag: 'atomic-result-section-excerpt',\n  shadow: false,\n})\nexport class AtomicResultSectionExcerpt {\n  @Element() private host!: HTMLElement;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","import {Element, Component} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\n\n/**\n * This section identifies the item by its name, and its main use is to make the result list scannable.\n * This is usually the page title.\n *\n * Behavior:\n * * Has a fixed height of two lines on grid layouts.\n * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.\n * * Has a defined CSS `color` property for text.\n */\n@Component({\n  tag: 'atomic-result-section-title',\n  shadow: false,\n})\nexport class AtomicResultSectionTitle {\n  @Element() private host!: HTMLElement;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","import {Element, Component, Prop} from '@stencil/core';\nimport {hideEmptySection} from '../../../../utils/item-section-utils';\nimport {ItemDisplayImageSize} from '../../../common/layout/display-options';\n\n/**\n * This section provides visual information about the item.\n * For example, in Commerce, an image is a great shorthand for a product category.\n * An icon can quickly show the item type, or an avatar can help identify to whom it is related.\n *\n * Behavior:\n * * Has a fixed size that depends on the specified image size, the layout, the density, and the screen size.\n * ** When the image size is set to `icon`, this section stays very small.\n * ** You should ensure that elements inside of it take the available space.\n * * Always has a 1:1 aspect ratio.\n */\n@Component({\n  tag: 'atomic-result-section-visual',\n  shadow: false,\n})\nexport class AtomicResultSectionVisual {\n  @Element() private host!: HTMLElement;\n\n  /**\n   * How large or small the visual section of results using this template should be.\n   */\n  @Prop({reflect: true}) public imageSize?: ItemDisplayImageSize;\n\n  public componentDidRender() {\n    hideEmptySection(this.host);\n  }\n}\n","@import '../../../global/global.pcss';\n@import '../../common/item-list/styles/mixins.pcss';\n\n:host {\n  display: grid;\n}\n\n.list-root.display-table {\n  @mixin atomic-result-table;\n  border: 1px solid var(--atomic-neutral);\n  border-radius: var(--atomic-border-radius-xl);\n\n  thead tr,\n  tbody tr:not(:last-child) {\n    position: relative;\n\n    &::after {\n      content: ' ';\n      display: block;\n      position: absolute;\n      height: 1px;\n      bottom: 0;\n      left: var(--padding);\n      right: var(--padding);\n      background-color: var(--atomic-neutral);\n    }\n  }\n\n  th,\n  td {\n    border-color: transparent;\n    border-radius: initial;\n  }\n\n  th {\n    background-color: transparent;\n  }\n}\n","import {Component, h, Prop} from '@stencil/core';\nimport {\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  getItemDisplayClasses,\n} from '../../common/layout/display-options';\n\nconst placeholderClasses = 'block bg-neutral rounded';\n\n/**\n * The `atomic-result-table-placeholder` component provides an intermediate visual state that is rendered before the first results are available.\n * @internal\n */\n@Component({\n  tag: 'atomic-result-table-placeholder',\n  styleUrl: 'atomic-result-table-placeholder.pcss',\n  shadow: true,\n})\nexport class AtomicResultTablePlaceholder {\n  @Prop() density!: ItemDisplayDensity;\n  @Prop() imageSize!: ItemDisplayImageSize;\n  @Prop() rows!: number;\n\n  private getClasses() {\n    return getItemDisplayClasses('table', this.density, this.imageSize);\n  }\n\n  public render() {\n    return (\n      <table class={`list-root animate-pulse ${this.getClasses().join(' ')}`}>\n        <thead>\n          <tr>\n            <th>\n              <div\n                class={`h-8 mt-2 ${placeholderClasses}`}\n                style={{width: '14.5rem'}}\n              ></div>\n            </th>\n            <th>\n              <div\n                class={`h-8 mt-2 ${placeholderClasses}`}\n                style={{width: '9.75rem'}}\n              ></div>\n            </th>\n            <th>\n              <div\n                class={`h-8 mt-2 ${placeholderClasses}`}\n                style={{width: '6.5rem'}}\n              ></div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from({length: this.rows}, () => (\n            <tr>\n              <td>\n                <div\n                  class={`h-8 mb-6 ${placeholderClasses}`}\n                  style={{width: '22.875rem'}}\n                ></div>\n                <div\n                  class={`h-5 mb-2 ${placeholderClasses}`}\n                  style={{width: '23.75rem'}}\n                ></div>\n                <div\n                  class={`h-5 ${placeholderClasses}`}\n                  style={{width: '11.5rem'}}\n                ></div>\n              </td>\n              <td>\n                <div\n                  class={`h-5 mt-1.5 ${placeholderClasses}`}\n                  style={{width: '11rem'}}\n                ></div>\n              </td>\n              <td>\n                <div\n                  class={`h-5 mt-1.5 ${placeholderClasses}`}\n                  style={{width: '4.875rem'}}\n                ></div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n"],"version":3}