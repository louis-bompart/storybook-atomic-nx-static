{"version":3,"names":["atomicInsightResultListCss","AtomicInsightResultListStyle0","AtomicInsightResultList","this","loadingFlag","randomID","display","templateHasError","resultTemplateRegistered","density","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","initialize","resultList","buildInsightResultList","bindings","engine","options","fieldsToInclude","store","state","undefined","resultsPerPage","buildInsightResultsPerPage","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","host","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","itemListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","resultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","focusTarget","nextNewResultTarget","FocusTargetController","render","updateBreakpoints","listClasses","computeListDisplayClasses","h","ItemListGuard","key","hasTemplate","hasError","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","isAppLoaded","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","map","result","i","atomicInsightResultProps","getPropsForAtomicInsightResult","part","ref","element","setNewResultRef","getItemListDisplayClasses","interactiveResult","buildInsightInteractiveResult","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.pcss?tag=atomic-insight-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../styles/list-display.pcss';\r\n","import {Component, h, Element, State, Prop, Method} from '@stencil/core';\r\nimport {\r\n  InsightResultList,\r\n  InsightResultListState,\r\n  buildInsightResultList,\r\n  InsightResult,\r\n  buildInsightInteractiveResult,\r\n  buildInsightResultsPerPage,\r\n  InsightResultsPerPage,\r\n  InsightResultsPerPageState,\r\n} from '../..';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  getItemListDisplayClasses,\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n} from '../../../common/layout/display-options';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result-list',\r\n  styleUrl: 'atomic-insight-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightResultList\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public resultList!: InsightResultList;\r\n  public resultsPerPage!: InsightResultsPerPage;\r\n  private loadingFlag = randomID('firstInsightResultLoaded-');\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private display: ItemDisplayLayout = 'list';\r\n  private itemListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  public resultsPerPageState!: InsightResultsPerPageState;\r\n  @BindStateToController('resultList')\r\n  @State()\r\n  public resultListState!: InsightResultListState;\r\n  @State() private templateHasError = false;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   *\r\n   * @param resultRenderingFunction\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  public initialize() {\r\n    this.resultList = buildInsightResultList(this.bindings.engine, {\r\n      options: {\r\n        fieldsToInclude: this.bindings.store.state.fieldsToInclude || undefined,\r\n      },\r\n    });\r\n    this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\r\n\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-insight-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.itemListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\r\n      getIsLoading: () => this.resultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  public get focusTarget(): FocusTargetController {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  public render() {\r\n    this.itemListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n        hasItems={this.resultListState.hasResults}\r\n        hasError={this.resultListState.hasError}\r\n      >\r\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\r\n          <ResultsPlaceholdersGuard\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n            display={this.display}\r\n            density={this.density}\r\n            imageSize={this.imageSize}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n            hasItems={this.resultListState.hasResults}\r\n          >\r\n            {this.resultListState.results.map((result, i) => {\r\n              const atomicInsightResultProps =\r\n                this.getPropsForAtomicInsightResult(result);\r\n              return (\r\n                <atomic-insight-result\r\n                  {...atomicInsightResultProps}\r\n                  part=\"outline\"\r\n                  ref={(element) =>\r\n                    element && this.itemListCommon.setNewResultRef(element, i)\r\n                  }\r\n                ></atomic-insight-result>\r\n              );\r\n            })}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.resultListState.firstSearchExecuted &&\r\n        this.resultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicInsightResult(result: InsightResult) {\r\n    return {\r\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.itemListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.resultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      imageSize: this.imageSize,\r\n      display: this.display,\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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"}