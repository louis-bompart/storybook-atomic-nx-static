{"version":3,"names":["tabsSelector","refineModalSelector","searchBoxSelector","toggleSelectors","smartSnippetSelectors","generatedAnswerSelector","buildInsightLayout","element","widget","id","layoutSelector","hasTabs","Boolean","_a","findSection","querySelector","interfaceStyle","search","sectionSelector","map","toggleSelector","facets","results","join","filter","declaration","AtomicInsightLayout","this","updateStyles","styleTag","innerHTML","host","makeStyleTag","bindings","createStyleElement","appendChild","componentDidLoad","randomID","__decorate","InitializeBindings"],"sources":["src/components/insight/atomic-insight-layout/insight-layout.ts","src/components/insight/atomic-insight-layout/atomic-insight-layout.tsx"],"sourcesContent":["import {\n  sectionSelector,\n  findSection,\n} from '../../common/atomic-layout-section/sections';\n\nconst tabsSelector = 'atomic-insight-tabs';\nconst refineModalSelector = 'atomic-insight-refine-modal';\nconst searchBoxSelector = 'atomic-insight-search-box';\nconst toggleSelectors = [\n  'atomic-insight-refine-toggle',\n  'atomic-insight-edit-toggle',\n  'atomic-insight-history-toggle',\n];\nconst smartSnippetSelectors = [\n  'atomic-insight-smart-snippet-suggestions',\n  'atomic-insight-smart-snippet',\n];\nconst generatedAnswerSelector = 'atomic-insight-generated-answer';\n\nexport function buildInsightLayout(element: HTMLElement, widget: boolean) {\n  const id = element.id;\n  const layoutSelector = `atomic-insight-layout#${id}`;\n\n  const hasTabs = Boolean(\n    findSection(element, 'search')?.querySelector(tabsSelector)\n  );\n\n  const interfaceStyle = widget\n    ? `\n  ${layoutSelector} {\n    display: grid;\n    grid-template-rows: auto auto 8fr 1fr;\n    max-height: 100%;\n    box-sizing: border-box;\n  }\n  ${layoutSelector} ${refineModalSelector} {\n    grid-row-start: 5;\n  }`\n    : '';\n\n  const search = `${sectionSelector('search')} {\n      width: 100%;\n      display: flex;\n      flex-wrap: wrap;\n      grid-gap: 0.5rem;\n      background: var(--atomic-neutral-light);\n      padding-top: 1.5rem;\n      padding-left: 1.5rem;\n      padding-right: 1.5rem;\n      box-sizing: border-box;\n      min-width: 0;\n      ${!hasTabs ? 'padding-bottom: 1.5rem;' : ''}\n    }\n\n    ${sectionSelector('search')} ${searchBoxSelector} {\n      flex-grow: 1;\n    }\n\n    ${toggleSelectors.map(\n      (toggleSelector) => `${sectionSelector('search')} ${toggleSelector} {\n      flex-shrink: 0;\n    }`\n    )}\n\n    ${sectionSelector('search')} ${tabsSelector} {\n      width: 100%;\n    }\n    `;\n\n  const facets = `${sectionSelector('facets')} {\n      display: none;\n    }\n    `;\n\n  const results = `\n    ${sectionSelector('results')} {\n      overflow: auto;\n    }\n\n    ${sectionSelector('results')} ${smartSnippetSelectors.join(',')} {\n      padding: 1.5rem 1.5rem 0px;\n    }\n\n    ${sectionSelector('results')} ${generatedAnswerSelector} {\n      margin-left: 1.5rem;\n      margin-right: 1.5rem;\n    }\n    `;\n\n  return [interfaceStyle, search, facets, results]\n    .filter((declaration) => declaration !== '')\n    .join('\\n\\n');\n}\n","import {Component, Element, Prop, Watch} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\nimport {buildInsightLayout} from './insight-layout';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-layout',\n  shadow: false,\n})\nexport class AtomicInsightLayout\n  implements InitializableComponent<InsightBindings>\n{\n  public error!: Error;\n  private styleTag?: HTMLStyleElement;\n  @Element() private host!: HTMLElement;\n  /**\n   * Whether the interface should be shown in widget format.\n   */\n  @Prop({reflect: true, mutable: true}) public widget = false;\n  @InitializeBindings() public bindings!: InsightBindings;\n  @Watch('widget')\n  public updateStyles() {\n    if (this.styleTag) {\n      this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\n    } else {\n      this.makeStyleTag();\n    }\n  }\n\n  private makeStyleTag() {\n    this.styleTag = this.bindings.createStyleElement();\n    this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\n    this.host.appendChild(this.styleTag);\n  }\n\n  public componentDidLoad() {\n    const id = this.host.id || randomID('atomic-insight-layout-');\n    this.host.id = id;\n\n    this.makeStyleTag();\n  }\n}\n"],"mappings":"8MAKA,MAAMA,EAAe,sBACrB,MAAMC,EAAsB,8BAC5B,MAAMC,EAAoB,4BAC1B,MAAMC,EAAkB,CACtB,+BACA,6BACA,iCAEF,MAAMC,EAAwB,CAC5B,2CACA,gCAEF,MAAMC,EAA0B,kC,SAEhBC,EAAmBC,EAAsBC,G,MACvD,MAAMC,EAAKF,EAAQE,GACnB,MAAMC,EAAiB,yBAAyBD,IAEhD,MAAME,EAAUC,SACdC,EAAAC,EAAYP,EAAS,aAAS,MAAAM,SAAA,SAAAA,EAAEE,cAAcf,IAGhD,MAAMgB,EAAiBR,EACnB,OACFE,mIAMAA,KAAkBT,mCAGhB,GAEJ,MAAMgB,EAAS,GAAGC,EAAgB,6SAW3BP,EAAU,0BAA4B,oBAGzCO,EAAgB,aAAahB,0CAI7BC,EAAgBgB,KACfC,GAAmB,GAAGF,EAAgB,aAAaE,gDAKpDF,EAAgB,aAAalB,uCAKjC,MAAMqB,EAAS,GAAGH,EAAgB,iDAKlC,MAAMI,EAAU,SACZJ,EAAgB,qDAIhBA,EAAgB,cAAcd,EAAsBmB,KAAK,2DAIzDL,EAAgB,cAAcb,4EAMlC,MAAO,CAACW,EAAgBC,EAAQI,EAAQC,GACrCE,QAAQC,GAAgBA,IAAgB,KACxCF,KAAK,OACV,C,iXC5EaG,EAAmB,M,yBASeC,KAAAnB,OAAS,M,YAAA,K,CAG/C,YAAAoB,GACL,GAAID,KAAKE,SAAU,CACjBF,KAAKE,SAASC,UAAYxB,EAAmBqB,KAAKI,KAAMJ,KAAKnB,O,KACxD,CACLmB,KAAKK,c,EAID,YAAAA,GACNL,KAAKE,SAAWF,KAAKM,SAASC,qBAC9BP,KAAKE,SAASC,UAAYxB,EAAmBqB,KAAKI,KAAMJ,KAAKnB,QAC7DmB,KAAKI,KAAKI,YAAYR,KAAKE,S,CAGtB,gBAAAO,GACL,MAAM3B,EAAKkB,KAAKI,KAAKtB,IAAM4B,EAAS,0BACpCV,KAAKI,KAAKtB,GAAKA,EAEfkB,KAAKK,c,mFApBsBM,EAAA,CAA5BC,K"}