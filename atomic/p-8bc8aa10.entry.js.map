{"version":3,"names":["AtomicInsightResultTemplate","constructor","hostRef","this","matchConditions","conditions","mustMatch","mustNotMatch","resultTemplateCommon","ResultTemplateCommon","host","setError","err","error","validParents","allowEmpty","componentWillLoad","makeDefinedConditions","ifDefined","ifNotDefined","makeMatchConditions","getTemplate","render","renderIfError","__decorate","MapProp","splitValues"],"sources":["src/components/insight/result-templates/atomic-insight-result-template/atomic-insight-result-template.tsx"],"sourcesContent":["import {Component, Element, Prop, Method, State} from '@stencil/core';\r\nimport {InsightResultTemplate, InsightResultTemplateCondition} from '../..';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {\r\n  makeDefinedConditions,\r\n  makeMatchConditions,\r\n  ResultTemplateCommon,\r\n} from '../../../common/result-templates/result-template-common';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result-template',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightResultTemplate {\r\n  private resultTemplateCommon: ResultTemplateCommon;\r\n\r\n  @State() public error!: Error;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n  public matchConditions: InsightResultTemplateCondition[] = [];\r\n\r\n  /**\r\n   * A function that must return true on results for the result template to apply.\r\n   * Set programmatically before initialization, not via attribute.\r\n   *\r\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\r\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\r\n   */\r\n  @Prop() public conditions: InsightResultTemplateCondition[] = [];\r\n\r\n  /**\r\n   * The field that, when defined on a result item, would allow the template to be applied.\r\n   *\r\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined=\"filetype,sourcetype\"`\r\n   */\r\n  @Prop({reflect: true}) ifDefined?: string;\r\n\r\n  /**\r\n   * The field that, when defined on a result item, would prevent the template from being applied.\r\n   *\r\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined=\"filetype,sourcetype\"`\r\n   */\r\n  @Prop({reflect: true}) ifNotDefined?: string;\r\n\r\n  /**\r\n   * The field and values that define which result items the condition must be applied to.\r\n   *\r\n   * For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`\r\n   */\r\n  @MapProp({splitValues: true}) public mustMatch: Record<string, string[]> = {};\r\n\r\n  /**\r\n   * The field and values that define which result items the condition must not be applied to.\r\n   *\r\n   * For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\"`\r\n   */\r\n  @MapProp({splitValues: true}) public mustNotMatch: Record<string, string[]> =\r\n    {};\r\n\r\n  constructor() {\r\n    this.resultTemplateCommon = new ResultTemplateCommon({\r\n      host: this.host,\r\n      setError: (err) => {\r\n        this.error = err;\r\n      },\r\n      validParents: [\r\n        'atomic-insight-result-list',\r\n        'atomic-insight-folded-result-list',\r\n      ],\r\n      allowEmpty: true,\r\n    });\r\n  }\r\n\r\n  public componentWillLoad() {\r\n    this.conditions = makeDefinedConditions(this.ifDefined, this.ifNotDefined);\r\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\r\n      this.mustMatch,\r\n      this.mustNotMatch\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the appropriate result template based on conditions applied.\r\n   */\r\n  @Method()\r\n  public async getTemplate(): Promise<InsightResultTemplate<DocumentFragment> | null> {\r\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\r\n  }\r\n\r\n  public render() {\r\n    return this.resultTemplateCommon.renderIfError(this.error);\r\n  }\r\n}\r\n"],"mappings":"koBAgBaA,EAA2B,MA8CtC,WAAAC,CAAAC,G,UAxCOC,KAAAC,gBAAoD,GAS5CD,KAAAE,WAA+C,GAqBzBF,KAAAG,UAAsC,GAOtCH,KAAAI,aACnC,G,qCA7B4D,G,qDAgC5DJ,KAAKK,qBAAuB,IAAIC,EAAqB,CACnDC,KAAMP,KAAKO,KACXC,SAAWC,IACTT,KAAKU,MAAQD,CAAG,EAElBE,aAAc,CACZ,6BACA,qCAEFC,WAAY,M,CAIT,iBAAAC,GACLb,KAAKE,WAAaY,EAAsBd,KAAKe,UAAWf,KAAKgB,cAC7DhB,KAAKK,qBAAqBJ,gBAAkBgB,EAC1CjB,KAAKG,UACLH,KAAKI,a,CAQF,iBAAMc,GACX,OAAOlB,KAAKK,qBAAqBa,YAAYlB,KAAKE,WAAYF,KAAKU,M,CAG9D,MAAAS,GACL,OAAOnB,KAAKK,qBAAqBe,cAAcpB,KAAKU,M,6BAzCjBW,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q,gCAOcF,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q"}