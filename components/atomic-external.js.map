{"file":"atomic-external.js","mappings":";;;;;MAcaA,gBAAc;;;;;;;QAIF,aAAQ,GAAG,yBAAyB,CAAC;wBAA1B,yBAAyB;;IAEpD,oBAAoB,CAAC,KAAsB;QAChD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,aAAa,CAC1B,gBAAgB,CAAC,mBAAmB,EAAE,KAAK,CAAC,MAAM,CAAC,CACpD,CAAC;KACH;IAGM,iBAAiB,CAAC,KAAkB;QACzC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,aAAa,CAC1B,gBAAgB,CAAC,oBAAoB,EAAE,KAAK,CAAC,MAAM,CAAC,CACrD,CAAC;KACH;IAED,IAAY,SAAS;QACnB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CACb,gDAAgD,IAAI,CAAC,QAAQ,GAAG,CACjE,CAAC;SACH;QAED,OAAO,OAAO,CAAC;KAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicExternal"],"sources":["src/components/search/atomic-external/atomic-external.tsx"],"sourcesContent":["import {Component, Prop, Listen} from '@stencil/core';\nimport {buildCustomEvent} from '../../../utils/event-utils';\nimport {\n  InitializeEvent,\n  initializeEventName,\n} from '../../../utils/initialization-utils';\n\n/**\n * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.\n */\n@Component({\n  tag: 'atomic-external',\n  shadow: false,\n})\nexport class AtomicExternal {\n  /**\n   * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.\n   */\n  @Prop({reflect: true}) selector = 'atomic-search-interface';\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.interface.dispatchEvent(\n      buildCustomEvent(initializeEventName, event.detail)\n    );\n  }\n\n  @Listen('atomic/scrollToTop')\n  public handleScrollToTop(event: CustomEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.interface.dispatchEvent(\n      buildCustomEvent('atomic/scrollToTop', event.detail)\n    );\n  }\n\n  private get interface() {\n    const element = document.querySelector(this.selector);\n    if (!element) {\n      throw new Error(\n        `Cannot find interface element with selector \"${this.selector}\"`\n      );\n    }\n\n    return element;\n  }\n}\n"],"version":3}