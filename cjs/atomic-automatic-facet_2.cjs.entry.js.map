{"file":"atomic-automatic-facet.atomic-automatic-facet-generator.entry.cjs.js","mappings":"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","names":["FocusTargetController","getFieldValueCaption","h","FacetValueCheckbox","FacetValueLabelHighlight","FacetValuesGroup","isNullOrUndefined","FacetHeader","Hidden","FacetContainer","__decorate","InitializeBindings","buildSearchStatus","buildAutomaticFacetGenerator","Schema","NumberValue","index","FacetPlaceholder","BindStateToController"],"sources":["src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.pcss?tag=atomic-automatic-facet&encapsulation=shadow","src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.tsx","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\r\n","import {isNullOrUndefined} from '@coveo/bueno';\r\nimport {AutomaticFacet, SearchStatus, FacetValue} from '@coveo/headless';\r\nimport {Component, Prop, State, h, VNode} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\r\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * An automatic facet is a special type of facet generated by the automatic facets feature.\r\n * Unlike regular facets, which need to be explicitly defined and requested in the query,\r\n * automatic facets are dynamically generated by the index in response to the query.\r\n *\r\n * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`\r\n * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet',\r\n  styleUrl: 'atomic-automatic-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicAutomaticFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facetId!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facet!: AutomaticFacet;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public searchStatus!: SearchStatus;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed!: boolean;\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget() {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facet.state.values.filter((value) => this.isSelected(value))\r\n      .length;\r\n  }\r\n\r\n  private isSelected(value: FacetValue) {\r\n    return value.state === 'selected';\r\n  }\r\n\r\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.facet.state.field,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return (\r\n      <FacetValueCheckbox\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={this.isSelected(facetValue)}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n      >\r\n        <FacetValueLabelHighlight\r\n          displayValue={displayValue}\r\n          isSelected={this.isSelected(facetValue)}\r\n        ></FacetValueLabelHighlight>\r\n      </FacetValueCheckbox>\r\n    );\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[], query?: string) {\r\n    return (\r\n      <FacetValuesGroup\r\n        i18n={this.bindings.i18n}\r\n        label={this.facet.state.label}\r\n        query={query}\r\n      >\r\n        <ul class={'mt-3'} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facet.state.values.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private get label() {\r\n    return isNullOrUndefined(this.facet.state.label)\r\n      ? this.facet.state.field\r\n      : this.facet.state.label;\r\n  }\r\n\r\n  public renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTarget.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={0}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTarget.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatus.state.hasError) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && this.renderValues()}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n","@import '../../../../global/global.pcss';\r\n","import {NumberValue, Schema} from '@coveo/bueno';\r\nimport {\r\n  AutomaticFacetGenerator,\r\n  AutomaticFacetGeneratorState,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildAutomaticFacetGenerator,\r\n  buildSearchStatus,\r\n} from '@coveo/headless';\r\nimport {Component, Method, Prop, State, h} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\r\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\r\n * and requested in the query, automatic facets are dynamically generated by the index\r\n * in response to the search query.\r\n *\r\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet-generator',\r\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\r\n  shadow: false,\r\n})\r\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\r\n  @BindStateToController('automaticFacetGenerator')\r\n  @State()\r\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\r\n\r\n  public searchStatus!: SearchStatus;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n\r\n  /**\r\n   * The desired count of automatic facets.\r\n   *\r\n   * Minimum: `1`\r\n   * Maximum: `20`\r\n   * @defaultValue `5`\r\n   */\r\n  @Prop({reflect: true}) public desiredCount = 5;\r\n\r\n  /**\r\n   * The desired number of automatically generated facet values.\r\n   *\r\n   * Minimum: `1`\r\n   * @defaultValue `8`\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n\r\n  @State() private collapseFacetsAfter = -1;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\r\n      this.bindings.engine,\r\n      {\r\n        options: {\r\n          desiredCount: this.desiredCount,\r\n          numberOfValues: this.numberOfValues,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  @Method()\r\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\r\n    collapseAfter: number,\r\n    numberOfVisibleFacets: number\r\n  ) {\r\n    if (collapseAfter === -1) {\r\n      this.collapseFacetsAfter = -1;\r\n      return;\r\n    }\r\n    this.collapseFacetsAfter = Math.max(\r\n      0,\r\n      collapseAfter - numberOfVisibleFacets\r\n    );\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\r\n    }).validate({\r\n      collapseFacetAfter: this.collapseFacetsAfter,\r\n    });\r\n  }\r\n\r\n  private shouldCollapseFacet(index: number): boolean {\r\n    if (this.collapseFacetsAfter === -1) {\r\n      return false;\r\n    }\r\n    return this.collapseFacetsAfter\r\n      ? index + 1 > this.collapseFacetsAfter\r\n      : true;\r\n  }\r\n\r\n  public render() {\r\n    const automaticFacets =\r\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\r\n        return (\r\n          <atomic-automatic-facet\r\n            key={facet.state.field}\r\n            field={facet.state.field}\r\n            facetId={facet.state.field}\r\n            facet={facet}\r\n            searchStatus={this.searchStatus}\r\n            isCollapsed={this.shouldCollapseFacet(index)}\r\n          ></atomic-automatic-facet>\r\n        );\r\n      });\r\n    if (!this.searchStatus.state.firstSearchExecuted) {\r\n      return Array.from({length: this.desiredCount}, (_, index) => (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfValues}\r\n          isCollapsed={this.shouldCollapseFacet(index)}\r\n        />\r\n      ));\r\n    }\r\n\r\n    return automaticFacets;\r\n  }\r\n}\r\n"],"version":3}