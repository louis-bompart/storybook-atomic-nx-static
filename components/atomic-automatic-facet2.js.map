{"file":"atomic-automatic-facet2.js","mappings":"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","names":[],"sources":["src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.pcss?tag=atomic-automatic-facet&encapsulation=shadow","src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\r\n","import {isNullOrUndefined} from '@coveo/bueno';\r\nimport {AutomaticFacet, SearchStatus, FacetValue} from '@coveo/headless';\r\nimport {Component, Prop, State, h, VNode} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\r\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * An automatic facet is a special type of facet generated by the automatic facets feature.\r\n * Unlike regular facets, which need to be explicitly defined and requested in the query,\r\n * automatic facets are dynamically generated by the index in response to the query.\r\n *\r\n * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`\r\n * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet',\r\n  styleUrl: 'atomic-automatic-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicAutomaticFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facetId!: string;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public facet!: AutomaticFacet;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true}) public searchStatus!: SearchStatus;\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed!: boolean;\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget() {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facet.state.values.filter((value) => this.isSelected(value))\r\n      .length;\r\n  }\r\n\r\n  private isSelected(value: FacetValue) {\r\n    return value.state === 'selected';\r\n  }\r\n\r\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.facet.state.field,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return (\r\n      <FacetValueCheckbox\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={this.isSelected(facetValue)}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n      >\r\n        <FacetValueLabelHighlight\r\n          displayValue={displayValue}\r\n          isSelected={this.isSelected(facetValue)}\r\n        ></FacetValueLabelHighlight>\r\n      </FacetValueCheckbox>\r\n    );\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[], query?: string) {\r\n    return (\r\n      <FacetValuesGroup\r\n        i18n={this.bindings.i18n}\r\n        label={this.facet.state.label}\r\n        query={query}\r\n      >\r\n        <ul class={'mt-3'} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facet.state.values.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private get label() {\r\n    return isNullOrUndefined(this.facet.state.label)\r\n      ? this.facet.state.field\r\n      : this.facet.state.label;\r\n  }\r\n\r\n  public renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTarget.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={0}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTarget.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatus.state.hasError) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && this.renderValues()}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n"],"version":3}