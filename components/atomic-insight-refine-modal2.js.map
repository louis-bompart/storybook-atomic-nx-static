{"file":"atomic-insight-refine-modal2.js","mappings":"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","names":["buildInsightQuerySummary","buildInsightBreadcrumbManager"],"sources":["src/utils/dom-utils.tsx","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.pcss?tag=atomic-insight-refine-modal&encapsulation=shadow","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.tsx"],"sourcesContent":["export function rectEquals(r1: DOMRect, r2: DOMRect) {\n  return (\n    r1.x === r2.x &&\n    r1.y === r2.y &&\n    r1.width === r2.width &&\n    r1.height === r2.height\n  );\n}\n","@import '../../common/refine-modal/refine-modal-common.pcss';\n","import {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\nimport {\n  InsightQuerySummary,\n  InsightQuerySummaryState,\n  buildInsightQuerySummary,\n  InsightBreadcrumbManager,\n  InsightBreadcrumbManagerState,\n  buildInsightBreadcrumbManager,\n} from '..';\nimport {rectEquals} from '../../../utils/dom-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Button} from '../../common/button';\nimport {Hidden} from '../../common/hidden';\nimport {\n  getClonedFacetElements,\n  RefineModalCommon,\n} from '../../common/refine-modal/refine-modal-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-refine-modal',\n  styleUrl: 'atomic-insight-refine-modal.pcss',\n  shadow: true,\n})\nexport class AtomicInsightRefineModal\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @Element() public host!: HTMLElement;\n\n  @BindStateToController('querySummary')\n  @State()\n  public querySummaryState!: InsightQuerySummaryState;\n\n  @BindStateToController('breadcrumbManager')\n  @State()\n  public breadcrumbManagerState!: InsightBreadcrumbManagerState;\n\n  @State()\n  public error!: Error;\n\n  @State()\n  public interfaceDimensions?: DOMRect;\n\n  @Prop({mutable: true}) openButton?: HTMLElement;\n\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  public querySummary!: InsightQuerySummary;\n  private breadcrumbManager!: InsightBreadcrumbManager;\n\n  @Watch('isOpen')\n  watchEnabled(isOpen: boolean) {\n    if (isOpen) {\n      if (!this.host.querySelector('div[slot=\"facets\"]')) {\n        this.host.append(\n          getClonedFacetElements(\n            this.bindings.store.getFacetElements(),\n            0,\n            this.bindings.interfaceElement\n          )\n        );\n      }\n      this.onAnimationFrame();\n    }\n  }\n\n  private onAnimationFrame() {\n    if (!this.isOpen) {\n      return;\n    }\n    if (this.dimensionChanged()) {\n      this.updateDimensions();\n    }\n    window.requestAnimationFrame(() => this.onAnimationFrame());\n  }\n\n  private dimensionChanged() {\n    if (!this.interfaceDimensions) {\n      return true;\n    }\n\n    return !rectEquals(\n      this.interfaceDimensions,\n      this.bindings.interfaceElement.getBoundingClientRect()\n    );\n  }\n\n  public updateDimensions() {\n    this.interfaceDimensions =\n      this.bindings.interfaceElement.getBoundingClientRect();\n  }\n\n  public initialize() {\n    this.querySummary = buildInsightQuerySummary(this.bindings.engine);\n    this.breadcrumbManager = buildInsightBreadcrumbManager(\n      this.bindings.engine\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <div class=\"w-full flex justify-between mb-3\">\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\n          <Button\n            onClick={() => this.breadcrumbManager.deselectAll()}\n            style=\"text-primary\"\n            text={this.bindings.i18n.t('clear-all-filters')}\n            class=\"px-2 py-1\"\n          ></Button>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    if (!this.bindings.store.getFacetElements().length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <aside slot=\"body\" class=\"flex flex-col w-full adjust-for-scroll-bar\">\n        {this.renderHeader()}\n        <slot name=\"facets\"></slot>\n      </aside>\n    );\n  }\n\n  public render() {\n    return (\n      <Host>\n        {this.interfaceDimensions && (\n          <style>\n            {`atomic-modal::part(backdrop) {\n            top: ${this.interfaceDimensions.top}px;\n            left: ${this.interfaceDimensions.left}px;\n            width: ${this.interfaceDimensions.width}px;\n            height: ${this.interfaceDimensions.height}px;\n            }`}\n          </style>\n        )}\n        <RefineModalCommon\n          bindings={this.bindings}\n          host={this.host}\n          isOpen={this.isOpen}\n          onClose={() => (this.isOpen = false)}\n          querySummaryState={this.querySummaryState}\n          title={this.bindings.i18n.t('filters')}\n          openButton={this.openButton}\n          scope={this.bindings.interfaceElement}\n        >\n          {this.renderBody()}\n        </RefineModalCommon>\n      </Host>\n    );\n  }\n\n  public componentDidLoad() {\n    this.host.style.display = '';\n  }\n}\n"],"version":3}