{"file":"display-options.js","mappings":";;AAQA,SAAS,eAAe,CAAC,OAA0B;IACjD,QAAQ,OAAO;QACb,KAAK,MAAM;YACT,OAAO,cAAc,CAAC;QACxB,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,cAAc,CAAC;QACxB,KAAK,OAAO;YACV,OAAO,eAAe,CAAC;KAC1B;AACH,CAAC;AAED,SAAS,eAAe,CAAC,OAA2B;IAClD,QAAQ,OAAO;QACb,KAAK,aAAa;YAChB,OAAO,qBAAqB,CAAC;QAC/B,KAAK,QAAQ,CAAC;QACd;YACE,OAAO,gBAAgB,CAAC;QAC1B,KAAK,SAAS;YACZ,OAAO,iBAAiB,CAAC;KAC5B;AACH,CAAC;AAED,SAAS,aAAa,CAAC,KAA2B;IAChD,QAAQ,KAAK;QACX,KAAK,OAAO;YACV,OAAO,aAAa,CAAC;QACvB,KAAK,OAAO;YACV,OAAO,aAAa,CAAC;QACvB,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,YAAY,CAAC;QACtB,KAAK,MAAM;YACT,OAAO,YAAY,CAAC;KACvB;AACH,CAAC;SAEe,yBAAyB,CACvC,OAA0B,EAC1B,OAA2B,EAC3B,KAA2B,EAC3B,SAAkB,EAClB,YAAqB;IAErB,MAAM,OAAO,GAAG,qBAAqB,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAE/D,IAAI,SAAS,EAAE;QACb,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACzB;IAED,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC7B;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;SAEe,qBAAqB,CACnC,OAA0B,EAC1B,OAA2B,EAC3B,KAA2B;IAE3B,MAAM,OAAO,GAAG;QACd,eAAe,CAAC,OAAO,CAAC;QACxB,eAAe,CAAC,OAAO,CAAC;QACxB,aAAa,CAAC,KAAK,CAAC;KACrB,CAAC;IACF,OAAO,OAAO,CAAC;AACjB,CAAC;MAEY,UAAU;IAMrB,YACE,QAAwB,EACxB,OAA0B,EAC1B,OAA2B,EAC3B,SAA+B;QAE/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;IAEO,wBAAwB;;QAC9B,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,UAAU,CAC/B,8BAA8B,CAC/B,0CAAE,YAAY,CAAC,YAAY,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,SAAiC,CAAC;KAC1C;IAEO,UAAU,CAAC,OAA2B;QAC5C,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CACnC,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CACvD,CAAC;KACH;IAEM,UAAU,CAAC,WAAoB;;QACpC,MAAM,OAAO,GAAG,qBAAqB,CACnC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,EACZ,MAAA,IAAI,CAAC,wBAAwB,EAAE,mCAAI,IAAI,CAAC,SAAS,CAClD,CAAC;QACF,IACE,WAAW;cACP,gBAAgB,CAAC,WAAW,CAAC;cAC7B,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EACnC;YACA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC/B;QACD,OAAO,OAAO,CAAC;KAChB;;;;;","names":[],"sources":["src/components/common/layout/display-options.ts"],"sourcesContent":["import {containsSections, ItemSectionTagName} from './sections';\n\nexport type ItemDisplayBasicLayout = 'list' | 'grid';\nexport type ItemDisplayLayout = ItemDisplayBasicLayout | 'table';\nexport type ItemDisplayDensity = 'comfortable' | 'normal' | 'compact';\nexport type ItemDisplayImageSize = 'large' | 'small' | 'icon' | 'none';\nexport type ItemTarget = '_self' | '_blank' | '_parent' | '_top';\n\nfunction getDisplayClass(display: ItemDisplayLayout) {\n  switch (display) {\n    case 'grid':\n      return 'display-grid';\n    case 'list':\n    default:\n      return 'display-list';\n    case 'table':\n      return 'display-table';\n  }\n}\n\nfunction getDensityClass(density: ItemDisplayDensity) {\n  switch (density) {\n    case 'comfortable':\n      return 'density-comfortable';\n    case 'normal':\n    default:\n      return 'density-normal';\n    case 'compact':\n      return 'density-compact';\n  }\n}\n\nfunction getImageClass(image: ItemDisplayImageSize) {\n  switch (image) {\n    case 'large':\n      return 'image-large';\n    case 'small':\n      return 'image-small';\n    case 'icon':\n    default:\n      return 'image-icon';\n    case 'none':\n      return 'image-none';\n  }\n}\n\nexport function getItemListDisplayClasses(\n  display: ItemDisplayLayout,\n  density: ItemDisplayDensity,\n  image: ItemDisplayImageSize,\n  isLoading: boolean,\n  isAppLoading: boolean\n) {\n  const classes = getItemDisplayClasses(display, density, image);\n\n  if (isLoading) {\n    classes.push('loading');\n  }\n\n  if (isAppLoading) {\n    classes.push('placeholder');\n  }\n  return classes.join(' ');\n}\n\nexport function getItemDisplayClasses(\n  display: ItemDisplayLayout,\n  density: ItemDisplayDensity,\n  image: ItemDisplayImageSize\n) {\n  const classes = [\n    getDisplayClass(display),\n    getDensityClass(density),\n    getImageClass(image),\n  ];\n  return classes;\n}\n\nexport class ItemLayout {\n  private children: HTMLCollection;\n  private density: ItemDisplayDensity;\n  private imageSize: ItemDisplayImageSize;\n  private display: ItemDisplayLayout;\n\n  constructor(\n    children: HTMLCollection,\n    display: ItemDisplayLayout,\n    density: ItemDisplayDensity,\n    imageSize: ItemDisplayImageSize\n  ) {\n    this.children = children;\n    this.display = display;\n    this.density = density;\n    this.imageSize = imageSize;\n  }\n\n  private getImageSizeFromSections() {\n    const imageSize = this.getSection(\n      'atomic-result-section-visual'\n    )?.getAttribute('image-size');\n    if (!imageSize) {\n      return undefined;\n    }\n    return imageSize as ItemDisplayImageSize;\n  }\n\n  private getSection(section: ItemSectionTagName) {\n    return Array.from(this.children).find(\n      (element) => element.tagName.toLowerCase() === section\n    );\n  }\n\n  public getClasses(HTMLContent?: string) {\n    const classes = getItemDisplayClasses(\n      this.display,\n      this.density,\n      this.getImageSizeFromSections() ?? this.imageSize\n    );\n    if (\n      HTMLContent\n        ? containsSections(HTMLContent)\n        : containsSections(this.children)\n    ) {\n      classes.push('with-sections');\n    }\n    return classes;\n  }\n}\n"],"version":3}