{"file":"atomic-facet.entry.cjs.js","mappings":"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","names":["buildFacet","buildSearchStatus","shouldUpdateFacetSearchComponent","h","FacetGuard","FacetContainer","FacetHeader","FacetPlaceholder","Fragment","FacetSearchInputGuard","FacetSearchInput","getFieldCaptions","shouldDisplaySearchResults","FacetValuesGroup","FacetSearchValue","FacetValue","FacetShowMoreLess","FacetSearchMatches","buildFacetConditionsManager","parseDependsOn","initializePopover","announceFacetSearchResultsWithAriaLive","FocusTargetController","InitializeBindings","BindStateToController","MapProp","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/facets/atomic-facet/atomic-facet.pcss?tag=atomic-facet&encapsulation=shadow","src/components/search/facets/atomic-facet/atomic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildFacetConditionsManager,\n  FacetResultsMustMatch,\n  FacetConditionsManager,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {\n  Component,\n  h,\n  State,\n  Prop,\n  Element,\n  VNode,\n  Fragment,\n} from '@stencil/core';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {getFieldCaptions} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\nimport {FacetSearchInputGuard} from '../../../common/facets/facet-search/facet-search-input-guard';\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\nimport {\n  shouldDisplaySearchResults,\n  shouldUpdateFacetSearchComponent,\n} from '../../../common/facets/facet-search/facet-search-utils';\nimport {FacetSearchValue} from '../../../common/facets/facet-search/facet-search-value';\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {\n  FacetValueProps,\n  FacetValue,\n} from '../../../common/facets/facet-value/facet-value';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-facet` displays a facet of the results for the current query.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n * @part value-exclude-button - The button to exclude a facet value, available when display is 'checkbox'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-facet',\n  styleUrl: 'atomic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: Facet;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain a search box.\n   *\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * Whether to allow excluding values from the facet.\n   */\n  @Prop({reflect: true}) public enableExclusion = false;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.\n   *\n   * If you specify a list of values for this option, the facet uses only these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use\n   * those other values.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n  private showMoreFocus?: FocusTargetController;\n  private headerFocus?: FocusTargetController;\n  private facetConditionsManager?: FacetConditionsManager;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    this.facetId = this.facet.state.facetId;\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.initAriaLive();\n    this.initConditionManager();\n    this.initPopover();\n    this.registerFacet();\n  }\n\n  public disconnectedCallback() {\n    this.facetConditionsManager?.stopWatching();\n  }\n\n  public componentShouldUpdate(\n    next: unknown,\n    prev: unknown,\n    propName: keyof AtomicFacet\n  ) {\n    if (\n      this.isFacetState(prev, propName) &&\n      this.isFacetState(next, propName)\n    ) {\n      return shouldUpdateFacetSearchComponent(\n        next.facetSearch,\n        prev.facetSearch\n      );\n    }\n    return true;\n  }\n\n  public render() {\n    return (\n      <FacetGuard\n        enabled={this.facetState.enabled}\n        hasError={this.searchStatusState.hasError}\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\n        hasResults={this.facetState.values.length > 0}\n      >\n        {this.searchStatusState.firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={this.bindings.i18n}\n              label={this.definedLabel}\n              onClearFilters={() => {\n                this.focusTargets.header.focusAfterSearch();\n                this.facet.deselectAll();\n              }}\n              numberOfActiveValues={this.activeValues.length}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\n            ></FacetHeader>\n            {this.renderBody()}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            numberOfValues={this.numberOfValues}\n            isCollapsed={this.isCollapsed}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderBody() {\n    if (this.isCollapsed) {\n      return;\n    }\n    return (\n      <Fragment>\n        <FacetSearchInputGuard\n          canShowMoreValues={this.facetState.canShowMoreValues}\n          numberOfDisplayedValues={this.facetState.values.length}\n          withSearch={this.withSearch}\n        >\n          <FacetSearchInput\n            i18n={this.bindings.i18n}\n            label={this.definedLabel}\n            onChange={(value) => {\n              if (value === '') {\n                this.facet.facetSearch.clear();\n                return;\n              }\n              this.facet.facetSearch.updateCaptions(\n                getFieldCaptions(this.field, this.bindings.i18n)\n              );\n              this.facet.facetSearch.updateText(value);\n              this.facet.facetSearch.search();\n            }}\n            onClear={() => this.facet.facetSearch.clear()}\n            query={this.facetState.facetSearch.query}\n          />\n        </FacetSearchInputGuard>\n        {shouldDisplaySearchResults(this.facetState.facetSearch)\n          ? [this.renderSearchResults(), this.renderMatches()]\n          : [this.renderValues(), this.renderShowMoreLess()]}\n      </Fragment>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facet.state.facetSearch.values.map((value) => (\n        <FacetSearchValue\n          {...this.facetValueProps}\n          facetCount={value.count}\n          onExclude={() => this.facet.facetSearch.exclude(value)}\n          onSelect={() =>\n            this.displayValuesAs === 'link'\n              ? this.facet.facetSearch.singleSelect(value)\n              : this.facet.facetSearch.select(value)\n          }\n          facetValue={value.rawValue}\n        />\n      ))\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value, i) => {\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\n        const shouldFocusOnShowMoreAfterInteraction =\n          i ===\n          (this.sortCriteria === 'automatic'\n            ? 0\n            : this.facet.state.values.length - this.numberOfValues);\n\n        return (\n          <FacetValue\n            {...this.facetValueProps}\n            facetCount={value.numberOfResults}\n            onExclude={() => this.facet.toggleExclude(value)}\n            onSelect={() =>\n              this.displayValuesAs === 'link'\n                ? this.facet.toggleSingleSelect(value)\n                : this.facet.toggleSelect(value)\n            }\n            facetValue={value.value}\n            facetState={value.state}\n            setRef={(btn) => {\n              if (shouldFocusOnShowLessAfterInteraction) {\n                this.showLessFocus?.setTarget(btn);\n              }\n              if (shouldFocusOnShowMoreAfterInteraction) {\n                this.showMoreFocus?.setTarget(btn);\n              }\n            }}\n          />\n        );\n      })\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.focusTargets.showMore.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLess.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowMoreValues={this.facet.state.canShowMoreValues}\n        canShowLessValues={this.facet.state.canShowLessValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facet.state.facetSearch.query}\n        numberOfMatches={this.facet.state.facetSearch.values.length}\n        hasMoreMatches={this.facet.state.facetSearch.moreValuesAvailable}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private get activeValues() {\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n\n  private get facetValueProps(): Pick<\n    FacetValueProps,\n    | 'displayValuesAs'\n    | 'facetSearchQuery'\n    | 'enableExclusion'\n    | 'field'\n    | 'i18n'\n  > {\n    return {\n      facetSearchQuery: this.facetState.facetSearch.query,\n      displayValuesAs: this.displayValuesAs,\n      enableExclusion: this.enableExclusion,\n      field: this.field,\n      i18n: this.bindings.i18n,\n    };\n  }\n\n  private get isHidden() {\n    return !this.facet.state.enabled || !this.facet.state.values.length;\n  }\n\n  private initConditionManager() {\n    this.facetConditionsManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private registerFacet() {\n    this.bindings.store.registerFacet('facets', this.facetInfo);\n  }\n\n  private initPopover() {\n    initializePopover(this.host, {\n      ...this.facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.activeValues.length,\n    });\n  }\n\n  private initAriaLive() {\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n  }\n\n  private get facetInfo(): FacetInfo {\n    return {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n  }\n\n  private get definedLabel() {\n    return this.label === 'no-label' && this.facetState?.label\n      ? this.facetState.label\n      : this.label;\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  private isFacetState(state: unknown, propName: string): state is FacetState {\n    return (\n      propName === 'facetState' &&\n      typeof (state as FacetState)?.facetId === 'string'\n    );\n  }\n}\n"],"version":3}