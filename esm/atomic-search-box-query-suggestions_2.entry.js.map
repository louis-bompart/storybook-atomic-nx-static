{"file":"atomic-search-box-query-suggestions.atomic-search-box-recent-queries.entry.js","mappings":"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","names":["loadQuerySuggestActions","buildRecentQueriesList"],"sources":["src/components/search/search-box-suggestions/atomic-search-box-query-suggestions/atomic-search-box-query-suggestions.tsx","src/components/search/search-box-suggestions/atomic-search-box-recent-queries/atomic-search-box-recent-queries.tsx"],"sourcesContent":["import {\n  loadQuerySuggestActions,\n  SearchBox,\n  SearchEngine,\n  Suggestion,\n} from '@coveo/headless';\nimport {\n  QuerySetSection,\n  QuerySuggestionSection,\n} from '@coveo/headless/dist/definitions/state/state-sections';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport SearchIcon from '../../../../images/search.svg';\nimport {\n  getPartialSearchBoxSuggestionElement,\n  QuerySuggestionContainer,\n  QuerySuggestionIcon,\n  QuerySuggestionText,\n} from '../../../common/suggestions/query-suggestions';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../../../common/suggestions/suggestions-common';\n\n/**\n * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.\n */\n@Component({\n  tag: 'atomic-search-box-query-suggestions',\n  shadow: true,\n})\nexport class AtomicSearchBoxQuerySuggestions {\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox>;\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery?: number;\n  /**\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent<SearchBox>((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    const engine = this.bindings.engine as SearchEngine<\n      QuerySuggestionSection & QuerySetSection\n    >;\n    const {registerQuerySuggest, fetchQuerySuggestions} =\n      loadQuerySuggestActions(engine);\n\n    engine.dispatch(\n      registerQuerySuggest({\n        id: this.bindings.id,\n        count: this.bindings.numberOfQueries,\n      })\n    );\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      onInput: () =>\n        engine.dispatch(\n          fetchQuerySuggestions({\n            id: this.bindings.id,\n          })\n        ),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    return this.bindings.searchBoxController.state.suggestions\n      .slice(0, max)\n      .map((suggestion) => this.renderItem(suggestion));\n  }\n\n  private renderItem(suggestion: Suggestion) {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    const partialItem = getPartialSearchBoxSuggestionElement(\n      suggestion,\n      this.bindings.i18n\n    );\n\n    return {\n      ...partialItem,\n      content: (\n        <QuerySuggestionContainer>\n          <QuerySuggestionIcon\n            icon={this.icon || SearchIcon}\n            hasSuggestion={this.bindings.getSuggestions().length > 1}\n          />\n\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\n        </QuerySuggestionContainer>\n      ),\n      onSelect: () => {\n        this.bindings.searchBoxController.selectSuggestion(suggestion.rawValue);\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n","import {\n  buildRecentQueriesList,\n  RecentQueriesList,\n  SearchBox,\n} from '@coveo/headless';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport Clock from '../../../../images/clock.svg';\nimport {SafeStorage, StorageItems} from '../../../../utils/local-storage-utils';\nimport {once} from '../../../../utils/utils';\nimport {\n  getPartialRecentQueryClearElement,\n  getPartialRecentQueryElement,\n  RecentQueriesContainer,\n  RecentQueryClear,\n  RecentQueryIcon,\n  RecentQueryText,\n} from '../../../common/suggestions/recent-queries';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../../../common/suggestions/suggestions-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.\n *\n * @part recent-query-title - The 'Recent queries' title.\n * @part recent-query-clear - The 'Clear' button for clearing recent queries    .\n */\n@Component({\n  tag: 'atomic-search-box-recent-queries',\n  shadow: true,\n})\nexport class AtomicSearchBoxRecentQueries {\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox, Bindings>;\n  private recentQueriesList!: RecentQueriesList;\n  private storage!: SafeStorage;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery = 3;\n  /**\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent<SearchBox, Bindings>((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private renderIcon() {\n    return this.icon || Clock;\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    this.storage = new SafeStorage();\n    this.recentQueriesList = buildRecentQueriesList(this.bindings.engine, {\n      initialState: {queries: this.retrieveLocalStorage()},\n      options: {maxLength: 1000, clearFilters: this.bindings.clearFilters},\n    });\n\n    this.recentQueriesList.subscribe(() => this.updateLocalStorage());\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private retrieveLocalStorage() {\n    return this.storage.getParsedJSON(StorageItems.RECENT_QUERIES, []);\n  }\n\n  private updateLocalStorage() {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return this.disableFeature();\n    }\n\n    return this.storage.setJSON(\n      StorageItems.RECENT_QUERIES,\n      this.recentQueriesList.state.queries\n    );\n  }\n\n  private warnUser = once(() =>\n    this.bindings.engine.logger.warn(\n      'Because analytics are disabled, the recent queries feature is deactivated.'\n    )\n  );\n\n  private disableFeature() {\n    this.warnUser();\n    this.storage.removeItem(StorageItems.RECENT_QUERIES);\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return [];\n    }\n\n    const query = this.bindings.searchBoxController.state.value;\n    const hasQuery = query !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    const filteredQueries = this.recentQueriesList.state.queries\n      .filter(\n        (recentQuery) =>\n          recentQuery !== query &&\n          recentQuery.toLowerCase().startsWith(query.toLowerCase())\n      )\n      .slice(0, max);\n\n    const suggestionElements: SearchBoxSuggestionElement[] =\n      filteredQueries.map((value) => this.renderItem(value));\n    if (suggestionElements.length) {\n      suggestionElements.unshift(this.renderClear());\n    }\n\n    return suggestionElements;\n  }\n\n  private renderClear(): SearchBoxSuggestionElement {\n    const partialItem = getPartialRecentQueryClearElement(this.bindings.i18n);\n\n    return {\n      ...partialItem,\n      content: <RecentQueryClear i18n={this.bindings.i18n} />,\n      onSelect: () => {\n        this.recentQueriesList.clear();\n        this.bindings.triggerSuggestions();\n      },\n    };\n  }\n\n  private renderItem(value: string): SearchBoxSuggestionElement {\n    const query = this.bindings.searchBoxController.state.value;\n    const partialItem = getPartialRecentQueryElement(value, this.bindings.i18n);\n    return {\n      ...partialItem,\n      content: (\n        <RecentQueriesContainer>\n          <RecentQueryIcon icon={this.renderIcon()} />\n          <RecentQueryText query={query} value={value} />\n        </RecentQueriesContainer>\n      ),\n\n      onSelect: () => {\n        if (this.bindings.isStandalone) {\n          this.bindings.searchBoxController.updateText(value);\n          this.bindings.searchBoxController.submit();\n          return;\n        }\n\n        this.recentQueriesList.executeRecentQuery(\n          this.recentQueriesList.state.queries.indexOf(value)\n        );\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"version":3}