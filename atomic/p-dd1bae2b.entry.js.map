{"version":3,"names":["atomicInsightResultChildrenCss","AtomicInsightResultChildrenStyle0","childTemplateComponent","componentTag","AtomicResultChildren","this","resultTemplateRegistered","templateHasError","showInitialChildren","inheritTemplates","noResultText","resolveChildTemplates","event","preventDefault","detail","itemTemplateProvider","initialize","resultChildrenCommon","ResultChildrenCommon","getHost","host","getBindings","bindings","getResult","result","getShowInitialChildren","getFoldedResultList","foldedResultList","getInitialChildren","initialChildren","getInheritTemplates","getResultTemplateRegistered","getTemplateHasError","getNoResultText","getDisplayConfig","displayConfig","getImageSize","imageSize","getFoldedResultListState","foldedResultListState","renderChild","bind","setInitialChildren","toggleShowInitialChildren","childrenTemplates","Array","from","querySelectorAll","filter","template","elementHasAncestorTag","length","error","Error","ItemTemplateProvider","includeDefaultTemplate","templateElements","setResultTemplateRegistered","value","setTemplateHasError","child","isLast","content","_a","getTemplateContent","key","uniqueId","children","map","h","interactiveResult","buildInsightInteractiveResult","engine","options","extractUnfoldedItem","store","density","classes","trim","componentWillRender","render","__decorate","InitializeBindings","ChildTemplatesContext","FoldedItemListContext","ItemContext","folded","parentName","ItemDisplayConfigContext","FoldedItemListStateContext"],"sources":["src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.pcss?tag=atomic-insight-result-children&encapsulation=shadow","src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.tsx"],"sourcesContent":["@import '../../../../components/common/result-children/result-children.pcss';\n\n[part='children-root'] {\n  border-left: 1px solid var(--atomic-neutral);\n  padding-left: 1rem;\n  margin-top: 1rem;\n}\n","import {Component, Element, State, h, Listen, Prop} from '@stencil/core';\nimport {\n  buildInsightInteractiveResult,\n  InsightFoldedResultListState,\n  InsightFoldedResultList,\n  InsightFoldedResult,\n} from '../..';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {elementHasAncestorTag} from '../../../../utils/utils';\nimport {extractUnfoldedItem} from '../../../common/interface/item';\nimport {\n  ChildTemplatesContext,\n  ChildTemplatesContextEvent,\n  DisplayConfig,\n  ItemContext,\n  ItemDisplayConfigContext,\n} from '../../../common/item-list/item-decorators';\nimport {\n  FoldedItemListContext,\n  FoldedItemListStateContext,\n} from '../../../common/item-list/item-list-decorators';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {ItemDisplayImageSize} from '../../../common/layout/display-options';\nimport {ResultChildrenCommon} from '../../../common/result-children/result-children-common';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\nconst childTemplateComponent = 'atomic-insight-result-children-template';\nconst componentTag = 'atomic-insight-result-children';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-children',\n  styleUrl: 'atomic-insight-result-children.pcss',\n  shadow: true,\n})\nexport class AtomicResultChildren\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @ChildTemplatesContext()\n  public itemTemplateProvider?: ItemTemplateProvider;\n  @FoldedItemListContext()\n  private foldedResultList!: InsightFoldedResultList;\n  @ItemContext({folded: true, parentName: 'atomic-insight-result'})\n  private result!: InsightFoldedResult;\n  @ItemDisplayConfigContext()\n  private displayConfig!: DisplayConfig;\n  private initialChildren!: InsightFoldedResult[];\n\n  @Element() public host!: HTMLDivElement;\n  @State() public error!: Error;\n  @State() private resultTemplateRegistered = false;\n  @State() private templateHasError = false;\n  @FoldedItemListStateContext()\n  @State()\n  private foldedResultListState!: InsightFoldedResultListState;\n  @State()\n  private showInitialChildren = false;\n\n  /**\n   * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.\n   */\n  @Prop() inheritTemplates = false;\n  /**\n   * The expected size of the image displayed in the children results.\n   */\n  @Prop({reflect: true}) imageSize?: ItemDisplayImageSize;\n  /**\n   * The non-localized copy for an empty result state. An empty string will result in the component being hidden.\n   */\n  @Prop() public noResultText = 'no-documents-related';\n\n  private resultChildrenCommon!: ResultChildrenCommon;\n\n  @Listen('atomic/resolveChildTemplates')\n  public resolveChildTemplates(event: ChildTemplatesContextEvent) {\n    event.preventDefault();\n    event.detail(this.itemTemplateProvider);\n  }\n\n  public initialize() {\n    this.resultChildrenCommon = new ResultChildrenCommon({\n      getHost: () => this.host,\n      getBindings: () => this.bindings,\n      getResult: () => this.result,\n      getShowInitialChildren: () => this.showInitialChildren,\n      getFoldedResultList: () => this.foldedResultList,\n      getInitialChildren: () => this.initialChildren,\n      getInheritTemplates: () => this.inheritTemplates,\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      getNoResultText: () => this.noResultText,\n      getDisplayConfig: () => this.displayConfig,\n      getImageSize: () => this.imageSize,\n      getFoldedResultListState: () => this.foldedResultListState,\n      renderChild: this.renderChild.bind(this),\n      setInitialChildren: (initialChildren: InsightFoldedResult[]) =>\n        (this.initialChildren = initialChildren),\n      toggleShowInitialChildren: () =>\n        (this.showInitialChildren = !this.showInitialChildren),\n    });\n\n    if (this.inheritTemplates) {\n      return;\n    }\n\n    const childrenTemplates = Array.from(\n      this.host.querySelectorAll(childTemplateComponent)\n    ).filter(\n      (template) => !elementHasAncestorTag(template, childTemplateComponent)\n    );\n\n    if (!childrenTemplates.length) {\n      this.error = new Error(\n        `The \"${componentTag}\" component requires at least one \"${childTemplateComponent}\" component.`\n      );\n      return;\n    }\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: false,\n      templateElements: childrenTemplates,\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n  }\n\n  private renderChild(child: InsightFoldedResult, isLast: boolean) {\n    const content = this.itemTemplateProvider?.getTemplateContent(child.result);\n\n    if (!content) {\n      return;\n    }\n\n    const key =\n      child.result.uniqueId +\n      child.children.map((child) => child.result.uniqueId);\n    return (\n      <atomic-insight-result\n        key={key}\n        content={content}\n        result={child}\n        interactiveResult={buildInsightInteractiveResult(this.bindings.engine, {\n          options: {result: extractUnfoldedItem(child)},\n        })}\n        store={this.bindings.store}\n        density={this.displayConfig.density}\n        imageSize={this.imageSize || this.displayConfig.imageSize}\n        classes={`child-result ${isLast ? 'last-child' : ''}`.trim()}\n      ></atomic-insight-result>\n    );\n  }\n\n  public componentWillRender() {\n    this.resultChildrenCommon.componentWillRender();\n  }\n\n  public render() {\n    return this.resultChildrenCommon.render();\n  }\n}\n"],"mappings":"qgBAAA,MAAMA,EAAiC,mzuCACvC,MAAAC,EAAeD,E,2WC4Bf,MAAME,EAAyB,0CAC/B,MAAMC,EAAe,iC,MAURC,EAAoB,M,yBAgBdC,KAAAC,yBAA2B,MAC3BD,KAAAE,iBAAmB,MAK5BF,KAAAG,oBAAsB,MAKtBH,KAAAI,iBAAmB,MAQZJ,KAAAK,aAAe,uB,mDAnBc,M,sBACR,M,8DAKN,M,sBAKH,M,2CAQG,sB,CAKvB,qBAAAC,CAAsBC,GAC3BA,EAAMC,iBACND,EAAME,OAAOT,KAAKU,qB,CAGb,UAAAC,GACLX,KAAKY,qBAAuB,IAAIC,EAAqB,CACnDC,QAAS,IAAMd,KAAKe,KACpBC,YAAa,IAAMhB,KAAKiB,SACxBC,UAAW,IAAMlB,KAAKmB,OACtBC,uBAAwB,IAAMpB,KAAKG,oBACnCkB,oBAAqB,IAAMrB,KAAKsB,iBAChCC,mBAAoB,IAAMvB,KAAKwB,gBAC/BC,oBAAqB,IAAMzB,KAAKI,iBAChCsB,4BAA6B,IAAM1B,KAAKC,yBACxC0B,oBAAqB,IAAM3B,KAAKE,iBAChC0B,gBAAiB,IAAM5B,KAAKK,aAC5BwB,iBAAkB,IAAM7B,KAAK8B,cAC7BC,aAAc,IAAM/B,KAAKgC,UACzBC,yBAA0B,IAAMjC,KAAKkC,sBACrCC,YAAanC,KAAKmC,YAAYC,KAAKpC,MACnCqC,mBAAqBb,GAClBxB,KAAKwB,gBAAkBA,EAC1Bc,0BAA2B,IACxBtC,KAAKG,qBAAuBH,KAAKG,sBAGtC,GAAIH,KAAKI,iBAAkB,CACzB,M,CAGF,MAAMmC,EAAoBC,MAAMC,KAC9BzC,KAAKe,KAAK2B,iBAAiB7C,IAC3B8C,QACCC,IAAcC,EAAsBD,EAAU/C,KAGjD,IAAK0C,EAAkBO,OAAQ,CAC7B9C,KAAK+C,MAAQ,IAAIC,MACf,QAAQlD,uCAAkDD,iBAE5D,M,CAGFG,KAAKU,qBAAuB,IAAIuC,EAAqB,CACnDC,uBAAwB,MACxBC,iBAAkBZ,EAClBb,4BAA6B,IAAM1B,KAAKC,yBACxC0B,oBAAqB,IAAM3B,KAAKE,iBAChCkD,4BAA8BC,IAC5BrD,KAAKC,yBAA2BoD,CAAK,EAEvCC,oBAAsBD,IACpBrD,KAAKE,iBAAmBmD,CAAK,EAE/BpC,SAAUjB,KAAKiB,U,CAIX,WAAAkB,CAAYoB,EAA4BC,G,MAC9C,MAAMC,GAAUC,EAAA1D,KAAKU,wBAAoB,MAAAgD,SAAA,SAAAA,EAAEC,mBAAmBJ,EAAMpC,QAEpE,IAAKsC,EAAS,CACZ,M,CAGF,MAAMG,EACJL,EAAMpC,OAAO0C,SACbN,EAAMO,SAASC,KAAKR,GAAUA,EAAMpC,OAAO0C,WAC7C,OACEG,EAAA,yBACEJ,IAAKA,EACLH,QAASA,EACTtC,OAAQoC,EACRU,kBAAmBC,EAA8BlE,KAAKiB,SAASkD,OAAQ,CACrEC,QAAS,CAACjD,OAAQkD,EAAoBd,MAExCe,MAAOtE,KAAKiB,SAASqD,MACrBC,QAASvE,KAAK8B,cAAcyC,QAC5BvC,UAAWhC,KAAKgC,WAAahC,KAAK8B,cAAcE,UAChDwC,QAAS,gBAAgBhB,EAAS,aAAe,KAAKiB,Q,CAKrD,mBAAAC,GACL1E,KAAKY,qBAAqB8D,qB,CAGrB,MAAAC,GACL,OAAO3E,KAAKY,qBAAqB+D,Q,6BA/HNC,EAAA,CAA5BC,K,+BAEMD,EAAA,CADNE,K,2CAGOF,EAAA,CADPG,K,uCAGOH,EAAA,CADPI,EAAY,CAACC,OAAQ,KAAMC,WAAY,2B,6BAGhCN,EAAA,CADPO,K,oCAUOP,EAAA,CAFPQ,K"}