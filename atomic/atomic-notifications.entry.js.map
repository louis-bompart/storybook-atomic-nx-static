{"file":"atomic-notifications.entry.esm.js","mappings":";;;;;;;;;;;;;;;AAAA,MAAM,sBAAsB,GAAG,u+tCAAu+tC;;;;;;;;;;;;MC8Bz/tC,mBAAmB;;;;;;QAcA,iBAAY,GAAG,CAAC,CAAC;;;4BAAF,CAAC;;;IAWvC,UAAU;QACf,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC/D;IAEM,mBAAmB;QACxB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,aAAa;aACtB,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE,EAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAC,CAAC,CACzD;aACA,IAAI,CAAC,IAAI,CAAC,CAAC;KACf;IAEM,kBAAkB,CAAC,IAAY;;QACpC,QACE,WACE,IAAI,EAAC,cAAc,EACnB,KAAK,EAAC,qFAAqF,IAE3F,mBACE,IAAI,EAAE,MAAA,IAAI,CAAC,IAAI,mCAAI,QAAQ,EAC3B,IAAI,EAAC,MAAM,EACX,KAAK,EAAC,gCAAgC,GACtC,EACF,YAAM,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,wCAAwC,IAC7D,IAAI,CACA,CACH,EACN;KACH;IAEM,mBAAmB;QACxB,QACE,WAAK,IAAI,EAAC,eAAe,EAAC,KAAK,EAAC,qBAAqB,IAClD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAC5D,EACN;KACH;IAEM,MAAM;;QACX,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YAC9B,OAAO,EAAC,MAAM,OAAU,CAAC;SAC1B;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE9C,QACE,EAAC,QAAQ,QACP,EAAC,OAAO,IAAC,KAAK,EAAE,MAAA,IAAI,CAAC,YAAY,mCAAI,CAAC,EAAE,KAAK,EAAC,oBAAoB,IAC/D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAC9B,EACT,IAAI,CAAC,mBAAmB,EAAE,CAClB,EACX;KACH;IAED,IAAY,aAAa;;QACvB,OAAO,CAAA,MAAA,IAAI,CAAC,kBAAkB,0CAAE,aAAa,KAAI,EAAE,CAAC;KACrD;;AApF4B;IAA5B,kBAAkB,EAAE;qDAA4B;AAKzC;IAFP,qBAAqB,CAAC,eAAe,CAAC;+DAES;AAGf;IAAhC,cAAc,CAAC,eAAe,CAAC;wDAAsB;;;;;","names":[],"sources":["src/components/search/atomic-notification/atomic-notifications.pcss?tag=atomic-notifications&encapsulation=shadow","src/components/search/atomic-notification/atomic-notifications.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n","import {\r\n  NotifyTrigger,\r\n  NotifyTriggerState,\r\n  buildNotifyTrigger,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Fragment, Prop} from '@stencil/core';\r\nimport InfoIcon from '../../../images/info.svg';\r\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Heading} from '../../common/heading';\r\nimport {Hidden} from '../../common/hidden';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).\r\n *\r\n * @part notifications - The wrapper around the notifications.\r\n * @part notification - The wrapper around a single notification.\r\n * @part icon - The icon of the notification.\r\n * @part text - The text of the notification.\r\n */\r\n@Component({\r\n  tag: 'atomic-notifications',\r\n  styleUrl: 'atomic-notifications.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicNotifyTrigger implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  protected notifyTrigger!: NotifyTrigger;\r\n\r\n  @BindStateToController('notifyTrigger')\r\n  @State()\r\n  private notifyTriggerState?: NotifyTriggerState;\r\n  @State() public error!: Error;\r\n\r\n  @AriaLiveRegion('notifications') ariaMessage!: string;\r\n\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n\r\n  /**\r\n   * Specifies an icon to display at the left-end of a notification.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly\r\n   */\r\n  @Prop({reflect: true}) public icon?: string;\r\n\r\n  public initialize() {\r\n    this.notifyTrigger = buildNotifyTrigger(this.bindings.engine);\r\n  }\r\n\r\n  public generateAriaMessage() {\r\n    if (this.notifications.length === 1) {\r\n      return this.notifications[0];\r\n    }\r\n    return this.notifications\r\n      .map((text, i) =>\r\n        this.bindings.i18n.t('notification-n', {n: i + 1, text})\r\n      )\r\n      .join('\\n');\r\n  }\r\n\r\n  public renderNotification(text: string) {\r\n    return (\r\n      <div\r\n        part=\"notification\"\r\n        class=\"shadow-lg bg-background border border-neutral-dark rounded-md p-6 flex items-center\"\r\n      >\r\n        <atomic-icon\r\n          icon={this.icon ?? InfoIcon}\r\n          part=\"icon\"\r\n          class=\"w-7 h-7 mr-6 text-neutral-dark\"\r\n        />\r\n        <span part=\"text\" class=\"leading-5 text-base text-on-background\">\r\n          {text}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public renderNotifications() {\r\n    return (\r\n      <div part=\"notifications\" class=\"flex flex-col gap-4\">\r\n        {this.notifications.map((text) => this.renderNotification(text))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.notifications.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    this.ariaMessage = this.generateAriaMessage();\r\n\r\n    return (\r\n      <Fragment>\r\n        <Heading level={this.headingLevel ?? 0} class=\"accessibility-only\">\r\n          {this.bindings.i18n.t('notifications')}\r\n        </Heading>\r\n        {this.renderNotifications()}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  private get notifications(): string[] {\r\n    return this.notifyTriggerState?.notifications || [];\r\n  }\r\n}\r\n"],"version":3}