{"file":"attributes-slot.js","mappings":"SAAgB,oBAAoB,CAAC,IAAiB,EAAE,QAAgB;IACtE,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAChC,CAAC,KAAK,KAAK,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ,CACnD,CAAC;IAEF,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;QACtB,OAAO;KACR;IAED,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,0CAA0C,QAAQ,IAAI,EAAE,IAAI,CAAC,CAAC;KAC5E;IAED,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;SAEe,sBAAsB,CAAC,IAAiB;IACtD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CACjC,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAC5E,CAAC;IAEF,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;QACvB,OAAO;KACR;IAED,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,CAAC,CAAC;KAChE;IAED,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;AACxB;;SC9BgB,yBAAyB,CAAC,IAAiB,EAAE,QAAgB;IAC3E,MAAM,cAAc,GAAG,oBAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO;KACR;IAED,IAAI,cAAc,CAAC,QAAQ,KAAK,GAAG,EAAE;QACnC,OAAO,CAAC,IAAI,CACV,eAAe,QAAQ,wBAAwB,EAC/C,cAAc,CACf,CAAC;QACF,OAAO;KACR;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,QAAQ,EAAC;QAC7D,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,CAAC,IAAI,CACV,4EAA4E,CAC7E,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb,CAAC,CAAC;AACL;;;;","names":[],"sources":["src/utils/slot-utils.ts","src/components/common/item-link/attributes-slot.ts"],"sourcesContent":["export function getNamedSlotFromHost(host: HTMLElement, slotName: string) {\n  const children = Array.from(host.children);\n  const targetSlot = children.filter(\n    (child) => child.getAttribute('slot') === slotName\n  );\n\n  if (!targetSlot.length) {\n    return;\n  }\n\n  if (targetSlot.length > 1) {\n    console.warn(`Element should only have 1 slot named \"${slotName}\".`, host);\n  }\n\n  return targetSlot[0];\n}\n\nexport function getDefaultSlotFromHost(host: HTMLElement) {\n  const children = Array.from(host.children);\n  const defaultSlot = children.filter(\n    (child) => !child.hasAttribute('slot') || child.getAttribute('slot') === ''\n  );\n\n  if (!defaultSlot.length) {\n    return;\n  }\n\n  if (defaultSlot.length > 1) {\n    console.warn('Element should only have 1 default slot.', host);\n  }\n\n  return defaultSlot[0];\n}\n","import {getNamedSlotFromHost} from '../../../utils/slot-utils';\n\nexport function getAttributesFromLinkSlot(host: HTMLElement, slotName: string) {\n  const attributesSlot = getNamedSlotFromHost(host, slotName);\n  if (!attributesSlot) {\n    return;\n  }\n\n  if (attributesSlot.nodeName !== 'A') {\n    console.warn(\n      `Slot named \"${slotName}\" should be an \"a\" tag`,\n      attributesSlot\n    );\n    return;\n  }\n\n  return Array.from(attributesSlot.attributes).filter(({nodeName}) => {\n    if (nodeName === 'slot') {\n      return false;\n    }\n\n    if (nodeName === 'href') {\n      console.warn(\n        'The \"href\" attribute set on the \"attributes\" slot element will be ignored.'\n      );\n      return false;\n    }\n\n    return true;\n  });\n}\n"],"version":3}