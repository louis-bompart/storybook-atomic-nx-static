{"file":"atomic-ipx-tab.entry.cjs.js","mappings":";;;;;;;;;;;;;;;AAAA,MAAM,eAAe,GAAG,2tuCAA2tuC,CAAC;AACpvuC,2BAAe,eAAe;;;;;;;;;;;;MCkBjB,YAAY;;;;;;QAgBO,UAAK,GAAG,UAAU,CAAC;;;;;QAMJ,WAAM,GAAG,KAAK,CAAC;QAOpD,gBAAW,GAAgB,SAAQ,CAAC;;;qBAbN,UAAU;sBAMM,KAAK;;;;;;IAapD,MAAM,MAAM;QACjB,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;KACnB;IAEM,UAAU;QACf,IAAI,CAAC,GAAG,GAAGA,eAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,OAAO,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAC;YACtD,YAAY,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CACnC,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAC9C,CAAC;KACH;IAEM,kBAAkB;QACvBC,2BAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;IAEM,oBAAoB;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;YACtC,OAAO;SACR;QAED,MAAM,aAAa,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;QAC5E,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC1B,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC9B;QAED,QACEC,QAACC,aAAM,IACL,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAC,KAAK,EACV,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAC9B,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,EAClE,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EACxC,OAAO,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAE/B,IAAI,CAAC,KAAK,CACJ,EACT;KACH;;;AA1E4B;IAA5BC,sCAAkB,EAAE;8CAA4B;AAMzC;IAFPC,yCAAqB,CAAC,KAAK,CAAC;8CAED;;;;;","names":["buildTab","dispatchTabLoaded","h","Button","InitializeBindings","BindStateToController"],"sources":["src/components/ipx/atomic-ipx-tab/atomic-ipx-tab.pcss?tag=atomic-ipx-tab&encapsulation=shadow","src/components/ipx/atomic-ipx-tab/atomic-ipx-tab.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n.active {\n  &::after {\n    @apply block absolute rounded w-full bg-primary bottom-0 h-1;\n    content: '';\n  }\n}\n\n[part='tab'] {\n  max-width: 150px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n","import {buildTab, Tab, TabState, Unsubscribe} from '@coveo/headless';\nimport {Component, h, Prop, State, Element, Method} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Button} from '../../common/button';\nimport {dispatchTabLoaded} from '../../common/tabs/tab-common';\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-ipx-tab',\n  styleUrl: './atomic-ipx-tab.pcss',\n  shadow: true,\n})\nexport class AtomicIPXTab implements InitializableComponent {\n  private tab!: Tab;\n\n  @Element() host!: HTMLElement;\n\n  @InitializeBindings() public bindings!: Bindings;\n\n  @State() public error!: Error;\n\n  @BindStateToController('tab')\n  @State()\n  private tabState!: TabState;\n\n  /**\n   * The label that will be shown to the user.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n\n  /**\n   * Whether this tab is active upon rendering.\n   * If multiple tabs are set to active on render, the last one to be rendered will override the others.\n   */\n  @Prop({reflect: true, mutable: true}) public active = false;\n\n  /**\n   * The expression that will be passed to the search as a `cq` paramenter upon being selected.\n   */\n  @Prop() public expression!: string;\n\n  private unsubscribe: Unsubscribe = () => {};\n\n  /**\n   * Activates the tab.\n   */\n  @Method()\n  public async select() {\n    this.tab.select();\n  }\n\n  public initialize() {\n    this.tab = buildTab(this.bindings.engine, {\n      options: {expression: this.expression, id: this.label},\n      initialState: {isActive: this.active},\n    });\n    this.unsubscribe = this.tab.subscribe(\n      () => (this.active = this.tab.state.isActive)\n    );\n  }\n\n  public componentDidRender() {\n    dispatchTabLoaded(this.host);\n  }\n\n  public disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  public render() {\n    if (!this.bindings.store.isAppLoaded()) {\n      return;\n    }\n\n    const buttonClasses = ['relative', 'pb-3', 'mt-1', 'mr-6', 'font-semibold'];\n    if (this.tabState.isActive) {\n      buttonClasses.push('active');\n    }\n\n    return (\n      <Button\n        style=\"text-transparent\"\n        part=\"tab\"\n        class={buttonClasses.join(' ')}\n        ariaLabel={this.bindings.i18n.t('tab-search', {label: this.label})}\n        ariaPressed={`${this.tabState.isActive}`}\n        onClick={() => this.tab.select()}\n      >\n        {this.label}\n      </Button>\n    );\n  }\n}\n"],"version":3}