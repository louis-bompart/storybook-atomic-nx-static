{"version":3,"names":["AtomicResultNumber","this","formatter","defaultNumberFormatter","valueToDisplay","setFormat","event","preventDefault","stopPropagation","detail","parseValue","value","ResultTemplatesHelpers","getResultProperty","result","field","valueAsNumber","parseFloat","Number","isNaN","error","Error","formatValue","bindings","i18n","languages","toString","updateValueToDisplay","componentWillRender","render","host","remove","__decorate","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-number/atomic-result-number.tsx"],"sourcesContent":["import {Result, ResultTemplatesHelpers} from '@coveo/headless';\r\nimport {Component, Prop, Element, State, Listen} from '@stencil/core';\r\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\r\nimport {\r\n  defaultNumberFormatter,\r\n  NumberFormatter,\r\n} from '../../../common/formats/format-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-number` component renders the value of a number result field.\r\n *\r\n * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-number',\r\n  shadow: false,\r\n})\r\nexport class AtomicResultNumber {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The field that the component should use.\r\n   * The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first.\r\n   * Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.\r\n   */\r\n  @Prop({reflect: true}) field!: string;\r\n\r\n  @State() formatter: NumberFormatter = defaultNumberFormatter;\r\n\r\n  @State() valueToDisplay: string | null = null;\r\n\r\n  @Listen('atomic/numberFormat')\r\n  public setFormat(event: CustomEvent<NumberFormatter>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.formatter = event.detail;\r\n  }\r\n\r\n  private parseValue() {\r\n    const value = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      this.field\r\n    );\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n    const valueAsNumber = parseFloat(`${value}`);\r\n    if (Number.isNaN(valueAsNumber)) {\r\n      this.error = new Error(\r\n        `Could not parse \"${value}\" from field \"${this.field}\" as a number.`\r\n      );\r\n      return null;\r\n    }\r\n    return valueAsNumber;\r\n  }\r\n\r\n  private formatValue(value: number) {\r\n    try {\r\n      return this.formatter(value, this.bindings.i18n.languages as string[]);\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n      return value.toString();\r\n    }\r\n  }\r\n\r\n  private updateValueToDisplay() {\r\n    const value = this.parseValue();\r\n    if (value !== null) {\r\n      this.valueToDisplay = this.formatValue(value);\r\n    }\r\n  }\r\n\r\n  componentWillRender() {\r\n    this.updateValueToDisplay();\r\n  }\r\n\r\n  public render() {\r\n    if (this.valueToDisplay === null) {\r\n      this.host.remove();\r\n      return;\r\n    }\r\n    return this.valueToDisplay;\r\n  }\r\n}\r\n"],"mappings":"4oBAmBaA,EAAkB,M,yBAepBC,KAAAC,UAA6BC,EAE7BF,KAAAG,eAAgC,K,yDAFHD,E,oBAEG,I,CAGlC,SAAAE,CAAUC,GACfA,EAAMC,iBACND,EAAME,kBACNP,KAAKC,UAAYI,EAAMG,M,CAGjB,UAAAC,GACN,MAAMC,EAAQC,EAAuBC,kBACnCZ,KAAKa,OACLb,KAAKc,OAEP,GAAIJ,IAAU,KAAM,CAClB,OAAO,I,CAET,MAAMK,EAAgBC,WAAW,GAAGN,KACpC,GAAIO,OAAOC,MAAMH,GAAgB,CAC/Bf,KAAKmB,MAAQ,IAAIC,MACf,oBAAoBV,kBAAsBV,KAAKc,uBAEjD,OAAO,I,CAET,OAAOC,C,CAGD,WAAAM,CAAYX,GAClB,IACE,OAAOV,KAAKC,UAAUS,EAAOV,KAAKsB,SAASC,KAAKC,U,CAChD,MAAOL,GACPnB,KAAKmB,MAAQA,EACb,OAAOT,EAAMe,U,EAIT,oBAAAC,GACN,MAAMhB,EAAQV,KAAKS,aACnB,GAAIC,IAAU,KAAM,CAClBV,KAAKG,eAAiBH,KAAKqB,YAAYX,E,EAI3C,mBAAAiB,GACE3B,KAAK0B,sB,CAGA,MAAAE,GACL,GAAI5B,KAAKG,iBAAmB,KAAM,CAChCH,KAAK6B,KAAKC,SACV,M,CAEF,OAAO9B,KAAKG,c,6BApEe4B,EAAA,CAA5BC,K,+BACwBD,EAAA,CAAxBE,K"}