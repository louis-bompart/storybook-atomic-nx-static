{"file":"atomic-field-condition.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,wCAAwC,CAAC;AACzE,mCAAe,uBAAuB;;;;;;;;;;;;MCoBzB,oBAAoB;;;QAYD,cAAS,GAA6B,EAAE,CAAC;QAEzC,iBAAY,GAA6B,EAAE,CAAC;QAElE,eAAU,GAA8B,EAAE,CAAC;QAC3C,oBAAe,GAAG,KAAK,CAAC;;;;IAIzB,iBAAiB;QACtB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,CAAC,IAAI,CAClBA,eAAsB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CACvD,CAAC;SACH;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAClBA,eAAsB,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAC1D,CAAC;SACH;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAClB,GAAGC,wCAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAC1D,CAAC;KACH;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;YACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,OAAO,EAAE,CAAC;SACX;QAED,OAAOC,qBAAQ,CAAC;KACjB;IAEM,gBAAgB;QACrB,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KAC5C;;;AAxC6B;IAA7BC,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;uDAA0C;AAEzC;IAA7BA,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;0DAA6C;AAKjD;IAAxBC,sCAAa,EAAE;oDAAyB;;;;;","names":["ResultTemplatesHelpers","makeMatchConditions","h","MapProp","ResultContext"],"sources":["src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.pcss?tag=atomic-field-condition","src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.tsx"],"sourcesContent":["atomic-field-condition {\n  max-width: 100%;\n}\n","import {\n  Result,\n  ResultTemplateCondition,\n  ResultTemplatesHelpers,\n} from '@coveo/headless';\nimport {Component, Prop, h, Element} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {makeMatchConditions} from '../../../common/result-templates/result-template-common';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.\n * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n */\n@Component({\n  tag: 'atomic-field-condition',\n  styleUrl: 'atomic-field-condition.pcss',\n  shadow: false,\n})\nexport class AtomicFieldCondition {\n  @Element() host!: HTMLElement;\n\n  /**\n   * Verifies whether the specified fields are defined.\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n  /**\n   * Verifies whether the specified fields are not defined.\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  @MapProp({splitValues: true}) mustMatch: Record<string, string[]> = {};\n\n  @MapProp({splitValues: true}) mustNotMatch: Record<string, string[]> = {};\n\n  private conditions: ResultTemplateCondition[] = [];\n  private shouldBeRemoved = false;\n\n  @ResultContext() private result!: Result;\n\n  public componentWillLoad() {\n    if (this.ifDefined) {\n      const fieldNames = this.ifDefined.split(',');\n      this.conditions.push(\n        ResultTemplatesHelpers.fieldsMustBeDefined(fieldNames)\n      );\n    }\n\n    if (this.ifNotDefined) {\n      const fieldNames = this.ifNotDefined.split(',');\n      this.conditions.push(\n        ResultTemplatesHelpers.fieldsMustNotBeDefined(fieldNames)\n      );\n    }\n\n    this.conditions.push(\n      ...makeMatchConditions(this.mustMatch, this.mustNotMatch)\n    );\n  }\n\n  public render() {\n    if (!this.conditions.every((condition) => condition(this.result))) {\n      this.shouldBeRemoved = true;\n      return '';\n    }\n\n    return <slot />;\n  }\n\n  public componentDidLoad() {\n    this.shouldBeRemoved && this.host.remove();\n  }\n}\n"],"version":3}