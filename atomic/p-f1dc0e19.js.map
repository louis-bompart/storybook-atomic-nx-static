{"version":3,"names":["parseDependsOn","dependsOn","Object","keys","length","entries","map","parentFacetId","expectedValue","condition","values","some","value","isCategoryFacetValue","selectedValue","getSelectedCategoryFacetValueRequest","isSimpleFacetValue","state","request","requestAsRecord","children","Array","isArray","child","asRecord"],"sources":["src/components/common/facets/depends-on.ts"],"sourcesContent":["type GenericCondition<AnyFacetValueRequest> = {\n  parentFacetId: string;\n  condition(parentValues: AnyFacetValueRequest[]): boolean;\n};\n\ninterface SimpleFacetValue {\n  value: string;\n  state: string;\n}\n\ninterface CategoryFacetValue extends SimpleFacetValue {\n  children: SimpleFacetValue[];\n}\n\nexport function parseDependsOn<\n  FacetValue extends SimpleFacetValue | CategoryFacetValue,\n>(dependsOn: Record<string, string>): GenericCondition<FacetValue>[] {\n  if (Object.keys(dependsOn).length > 1) {\n    throw \"Depending on multiple facets isn't supported\";\n  }\n\n  return Object.entries(dependsOn).map(([parentFacetId, expectedValue]) => {\n    return {\n      parentFacetId,\n      condition: (values) => {\n        return values.some((value) => {\n          if (isCategoryFacetValue(value)) {\n            const selectedValue = getSelectedCategoryFacetValueRequest(value);\n            if (!selectedValue) {\n              return false;\n            }\n            if (!expectedValue) {\n              return true;\n            }\n            return selectedValue.value === expectedValue;\n          }\n          if (isSimpleFacetValue(value)) {\n            if (value.state !== 'selected') {\n              return false;\n            }\n            if (!expectedValue) {\n              return true;\n            }\n            return value.value === expectedValue;\n          }\n          return false;\n        });\n      },\n    };\n  });\n}\n\nfunction isCategoryFacetValue(request: unknown): request is CategoryFacetValue {\n  const requestAsRecord = request as Record<string, unknown>;\n  return (\n    (requestAsRecord?.children &&\n      Array.isArray(requestAsRecord.children) &&\n      requestAsRecord?.state &&\n      typeof requestAsRecord.state === 'string') === true\n  );\n}\n\nfunction getSelectedCategoryFacetValueRequest(\n  value: unknown\n): CategoryFacetValue | null {\n  if (!isCategoryFacetValue(value)) {\n    return null;\n  }\n  if (value.state === 'selected') {\n    return value;\n  }\n  for (const child of value.children) {\n    const selectedValue = getSelectedCategoryFacetValueRequest(child);\n    if (selectedValue !== null) {\n      return selectedValue;\n    }\n  }\n  return null;\n}\n\nfunction isSimpleFacetValue(value: unknown): value is SimpleFacetValue {\n  const asRecord = value as Record<string, unknown>;\n  return (\n    'value' in asRecord &&\n    typeof asRecord.value === 'string' &&\n    !('children' in asRecord)\n  );\n}\n"],"mappings":"SAcgBA,EAEdC,GACA,GAAIC,OAAOC,KAAKF,GAAWG,OAAS,EAAG,CACrC,KAAM,8C,CAGR,OAAOF,OAAOG,QAAQJ,GAAWK,KAAI,EAAEC,EAAeC,MAC7C,CACLD,gBACAE,UAAYC,GACHA,EAAOC,MAAMC,IAClB,GAAIC,EAAqBD,GAAQ,CAC/B,MAAME,EAAgBC,EAAqCH,GAC3D,IAAKE,EAAe,CAClB,OAAO,K,CAET,IAAKN,EAAe,CAClB,OAAO,I,CAET,OAAOM,EAAcF,QAAUJ,C,CAEjC,GAAIQ,EAAmBJ,GAAQ,CAC7B,GAAIA,EAAMK,QAAU,WAAY,CAC9B,OAAO,K,CAET,IAAKT,EAAe,CAClB,OAAO,I,CAET,OAAOI,EAAMA,QAAUJ,C,CAEzB,OAAO,KAAK,OAKtB,CAEA,SAASK,EAAqBK,GAC5B,MAAMC,EAAkBD,EACxB,QACGC,IAAe,MAAfA,SAAe,SAAfA,EAAiBC,WAChBC,MAAMC,QAAQH,EAAgBC,YAC9BD,IAAe,MAAfA,SAAe,SAAfA,EAAiBF,eACVE,EAAgBF,QAAU,YAAc,IAErD,CAEA,SAASF,EACPH,GAEA,IAAKC,EAAqBD,GAAQ,CAChC,OAAO,I,CAET,GAAIA,EAAMK,QAAU,WAAY,CAC9B,OAAOL,C,CAET,IAAK,MAAMW,KAASX,EAAMQ,SAAU,CAClC,MAAMN,EAAgBC,EAAqCQ,GAC3D,GAAIT,IAAkB,KAAM,CAC1B,OAAOA,C,EAGX,OAAO,IACT,CAEA,SAASE,EAAmBJ,GAC1B,MAAMY,EAAWZ,EACjB,MACE,UAAWY,UACJA,EAASZ,QAAU,YACxB,aAAcY,EAEpB,Q"}