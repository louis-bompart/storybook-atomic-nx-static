{"file":"atomic-result-text.atomic-text.entry.cjs.js","mappings":"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","names":["HighlightUtils","h","Host","ResultTemplatesHelpers","isArray","getStringValueFromResultOrNull","getFieldValueCaption","__decorate","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-text/atomic-result-text.tsx","src/components/search/atomic-text/atomic-text.tsx"],"sourcesContent":["import {isArray} from '@coveo/bueno';\r\nimport {HighlightUtils, Result, ResultTemplatesHelpers} from '@coveo/headless';\r\nimport {Component, Prop, h, Element, Host, State} from '@stencil/core';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-text` component renders the value of a string result field.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-text',\r\n  shadow: false,\r\n})\r\nexport class AtomicResultText implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The result field which the component should use.\r\n   * This will look in the Result object first, and then in the Result.raw object for the fields.\r\n   * It is important to include the necessary field in the `atomic-search-interface` component.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\r\n   */\r\n  @Prop({reflect: true}) public shouldHighlight = true;\r\n\r\n  /**\r\n   * The locale key for the text to display when the configured field has no value.\r\n   */\r\n  @Prop({reflect: true}) public default?: string;\r\n\r\n  private renderWithHighlights(\r\n    value: string,\r\n    highlights: HighlightUtils.HighlightKeyword[]\r\n  ) {\r\n    try {\r\n      const openingDelimiter = '_openingDelimiter_';\r\n      const closingDelimiter = '_closingDelimiter_';\r\n      const highlightedValue = HighlightUtils.highlightString({\r\n        content: value,\r\n        openingDelimiter,\r\n        closingDelimiter,\r\n        highlights,\r\n      });\r\n      const innerHTML = highlightedValue\r\n        .replace(new RegExp(openingDelimiter, 'g'), '<b>')\r\n        .replace(new RegExp(closingDelimiter, 'g'), '</b>');\r\n      // deepcode ignore ReactSetInnerHtml: This is not React code\r\n      return <Host innerHTML={innerHTML}></Host>;\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private possiblyWarnOnBadFieldType() {\r\n    const resultValueRaw = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      this.field\r\n    );\r\n    if (isArray(resultValueRaw)) {\r\n      this.bindings.engine.logger.error(\r\n        `atomic-result-text cannot be used with multi value field \"${this.field}\" with values \"${resultValueRaw}\". Use atomic-result-multi-value-text instead.`,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const resultValueAsString = getStringValueFromResultOrNull(\r\n      this.result,\r\n      this.field\r\n    );\r\n    if (!resultValueAsString && !this.default) {\r\n      this.possiblyWarnOnBadFieldType();\r\n      this.host.remove();\r\n      return;\r\n    }\r\n\r\n    if (!resultValueAsString && this.default) {\r\n      this.possiblyWarnOnBadFieldType();\r\n      return (\r\n        <atomic-text\r\n          value={getFieldValueCaption(\r\n            this.field,\r\n            this.default,\r\n            this.bindings.i18n\r\n          )}\r\n        ></atomic-text>\r\n      );\r\n    }\r\n\r\n    const textValue = `${resultValueAsString}`;\r\n    const highlightsValue = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      `${this.field}Highlights`\r\n    ) as HighlightUtils.HighlightKeyword[];\r\n\r\n    if (this.shouldHighlight && highlightsValue) {\r\n      return this.renderWithHighlights(textValue, highlightsValue);\r\n    }\r\n\r\n    return getFieldValueCaption(this.field, textValue, this.bindings.i18n);\r\n  }\r\n}\r\n","import {Component, Prop, State} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.\r\n */\r\n@Component({\r\n  tag: 'atomic-text',\r\n  shadow: true,\r\n})\r\nexport class AtomicText implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n\r\n  private strings = {\r\n    value: () =>\r\n      this.bindings.i18n.t(this.value, {\r\n        count: this.count,\r\n      }),\r\n  };\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The string key value.\r\n   */\r\n  @Prop({reflect: true}) public value!: string;\r\n  /**\r\n   * The count value used for plurals.\r\n   */\r\n  @Prop({reflect: true}) public count?: number;\r\n\r\n  public connectedCallback() {\r\n    if (!this.value) {\r\n      this.error = new Error('The \"value\" attribute must be defined.');\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.strings.value();\r\n  }\r\n}\r\n"],"version":3}