{"file":"atomic-facet-manager.entry.js","mappings":";;;;;;;;;;;;;;;;;;;MA4Ba,kBAAkB;;;;;;;;;;QAoBC,wBAAmB,GAAG,CAAC,CAAC;QAU9C,eAAU,GAAG;YACnB,MAAM,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9C,MAAM,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAE5E,MAAM,EAAC,aAAa,EAAE,eAAe,EAAC,GAAG,mBAAmB,CAC1D,YAAY,EACZ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,CACnC,CAAC;YAEF,MAAM,SAAS,GAAG,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAExD,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAE7D,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,+CAA+C,CACxD,IAAI,CAAC,mBAAmB,EACxB,aAAa,CAAC,MAAM,CACrB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,MAAM,CACd,GAAG;gBACD,GAAG,aAAa;gBAChB,GAAG,eAAe;gBAClB,IAAI,SAAS,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;aAClC,CACF,CAAC;SACH,CAAC;;;mCApCkD,CAAC;;IAE9C,UAAU;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,GAAGA,EAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;QAG5D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3D;IA8BO,aAAa;QACnB,IAAI,MAAM,CAAC;YACT,kBAAkB,EAAE,IAAI,WAAW,CAAC,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;SAC/D,CAAC,CAAC,QAAQ,CAAC;YACV,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;SAC7C,CAAC,CAAC;KACJ;IAEO,sBAAsB,CAC5B,MAA0B,EAC1B,YAA0B;QAE1B,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM;YACjC,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,OAAO,EAAE,CAAC;SACX,CAAC,CAAC,CAAC;QACJ,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;KACzD;IAED,oBAAoB;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAC5D;IAEM,MAAM;QACX,OAAO,8DAAQ,CAAC;KACjB;;;AAlF4B;IAA5B,kBAAkB,EAAE;oDAA4B;AAS1C;IAJN,qBAAqB,CAAC,cAAc,EAAE;QACrC,sBAAsB,EAAE,YAAY;KACrC,CAAC;6DAE2C;;;;","names":["buildFacetManager"],"sources":["src/components/search/atomic-facet-manager/atomic-facet-manager.tsx"],"sourcesContent":["import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  FacetManager,\n  buildFacetManager,\n  FacetManagerState,\n} from '@coveo/headless';\nimport {Component, h, Element, State, Prop} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {\n  getFacetsInChildren,\n  getAutomaticFacetGenerator,\n  sortFacetVisibility,\n  collapseFacetsAfter,\n  BaseFacetElement,\n} from '../../common/facets/facet-common';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.\n */\n@Component({\n  tag: 'atomic-facet-manager',\n  shadow: false,\n})\nexport class AtomicFacetManager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private facetManager!: FacetManager;\n\n  @Element() private host!: HTMLDivElement;\n\n  @BindStateToController('facetManager', {\n    onUpdateCallbackMethod: 'sortFacets',\n  })\n  @State()\n  public facetManagerState!: FacetManagerState;\n  @State() public error!: Error;\n\n  /**\n   * The number of expanded facets inside the manager.\n   * Remaining facets are automatically collapsed.\n   *\n   * Using the value `0` collapses all facets.\n   * Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.\n   */\n  @Prop({reflect: true}) public collapseFacetsAfter = 4;\n\n  public initialize() {\n    this.validateProps();\n    this.facetManager = buildFacetManager(this.bindings.engine);\n\n    // An update has to be forced for the facets to be visually updated, without being interacted with.\n    this.bindings.i18n.on('languageChanged', this.sortFacets);\n  }\n\n  private sortFacets = () => {\n    const facets = getFacetsInChildren(this.host);\n\n    const sortedFacets = this.sortFacetsUsingManager(facets, this.facetManager);\n\n    const {visibleFacets, invisibleFacets} = sortFacetVisibility(\n      sortedFacets,\n      this.bindings.store.getAllFacets()\n    );\n\n    const generator = getAutomaticFacetGenerator(this.host);\n\n    collapseFacetsAfter(visibleFacets, this.collapseFacetsAfter);\n\n    generator?.updateCollapseFacetsDependingOnFacetsVisibility(\n      this.collapseFacetsAfter,\n      visibleFacets.length\n    );\n\n    this.host.append(\n      ...[\n        ...visibleFacets,\n        ...invisibleFacets,\n        ...(generator ? [generator] : []),\n      ]\n    );\n  };\n\n  private validateProps() {\n    new Schema({\n      collapseFacetAfter: new NumberValue({min: -1, required: true}),\n    }).validate({\n      collapseFacetAfter: this.collapseFacetsAfter,\n    });\n  }\n\n  private sortFacetsUsingManager(\n    facets: BaseFacetElement[],\n    facetManager: FacetManager\n  ): BaseFacetElement[] {\n    const payload = facets.map((f) => ({\n      facetId: f.facetId,\n      payload: f,\n    }));\n    return facetManager.sort(payload).map((f) => f.payload);\n  }\n\n  disconnectedCallback() {\n    this.bindings.i18n.off('languageChanged', this.sortFacets);\n  }\n\n  public render() {\n    return <slot />;\n  }\n}\n"],"version":3}