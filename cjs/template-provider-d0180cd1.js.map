{"file":"template-provider-d0180cd1.js","mappings":";;AAeA,SAAS,eAAe;IACtB,MAAM,OAAO,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;IAClD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;IAC5D,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC5B,OAAO;QACL,OAAO;QACP,UAAU,EAAE,EAAE;KACf,CAAC;AACJ,CAAC;MAEY,gBAAgB;IAG3B,YACU,KAAsC,EACtC,YAAgE,EAChE,sBAGJ,eAAe;QALX,UAAK,GAAL,KAAK,CAAiC;QACtC,iBAAY,GAAZ,YAAY,CAAoD;QAChE,wBAAmB,GAAnB,mBAAmB,CAGR;QAEnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC3C,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IAEO,MAAM,uBAAuB;QACnC,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACvC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,qBAAqB;YAC1D,MAAM,QAAQ,GAAG,MAAM,qBAAqB,CAAC,WAAW,EAAE,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACtC;YACD,OAAO,QAAQ,CAAC;SACjB,CAAC,CACH,CAAC;QAEF,MAAM,SAAS,GAAG,CAChB,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB;cACxD,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;cAC5B,EAAE,EACN,MAAM,CACN,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAG1C,CACJ,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,GAAG,SAAS,CAAC,CAAC;QACrD,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;KAC9C;IAEM,kBAAkB,CAAC,IAAc;QACtC,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAE,CAAC;KACnD;IAED,IAAW,mBAAmB;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC;KACjD;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;KACzC;;;;;","names":[],"sources":["src/components/common/template-provider/template-provider.ts"],"sourcesContent":["import {Template, TemplatesManager} from '@coveo/headless';\n\nexport interface TemplateElement<ItemType> extends HTMLElement {\n  getTemplate(): Promise<Template<ItemType, DocumentFragment> | null>;\n}\n\nexport interface TemplateProviderProps<ItemType> {\n  getResultTemplateRegistered(): boolean;\n  setResultTemplateRegistered(value: boolean): void;\n  getTemplateHasError(): boolean;\n  setTemplateHasError(value: boolean): void;\n  templateElements: TemplateElement<ItemType>[];\n  includeDefaultTemplate: boolean;\n}\n\nfunction defaultTemplate() {\n  const content = document.createDocumentFragment();\n  const linkEl = document.createElement('atomic-result-link');\n  content.appendChild(linkEl);\n  return {\n    content,\n    conditions: [],\n  };\n}\n\nexport class TemplateProvider<ItemType> {\n  private templateManager: TemplatesManager<ItemType, DocumentFragment>;\n\n  constructor(\n    private props: TemplateProviderProps<ItemType>,\n    private buildManager: () => TemplatesManager<ItemType, DocumentFragment>,\n    private makeDefaultTemplate: () => Template<\n      ItemType,\n      DocumentFragment\n    > = defaultTemplate\n  ) {\n    this.templateManager = this.buildManager();\n    this.registerResultTemplates();\n  }\n\n  private async registerResultTemplates() {\n    const customTemplates = await Promise.all(\n      this.props.templateElements.map(async (resultTemplateElement) => {\n        const template = await resultTemplateElement.getTemplate();\n        if (!template) {\n          this.props.setTemplateHasError(true);\n        }\n        return template;\n      })\n    );\n\n    const templates = (\n      !customTemplates.length && this.props.includeDefaultTemplate\n        ? [this.makeDefaultTemplate()]\n        : []\n    ).concat(\n      customTemplates.filter((template) => template) as Template<\n        ItemType,\n        DocumentFragment\n      >[]\n    );\n\n    this.templateManager.registerTemplates(...templates);\n    this.props.setResultTemplateRegistered(true);\n  }\n\n  public getTemplateContent(item: ItemType) {\n    return this.templateManager.selectTemplate(item)!;\n  }\n\n  public get templatesRegistered() {\n    return this.props.getResultTemplateRegistered();\n  }\n\n  public get hasError() {\n    return this.props.getTemplateHasError();\n  }\n}\n"],"version":3}