{"file":"atomic-commerce-pager.entry.js","mappings":"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","names":["buildProductListing","buildSearch"],"sources":["src/components/commerce/atomic-commerce-pager/commerce-pager-utils.ts","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.pcss?tag=atomic-commerce-pager&encapsulation=shadow","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.tsx"],"sourcesContent":["const minimumPage = 0;\r\n\r\ninterface Range {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\nexport function getCurrentPagesRange(\r\n  page: number,\r\n  desiredNumberOfPages: number,\r\n  maxPage: number\r\n): number[] {\r\n  let range = buildRange(page, desiredNumberOfPages);\r\n  range = shiftRightIfNeeded(range);\r\n  range = shiftLeftIfNeeded(range, maxPage);\r\n  return buildCurrentPages(range);\r\n}\r\n\r\nfunction buildRange(page: number, desiredNumberOfPages: number): Range {\r\n  const isEven = desiredNumberOfPages % 2 === 0;\r\n  const leftCapacity = Math.floor(desiredNumberOfPages / 2);\r\n  const rightCapacity = isEven ? leftCapacity - 1 : leftCapacity;\r\n\r\n  const start = page - leftCapacity;\r\n  const end = page + rightCapacity;\r\n\r\n  return {start, end};\r\n}\r\n\r\nfunction shiftRightIfNeeded(range: Range) {\r\n  const leftExcess = Math.max(minimumPage - range.start, 0);\r\n  const start = range.start + leftExcess;\r\n  const end = range.end + leftExcess;\r\n\r\n  return {start, end};\r\n}\r\n\r\nfunction shiftLeftIfNeeded(range: Range, maxPage: number) {\r\n  const rightExcess = Math.max(range.end - maxPage, 0);\r\n  const start = Math.max(range.start - rightExcess, minimumPage);\r\n  const end = range.end - rightExcess;\r\n\r\n  return {start, end};\r\n}\r\n\r\nfunction buildCurrentPages(range: Range) {\r\n  const currentPages: number[] = [];\r\n\r\n  for (let counter = range.start; counter <= range.end; ++counter) {\r\n    currentPages.push(counter);\r\n  }\r\n\r\n  return currentPages;\r\n}\r\n","@import '../../../global/global.pcss';\r\n","import {\r\n  Pagination,\r\n  PaginationState,\r\n  ProductListing,\r\n  Search,\r\n  buildProductListing,\r\n  buildSearch,\r\n} from '@coveo/headless/commerce';\r\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\r\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\r\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {\r\n  PagerNextButton,\r\n  PagerPageButton,\r\n  PagerPageButtons,\r\n  PagerPreviousButton,\r\n} from '../../common/pager/pager-buttons';\r\nimport {PagerGuard} from '../../common/pager/pager-guard';\r\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\r\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\r\nimport {getCurrentPagesRange} from './commerce-pager-utils';\r\n\r\n/**\r\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.\r\n *\r\n * @part buttons - The list of the next/previous buttons and page-buttons.\r\n * @part page-buttons - The list of page buttons.\r\n * @part page-button - The page button.\r\n * @part active-page-button - The active page button.\r\n * @part previous-button - The previous button.\r\n * @part next-button - The next button.\r\n * @part previous-button-icon - Icon of the previous button.\r\n * @part next-button-icon - Icon of the next button.\r\n *\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-commerce-pager',\r\n  styleUrl: 'atomic-commerce-pager.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicCommercePager\r\n  implements InitializableComponent<CommerceBindings>\r\n{\r\n  @InitializeBindings() public bindings!: CommerceBindings;\r\n  public pager!: Pagination;\r\n  public listingOrSearch!: ProductListing | Search;\r\n\r\n  @BindStateToController('pager')\r\n  @State()\r\n  public pagerState!: PaginationState;\r\n\r\n  @State() error!: Error;\r\n\r\n  @Event({\r\n    eventName: 'atomic/scrollToTop',\r\n  })\r\n  private scrollToTopEvent!: EventEmitter;\r\n\r\n  /**\r\n   * Specifies how many page buttons to display in the pager.\r\n   */\r\n  @Prop({reflect: true}) numberOfPages = 5;\r\n\r\n  /**\r\n   * The SVG icon to use to display the Previous button.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop({reflect: true}) previousButtonIcon = ArrowLeftIcon;\r\n\r\n  /**\r\n   * The SVG icon to use to display the Next button.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop({reflect: true}) nextButtonIcon = ArrowRightIcon;\r\n\r\n  private activePage?: FocusTargetController;\r\n  private radioGroupName = randomID('atomic-commerce-pager-');\r\n\r\n  public initialize() {\r\n    if (this.bindings.interfaceElement.type === 'product-listing') {\r\n      this.listingOrSearch = buildProductListing(this.bindings.engine);\r\n    } else {\r\n      this.listingOrSearch = buildSearch(this.bindings.engine);\r\n    }\r\n    this.pager = this.listingOrSearch.pagination();\r\n  }\r\n\r\n  public render() {\r\n    const pagesRange = getCurrentPagesRange(\r\n      this.pagerState.page,\r\n      this.numberOfPages,\r\n      this.pagerState.totalPages - 1\r\n    );\r\n\r\n    return (\r\n      <PagerGuard\r\n        hasError={false}\r\n        hasResults={this.pagerState.totalPages > 1}\r\n        isAppLoaded={this.bindings.store.isAppLoaded()}\r\n      >\r\n        <PagerNavigation label={this.bindings.i18n.t('pagination')}>\r\n          <PagerPreviousButton\r\n            icon={this.previousButtonIcon}\r\n            disabled={this.pagerState.page === 0}\r\n            ariaLabel={this.bindings.i18n.t('previous')}\r\n            onClick={() => {\r\n              this.pager.previousPage();\r\n              this.focusOnFirstResultAndScrollToTop();\r\n            }}\r\n          />\r\n          <PagerPageButtons>\r\n            {pagesRange.map((pageNumber) => {\r\n              return (\r\n                <PagerPageButton\r\n                  isSelected={pageNumber === this.pagerState.page}\r\n                  ariaLabel={this.bindings.i18n.t('page-number', {\r\n                    pageNumber,\r\n                  })}\r\n                  onChecked={() => {\r\n                    this.pager.selectPage(pageNumber);\r\n                    this.focusOnFirstResultAndScrollToTop();\r\n                  }}\r\n                  page={pageNumber}\r\n                  groupName={this.radioGroupName}\r\n                  ref={(el) => {\r\n                    const isSelected = pageNumber === this.pagerState.page;\r\n                    if (isSelected && el) {\r\n                      this.focusTarget.setTarget(el);\r\n                    }\r\n                  }}\r\n                  text={(pageNumber + 1).toLocaleString(\r\n                    this.bindings.i18n.language\r\n                  )}\r\n                />\r\n              );\r\n            })}\r\n          </PagerPageButtons>\r\n          <PagerNextButton\r\n            icon={this.nextButtonIcon}\r\n            disabled={this.pagerState.page >= this.pagerState.totalPages}\r\n            ariaLabel={this.bindings.i18n.t('next')}\r\n            onClick={() => {\r\n              this.pager.nextPage();\r\n              this.focusOnFirstResultAndScrollToTop();\r\n            }}\r\n          />\r\n        </PagerNavigation>\r\n      </PagerGuard>\r\n    );\r\n  }\r\n\r\n  private async focusOnFirstResultAndScrollToTop() {\r\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\r\n    this.scrollToTopEvent.emit();\r\n  }\r\n\r\n  private get focusTarget() {\r\n    if (!this.activePage) {\r\n      this.activePage = new FocusTargetController(this);\r\n    }\r\n    return this.activePage;\r\n  }\r\n}\r\n"],"version":3}