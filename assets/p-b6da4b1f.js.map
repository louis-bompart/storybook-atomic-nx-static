{"version":3,"names":["MapProp","opts","component","variableName","componentWillLoad","console","error","prefix","attributePrefix","variable","this","attributes","getElement","mapAttributesToProp","Array","from","_a","splitValues","call","ArrayProp","attributeWithBrackets","camelToKebab","value","isArray","valueAsArray","JSON","parse","e","splitAttributeValueOnCommas","attributeValue","splitButIgnoreEscapeSymbolsExpression","valuesWithEscapeSymbols","matchAll","removeEscapeSymbolsExpression","map","replace","mapVariable","attributesToStringMap","Object","assign","stringMapToStringArrayMap","entries","reduce","acc","key","subValue","trim","kebabPrefix","i","length","attribute","name","indexOf","property","kebabToCamel"],"sources":["src/utils/props-utils.ts"],"sourcesContent":["import {isArray} from '@coveo/bueno';\r\nimport {ComponentInterface, getElement} from '@stencil/core';\r\nimport {camelToKebab, kebabToCamel} from './utils';\r\n\r\ninterface MapPropOptions {\r\n  attributePrefix?: string;\r\n  splitValues?: boolean;\r\n}\r\n\r\nexport function MapProp(opts?: MapPropOptions) {\r\n  return (component: ComponentInterface, variableName: string) => {\r\n    const {componentWillLoad} = component;\r\n    if (!componentWillLoad) {\r\n      console.error(\r\n        'The \"componentWillLoad\" lifecycle method has to be defined for the MapProp decorator to work.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    component.componentWillLoad = function () {\r\n      const prefix = (opts && opts.attributePrefix) || variableName;\r\n      const variable = this[variableName];\r\n      const attributes = getElement(this).attributes;\r\n      mapAttributesToProp(\r\n        prefix,\r\n        variable,\r\n        Array.from(attributes),\r\n        opts?.splitValues ?? false\r\n      );\r\n      componentWillLoad.call(this);\r\n    };\r\n  };\r\n}\r\n\r\nexport function ArrayProp() {\r\n  return (component: ComponentInterface, variableName: string) => {\r\n    const {componentWillLoad} = component;\r\n\r\n    const attributeWithBrackets = camelToKebab(variableName);\r\n\r\n    component.componentWillLoad = function () {\r\n      const value = this[variableName];\r\n      if (!value || isArray(value)) {\r\n        componentWillLoad?.call(this);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const valueAsArray = JSON.parse(value);\r\n        if (isArray(valueAsArray)) {\r\n          this[variableName] = valueAsArray;\r\n        } else {\r\n          console.error(\r\n            `Property ${attributeWithBrackets} should be an array`,\r\n            getElement(this)\r\n          );\r\n        }\r\n      } catch (e) {\r\n        console.error(\r\n          `Error while parsing attribute ${attributeWithBrackets} as array`,\r\n          e\r\n        );\r\n      }\r\n\r\n      componentWillLoad?.call(this);\r\n    };\r\n  };\r\n}\r\n\r\nfunction splitAttributeValueOnCommas(attributeValue: string) {\r\n  const splitButIgnoreEscapeSymbolsExpression = /(?:\\\\.|[^,])+/g;\r\n  const [...valuesWithEscapeSymbols] =\r\n    attributeValue.matchAll(splitButIgnoreEscapeSymbolsExpression) ?? [];\r\n\r\n  const removeEscapeSymbolsExpression = /\\\\(.)/g;\r\n  return valuesWithEscapeSymbols.map(([valuesWithEscapeSymbols]) =>\r\n    valuesWithEscapeSymbols.replace(removeEscapeSymbolsExpression, '$1')\r\n  );\r\n}\r\n\r\nexport function mapAttributesToProp(\r\n  prefix: string,\r\n  mapVariable: Record<string, string | string[]>,\r\n  attributes: {name: string; value: string}[],\r\n  splitValues: boolean\r\n) {\r\n  const map = attributesToStringMap(prefix, attributes);\r\n  Object.assign(\r\n    mapVariable,\r\n    splitValues ? stringMapToStringArrayMap(map) : map\r\n  );\r\n}\r\n\r\nfunction stringMapToStringArrayMap(map: Record<string, string>) {\r\n  return Object.entries(map).reduce(\r\n    (acc, [key, value]) => ({\r\n      ...acc,\r\n      [key]: splitAttributeValueOnCommas(value).map((subValue) =>\r\n        subValue.trim()\r\n      ),\r\n    }),\r\n    {}\r\n  );\r\n}\r\n\r\nfunction attributesToStringMap(\r\n  prefix: string,\r\n  attributes: {name: string; value: string}[]\r\n) {\r\n  const mapVariable: Record<string, string> = {};\r\n  const kebabPrefix = camelToKebab(prefix) + '-';\r\n  for (let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    if (attribute.name.indexOf(kebabPrefix) !== 0) {\r\n      continue;\r\n    }\r\n\r\n    const property = kebabToCamel(attribute.name.replace(kebabPrefix, ''));\r\n    mapVariable[property] = `${attribute.value}`;\r\n  }\r\n  return mapVariable;\r\n}\r\n"],"mappings":"4HASgBA,EAAQC,GACtB,MAAO,CAACC,EAA+BC,KACrC,MAAMC,kBAACA,GAAqBF,EAC5B,IAAKE,EAAmB,CACtBC,QAAQC,MACN,iGAEF,M,CAGFJ,EAAUE,kBAAoB,W,MAC5B,MAAMG,EAAUN,GAAQA,EAAKO,iBAAoBL,EACjD,MAAMM,EAAWC,KAAKP,GACtB,MAAMQ,EAAaC,EAAWF,MAAMC,WACpCE,EACEN,EACAE,EACAK,MAAMC,KAAKJ,IACXK,EAAAf,IAAI,MAAJA,SAAI,SAAJA,EAAMgB,eAAW,MAAAD,SAAA,EAAAA,EAAI,OAEvBZ,EAAkBc,KAAKR,K,CACxB,CAEL,C,SAEgBS,IACd,MAAO,CAACjB,EAA+BC,KACrC,MAAMC,kBAACA,GAAqBF,EAE5B,MAAMkB,EAAwBC,EAAalB,GAE3CD,EAAUE,kBAAoB,WAC5B,MAAMkB,EAAQZ,KAAKP,GACnB,IAAKmB,GAASC,EAAQD,GAAQ,CAC5BlB,IAAiB,MAAjBA,SAAiB,SAAjBA,EAAmBc,KAAKR,MACxB,M,CAGF,IACE,MAAMc,EAAeC,KAAKC,MAAMJ,GAChC,GAAIC,EAAQC,GAAe,CACzBd,KAAKP,GAAgBqB,C,KAChB,CACLnB,QAAQC,MACN,YAAYc,uBACZR,EAAWF,M,EAGf,MAAOiB,GACPtB,QAAQC,MACN,iCAAiCc,aACjCO,E,CAIJvB,IAAiB,MAAjBA,SAAiB,SAAjBA,EAAmBc,KAAKR,K,CACzB,CAEL,CAEA,SAASkB,EAA4BC,G,MACnC,MAAMC,EAAwC,iBAC9C,SAAUC,IACRf,EAAAa,EAAeG,SAASF,MAAsC,MAAAd,SAAA,EAAAA,EAAI,GAEpE,MAAMiB,EAAgC,SACtC,OAAOF,EAAwBG,KAAI,EAAEH,KACnCA,EAAwBI,QAAQF,EAA+B,OAEnE,C,SAEgBpB,EACdN,EACA6B,EACAzB,EACAM,GAEA,MAAMiB,EAAMG,EAAsB9B,EAAQI,GAC1C2B,OAAOC,OACLH,EACAnB,EAAcuB,EAA0BN,GAAOA,EAEnD,CAEA,SAASM,EAA0BN,GACjC,OAAOI,OAAOG,QAAQP,GAAKQ,QACzB,CAACC,GAAMC,EAAKtB,MAAM,IACbqB,EACHC,CAACA,GAAMhB,EAA4BN,GAAOY,KAAKW,GAC7CA,EAASC,YAGb,GAEJ,CAEA,SAAST,EACP9B,EACAI,GAEA,MAAMyB,EAAsC,GAC5C,MAAMW,EAAc1B,EAAad,GAAU,IAC3C,IAAK,IAAIyC,EAAI,EAAGA,EAAIrC,EAAWsC,OAAQD,IAAK,CAC1C,MAAME,EAAYvC,EAAWqC,GAC7B,GAAIE,EAAUC,KAAKC,QAAQL,KAAiB,EAAG,CAC7C,Q,CAGF,MAAMM,EAAWC,EAAaJ,EAAUC,KAAKhB,QAAQY,EAAa,KAClEX,EAAYiB,GAAY,GAAGH,EAAU5B,O,CAEvC,OAAOc,CACT,Q"}