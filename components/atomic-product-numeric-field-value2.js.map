{"file":"atomic-product-numeric-field-value2.js","mappings":";;;;;;;;;;;;;;;;;MAoBa,mBAAmB;;;;QAcrB,cAAS,GAAoB,sBAAsB,CAAC;QAEpD,mBAAc,GAAkB,IAAI,CAAC;;;yBAFR,sBAAsB;8BAEnB,IAAI;;IAGtC,SAAS,CAAC,KAAmC;QAClD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;KAC/B;IAEO,UAAU;QAChB,MAAM,KAAK,GAAGA,EAAuB,CAAC,kBAAkB,CACtD,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,KAAK,CACX,CAAC;QACF,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QAC7C,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;YAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,oBAAoB,KAAK,iBAAiB,IAAI,CAAC,KAAK,gBAAgB,CACrE,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QACD,OAAO,aAAa,CAAC;KACtB;IAEO,WAAW,CAAC,KAAa;QAC/B,IAAI;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAqB,CAAC,CAAC;SACxE;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,KAAc,CAAC;YAC5B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;SACzB;KACF;IAEO,oBAAoB;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAChC,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC/C;KACF;IAED,mBAAmB;QACjB,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC7B;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACnB,OAAO;SACR;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;;;;;;;;AApE4B;IAA5B,kBAAkB,EAAE;qDAA4B;AACvB;IAAzB,cAAc,EAAE;oDAA2B;;;;;;;;;;;;;;;;;;;;;;","names":["ProductTemplatesHelpers"],"sources":["src/components/commerce/product-template-components/atomic-product-numeric-field-value/atomic-product-numeric-field-value.tsx"],"sourcesContent":["import {Product, ProductTemplatesHelpers} from '@coveo/headless/commerce';\nimport {Component, Prop, Element, State, Listen} from '@stencil/core';\nimport {Bindings} from '../../../../components';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {ProductContext} from '../product-template-decorators';\n\n/**\n * @internal\n * The `atomic-product-numeric-field-value` component renders the value of a number product field.\n *\n * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.\n */\n@Component({\n  tag: 'atomic-product-numeric-field-value',\n  shadow: false,\n})\nexport class AtomicProductNumber {\n  @InitializeBindings() public bindings!: Bindings;\n  @ProductContext() private product!: Product;\n\n  @Element() host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The field that the component should use.\n   * The component will try to find this field in the `Product.additionalFields` object unless it finds it in the `Product` object first.\n   */\n  @Prop({reflect: true}) field!: string;\n\n  @State() formatter: NumberFormatter = defaultNumberFormatter;\n\n  @State() valueToDisplay: string | null = null;\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  private parseValue() {\n    const value = ProductTemplatesHelpers.getProductProperty(\n      this.product,\n      this.field\n    );\n    if (value === null) {\n      return null;\n    }\n    const valueAsNumber = parseFloat(`${value}`);\n    if (Number.isNaN(valueAsNumber)) {\n      this.error = new Error(\n        `Could not parse \"${value}\" from field \"${this.field}\" as a number.`\n      );\n      return null;\n    }\n    return valueAsNumber;\n  }\n\n  private formatValue(value: number) {\n    try {\n      return this.formatter(value, this.bindings.i18n.languages as string[]);\n    } catch (error) {\n      this.error = error as Error;\n      return value.toString();\n    }\n  }\n\n  private updateValueToDisplay() {\n    const value = this.parseValue();\n    if (value !== null) {\n      this.valueToDisplay = this.formatValue(value);\n    }\n  }\n\n  componentWillRender() {\n    this.updateValueToDisplay();\n  }\n\n  public render() {\n    if (this.valueToDisplay === null) {\n      this.host.remove();\n      return;\n    }\n    return this.valueToDisplay;\n  }\n}\n"],"version":3}