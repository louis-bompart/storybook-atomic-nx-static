{"version":3,"names":["SearchBoxWrapper","props","children","getClasses","baseClasses","focusClasses","disabled","inputTypeClasses","textArea","join","h","part","class","TextAreaClearButton","inputRef","bindings","onClick","defaultButtonProps","Button","style","focus","ariaLabel","i18n","t","icon","ClearSlim","getPopupAttributes","role","autocomplete","autocapitalize","autocorrect","activeDescendant","hasSuggestions","expanded","id","syncTextWithReplica","elem","value","parent","parentNode","dataset","replicatedValue","resetReplicaText","collapseTextArea","classList","remove","expandTextArea","add","SearchTextArea","textAreaRef","loading","onInput","onFocus","onBlur","onChange","onKeyDown","onKeyUp","onClear","popup","defaultInputProps","placeholder","rows","e","key","shiftKey","preventDefault","target","promiseTimeout","prom","ms","timeout","Promise","_","reject","setTimeout","Error","race","then","clearTimeout","SuggestionManager","constructor","ownerSearchBoxProps","this","suggestions","leftSuggestionElements","rightSuggestionElements","leftPanel","undefined","rightPanel","suggestedQuery","queryDataAttribute","suggestionEvents","previousActiveDescendantElement","leftSuggestions","rightSuggestions","triggerSuggestions","debounce","executeQuerySuggestion","getSuggestionDelay","partialSuggestionBindings","clearSuggestions","getSuggestions","getSuggestionElements","allSuggestionElements","activeDescendantElement","hasActiveDescendant","_a","querySelector","_b","onSubmit","updateActiveDescendant","forceUpdate","getHost","clickOnActiveElement","click","isRightPanelInFocus","isNullOrUndefined","panelInFocus","initializeSuggestions","map","event","registerSuggestionsFromEvent","stopPropagation","push","detail","registerSuggestions","isDoubleList","Boolean","length","focusPanel","side","panel","firstElementChild","panelHasActiveDescendant","contains","newValue","updateDescendants","clearSuggestionElements","focusNextValue","nextOrFirstValue","focusValue","scrollActiveDescendantIntoView","updateQueryFromSuggestion","onSuggestionMouseOver","item","thisPanel","query","updateSuggestedQuery","onSuggestionClick","updateOwnerSearchboxQuery","onSelect","focusPreviousValue","firstValue","previousOrLastValue","settled","allSettled","suggestion","resolve","getSuggestionTimeout","fulfilledSuggestions","forEach","j","status","getLogger","warn","splitSuggestions","isDefault","filter","sort","sortSuggestions","getAndFilterLeftSuggestionElements","defaultSuggestedQuery","find","elementHasQuery","lastValue","lastElementChild","previousElementSibling","a","b","position","nextElementSibling","scrollIntoView","block","getAttribute","getSearchBoxValue","updateQuery","onSuggestedQueryChange","updateSuggestionElements","isPanelInFocus","escaped","DOMPurify","sanitize","closest","suggestionElements","filterOnDuplicate","Set","out","suggestionElement","has","elements","renderItems","flat","max","getNumberOfSuggestionsToDisplay","elementHasNoQuery","slice","newPrevDescendantElement","getPartsForSuggestion","isSelected","getClassesForSuggestion","isHTMLElement","el","HTMLElement","ensureContentForRenderedSuggestion","renderedSuggestion","content","replaceChildren","getAriaLabelForRenderedSuggestion","index","lastIndex","isButton","contentLabel","_c","innerText","labelWithType","isMacOS","label","interpolation","escapeValue","count","getContentForSuggestion","Fragment","getCommonSearchSuggestionAttributes","ref","setAttribute","SimpleSearchSuggestion","ButtonSearchSuggestion","onMouseDown","call","onMouseOver"],"sources":["src/components/common/search-box/search-box-wrapper.tsx","src/components/common/search-box/text-area-clear-button.tsx","src/components/common/search-box/search-text-area.tsx","src/utils/promise-utils.ts","src/components/common/suggestions/suggestion-manager.ts","src/components/search/atomic-search-box/search-suggestion.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\n\r\ninterface Props {\r\n  disabled: boolean;\r\n  textArea?: boolean;\r\n}\r\n\r\nexport const SearchBoxWrapper: FunctionalComponent<Props> = (\r\n  props,\r\n  children\r\n) => {\r\n  const getClasses = () => {\r\n    const baseClasses =\r\n      'flex bg-background w-full border border-neutral rounded-md focus-within:ring';\r\n    const focusClasses = props.disabled\r\n      ? 'focus-within:border-disabled focus-within:ring-neutral'\r\n      : 'focus-within:border-primary focus-within:ring-ring-primary';\r\n    const inputTypeClasses = props.textArea\r\n      ? 'absolute top-0 left-0'\r\n      : 'relative h-full';\r\n\r\n    return [baseClasses, focusClasses, inputTypeClasses].join(' ');\r\n  };\r\n\r\n  return (\r\n    <div part=\"wrapper\" class={getClasses()}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport ClearSlim from '../../../images/clear-slim.svg';\r\nimport {Button, ButtonProps} from '../button';\r\nimport {AnyBindings} from '../interface/bindings';\r\n\r\ninterface Props extends Partial<ButtonProps> {\r\n  bindings: AnyBindings;\r\n  inputRef: HTMLInputElement | HTMLTextAreaElement | null;\r\n}\r\n\r\nexport const TextAreaClearButton: FunctionalComponent<Props> = ({\r\n  inputRef,\r\n  bindings,\r\n  onClick,\r\n  ...defaultButtonProps\r\n}) => (\r\n  <div\r\n    part=\"clear-button-wrapper\"\r\n    class=\"py-2 flex items-start justify-center items-center ml-2\"\r\n  >\r\n    <Button\r\n      style=\"text-transparent\"\r\n      part=\"clear-button\"\r\n      class=\"flex items-center justify-center w-8 h-8 text-neutral-dark shrink-0\"\r\n      onClick={() => {\r\n        onClick?.();\r\n        inputRef?.focus();\r\n      }}\r\n      ariaLabel={bindings.i18n.t('clear')}\r\n      {...defaultButtonProps}\r\n    >\r\n      <atomic-icon\r\n        part=\"clear-icon\"\r\n        icon={ClearSlim}\r\n        class=\"w-4 h-4\"\r\n      ></atomic-icon>\r\n    </Button>\r\n  </div>\r\n);\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {JSXBase} from '@stencil/core/internal';\r\nimport {AnyBindings} from '../interface/bindings';\r\nimport {TextAreaClearButton} from './text-area-clear-button';\r\n\r\ninterface Props extends JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n  textAreaRef: HTMLTextAreaElement;\r\n  loading: boolean;\r\n  bindings: AnyBindings;\r\n  value: string;\r\n  ariaLabel: string;\r\n  onClear(): void;\r\n  popup?: {\r\n    id: string;\r\n    activeDescendant: string;\r\n    expanded: boolean;\r\n    hasSuggestions: boolean;\r\n  };\r\n}\r\n\r\nfunction getPopupAttributes(props: Required<Props>['popup']) {\r\n  return {\r\n    role: 'combobox',\r\n    autocomplete: 'off',\r\n    autocapitalize: 'off',\r\n    autocorrect: 'off',\r\n    ...(props.activeDescendant && {\r\n      'aria-activedescendant': props.activeDescendant,\r\n    }),\r\n    'aria-expanded': `${props.hasSuggestions && props.expanded}`,\r\n    'aria-autocomplete': 'both',\r\n    'aria-haspopup': 'true',\r\n    'aria-controls': props.id,\r\n  };\r\n}\r\n\r\nfunction syncTextWithReplica(elem: HTMLTextAreaElement, value?: string) {\r\n  const parent = elem?.parentNode as HTMLElement;\r\n  if (!parent) {\r\n    return;\r\n  }\r\n  if (elem.value === '\\n') {\r\n    return;\r\n  }\r\n  parent.dataset.replicatedValue = value ?? elem.value;\r\n}\r\n\r\nfunction resetReplicaText(elem: HTMLTextAreaElement) {\r\n  const parent = elem?.parentNode as HTMLElement;\r\n  if (parent) {\r\n    delete parent.dataset.replicatedValue;\r\n  }\r\n}\r\n\r\nfunction collapseTextArea(elem: HTMLTextAreaElement) {\r\n  const parent = elem?.parentNode as HTMLElement;\r\n  if (parent) {\r\n    parent.classList.remove('expanded');\r\n  }\r\n}\r\n\r\nfunction expandTextArea(elem: HTMLTextAreaElement) {\r\n  const parent = elem?.parentNode as HTMLElement;\r\n  if (parent) {\r\n    parent.classList.add('expanded');\r\n  }\r\n}\r\n\r\nexport const SearchTextArea: FunctionalComponent<Props> = ({\r\n  textAreaRef,\r\n  loading,\r\n  bindings,\r\n  onInput,\r\n  onFocus,\r\n  onBlur,\r\n  onChange,\r\n  onKeyDown,\r\n  onKeyUp,\r\n  value,\r\n  ariaLabel,\r\n  onClear,\r\n  popup,\r\n  ...defaultInputProps\r\n}) => (\r\n  <div class=\"grow flex overflow-hidden\">\r\n    <div part=\"textarea-expander\" class=\"grow grid overflow-hidden\">\r\n      <textarea\r\n        part=\"textarea\"\r\n        aria-label={ariaLabel}\r\n        placeholder={bindings.i18n.t('search')}\r\n        class=\"placeholder-neutral-dark\"\r\n        rows={1}\r\n        onInput={(e) => {\r\n          onInput?.(e);\r\n          syncTextWithReplica(textAreaRef);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          syncTextWithReplica(textAreaRef);\r\n          if (e.key === 'Enter') {\r\n            if (e.shiftKey) {\r\n              return;\r\n            }\r\n            e.preventDefault();\r\n          }\r\n          onKeyDown?.(e);\r\n        }}\r\n        onKeyUp={(e) => {\r\n          onKeyUp?.(e);\r\n          if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            return;\r\n          }\r\n          syncTextWithReplica(textAreaRef);\r\n        }}\r\n        onBlur={(e) => {\r\n          onBlur?.(e);\r\n          collapseTextArea(textAreaRef);\r\n          syncTextWithReplica(textAreaRef);\r\n        }}\r\n        onChange={(e) => {\r\n          onChange?.(e);\r\n          syncTextWithReplica(textAreaRef);\r\n        }}\r\n        onFocus={(e) => {\r\n          onFocus?.(e);\r\n          const target = e.target as HTMLTextAreaElement;\r\n          syncTextWithReplica(textAreaRef ?? target);\r\n          expandTextArea(textAreaRef ?? target);\r\n        }}\r\n        autocomplete=\"off\"\r\n        {...(popup && getPopupAttributes(popup))}\r\n        {...defaultInputProps}\r\n        value={value}\r\n      />\r\n    </div>\r\n\r\n    {loading && (\r\n      <div class=\"searchbox-button-wrapper flex items-center justify-center ml-2\">\r\n        <span\r\n          part=\"loading\"\r\n          class=\"loading w-5 h-5 rounded-full bg-gradient-to-r animate-spin mr-2 grid place-items-center\"\r\n        ></span>\r\n      </div>\r\n    )}\r\n    {!loading && value && (\r\n      <TextAreaClearButton\r\n        inputRef={textAreaRef}\r\n        bindings={bindings}\r\n        onClick={() => {\r\n          onClear();\r\n          resetReplicaText(textAreaRef);\r\n        }}\r\n      />\r\n    )}\r\n  </div>\r\n);\r\n","export function promiseTimeout<T>(prom: T | Promise<T>, ms: number) {\r\n  let id: NodeJS.Timeout;\r\n  const timeout = new Promise((_, reject) => {\r\n    id = setTimeout(() => {\r\n      reject(new Error('Promise timed out.'));\r\n    }, ms);\r\n  });\r\n  return Promise.race([prom, timeout]).then(() => {\r\n    clearTimeout(id);\r\n  });\r\n}\r\n","import {isNullOrUndefined} from '@coveo/bueno';\r\nimport {forceUpdate} from '@stencil/core';\r\nimport DOMPurify from 'dompurify';\r\nimport {debounce} from '../../../utils/debounce-utils';\r\nimport {promiseTimeout} from '../../../utils/promise-utils';\r\nimport {\r\n  SearchBoxSuggestionElement,\r\n  SearchBoxSuggestionsBindings,\r\n  SearchBoxSuggestionsEvent,\r\n  elementHasNoQuery,\r\n  elementHasQuery,\r\n} from './suggestions-common';\r\n\r\n/**\r\n * List of suggestions that will be displayed along other lists (e.g recent queries) when the search box's input is selected.\r\n */\r\nexport interface SearchBoxSuggestions {\r\n  /**\r\n   * The search box will sort the position of suggestions using this value, the lowest value being first.\r\n   * By default, the DOM position will be used.\r\n   */\r\n  position: number;\r\n  /**\r\n   * Whether the suggestions should be listed in the right or left panel. By default, the suggestions are listed in the right panel.\r\n   */\r\n  panel?: 'left' | 'right';\r\n  /**\r\n   * Method that returns the list of elements which will be rendered in the list of suggestions.\r\n   */\r\n  renderItems(): SearchBoxSuggestionElement[];\r\n  /**\r\n   * Hook called when the user changes the search box's input value. This can lead to all the query suggestions being updated.\r\n   */\r\n  onInput?(): Promise<unknown> | void;\r\n  /**\r\n   * Hook called when the current suggested query changes as the user navigates the list of suggestions.\r\n   * This is used for instant results, which are rendered based on the current suggested query.\r\n   * @param q The new current suggested query.\r\n   */\r\n  onSuggestedQueryChange?(q: string): Promise<unknown> | void;\r\n}\r\n\r\ninterface SearchBoxProps {\r\n  getSearchBoxValue: () => string;\r\n  updateQuery: (suggestedQuery: string) => void;\r\n  getSuggestionTimeout: () => number;\r\n  getNumberOfSuggestionsToDisplay: () => number;\r\n  getSuggestionDelay: () => number;\r\n  getLogger: () => Pick<typeof console, 'warn'>;\r\n  getHost: () => HTMLElement;\r\n}\r\n\r\nexport class SuggestionManager<SearchBoxController> {\r\n  public suggestions: SearchBoxSuggestions[] = [];\r\n  public leftSuggestionElements: SearchBoxSuggestionElement[] = [];\r\n  public rightSuggestionElements: SearchBoxSuggestionElement[] = [];\r\n  public leftPanel: HTMLElement | undefined = undefined;\r\n  public rightPanel: HTMLElement | undefined = undefined;\r\n  public triggerSuggestions: () => Promise<void>;\r\n  public activeDescendant = '';\r\n  public suggestedQuery = '';\r\n\r\n  private queryDataAttribute = 'data-query';\r\n  private suggestionEvents: SearchBoxSuggestionsEvent<SearchBoxController>[] =\r\n    [];\r\n\r\n  private previousActiveDescendantElement: HTMLElement | null = null;\r\n  private leftSuggestions: SearchBoxSuggestions[] = [];\r\n  private rightSuggestions: SearchBoxSuggestions[] = [];\r\n\r\n  constructor(private ownerSearchBoxProps: SearchBoxProps) {\r\n    this.triggerSuggestions = debounce(\r\n      () => this.executeQuerySuggestion(),\r\n      this.ownerSearchBoxProps.getSuggestionDelay()\r\n    );\r\n  }\r\n\r\n  public get partialSuggestionBindings(): Pick<\r\n    SearchBoxSuggestionsBindings<SearchBoxController>,\r\n    | 'suggestedQuery'\r\n    | 'clearSuggestions'\r\n    | 'triggerSuggestions'\r\n    | 'getSuggestions'\r\n    | 'getSuggestionElements'\r\n  > {\r\n    return {\r\n      suggestedQuery: () => this.suggestedQuery,\r\n      clearSuggestions: () => this.clearSuggestions(),\r\n      triggerSuggestions: () => this.triggerSuggestions(),\r\n      getSuggestions: () => this.suggestions,\r\n      getSuggestionElements: () => this.allSuggestionElements,\r\n    };\r\n  }\r\n\r\n  public get activeDescendantElement(): HTMLElement | null {\r\n    if (!this.hasActiveDescendant) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      this.leftPanel?.querySelector(`#${this.activeDescendant}`) ||\r\n      this.rightPanel?.querySelector(`#${this.activeDescendant}`) ||\r\n      null\r\n    );\r\n  }\r\n\r\n  public onSubmit() {\r\n    this.updateActiveDescendant();\r\n    this.clearSuggestions();\r\n  }\r\n\r\n  public updateActiveDescendant(id = '') {\r\n    this.activeDescendant = id;\r\n    forceUpdate(this.ownerSearchBoxProps.getHost());\r\n  }\r\n\r\n  public clickOnActiveElement() {\r\n    this.activeDescendantElement?.click();\r\n    this.updateActiveDescendant();\r\n  }\r\n\r\n  public isRightPanelInFocus() {\r\n    if (\r\n      isNullOrUndefined(this.panelInFocus) ||\r\n      isNullOrUndefined(this.rightPanel)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return this.panelInFocus === this.rightPanel;\r\n  }\r\n\r\n  public initializeSuggestions(\r\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\r\n  ) {\r\n    this.suggestions = this.suggestionEvents.map((event) => event(bindings));\r\n  }\r\n\r\n  public registerSuggestionsFromEvent(\r\n    event: CustomEvent<SearchBoxSuggestionsEvent<SearchBoxController>>,\r\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\r\n  ) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.suggestionEvents.push(event.detail);\r\n    this.suggestions.push(event.detail(bindings));\r\n  }\r\n\r\n  public registerSuggestions(suggestions: SearchBoxSuggestions) {\r\n    this.suggestions.push(suggestions);\r\n  }\r\n\r\n  public get isDoubleList() {\r\n    return Boolean(\r\n      this.leftSuggestionElements.length && this.rightSuggestionElements.length\r\n    );\r\n  }\r\n\r\n  public focusPanel(side: 'left' | 'right') {\r\n    const panel = side === 'left' ? this.leftPanel : this.rightPanel;\r\n\r\n    if (this.panelInFocus === panel) {\r\n      return;\r\n    }\r\n    if (panel && panel.firstElementChild) {\r\n      const panelHasActiveDescendant =\r\n        this.previousActiveDescendantElement &&\r\n        panel.contains(this.previousActiveDescendantElement);\r\n      const newValue = panelHasActiveDescendant\r\n        ? this.previousActiveDescendantElement!\r\n        : (panel.firstElementChild as HTMLElement);\r\n      this.updateDescendants(newValue.id);\r\n    }\r\n  }\r\n\r\n  public clearSuggestions() {\r\n    this.clearSuggestionElements();\r\n    this.updateActiveDescendant();\r\n  }\r\n\r\n  public focusNextValue() {\r\n    if (!this.hasSuggestions || !this.nextOrFirstValue) {\r\n      return;\r\n    }\r\n\r\n    this.focusValue(this.nextOrFirstValue as HTMLElement);\r\n  }\r\n\r\n  public focusValue(value: HTMLElement) {\r\n    this.updateActiveDescendant(value.id);\r\n    this.scrollActiveDescendantIntoView();\r\n    this.updateQueryFromSuggestion();\r\n  }\r\n\r\n  public onSuggestionMouseOver(\r\n    item: SearchBoxSuggestionElement,\r\n    side: 'left' | 'right',\r\n    id: string\r\n  ) {\r\n    const thisPanel = side === 'left' ? this.leftPanel : this.rightPanel;\r\n    if (this.panelInFocus === thisPanel) {\r\n      this.updateActiveDescendant(id);\r\n    } else {\r\n      this.updateDescendants(id);\r\n    }\r\n    if (item.query) {\r\n      this.updateSuggestedQuery(item.query);\r\n    }\r\n  }\r\n\r\n  public onSuggestionClick(item: SearchBoxSuggestionElement, e: Event) {\r\n    if (item.query) {\r\n      this.clearSuggestions();\r\n      this.updateOwnerSearchboxQuery(item.query);\r\n    }\r\n    item.onSelect && item.onSelect(e);\r\n  }\r\n\r\n  public get hasSuggestions() {\r\n    return !!this.allSuggestionElements.length;\r\n  }\r\n\r\n  public get allSuggestionElements() {\r\n    return [...this.leftSuggestionElements, ...this.rightSuggestionElements];\r\n  }\r\n\r\n  public focusPreviousValue() {\r\n    if (this.firstValue === this.activeDescendantElement) {\r\n      this.updateActiveDescendant();\r\n      return;\r\n    }\r\n\r\n    if (!this.hasSuggestions || !this.previousOrLastValue) {\r\n      return;\r\n    }\r\n\r\n    this.focusValue(this.previousOrLastValue as HTMLElement);\r\n  }\r\n\r\n  public get hasActiveDescendant() {\r\n    return this.activeDescendant !== '';\r\n  }\r\n\r\n  private async executeQuerySuggestion() {\r\n    this.updateActiveDescendant();\r\n    const settled = await Promise.allSettled(\r\n      this.suggestions.map((suggestion) =>\r\n        promiseTimeout(\r\n          suggestion.onInput ? suggestion.onInput() : Promise.resolve(),\r\n          this.ownerSearchBoxProps.getSuggestionTimeout()\r\n        )\r\n      )\r\n    );\r\n\r\n    const fulfilledSuggestions: SearchBoxSuggestions[] = [];\r\n\r\n    settled.forEach((prom, j) => {\r\n      if (prom.status === 'fulfilled') {\r\n        fulfilledSuggestions.push(this.suggestions[j]);\r\n      } else {\r\n        this.ownerSearchBoxProps\r\n          .getLogger()\r\n          .warn(\r\n            'Some query suggestions are not being shown because the promise timed out.'\r\n          );\r\n      }\r\n    });\r\n\r\n    const splitSuggestions = (side: 'left' | 'right', isDefault = false) =>\r\n      fulfilledSuggestions\r\n        .filter(\r\n          (suggestion) =>\r\n            suggestion.panel === side || (!suggestion.panel && isDefault)\r\n        )\r\n        .sort(this.sortSuggestions);\r\n\r\n    this.leftSuggestions = splitSuggestions('left', true);\r\n    this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\r\n\r\n    this.rightSuggestions = splitSuggestions('right');\r\n    this.rightSuggestionElements = this.getSuggestionElements(\r\n      this.rightSuggestions\r\n    );\r\n\r\n    const defaultSuggestedQuery =\r\n      this.allSuggestionElements.find(elementHasQuery)?.query || '';\r\n\r\n    this.updateSuggestedQuery(defaultSuggestedQuery);\r\n  }\r\n\r\n  private get lastValue() {\r\n    return this.panelInFocus?.lastElementChild;\r\n  }\r\n\r\n  private get previousOrLastValue() {\r\n    if (!this.hasActiveDescendant) {\r\n      return this.lastValue;\r\n    }\r\n\r\n    return (\r\n      this.activeDescendantElement?.previousElementSibling || this.lastValue\r\n    );\r\n  }\r\n\r\n  private sortSuggestions(a: SearchBoxSuggestions, b: SearchBoxSuggestions) {\r\n    return a.position - b.position;\r\n  }\r\n\r\n  private get nextOrFirstValue() {\r\n    if (!this.hasActiveDescendant) {\r\n      return this.firstValue;\r\n    }\r\n\r\n    return this.activeDescendantElement?.nextElementSibling || this.firstValue;\r\n  }\r\n\r\n  private get firstValue() {\r\n    return this.panelInFocus?.firstElementChild;\r\n  }\r\n\r\n  private get panelInFocus() {\r\n    if (this.leftPanel?.contains(this.activeDescendantElement)) {\r\n      return this.leftPanel;\r\n    }\r\n    if (this.rightPanel?.contains(this.activeDescendantElement)) {\r\n      return this.rightPanel;\r\n    }\r\n    return this.leftPanel || this.rightPanel;\r\n  }\r\n\r\n  private scrollActiveDescendantIntoView() {\r\n    this.activeDescendantElement?.scrollIntoView({\r\n      block: 'nearest',\r\n    });\r\n  }\r\n\r\n  private updateQueryFromSuggestion() {\r\n    const suggestedQuery = this.activeDescendantElement?.getAttribute(\r\n      this.queryDataAttribute\r\n    );\r\n    this.updateOwnerSearchboxQuery(suggestedQuery || '');\r\n  }\r\n\r\n  private updateOwnerSearchboxQuery(query: string) {\r\n    if (query && this.ownerSearchBoxProps.getSearchBoxValue() !== query) {\r\n      this.ownerSearchBoxProps.updateQuery(query);\r\n      this.updateSuggestedQuery(query);\r\n    }\r\n  }\r\n\r\n  private async updateSuggestedQuery(suggestedQuery: string) {\r\n    await Promise.allSettled(\r\n      this.suggestions.map((suggestion) =>\r\n        promiseTimeout(\r\n          suggestion.onSuggestedQueryChange\r\n            ? suggestion.onSuggestedQueryChange(suggestedQuery)\r\n            : Promise.resolve(),\r\n          this.ownerSearchBoxProps.getSuggestionTimeout()\r\n        )\r\n      )\r\n    );\r\n    this.suggestedQuery = suggestedQuery;\r\n    this.updateSuggestionElements(suggestedQuery);\r\n    forceUpdate(this.ownerSearchBoxProps.getHost());\r\n  }\r\n\r\n  private updateSuggestionElements(query: string) {\r\n    if (!this.isPanelInFocus(this.leftPanel, query)) {\r\n      this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\r\n    }\r\n\r\n    if (!this.isPanelInFocus(this.rightPanel, query)) {\r\n      this.rightSuggestionElements = this.getSuggestionElements(\r\n        this.rightSuggestions\r\n      );\r\n    }\r\n  }\r\n\r\n  private isPanelInFocus(\r\n    panel: HTMLElement | undefined,\r\n    query: string\r\n  ): boolean {\r\n    if (!this.activeDescendantElement) {\r\n      return false;\r\n    }\r\n\r\n    if (query) {\r\n      const escaped = DOMPurify.sanitize(query);\r\n      return !!panel?.querySelector(\r\n        `[${this.queryDataAttribute}=\"${escaped}\"]`\r\n      );\r\n    }\r\n\r\n    return this.activeDescendantElement?.closest('ul') === panel;\r\n  }\r\n\r\n  private getAndFilterLeftSuggestionElements() {\r\n    const suggestionElements = this.getSuggestionElements(this.leftSuggestions);\r\n    const filterOnDuplicate = new Set();\r\n\r\n    const out = suggestionElements.filter((suggestionElement) => {\r\n      if (isNullOrUndefined(suggestionElement.query)) {\r\n        return true;\r\n      }\r\n      if (filterOnDuplicate.has(suggestionElement.query)) {\r\n        return false;\r\n      } else {\r\n        filterOnDuplicate.add(suggestionElement.query);\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return out;\r\n  }\r\n\r\n  private getSuggestionElements(suggestions: SearchBoxSuggestions[]) {\r\n    const elements = suggestions\r\n      .map((suggestion) => suggestion.renderItems())\r\n      .flat();\r\n\r\n    const max =\r\n      this.ownerSearchBoxProps.getNumberOfSuggestionsToDisplay() +\r\n      elements.filter(elementHasNoQuery).length;\r\n\r\n    return elements.slice(0, max);\r\n  }\r\n\r\n  private updateDescendants(activeDescendant = '') {\r\n    const newPrevDescendantElement = this.activeDescendantElement;\r\n    this.previousActiveDescendantElement = newPrevDescendantElement;\r\n    this.updateActiveDescendant(activeDescendant);\r\n  }\r\n\r\n  private clearSuggestionElements() {\r\n    this.leftSuggestionElements = [];\r\n    this.rightSuggestionElements = [];\r\n  }\r\n}\r\n","import {h, FunctionalComponent, VNode, Fragment} from '@stencil/core';\r\nimport {JSXBase} from '@stencil/core/internal';\r\nimport {isMacOS} from '../../../utils/device-utils';\r\nimport {AnyBindings} from '../../common/interface/bindings';\r\nimport {SearchBoxSuggestionElement} from '../../common/suggestions/suggestions-common';\r\n\r\nexport const queryDataAttribute = 'data-query';\r\n\r\ntype Side = 'left' | 'right';\r\n\r\ninterface SearchSuggestionProps {\r\n  bindings: AnyBindings;\r\n  id: string;\r\n  suggestion: SearchBoxSuggestionElement;\r\n  isSelected: boolean;\r\n  side: Side;\r\n  index: number;\r\n  lastIndex: number;\r\n  isDoubleList: boolean;\r\n}\r\n\r\ninterface ButtonSearchSuggestionProps extends SearchSuggestionProps {\r\n  onClick?(e: Event): void;\r\n  onMouseOver?(e: Event): void;\r\n}\r\n\r\nfunction getPartsForSuggestion(\r\n  suggestion: SearchBoxSuggestionElement,\r\n  isSelected: boolean\r\n) {\r\n  let part = 'suggestion';\r\n  if (isSelected) {\r\n    part += ' active-suggestion';\r\n  }\r\n  if (suggestion.query) {\r\n    part += ' suggestion-with-query';\r\n  }\r\n  if (suggestion.part) {\r\n    part += ` ${suggestion.part}`;\r\n  }\r\n  return part;\r\n}\r\n\r\nfunction getClassesForSuggestion(isSelected: boolean) {\r\n  return `flex px-4 min-h-[40px] items-center text-left text-neutral-dark cursor-pointer ${\r\n    isSelected ? 'bg-neutral-light' : ''\r\n  }`;\r\n}\r\n\r\nfunction isHTMLElement(el: VNode | Element): el is HTMLElement {\r\n  return el instanceof HTMLElement;\r\n}\r\n\r\nfunction ensureContentForRenderedSuggestion({\r\n  renderedSuggestion,\r\n  suggestion,\r\n}: {\r\n  renderedSuggestion: HTMLElement;\r\n  suggestion: SearchBoxSuggestionElement;\r\n}) {\r\n  if (isHTMLElement(suggestion.content)) {\r\n    renderedSuggestion.replaceChildren(suggestion.content);\r\n  }\r\n}\r\n\r\nfunction getAriaLabelForRenderedSuggestion({\r\n  bindings,\r\n  renderedSuggestion,\r\n  suggestion,\r\n  side,\r\n  index,\r\n  lastIndex,\r\n  isDoubleList,\r\n  isButton,\r\n}: {\r\n  bindings: AnyBindings;\r\n  renderedSuggestion: HTMLElement;\r\n  suggestion: SearchBoxSuggestionElement;\r\n  side: Side;\r\n  index: number;\r\n  lastIndex: number;\r\n  isDoubleList: boolean;\r\n  isButton: boolean;\r\n}) {\r\n  const contentLabel =\r\n    suggestion.ariaLabel ??\r\n    suggestion.query ??\r\n    renderedSuggestion.innerText ??\r\n    bindings.i18n.t('no-title');\r\n  const labelWithType =\r\n    isMacOS() && isButton\r\n      ? bindings.i18n.t('search-suggestion-button', {\r\n          label: contentLabel,\r\n          interpolation: {escapeValue: false},\r\n        })\r\n      : contentLabel;\r\n  const position = index + 1;\r\n  const count = lastIndex + 1;\r\n\r\n  if (!isDoubleList) {\r\n    return bindings.i18n.t('search-suggestion-single-list', {\r\n      label: labelWithType,\r\n      position,\r\n      count,\r\n      interpolation: {escapeValue: false},\r\n    });\r\n  }\r\n\r\n  return bindings.i18n.t('search-suggestion-double-list', {\r\n    label: labelWithType,\r\n    position,\r\n    count,\r\n    side: bindings.i18n.t(side === 'left' ? 'left' : 'right'),\r\n    interpolation: {escapeValue: false},\r\n  });\r\n}\r\n\r\nfunction getContentForSuggestion(suggestion: SearchBoxSuggestionElement) {\r\n  return !isHTMLElement(suggestion.content) ? (\r\n    suggestion.content\r\n  ) : (\r\n    <Fragment></Fragment>\r\n  );\r\n}\r\n\r\nfunction getCommonSearchSuggestionAttributes(\r\n  {\r\n    bindings,\r\n    id,\r\n    suggestion,\r\n    isSelected,\r\n    side,\r\n    index,\r\n    lastIndex,\r\n    isDoubleList,\r\n  }: SearchSuggestionProps,\r\n  isButton: boolean\r\n): JSXBase.HTMLAttributes<HTMLElement> {\r\n  return {\r\n    id: id,\r\n    key: suggestion.key,\r\n    part: getPartsForSuggestion(suggestion, isSelected),\r\n    class: getClassesForSuggestion(isSelected),\r\n    ref: (el) => {\r\n      if (!el) {\r\n        return;\r\n      }\r\n      ensureContentForRenderedSuggestion({\r\n        renderedSuggestion: el,\r\n        suggestion,\r\n      });\r\n      el.setAttribute(\r\n        'aria-label',\r\n        getAriaLabelForRenderedSuggestion({\r\n          bindings,\r\n          renderedSuggestion: el,\r\n          suggestion,\r\n          side,\r\n          index,\r\n          lastIndex,\r\n          isDoubleList,\r\n          isButton,\r\n        })\r\n      );\r\n    },\r\n  };\r\n}\r\n\r\nexport const SimpleSearchSuggestion: FunctionalComponent<\r\n  SearchSuggestionProps\r\n> = (props) => {\r\n  return (\r\n    <span {...getCommonSearchSuggestionAttributes(props, false)}>\r\n      {getContentForSuggestion(props.suggestion)}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const ButtonSearchSuggestion: FunctionalComponent<\r\n  ButtonSearchSuggestionProps\r\n> = (props) => {\r\n  return (\r\n    <button\r\n      {...getCommonSearchSuggestionAttributes(props, true)}\r\n      onMouseDown={(e) => e.preventDefault()}\r\n      onClick={(e: Event) => props.onClick?.(e)}\r\n      onMouseOver={(e: Event) => props.onMouseOver?.(e)}\r\n      {...{[queryDataAttribute]: props.suggestion.query}}\r\n    >\r\n      {getContentForSuggestion(props.suggestion)}\r\n    </button>\r\n  );\r\n};\r\n"],"mappings":"uRAOaA,EAA+C,CAC1DC,EACAC,KAEA,MAAMC,EAAa,KACjB,MAAMC,EACJ,+EACF,MAAMC,EAAeJ,EAAMK,SACvB,yDACA,6DACJ,MAAMC,EAAmBN,EAAMO,SAC3B,wBACA,kBAEJ,MAAO,CAACJ,EAAaC,EAAcE,GAAkBE,KAAK,IAAI,EAGhE,OACEC,EAAA,OAAKC,KAAK,UAAUC,MAAOT,KACxBD,EACG,E,2UCjBH,MAAMW,EAAkD,EAC7DC,WACAC,WACAC,aACGC,KAEHP,EAAA,OACEC,KAAK,uBACLC,MAAM,0DAENF,EAACQ,EAAM,CACLC,MAAM,mBACNR,KAAK,eACLC,MAAM,sEACNI,QAAS,KACPA,IAAO,MAAPA,SAAO,SAAPA,IACAF,IAAQ,MAARA,SAAQ,SAARA,EAAUM,OAAO,EAEnBC,UAAWN,EAASO,KAAKC,EAAE,YACvBN,GAEJP,EAAA,eACEC,KAAK,aACLa,KAAMC,EACNb,MAAM,cCdd,SAASc,EAAmBzB,GAC1B,MAAO,CACL0B,KAAM,WACNC,aAAc,MACdC,eAAgB,MAChBC,YAAa,SACT7B,EAAM8B,kBAAoB,CAC5B,wBAAyB9B,EAAM8B,kBAEjC,gBAAiB,GAAG9B,EAAM+B,gBAAkB/B,EAAMgC,WAClD,oBAAqB,OACrB,gBAAiB,OACjB,gBAAiBhC,EAAMiC,GAE3B,CAEA,SAASC,EAAoBC,EAA2BC,GACtD,MAAMC,EAASF,IAAI,MAAJA,SAAI,SAAJA,EAAMG,WACrB,IAAKD,EAAQ,CACX,M,CAEF,GAAIF,EAAKC,QAAU,KAAM,CACvB,M,CAEFC,EAAOE,QAAQC,gBAAkBJ,IAAK,MAALA,SAAK,EAALA,EAASD,EAAKC,KACjD,CAEA,SAASK,EAAiBN,GACxB,MAAME,EAASF,IAAI,MAAJA,SAAI,SAAJA,EAAMG,WACrB,GAAID,EAAQ,QACHA,EAAOE,QAAQC,e,CAE1B,CAEA,SAASE,EAAiBP,GACxB,MAAME,EAASF,IAAI,MAAJA,SAAI,SAAJA,EAAMG,WACrB,GAAID,EAAQ,CACVA,EAAOM,UAAUC,OAAO,W,CAE5B,CAEA,SAASC,EAAeV,GACtB,MAAME,EAASF,IAAI,MAAJA,SAAI,SAAJA,EAAMG,WACrB,GAAID,EAAQ,CACVA,EAAOM,UAAUG,IAAI,W,CAEzB,C,MAEaC,EAA6C,EACxDC,cACAC,UACAnC,WACAoC,UACAC,UACAC,SACAC,WACAC,YACAC,UACAnB,QACAhB,YACAoC,UACAC,WACGC,KAEHjD,EAAA,OAAKE,MAAM,6BACTF,EAAA,OAAKC,KAAK,oBAAoBC,MAAM,6BAClCF,EAAA,YACEC,KAAK,WAAU,aACHU,EACZuC,YAAa7C,EAASO,KAAKC,EAAE,UAC7BX,MAAM,2BACNiD,KAAM,EACNV,QAAUW,IACRX,IAAO,MAAPA,SAAO,SAAPA,EAAUW,GACV3B,EAAoBc,EAAY,EAElCM,UAAYO,IACV3B,EAAoBc,GACpB,GAAIa,EAAEC,MAAQ,QAAS,CACrB,GAAID,EAAEE,SAAU,CACd,M,CAEFF,EAAEG,gB,CAEJV,IAAS,MAATA,SAAS,SAATA,EAAYO,EAAE,EAEhBN,QAAUM,IACRN,IAAO,MAAPA,SAAO,SAAPA,EAAUM,GACV,GAAIA,EAAEC,MAAQ,QAAS,CACrBD,EAAEG,iBACF,M,CAEF9B,EAAoBc,EAAY,EAElCI,OAASS,IACPT,IAAM,MAANA,SAAM,SAANA,EAASS,GACTnB,EAAiBM,GACjBd,EAAoBc,EAAY,EAElCK,SAAWQ,IACTR,IAAQ,MAARA,SAAQ,SAARA,EAAWQ,GACX3B,EAAoBc,EAAY,EAElCG,QAAUU,IACRV,IAAO,MAAPA,SAAO,SAAPA,EAAUU,GACV,MAAMI,EAASJ,EAAEI,OACjB/B,EAAoBc,IAAW,MAAXA,SAAW,EAAXA,EAAeiB,GACnCpB,EAAeG,IAAW,MAAXA,SAAW,EAAXA,EAAeiB,EAAO,EAEvCtC,aAAa,SACR8B,GAAShC,EAAmBgC,MAC7BC,EACJtB,MAAOA,KAIVa,GACCxC,EAAA,OAAKE,MAAM,kEACTF,EAAA,QACEC,KAAK,UACLC,MAAM,8FAIVsC,GAAWb,GACX3B,EAACG,EAAmB,CAClBC,SAAUmC,EACVlC,SAAUA,EACVC,QAAS,KACPyC,IACAf,EAAiBO,EAAY,K,mRCtJvBkB,EAAkBC,EAAsBC,GACtD,IAAInC,EACJ,MAAMoC,EAAU,IAAIC,SAAQ,CAACC,EAAGC,KAC9BvC,EAAKwC,YAAW,KACdD,EAAO,IAAIE,MAAM,sBAAsB,GACtCN,EAAG,IAER,OAAOE,QAAQK,KAAK,CAACR,EAAME,IAAUO,MAAK,KACxCC,aAAa5C,EAAG,GAEpB,C,MC0Ca6C,EAkBX,WAAAC,CAAoBC,GAAAC,KAAAD,sBAjBbC,KAAAC,YAAsC,GACtCD,KAAAE,uBAAuD,GACvDF,KAAAG,wBAAwD,GACxDH,KAAAI,UAAqCC,UACrCL,KAAAM,WAAsCD,UAEtCL,KAAAnD,iBAAmB,GACnBmD,KAAAO,eAAiB,GAEhBP,KAAAQ,mBAAqB,aACrBR,KAAAS,iBACN,GAEMT,KAAAU,gCAAsD,KACtDV,KAAAW,gBAA0C,GAC1CX,KAAAY,iBAA2C,GAGjDZ,KAAKa,mBAAqBC,GACxB,IAAMd,KAAKe,0BACXf,KAAKD,oBAAoBiB,qB,CAI7B,6BAAWC,GAQT,MAAO,CACLV,eAAgB,IAAMP,KAAKO,eAC3BW,iBAAkB,IAAMlB,KAAKkB,mBAC7BL,mBAAoB,IAAMb,KAAKa,qBAC/BM,eAAgB,IAAMnB,KAAKC,YAC3BmB,sBAAuB,IAAMpB,KAAKqB,sB,CAItC,2BAAWC,G,QACT,IAAKtB,KAAKuB,oBAAqB,CAC7B,OAAO,I,CAGT,QACEC,EAAAxB,KAAKI,aAAS,MAAAoB,SAAA,SAAAA,EAAEC,cAAc,IAAIzB,KAAKnD,wBACvC6E,EAAA1B,KAAKM,cAAU,MAAAoB,SAAA,SAAAA,EAAED,cAAc,IAAIzB,KAAKnD,sBACxC,I,CAIG,QAAA8E,GACL3B,KAAK4B,yBACL5B,KAAKkB,kB,CAGA,sBAAAU,CAAuB5E,EAAK,IACjCgD,KAAKnD,iBAAmBG,EACxB6E,EAAY7B,KAAKD,oBAAoB+B,U,CAGhC,oBAAAC,G,OACLP,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAEQ,QAC9BhC,KAAK4B,wB,CAGA,mBAAAK,GACL,GACEC,EAAkBlC,KAAKmC,eACvBD,EAAkBlC,KAAKM,YACvB,CACA,OAAO,K,CAGT,OAAON,KAAKmC,eAAiBnC,KAAKM,U,CAG7B,qBAAA8B,CACLvG,GAEAmE,KAAKC,YAAcD,KAAKS,iBAAiB4B,KAAKC,GAAUA,EAAMzG,I,CAGzD,4BAAA0G,CACLD,EACAzG,GAEAyG,EAAMvD,iBACNuD,EAAME,kBACNxC,KAAKS,iBAAiBgC,KAAKH,EAAMI,QACjC1C,KAAKC,YAAYwC,KAAKH,EAAMI,OAAO7G,G,CAG9B,mBAAA8G,CAAoB1C,GACzBD,KAAKC,YAAYwC,KAAKxC,E,CAGxB,gBAAW2C,GACT,OAAOC,QACL7C,KAAKE,uBAAuB4C,QAAU9C,KAAKG,wBAAwB2C,O,CAIhE,UAAAC,CAAWC,GAChB,MAAMC,EAAQD,IAAS,OAAShD,KAAKI,UAAYJ,KAAKM,WAEtD,GAAIN,KAAKmC,eAAiBc,EAAO,CAC/B,M,CAEF,GAAIA,GAASA,EAAMC,kBAAmB,CACpC,MAAMC,EACJnD,KAAKU,iCACLuC,EAAMG,SAASpD,KAAKU,iCACtB,MAAM2C,EAAWF,EACbnD,KAAKU,gCACJuC,EAAMC,kBACXlD,KAAKsD,kBAAkBD,EAASrG,G,EAI7B,gBAAAkE,GACLlB,KAAKuD,0BACLvD,KAAK4B,wB,CAGA,cAAA4B,GACL,IAAKxD,KAAKlD,iBAAmBkD,KAAKyD,iBAAkB,CAClD,M,CAGFzD,KAAK0D,WAAW1D,KAAKyD,iB,CAGhB,UAAAC,CAAWvG,GAChB6C,KAAK4B,uBAAuBzE,EAAMH,IAClCgD,KAAK2D,iCACL3D,KAAK4D,2B,CAGA,qBAAAC,CACLC,EACAd,EACAhG,GAEA,MAAM+G,EAAYf,IAAS,OAAShD,KAAKI,UAAYJ,KAAKM,WAC1D,GAAIN,KAAKmC,eAAiB4B,EAAW,CACnC/D,KAAK4B,uBAAuB5E,E,KACvB,CACLgD,KAAKsD,kBAAkBtG,E,CAEzB,GAAI8G,EAAKE,MAAO,CACdhE,KAAKiE,qBAAqBH,EAAKE,M,EAI5B,iBAAAE,CAAkBJ,EAAkClF,GACzD,GAAIkF,EAAKE,MAAO,CACdhE,KAAKkB,mBACLlB,KAAKmE,0BAA0BL,EAAKE,M,CAEtCF,EAAKM,UAAYN,EAAKM,SAASxF,E,CAGjC,kBAAW9B,GACT,QAASkD,KAAKqB,sBAAsByB,M,CAGtC,yBAAWzB,GACT,MAAO,IAAIrB,KAAKE,0BAA2BF,KAAKG,wB,CAG3C,kBAAAkE,GACL,GAAIrE,KAAKsE,aAAetE,KAAKsB,wBAAyB,CACpDtB,KAAK4B,yBACL,M,CAGF,IAAK5B,KAAKlD,iBAAmBkD,KAAKuE,oBAAqB,CACrD,M,CAGFvE,KAAK0D,WAAW1D,KAAKuE,oB,CAGvB,uBAAWhD,GACT,OAAOvB,KAAKnD,mBAAqB,E,CAG3B,4BAAMkE,G,MACZf,KAAK4B,yBACL,MAAM4C,QAAgBnF,QAAQoF,WAC5BzE,KAAKC,YAAYoC,KAAKqC,GACpBzF,EACEyF,EAAWzG,QAAUyG,EAAWzG,UAAYoB,QAAQsF,UACpD3E,KAAKD,oBAAoB6E,2BAK/B,MAAMC,EAA+C,GAErDL,EAAQM,SAAQ,CAAC5F,EAAM6F,KACrB,GAAI7F,EAAK8F,SAAW,YAAa,CAC/BH,EAAqBpC,KAAKzC,KAAKC,YAAY8E,G,KACtC,CACL/E,KAAKD,oBACFkF,YACAC,KACC,4E,KAKR,MAAMC,EAAmB,CAACnC,EAAwBoC,EAAY,QAC5DP,EACGQ,QACEX,GACCA,EAAWzB,QAAUD,IAAU0B,EAAWzB,OAASmC,IAEtDE,KAAKtF,KAAKuF,iBAEfvF,KAAKW,gBAAkBwE,EAAiB,OAAQ,MAChDnF,KAAKE,uBAAyBF,KAAKwF,qCAEnCxF,KAAKY,iBAAmBuE,EAAiB,SACzCnF,KAAKG,wBAA0BH,KAAKoB,sBAClCpB,KAAKY,kBAGP,MAAM6E,IACJjE,EAAAxB,KAAKqB,sBAAsBqE,KAAKC,MAAgB,MAAAnE,SAAA,SAAAA,EAAEwC,QAAS,GAE7DhE,KAAKiE,qBAAqBwB,E,CAG5B,aAAYG,G,MACV,OAAOpE,EAAAxB,KAAKmC,gBAAY,MAAAX,SAAA,SAAAA,EAAEqE,gB,CAG5B,uBAAYtB,G,MACV,IAAKvE,KAAKuB,oBAAqB,CAC7B,OAAOvB,KAAK4F,S,CAGd,QACEpE,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAEsE,yBAA0B9F,KAAK4F,S,CAIzD,eAAAL,CAAgBQ,EAAyBC,GAC/C,OAAOD,EAAEE,SAAWD,EAAEC,Q,CAGxB,oBAAYxC,G,MACV,IAAKzD,KAAKuB,oBAAqB,CAC7B,OAAOvB,KAAKsE,U,CAGd,QAAO9C,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAE0E,qBAAsBlG,KAAKsE,U,CAGlE,cAAYA,G,MACV,OAAO9C,EAAAxB,KAAKmC,gBAAY,MAAAX,SAAA,SAAAA,EAAE0B,iB,CAG5B,gBAAYf,G,QACV,IAAIX,EAAAxB,KAAKI,aAAS,MAAAoB,SAAA,SAAAA,EAAE4B,SAASpD,KAAKsB,yBAA0B,CAC1D,OAAOtB,KAAKI,S,CAEd,IAAIsB,EAAA1B,KAAKM,cAAU,MAAAoB,SAAA,SAAAA,EAAE0B,SAASpD,KAAKsB,yBAA0B,CAC3D,OAAOtB,KAAKM,U,CAEd,OAAON,KAAKI,WAAaJ,KAAKM,U,CAGxB,8BAAAqD,G,OACNnC,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAE2E,eAAe,CAC3CC,MAAO,W,CAIH,yBAAAxC,G,MACN,MAAMrD,GAAiBiB,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAE6E,aACnDrG,KAAKQ,oBAEPR,KAAKmE,0BAA0B5D,GAAkB,G,CAG3C,yBAAA4D,CAA0BH,GAChC,GAAIA,GAAShE,KAAKD,oBAAoBuG,sBAAwBtC,EAAO,CACnEhE,KAAKD,oBAAoBwG,YAAYvC,GACrChE,KAAKiE,qBAAqBD,E,EAItB,0BAAMC,CAAqB1D,SAC3BlB,QAAQoF,WACZzE,KAAKC,YAAYoC,KAAKqC,GACpBzF,EACEyF,EAAW8B,uBACP9B,EAAW8B,uBAAuBjG,GAClClB,QAAQsF,UACZ3E,KAAKD,oBAAoB6E,2BAI/B5E,KAAKO,eAAiBA,EACtBP,KAAKyG,yBAAyBlG,GAC9BsB,EAAY7B,KAAKD,oBAAoB+B,U,CAG/B,wBAAA2E,CAAyBzC,GAC/B,IAAKhE,KAAK0G,eAAe1G,KAAKI,UAAW4D,GAAQ,CAC/ChE,KAAKE,uBAAyBF,KAAKwF,oC,CAGrC,IAAKxF,KAAK0G,eAAe1G,KAAKM,WAAY0D,GAAQ,CAChDhE,KAAKG,wBAA0BH,KAAKoB,sBAClCpB,KAAKY,iB,EAKH,cAAA8F,CACNzD,EACAe,G,MAEA,IAAKhE,KAAKsB,wBAAyB,CACjC,OAAO,K,CAGT,GAAI0C,EAAO,CACT,MAAM2C,EAAUC,EAAUC,SAAS7C,GACnC,SAASf,IAAK,MAALA,SAAK,SAALA,EAAOxB,cACd,IAAIzB,KAAKQ,uBAAuBmG,O,CAIpC,QAAOnF,EAAAxB,KAAKsB,2BAAuB,MAAAE,SAAA,SAAAA,EAAEsF,QAAQ,SAAU7D,C,CAGjD,kCAAAuC,GACN,MAAMuB,EAAqB/G,KAAKoB,sBAAsBpB,KAAKW,iBAC3D,MAAMqG,EAAoB,IAAIC,IAE9B,MAAMC,EAAMH,EAAmB1B,QAAQ8B,IACrC,GAAIjF,EAAkBiF,EAAkBnD,OAAQ,CAC9C,OAAO,I,CAET,GAAIgD,EAAkBI,IAAID,EAAkBnD,OAAQ,CAClD,OAAO,K,KACF,CACLgD,EAAkBnJ,IAAIsJ,EAAkBnD,OACxC,OAAO,I,KAIX,OAAOkD,C,CAGD,qBAAA9F,CAAsBnB,GAC5B,MAAMoH,EAAWpH,EACdoC,KAAKqC,GAAeA,EAAW4C,gBAC/BC,OAEH,MAAMC,EACJxH,KAAKD,oBAAoB0H,kCACzBJ,EAAShC,OAAOqC,GAAmB5E,OAErC,OAAOuE,EAASM,MAAM,EAAGH,E,CAGnB,iBAAAlE,CAAkBzG,EAAmB,IAC3C,MAAM+K,EAA2B5H,KAAKsB,wBACtCtB,KAAKU,gCAAkCkH,EACvC5H,KAAK4B,uBAAuB/E,E,CAGtB,uBAAA0G,GACNvD,KAAKE,uBAAyB,GAC9BF,KAAKG,wBAA0B,E,EC7a5B,MAAMK,EAAqB,aAoBlC,SAASqH,EACPnD,EACAoD,GAEA,IAAIrM,EAAO,aACX,GAAIqM,EAAY,CACdrM,GAAQ,oB,CAEV,GAAIiJ,EAAWV,MAAO,CACpBvI,GAAQ,wB,CAEV,GAAIiJ,EAAWjJ,KAAM,CACnBA,GAAQ,IAAIiJ,EAAWjJ,M,CAEzB,OAAOA,CACT,CAEA,SAASsM,EAAwBD,GAC/B,MAAO,kFACLA,EAAa,mBAAqB,IAEtC,CAEA,SAASE,EAAcC,GACrB,OAAOA,aAAcC,WACvB,CAEA,SAASC,GAAmCC,mBAC1CA,EAAkB1D,WAClBA,IAKA,GAAIsD,EAActD,EAAW2D,SAAU,CACrCD,EAAmBE,gBAAgB5D,EAAW2D,Q,CAElD,CAEA,SAASE,GAAkC1M,SACzCA,EAAQuM,mBACRA,EAAkB1D,WAClBA,EAAU1B,KACVA,EAAIwF,MACJA,EAAKC,UACLA,EAAS7F,aACTA,EAAY8F,SACZA,I,UAWA,MAAMC,GACJC,GAAAlH,GAAAF,EAAAkD,EAAWvI,aAAS,MAAAqF,SAAA,EAAAA,EACpBkD,EAAWV,SAAK,MAAAtC,SAAA,EAAAA,EAChB0G,EAAmBS,aAAS,MAAAD,SAAA,EAAAA,EAC5B/M,EAASO,KAAKC,EAAE,YAClB,MAAMyM,EACJC,KAAaL,EACT7M,EAASO,KAAKC,EAAE,2BAA4B,CAC1C2M,MAAOL,EACPM,cAAe,CAACC,YAAa,SAE/BP,EACN,MAAM1C,EAAWuC,EAAQ,EACzB,MAAMW,EAAQV,EAAY,EAE1B,IAAK7F,EAAc,CACjB,OAAO/G,EAASO,KAAKC,EAAE,gCAAiC,CACtD2M,MAAOF,EACP7C,WACAkD,QACAF,cAAe,CAACC,YAAa,Q,CAIjC,OAAOrN,EAASO,KAAKC,EAAE,gCAAiC,CACtD2M,MAAOF,EACP7C,WACAkD,QACAnG,KAAMnH,EAASO,KAAKC,EAAE2G,IAAS,OAAS,OAAS,SACjDiG,cAAe,CAACC,YAAa,QAEjC,CAEA,SAASE,EAAwB1E,GAC/B,OAAQsD,EAActD,EAAW2D,SAC/B3D,EAAkB,QAElBlJ,EAAC6N,EAAQ,KAEb,CAEA,SAASC,GACPzN,SACEA,EAAQmB,GACRA,EAAE0H,WACFA,EAAUoD,WACVA,EAAU9E,KACVA,EAAIwF,MACJA,EAAKC,UACLA,EAAS7F,aACTA,GAEF8F,GAEA,MAAO,CACL1L,GAAIA,EACJ6B,IAAK6F,EAAW7F,IAChBpD,KAAMoM,EAAsBnD,EAAYoD,GACxCpM,MAAOqM,EAAwBD,GAC/ByB,IAAMtB,IACJ,IAAKA,EAAI,CACP,M,CAEFE,EAAmC,CACjCC,mBAAoBH,EACpBvD,eAEFuD,EAAGuB,aACD,aACAjB,EAAkC,CAChC1M,WACAuM,mBAAoBH,EACpBvD,aACA1B,OACAwF,QACAC,YACA7F,eACA8F,aAEH,EAGP,C,MAEae,EAER1O,GAEDS,EAAA,WAAU8N,EAAoCvO,EAAO,QAClDqO,EAAwBrO,EAAM2J,a,MAKxBgF,EAER3O,GAEDS,EAAA,aACM8N,EAAoCvO,EAAO,MAC/C4O,YAAc/K,GAAMA,EAAEG,iBACtBjD,QAAU8C,IAAQ,IAAA4C,EAAK,OAAAA,EAAAzG,EAAMe,WAAO,MAAA0F,SAAA,SAAAA,EAAAoI,KAAA7O,EAAG6D,EAAE,EACzCiL,YAAcjL,IAAQ,IAAA4C,EAAK,OAAAA,EAAAzG,EAAM8O,eAAW,MAAArI,SAAA,SAAAA,EAAAoI,KAAA7O,EAAG6D,EAAE,EAC5C4B,CAACA,GAAqBzF,EAAM2J,WAAWV,OAE3CoF,EAAwBrO,EAAM2J,oB"}