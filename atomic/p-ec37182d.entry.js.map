{"version":3,"names":["AtomicFormatUnit","this","unitDisplay","format","value","languages","toLocaleString","style","unit","componentWillLoad","dispatchNumberFormatEvent","host","error","render","h","key","element"],"sources":["src/components/search/formats/atomic-format-unit.tsx"],"sourcesContent":["import {Component, Element, Prop, State, h} from '@stencil/core';\r\nimport {\r\n  dispatchNumberFormatEvent,\r\n  NumberFormatter,\r\n} from '../../common/formats/format-common';\r\n\r\n/**\r\n * The `atomic-format-unit` component is used for formatting numbers with units.\r\n * The numerical format of compatible parents will be set according to the properties of this component.\r\n */\r\n@Component({\r\n  tag: 'atomic-format-unit',\r\n  shadow: true,\r\n})\r\nexport class AtomicFormatUnit {\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The unit to use in unit formatting.\r\n   * Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor.\r\n   * The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)\r\n   */\r\n  @Prop({reflect: true}) public unit!: string;\r\n  /**\r\n   * The unit formatting style to use in unit formatting.\r\n   *\r\n   * * \"long\" (e.g., 16 litres)\r\n   * * \"short\" (e.g., 16 l)\r\n   * * \"narrow\" (e.g., 16l)\r\n   */\r\n  @Prop({reflect: true}) public unitDisplay?: 'long' | 'short' | 'narrow' =\r\n    'short';\r\n\r\n  componentWillLoad() {\r\n    try {\r\n      dispatchNumberFormatEvent(\r\n        (value, languages) => this.format(value, languages),\r\n        this.host\r\n      );\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private format: NumberFormatter = (value, languages) => {\r\n    return value.toLocaleString(languages, {\r\n      style: 'unit',\r\n      unit: this.unit,\r\n      unitDisplay: this.unitDisplay,\r\n    });\r\n  };\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={this.error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"oHAcaA,EAAgB,M,yBAkBGC,KAAAC,YAC5B,QAaMD,KAAAE,OAA0B,CAACC,EAAOC,IACjCD,EAAME,eAAeD,EAAW,CACrCE,MAAO,OACPC,KAAMP,KAAKO,KACXN,YAAaD,KAAKC,c,0DAjBpB,O,CAEF,iBAAAO,GACE,IACEC,GACE,CAACN,EAAOC,IAAcJ,KAAKE,OAAOC,EAAOC,IACzCJ,KAAKU,K,CAEP,MAAOC,GACPX,KAAKW,MAAQA,C,EAYV,MAAAC,GACL,GAAIZ,KAAKW,MAAO,CACd,OACEE,EAAA,0BAAAC,IAAA,2CACEC,QAASf,KAAKU,KACdC,MAAOX,KAAKW,O"}