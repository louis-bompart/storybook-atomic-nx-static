{"version":3,"names":["atomicAutomaticFacetCss","AtomicAutomaticFacetStyle0","AtomicAutomaticFacet","focusTarget","this","headerFocus","FocusTargetController","numberOfSelectedValues","facet","state","values","filter","value","isSelected","length","renderValue","facetValue","onClick","displayValue","getFieldValueCaption","field","bindings","i18n","h","FacetValueCheckbox","numberOfResults","FacetValueLabelHighlight","renderValuesContainer","children","query","FacetValuesGroup","label","class","part","renderValues","map","toggleSelect","isNullOrUndefined","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","numberOfActiveValues","isCollapsed","headingLevel","onToggleCollapse","headerRef","el","setTarget","render","searchStatus","hasError","Hidden","FacetContainer","__decorate","InitializeBindings","atomicAutomaticFacetGeneratorCss","AtomicAutomaticFacetGeneratorStyle0","AtomicAutomaticFacetGenerator","desiredCount","numberOfValues","collapseFacetsAfter","initialize","validateProps","buildSearchStatus","engine","automaticFacetGenerator","buildAutomaticFacetGenerator","options","updateCollapseFacetsDependingOnFacetsVisibility","collapseAfter","numberOfVisibleFacets","Math","max","Schema","collapseFacetAfter","NumberValue","min","required","validate","shouldCollapseFacet","index","automaticFacets","automaticFacetGeneratorState","key","facetId","firstSearchExecuted","Array","from","_","FacetPlaceholder","BindStateToController"],"sources":["src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.pcss?tag=atomic-automatic-facet&encapsulation=shadow","src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.tsx","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n","import {isNullOrUndefined} from '@coveo/bueno';\nimport {AutomaticFacet, SearchStatus, FacetValue} from '@coveo/headless';\nimport {Component, Prop, State, h, VNode} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * An automatic facet is a special type of facet generated by the automatic facets feature.\n * Unlike regular facets, which need to be explicitly defined and requested in the query,\n * automatic facets are dynamically generated by the index in response to the query.\n *\n * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`\n * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.\n *\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\n *\n * @part facet - The wrapper for the entire facet.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n */\n@Component({\n  tag: 'atomic-automatic-facet',\n  styleUrl: 'atomic-automatic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicAutomaticFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @State() public error!: Error;\n\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public facetId!: string;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public facet!: AutomaticFacet;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public searchStatus!: SearchStatus;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed!: boolean;\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget() {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facet.state.values.filter((value) => this.isSelected(value))\n      .length;\n  }\n\n  private isSelected(value: FacetValue) {\n    return value.state === 'selected';\n  }\n\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\n    const displayValue = getFieldValueCaption(\n      this.facet.state.field,\n      facetValue.value,\n      this.bindings.i18n\n    );\n\n    return (\n      <FacetValueCheckbox\n        displayValue={displayValue}\n        numberOfResults={facetValue.numberOfResults}\n        isSelected={this.isSelected(facetValue)}\n        i18n={this.bindings.i18n}\n        onClick={onClick}\n      >\n        <FacetValueLabelHighlight\n          displayValue={displayValue}\n          isSelected={this.isSelected(facetValue)}\n        ></FacetValueLabelHighlight>\n      </FacetValueCheckbox>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.facet.state.label}\n        query={query}\n      >\n        <ul class={'mt-3'} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value) =>\n        this.renderValue(value, () => this.facet.toggleSelect(value))\n      )\n    );\n  }\n\n  private get label() {\n    return isNullOrUndefined(this.facet.state.label)\n      ? this.facet.state.field\n      : this.facet.state.label;\n  }\n\n  public renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={0}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  public render() {\n    if (this.searchStatus.state.hasError) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && this.renderValues()}\n      </FacetContainer>\n    );\n  }\n}\n","@import '../../../../global/global.pcss';\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  AutomaticFacetGenerator,\n  AutomaticFacetGeneratorState,\n  SearchStatus,\n  SearchStatusState,\n  buildAutomaticFacetGenerator,\n  buildSearchStatus,\n} from '@coveo/headless';\nimport {Component, Method, Prop, State, h} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\n * and requested in the query, automatic facets are dynamically generated by the index\n * in response to the search query.\n *\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\n *\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\n */\n@Component({\n  tag: 'atomic-automatic-facet-generator',\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\n  shadow: false,\n})\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @State() public error!: Error;\n\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\n  @BindStateToController('automaticFacetGenerator')\n  @State()\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\n\n  public searchStatus!: SearchStatus;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n\n  /**\n   * The desired count of automatic facets.\n   *\n   * Minimum: `1`\n   * Maximum: `20`\n   * @defaultValue `5`\n   */\n  @Prop({reflect: true}) public desiredCount = 5;\n\n  /**\n   * The desired number of automatically generated facet values.\n   *\n   * Minimum: `1`\n   * @defaultValue `8`\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n\n  @State() private collapseFacetsAfter = -1;\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\n      this.bindings.engine,\n      {\n        options: {\n          desiredCount: this.desiredCount,\n          numberOfValues: this.numberOfValues,\n        },\n      }\n    );\n  }\n\n  @Method()\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\n    collapseAfter: number,\n    numberOfVisibleFacets: number\n  ) {\n    if (collapseAfter === -1) {\n      this.collapseFacetsAfter = -1;\n      return;\n    }\n    this.collapseFacetsAfter = Math.max(\n      0,\n      collapseAfter - numberOfVisibleFacets\n    );\n  }\n\n  private validateProps() {\n    new Schema({\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\n    }).validate({\n      collapseFacetAfter: this.collapseFacetsAfter,\n    });\n  }\n\n  private shouldCollapseFacet(index: number): boolean {\n    if (this.collapseFacetsAfter === -1) {\n      return false;\n    }\n    return this.collapseFacetsAfter\n      ? index + 1 > this.collapseFacetsAfter\n      : true;\n  }\n\n  public render() {\n    const automaticFacets =\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\n        return (\n          <atomic-automatic-facet\n            key={facet.state.field}\n            field={facet.state.field}\n            facetId={facet.state.field}\n            facet={facet}\n            searchStatus={this.searchStatus}\n            isCollapsed={this.shouldCollapseFacet(index)}\n          ></atomic-automatic-facet>\n        );\n      });\n    if (!this.searchStatus.state.firstSearchExecuted) {\n      return Array.from({length: this.desiredCount}, (_, index) => (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.shouldCollapseFacet(index)}\n        />\n      ));\n    }\n\n    return automaticFacets;\n  }\n}\n"],"mappings":"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"}