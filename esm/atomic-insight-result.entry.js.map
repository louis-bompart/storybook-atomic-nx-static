{"file":"atomic-insight-result.entry.js","mappings":";;;;;;;;;;;AAAA,MAAM,sBAAsB,GAAG,yioHAAyioH,CAAC;AACzkoH,kCAAe,sBAAsB;;MCuBxB,mBAAmB;;;;;;QAkCtB,YAAO,GAAuB,QAAQ,CAAC;;;;;;QAOvC,cAAS,GAAyB,MAAM,CAAC;;;;QAKzC,YAAO,GAAG,EAAE,CAAC;;;;;;uBAZiB,QAAQ;yBAOJ,MAAM;uBAK9B,EAAE;;;IAQb,aAAa,CAClB,KAA4D;QAE5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC3B;IAGM,wBAAwB,CAAC,KAAkC;QAChE,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACtC;KACF;IAGM,sBAAsB,CAAC,KAAkB;QAC9C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACpC;IAGM,0BAA0B,CAAC,KAAsC;QACtE,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC;YACX,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAU;SAC3B,CAAC,CAAC;KACJ;IAEM,iBAAiB;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAC1B,IAAI,CAAC,OAAQ,CAAC,QAAQ,EACtB,MAAM,EACN,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,CACf,CAAC;KACH;IAEO,cAAc;QACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAQ,CAAC,QAAQ,CAAC;aACtC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,CAAC;aAC/B,IAAI,CAAC,EAAE,CAAC,CAAC;KACb;IAEM,MAAM;QACX,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,oBAAoB,IAE/B,4DACE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM;iBAC9B,UAAU,EAAE;iBACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;iBACpB,IAAI,CAAC,GAAG,CAAC,EAAE,EACd,SAAS,EAAE,IAAI,CAAC,cAAc,EAAE,GAC3B,CACF,EACP;KACH;IAEM,gBAAgB;QACrB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;QACD,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;;;;;;;","names":[],"sources":["src/components/insight/atomic-insight-result/atomic-insight-result.pcss?tag=atomic-insight-result&encapsulation=shadow","src/components/insight/atomic-insight-result/atomic-insight-result.tsx"],"sourcesContent":["@import '../../common/template-system/template-system.pcss';\r\n\r\n@mixin atomic-template-system map(post-css-map-for-sections, insight);\r\n\r\n:host {\r\n  @apply relative;\r\n\r\n  .with-sections:not(.child-result) {\r\n    @apply p-6;\r\n  }\r\n\r\n  &(:hover) {\r\n    .with-sections {\r\n      background-color: var(--atomic-neutral-lighter);\r\n    }\r\n\r\n    atomic-insight-result-action-bar {\r\n      @apply visible;\r\n    }\r\n  }\r\n\r\n  &(:first-of-type) {\r\n    .with-sections:not(.child-result) {\r\n      @apply pt-8;\r\n    }\r\n\r\n    atomic-insight-result-action-bar {\r\n      @apply top-0;\r\n    }\r\n  }\r\n\r\n  atomic-load-more-children-results::part(button) {\r\n    margin-bottom: 0;\r\n    padding: 0.2rem 0.5rem;\r\n  }\r\n}\r\n","import {Component, h, Prop, Element, Listen, Host} from '@stencil/core';\r\nimport {InsightResult, InsightInteractiveResult, InsightFoldedResult} from '..';\r\nimport {applyFocusVisiblePolyfill} from '../../../utils/initialization-utils';\r\nimport {\r\n  DisplayConfig,\r\n  InteractiveItemContextEvent,\r\n  ItemContextEvent,\r\n} from '../../common/item-list/item-decorators';\r\nimport {resultComponentClass} from '../../common/item-list/item-list-common';\r\nimport {\r\n  ItemLayout,\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n} from '../../common/layout/display-options';\r\nimport {AtomicInsightStore} from '../atomic-insight-interface/store';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result',\r\n  styleUrl: 'atomic-insight-result.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightResult {\r\n  private layout!: ItemLayout;\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * Whether an atomic-result-link inside atomic-insight-result should stop click event propagation.\r\n   */\r\n  @Prop() stopPropagation?: boolean;\r\n\r\n  /**\r\n   * The result item.\r\n   */\r\n  @Prop() result!: InsightResult | InsightFoldedResult;\r\n\r\n  /**\r\n   * The InteractiveResult item.\r\n   * @internal\r\n   */\r\n  @Prop() interactiveResult!: InsightInteractiveResult;\r\n\r\n  /**\r\n   * Global Atomic state.\r\n   * @internal\r\n   */\r\n  @Prop() store?: AtomicInsightStore;\r\n\r\n  /**\r\n   * The result content to display.\r\n   */\r\n  @Prop() content?: ParentNode;\r\n\r\n  /**\r\n   * How large or small results should be.\r\n   */\r\n  @Prop() density: ItemDisplayDensity = 'normal';\r\n\r\n  /**\r\n   * The size of the visual section in result list items.\r\n   *\r\n   * This is overwritten by the image size defined in the result content, if it exists.\r\n   */\r\n  @Prop() imageSize: ItemDisplayImageSize = 'icon';\r\n\r\n  /**\r\n   * The classes to add to the result element.\r\n   */\r\n  @Prop() classes = '';\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @Prop() loadingFlag?: string;\r\n\r\n  @Listen('atomic/resolveResult')\r\n  public resolveResult(\r\n    event: ItemContextEvent<InsightFoldedResult | InsightResult>\r\n  ) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.detail(this.result);\r\n  }\r\n\r\n  @Listen('atomic/resolveInteractiveResult')\r\n  public resolveInteractiveResult(event: InteractiveItemContextEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (this.interactiveResult) {\r\n      event.detail(this.interactiveResult);\r\n    }\r\n  }\r\n\r\n  @Listen('atomic/resolveStopPropagation')\r\n  public resolveStopPropagation(event: CustomEvent) {\r\n    event.detail(this.stopPropagation);\r\n  }\r\n\r\n  @Listen('atomic/resolveResultDisplayConfig')\r\n  public resolveResultDisplayConfig(event: ItemContextEvent<DisplayConfig>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.detail({\r\n      density: this.density,\r\n      imageSize: this.imageSize!,\r\n    });\r\n  }\r\n\r\n  public connectedCallback() {\r\n    this.layout = new ItemLayout(\r\n      this.content!.children,\r\n      'list',\r\n      this.density,\r\n      this.imageSize\r\n    );\r\n  }\r\n\r\n  private getContentHTML() {\r\n    return Array.from(this.content!.children)\r\n      .map((child) => child.outerHTML)\r\n      .join('');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Host class={resultComponentClass}>\r\n        {/* deepcode ignore ReactSetInnerHtml: This is not React code */}\r\n        <div\r\n          class={`result-root ${this.layout\r\n            .getClasses()\r\n            .concat(this.classes)\r\n            .join(' ')}`}\r\n          innerHTML={this.getContentHTML()}\r\n        ></div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    if (this.loadingFlag && this.store) {\r\n      this.store.unsetLoadingFlag(this.loadingFlag);\r\n    }\r\n    applyFocusVisiblePolyfill(this.host);\r\n  }\r\n}\r\n"],"version":3}