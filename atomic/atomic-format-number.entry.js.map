{"file":"atomic-format-number.entry.esm.js","mappings":";;;;MAca,kBAAkB;;;QAqCrB,WAAM,GAAoB,CAAC,KAAK,EAAE,SAAS;YACjD,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE;gBACrC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;gBAC/C,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;gBACjD,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;gBACjD,wBAAwB,EAAE,IAAI,CAAC,wBAAwB;gBACvD,wBAAwB,EAAE,IAAI,CAAC,wBAAwB;aACxD,CAAC,CAAC;SACJ,CAAC;;;;;;;;IAnBF,iBAAiB;QACf,IAAI;YACF,yBAAyB,CACvB,CAAC,KAAK,EAAE,SAAS,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,EACnD,IAAI,CAAC,IAAI,CACV,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,KAAc,CAAC;SAC7B;KACF;IAYM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,QACE,+EACE,OAAO,EAAE,IAAI,CAAC,IAAI,EAClB,KAAK,EAAE,IAAI,CAAC,KAAK,GACO,EAC1B;SACH;KACF;;;;;;","names":[],"sources":["src/components/search/formats/atomic-format-number.tsx"],"sourcesContent":["import {Component, Element, Prop, State, h} from '@stencil/core';\r\nimport {\r\n  dispatchNumberFormatEvent,\r\n  NumberFormatter,\r\n} from '../../common/formats/format-common';\r\n\r\n/**\r\n * The `atomic-format-number` component is used for number formatting.\r\n * The numerical format of compatible parents will be set according to the properties of this component.\r\n */\r\n@Component({\r\n  tag: 'atomic-format-number',\r\n  shadow: true,\r\n})\r\nexport class AtomicFormatNumber {\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The minimum number of integer digits to use.\r\n   */\r\n  @Prop({reflect: true}) public minimumIntegerDigits?: number;\r\n  /**\r\n   * The minimum number of fraction digits to use.\r\n   */\r\n  @Prop({reflect: true}) public minimumFractionDigits?: number;\r\n  /**\r\n   * The maximum number of fraction digits to use.\r\n   */\r\n  @Prop({reflect: true}) public maximumFractionDigits?: number;\r\n  /**\r\n   * The minimum number of significant digits to use.\r\n   */\r\n  @Prop({reflect: true}) public minimumSignificantDigits?: number;\r\n  /**\r\n   * The maximum number of significant digits to use.\r\n   */\r\n  @Prop({reflect: true}) public maximumSignificantDigits?: number;\r\n\r\n  componentWillLoad() {\r\n    try {\r\n      dispatchNumberFormatEvent(\r\n        (value, languages) => this.format(value, languages),\r\n        this.host\r\n      );\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private format: NumberFormatter = (value, languages) => {\r\n    return value.toLocaleString(languages, {\r\n      minimumIntegerDigits: this.minimumIntegerDigits,\r\n      minimumFractionDigits: this.minimumFractionDigits,\r\n      maximumFractionDigits: this.maximumFractionDigits,\r\n      minimumSignificantDigits: this.minimumSignificantDigits,\r\n      maximumSignificantDigits: this.maximumSignificantDigits,\r\n    });\r\n  };\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={this.error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"version":3}