{"file":"atomic-pager.entry.cjs.js","mappings":"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","names":["ArrowLeftIcon","ArrowRightIcon","randomID","buildSearchStatus","buildPager","h","PagerGuard","PagerNavigation","PagerPreviousButton","PagerPageButtons","PagerPageButton","PagerNextButton","FocusTargetController","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-pager/atomic-pager.pcss?tag=atomic-pager&encapsulation=shadow","src/components/search/atomic-pager/atomic-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildPager,\n  buildSearchStatus,\n  Pager,\n  PagerState,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerGuard} from '../../common/pager/pager-guard';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n */\n@Component({\n  tag: 'atomic-pager',\n  styleUrl: 'atomic-pager.pcss',\n  shadow: true,\n})\nexport class AtomicPager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public pager!: Pager;\n  public searchStatus!: SearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon = ArrowRightIcon;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-pager-');\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.pager = buildPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n  }\n\n  public render() {\n    return (\n      <PagerGuard\n        {...this.searchStatusState}\n        isAppLoaded={this.bindings.store.isAppLoaded()}\n      >\n        <PagerNavigation label={this.bindings.i18n.t('pagination')}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={!this.pagerState.hasPreviousPage}\n            ariaLabel={this.bindings.i18n.t('previous')}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons>\n            {this.pagerState.currentPages.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={this.pager.isCurrentPage(pageNumber)}\n                  ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  ref={(el) => {\n                    const isSelected = this.pager.isCurrentPage(pageNumber);\n                    if (isSelected && el) {\n                      this.focusTarget.setTarget(el);\n                    }\n                  }}\n                  text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={!this.pagerState.hasNextPage}\n            ariaLabel={this.bindings.i18n.t('next')}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  private get focusTarget() {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n    return this.activePage;\n  }\n}\n"],"version":3}