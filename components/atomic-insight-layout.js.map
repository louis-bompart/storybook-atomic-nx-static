{"file":"atomic-insight-layout.js","mappings":";;;;;;AAKA,MAAM,YAAY,GAAG,qBAAqB,CAAC;AAC3C,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;AAC1D,MAAM,iBAAiB,GAAG,2BAA2B,CAAC;AACtD,MAAM,eAAe,GAAG;IACtB,8BAA8B;IAC9B,4BAA4B;IAC5B,+BAA+B;CAChC,CAAC;AACF,MAAM,qBAAqB,GAAG;IAC5B,0CAA0C;IAC1C,8BAA8B;CAC/B,CAAC;AACF,MAAM,uBAAuB,GAAG,iCAAiC,CAAC;SAElD,kBAAkB,CAAC,OAAoB,EAAE,MAAe;;IACtE,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,MAAM,cAAc,GAAG,yBAAyB,EAAE,EAAE,CAAC;IAErD,MAAM,OAAO,GAAG,OAAO,CACrB,MAAA,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,0CAAE,aAAa,CAAC,YAAY,CAAC,CAC5D,CAAC;IAEF,MAAM,cAAc,GAAG,MAAM;UACzB;IACF,cAAc;;;;;;IAMd,cAAc,IAAI,mBAAmB;;IAErC;UACE,EAAE,CAAC;IAEP,MAAM,MAAM,GAAG,GAAG,eAAe,CAAC,QAAQ,CAAC;;;;;;;;;;;QAWrC,CAAC,OAAO,GAAG,yBAAyB,GAAG,EAAE;;;MAG3C,eAAe,CAAC,QAAQ,CAAC,IAAI,iBAAiB;;;;MAI9C,eAAe,CAAC,GAAG,CACnB,CAAC,cAAc,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,IAAI,cAAc;;MAElE,CACD;;MAEC,eAAe,CAAC,QAAQ,CAAC,IAAI,YAAY;;;KAG1C,CAAC;IAEJ,MAAM,MAAM,GAAG,GAAG,eAAe,CAAC,QAAQ,CAAC;;;KAGxC,CAAC;IAEJ,MAAM,OAAO,GAAG;MACZ,eAAe,CAAC,SAAS,CAAC;;;;MAI1B,eAAe,CAAC,SAAS,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC;;;;MAI7D,eAAe,CAAC,SAAS,CAAC,IAAI,uBAAuB;;;;KAItD,CAAC;IAEJ,OAAO,CAAC,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;SAC7C,MAAM,CAAC,CAAC,WAAW,KAAK,WAAW,KAAK,EAAE,CAAC;SAC3C,IAAI,CAAC,MAAM,CAAC,CAAC;AAClB;;;;;;;;;;;;MC5EaA,qBAAmB;;;;;;;QASe,WAAM,GAAG,KAAK,CAAC;sBAAN,KAAK;;IAGpD,YAAY;QACjB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACtE;aAAM;YACL,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;KACF;IAEO,YAAY;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtC;IAEM,gBAAgB;QACrB,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,CAAC,wBAAwB,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAElB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;;;;;;AArB4B;IAA5B,kBAAkB,EAAE;uDAAmC;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicInsightLayout"],"sources":["src/components/insight/atomic-insight-layout/insight-layout.ts","src/components/insight/atomic-insight-layout/atomic-insight-layout.tsx"],"sourcesContent":["import {\r\n  sectionSelector,\r\n  findSection,\r\n} from '../../common/atomic-layout-section/sections';\r\n\r\nconst tabsSelector = 'atomic-insight-tabs';\r\nconst refineModalSelector = 'atomic-insight-refine-modal';\r\nconst searchBoxSelector = 'atomic-insight-search-box';\r\nconst toggleSelectors = [\r\n  'atomic-insight-refine-toggle',\r\n  'atomic-insight-edit-toggle',\r\n  'atomic-insight-history-toggle',\r\n];\r\nconst smartSnippetSelectors = [\r\n  'atomic-insight-smart-snippet-suggestions',\r\n  'atomic-insight-smart-snippet',\r\n];\r\nconst generatedAnswerSelector = 'atomic-insight-generated-answer';\r\n\r\nexport function buildInsightLayout(element: HTMLElement, widget: boolean) {\r\n  const id = element.id;\r\n  const layoutSelector = `atomic-insight-layout#${id}`;\r\n\r\n  const hasTabs = Boolean(\r\n    findSection(element, 'search')?.querySelector(tabsSelector)\r\n  );\r\n\r\n  const interfaceStyle = widget\r\n    ? `\r\n  ${layoutSelector} {\r\n    display: grid;\r\n    grid-template-rows: auto auto 8fr 1fr;\r\n    max-height: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  ${layoutSelector} ${refineModalSelector} {\r\n    grid-row-start: 5;\r\n  }`\r\n    : '';\r\n\r\n  const search = `${sectionSelector('search')} {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      grid-gap: 0.5rem;\r\n      background: var(--atomic-neutral-light);\r\n      padding-top: 1.5rem;\r\n      padding-left: 1.5rem;\r\n      padding-right: 1.5rem;\r\n      box-sizing: border-box;\r\n      min-width: 0;\r\n      ${!hasTabs ? 'padding-bottom: 1.5rem;' : ''}\r\n    }\r\n\r\n    ${sectionSelector('search')} ${searchBoxSelector} {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    ${toggleSelectors.map(\r\n      (toggleSelector) => `${sectionSelector('search')} ${toggleSelector} {\r\n      flex-shrink: 0;\r\n    }`\r\n    )}\r\n\r\n    ${sectionSelector('search')} ${tabsSelector} {\r\n      width: 100%;\r\n    }\r\n    `;\r\n\r\n  const facets = `${sectionSelector('facets')} {\r\n      display: none;\r\n    }\r\n    `;\r\n\r\n  const results = `\r\n    ${sectionSelector('results')} {\r\n      overflow: auto;\r\n    }\r\n\r\n    ${sectionSelector('results')} ${smartSnippetSelectors.join(',')} {\r\n      padding: 1.5rem 1.5rem 0px;\r\n    }\r\n\r\n    ${sectionSelector('results')} ${generatedAnswerSelector} {\r\n      margin-left: 1.5rem;\r\n      margin-right: 1.5rem;\r\n    }\r\n    `;\r\n\r\n  return [interfaceStyle, search, facets, results]\r\n    .filter((declaration) => declaration !== '')\r\n    .join('\\n\\n');\r\n}\r\n","import {Component, Element, Prop, Watch} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\nimport {buildInsightLayout} from './insight-layout';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-layout',\r\n  shadow: false,\r\n})\r\nexport class AtomicInsightLayout\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  public error!: Error;\r\n  private styleTag?: HTMLStyleElement;\r\n  @Element() private host!: HTMLElement;\r\n  /**\r\n   * Whether the interface should be shown in widget format.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public widget = false;\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  @Watch('widget')\r\n  public updateStyles() {\r\n    if (this.styleTag) {\r\n      this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\r\n    } else {\r\n      this.makeStyleTag();\r\n    }\r\n  }\r\n\r\n  private makeStyleTag() {\r\n    this.styleTag = this.bindings.createStyleElement();\r\n    this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\r\n    this.host.appendChild(this.styleTag);\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    const id = this.host.id || randomID('atomic-insight-layout-');\r\n    this.host.id = id;\r\n\r\n    this.makeStyleTag();\r\n  }\r\n}\r\n"],"version":3}