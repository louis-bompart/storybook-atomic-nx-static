{"version":3,"names":["rectEquals","r1","r2","x","y","width","height","atomicInsightRefineModalCss","AtomicInsightRefineModalStyle0","AtomicInsightRefineModal","this","isOpen","watchEnabled","host","querySelector","append","getClonedFacetElements","bindings","store","getFacetElements","interfaceElement","onAnimationFrame","dimensionChanged","updateDimensions","window","requestAnimationFrame","interfaceDimensions","getBoundingClientRect","initialize","querySummary","buildInsightQuerySummary","engine","breadcrumbManager","buildInsightBreadcrumbManager","renderHeader","h","class","breadcrumbManagerState","hasBreadcrumbs","Button","onClick","deselectAll","style","text","i18n","t","renderBody","length","Hidden","slot","name","render","Host","key","top","left","RefineModalCommon","onClose","querySummaryState","title","openButton","scope","componentDidLoad","display","__decorate","InitializeBindings","BindStateToController"],"sources":["src/utils/dom-utils.tsx","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.pcss?tag=atomic-insight-refine-modal&encapsulation=shadow","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.tsx"],"sourcesContent":["export function rectEquals(r1: DOMRect, r2: DOMRect) {\r\n  return (\r\n    r1.x === r2.x &&\r\n    r1.y === r2.y &&\r\n    r1.width === r2.width &&\r\n    r1.height === r2.height\r\n  );\r\n}\r\n","@import '../../common/refine-modal/refine-modal-common.pcss';\r\n","import {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\r\nimport {\r\n  InsightQuerySummary,\r\n  InsightQuerySummaryState,\r\n  buildInsightQuerySummary,\r\n  InsightBreadcrumbManager,\r\n  InsightBreadcrumbManagerState,\r\n  buildInsightBreadcrumbManager,\r\n} from '..';\r\nimport {rectEquals} from '../../../utils/dom-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Button} from '../../common/button';\r\nimport {Hidden} from '../../common/hidden';\r\nimport {\r\n  getClonedFacetElements,\r\n  RefineModalCommon,\r\n} from '../../common/refine-modal/refine-modal-common';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-refine-modal',\r\n  styleUrl: 'atomic-insight-refine-modal.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightRefineModal\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  @Element() public host!: HTMLElement;\r\n\r\n  @BindStateToController('querySummary')\r\n  @State()\r\n  public querySummaryState!: InsightQuerySummaryState;\r\n\r\n  @BindStateToController('breadcrumbManager')\r\n  @State()\r\n  public breadcrumbManagerState!: InsightBreadcrumbManagerState;\r\n\r\n  @State()\r\n  public error!: Error;\r\n\r\n  @State()\r\n  public interfaceDimensions?: DOMRect;\r\n\r\n  @Prop({mutable: true}) openButton?: HTMLElement;\r\n\r\n  @Prop({reflect: true, mutable: true}) isOpen = false;\r\n\r\n  public querySummary!: InsightQuerySummary;\r\n  private breadcrumbManager!: InsightBreadcrumbManager;\r\n\r\n  @Watch('isOpen')\r\n  watchEnabled(isOpen: boolean) {\r\n    if (isOpen) {\r\n      if (!this.host.querySelector('div[slot=\"facets\"]')) {\r\n        this.host.append(\r\n          getClonedFacetElements(\r\n            this.bindings.store.getFacetElements(),\r\n            0,\r\n            this.bindings.interfaceElement\r\n          )\r\n        );\r\n      }\r\n      this.onAnimationFrame();\r\n    }\r\n  }\r\n\r\n  private onAnimationFrame() {\r\n    if (!this.isOpen) {\r\n      return;\r\n    }\r\n    if (this.dimensionChanged()) {\r\n      this.updateDimensions();\r\n    }\r\n    window.requestAnimationFrame(() => this.onAnimationFrame());\r\n  }\r\n\r\n  private dimensionChanged() {\r\n    if (!this.interfaceDimensions) {\r\n      return true;\r\n    }\r\n\r\n    return !rectEquals(\r\n      this.interfaceDimensions,\r\n      this.bindings.interfaceElement.getBoundingClientRect()\r\n    );\r\n  }\r\n\r\n  public updateDimensions() {\r\n    this.interfaceDimensions =\r\n      this.bindings.interfaceElement.getBoundingClientRect();\r\n  }\r\n\r\n  public initialize() {\r\n    this.querySummary = buildInsightQuerySummary(this.bindings.engine);\r\n    this.breadcrumbManager = buildInsightBreadcrumbManager(\r\n      this.bindings.engine\r\n    );\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <div class=\"w-full flex justify-between mb-3\">\r\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\r\n          <Button\r\n            onClick={() => this.breadcrumbManager.deselectAll()}\r\n            style=\"text-primary\"\r\n            text={this.bindings.i18n.t('clear-all-filters')}\r\n            class=\"px-2 py-1\"\r\n          ></Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderBody() {\r\n    if (!this.bindings.store.getFacetElements().length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <aside slot=\"body\" class=\"flex flex-col w-full adjust-for-scroll-bar\">\r\n        {this.renderHeader()}\r\n        <slot name=\"facets\"></slot>\r\n      </aside>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Host>\r\n        {this.interfaceDimensions && (\r\n          <style>\r\n            {`atomic-modal::part(backdrop) {\r\n            top: ${this.interfaceDimensions.top}px;\r\n            left: ${this.interfaceDimensions.left}px;\r\n            width: ${this.interfaceDimensions.width}px;\r\n            height: ${this.interfaceDimensions.height}px;\r\n            }`}\r\n          </style>\r\n        )}\r\n        <RefineModalCommon\r\n          bindings={this.bindings}\r\n          host={this.host}\r\n          isOpen={this.isOpen}\r\n          onClose={() => (this.isOpen = false)}\r\n          querySummaryState={this.querySummaryState}\r\n          title={this.bindings.i18n.t('filters')}\r\n          openButton={this.openButton}\r\n          scope={this.bindings.interfaceElement}\r\n        >\r\n          {this.renderBody()}\r\n        </RefineModalCommon>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    this.host.style.display = '';\r\n  }\r\n}\r\n"],"mappings":"yaAAgBA,EAAWC,EAAaC,GACtC,OACED,EAAGE,IAAMD,EAAGC,GACZF,EAAGG,IAAMF,EAAGE,GACZH,EAAGI,QAAUH,EAAGG,OAChBJ,EAAGK,SAAWJ,EAAGI,MAErB,CCPA,MAAMC,EAA8B,6iuCACpC,MAAAC,EAAeD,E,iXC8BFE,EAAwB,M,yBAsBGC,KAAAC,OAAS,M,qKAAA,K,CAM/C,YAAAC,CAAaD,GACX,GAAIA,EAAQ,CACV,IAAKD,KAAKG,KAAKC,cAAc,sBAAuB,CAClDJ,KAAKG,KAAKE,OACRC,EACEN,KAAKO,SAASC,MAAMC,mBACpB,EACAT,KAAKO,SAASG,kB,CAIpBV,KAAKW,kB,EAID,gBAAAA,GACN,IAAKX,KAAKC,OAAQ,CAChB,M,CAEF,GAAID,KAAKY,mBAAoB,CAC3BZ,KAAKa,kB,CAEPC,OAAOC,uBAAsB,IAAMf,KAAKW,oB,CAGlC,gBAAAC,GACN,IAAKZ,KAAKgB,oBAAqB,CAC7B,OAAO,I,CAGT,OAAQ1B,EACNU,KAAKgB,oBACLhB,KAAKO,SAASG,iBAAiBO,wB,CAI5B,gBAAAJ,GACLb,KAAKgB,oBACHhB,KAAKO,SAASG,iBAAiBO,uB,CAG5B,UAAAC,GACLlB,KAAKmB,aAAeC,EAAyBpB,KAAKO,SAASc,QAC3DrB,KAAKsB,kBAAoBC,EACvBvB,KAAKO,SAASc,O,CAIV,YAAAG,GACN,OACEC,EAAA,OAAKC,MAAM,oCACR1B,KAAK2B,uBAAuBC,gBAC3BH,EAACI,EAAM,CACLC,QAAS,IAAM9B,KAAKsB,kBAAkBS,cACtCC,MAAM,eACNC,KAAMjC,KAAKO,SAAS2B,KAAKC,EAAE,qBAC3BT,MAAM,c,CAOR,UAAAU,GACN,IAAKpC,KAAKO,SAASC,MAAMC,mBAAmB4B,OAAQ,CAClD,OAAOZ,EAACa,EAAM,K,CAGhB,OACEb,EAAA,SAAOc,KAAK,OAAOb,MAAM,8CACtB1B,KAAKwB,eACNC,EAAA,QAAMe,KAAK,W,CAKV,MAAAC,GACL,OACEhB,EAACiB,EAAI,CAAAC,IAAA,4CACF3C,KAAKgB,qBACJS,EAAA,SAAAkB,IAAA,4CACG,oDACM3C,KAAKgB,oBAAoB4B,6BACxB5C,KAAKgB,oBAAoB6B,+BACxB7C,KAAKgB,oBAAoBrB,iCACxBK,KAAKgB,oBAAoBpB,4BAIvC6B,EAACqB,EAAiB,CAAAH,IAAA,2CAChBpC,SAAUP,KAAKO,SACfJ,KAAMH,KAAKG,KACXF,OAAQD,KAAKC,OACb8C,QAAS,IAAO/C,KAAKC,OAAS,MAC9B+C,kBAAmBhD,KAAKgD,kBACxBC,MAAOjD,KAAKO,SAAS2B,KAAKC,EAAE,WAC5Be,WAAYlD,KAAKkD,WACjBC,MAAOnD,KAAKO,SAASG,kBAEpBV,KAAKoC,c,CAMP,gBAAAgB,GACLpD,KAAKG,KAAK6B,MAAMqB,QAAU,E,mFAnICC,EAAA,CAA5BC,K,+BAKMD,EAAA,CAFNE,EAAsB,iB,wCAMhBF,EAAA,CAFNE,EAAsB,sB"}