{"file":"atomic-result-localized-text.js","mappings":";;;;;;;;;;;;;;;;;;MA+BaA,2BAAyB;;;;;;;QAYzB,UAAK,GAA2B,EAAE,CAAC;;;;;IAM9C,MAAM;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE;YAC1C,GAAG,IAAI,CAAC,gBAAgB,EAAE;YAC1B,GAAG,IAAI,CAAC,eAAe,EAAE;SAC1B,CAAC,CAAC;KACJ;IAEO,gBAAgB;QACtB,MAAM,GAAG,GAA4B,EAAE,CAAC;QACxC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,OAAO,GAAG,CAAC;SACZ;QACD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC;YAC5D,MAAM,aAAa,GAAGC,EAAsB,CAAC,iBAAiB,CAC5D,IAAI,CAAC,MAAM,EACX,SAAS,CACV,CAAC;YACF,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;gBACrC,GAAG,CAAC,aAAa,CAAC,GAAG,aAAa,CAAC;aACpC;SACF,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;KACZ;IAEO,eAAe;;QACrB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,EAAE,CAAC;SACX;QACD,OAAO;YACL,KAAK,EACH,MAACA,EAAsB,CAAC,iBAAiB,CACvC,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,UAAW,CACN,mCAAI,CAAC;SACpB,CAAC;KACH;;;;;;AArD4B;IAA5B,kBAAkB,EAAE;6DAA4B;AAGxB;IAAxB,aAAa,EAAE;2DAAyB;AAQ9B;IAAV,OAAO,EAAE;0DAAoC;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicResultLocalizedText","ResultTemplatesHelpers"],"sources":["src/components/search/result-template-components/atomic-result-localized-text/atomic-result-localized-text.ts"],"sourcesContent":["import {isNullOrUndefined} from '@coveo/bueno';\r\nimport {Result, ResultTemplatesHelpers} from '@coveo/headless';\r\nimport {Component, Prop, State} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-localized-text` component renders a target i18n localized string using the values of a target field.\r\n *\r\n * Given this i18n configuration:\r\n * ```\r\n * searchInterface.i18n.addResourceBundle('en', 'translation', {\r\n *    classic_book_advert: 'Classic book from {{name}}',\r\n * });\r\n * ```\r\n *\r\n * The component could be configured in such a way to replace `{{name}}` with the `author` field value from the result item:\r\n * ```\r\n * <atomic-result-localized-text locale-key=\"classic_book_advert\" field-author=\"name\"></atomic-result-localized-text>\r\n * ```\r\n *\r\n * @MapProp name: field;attr: field;docs: The field from which to extract the target string and the variable used to map it to the target i18n parameter. For example, the following configuration extracts the value of `author` from a result, and assign it to the i18n parameter `name`: `field-author=\"name\"`;type: Record<string, string> ;default: {}\r\n */\r\n@Component({\r\n  tag: 'atomic-result-localized-text',\r\n})\r\nexport class AtomicResultLocalizedText implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  @ResultContext() private result!: Result;\r\n  /**\r\n   * The i18n translation key.\r\n   */\r\n  @Prop() localeKey!: string;\r\n  /**\r\n   * The field value to dynamically evaluate.\r\n   */\r\n  @MapProp() field: Record<string, string> = {};\r\n  /**\r\n   * The numerical field value used to determine whether to use the singular or plural value of a translation.\r\n   * */\r\n  @Prop() fieldCount?: string;\r\n\r\n  render() {\r\n    return this.bindings.i18n.t(this.localeKey, {\r\n      ...this.parseFieldValues(),\r\n      ...this.parseFieldCount(),\r\n    });\r\n  }\r\n\r\n  private parseFieldValues() {\r\n    const ret: Record<string, unknown> = {};\r\n    if (Object.keys(this.field).length === 0) {\r\n      return ret;\r\n    }\r\n    Object.entries(this.field).forEach(([fieldName, i18nParameter]) => {\r\n      const fieldValueRaw = ResultTemplatesHelpers.getResultProperty(\r\n        this.result,\r\n        fieldName\r\n      );\r\n      if (!isNullOrUndefined(fieldValueRaw)) {\r\n        ret[i18nParameter] = fieldValueRaw;\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n  private parseFieldCount() {\r\n    if (!this.fieldCount) {\r\n      return {};\r\n    }\r\n    return {\r\n      count:\r\n        (ResultTemplatesHelpers.getResultProperty(\r\n          this.result,\r\n          this.fieldCount!\r\n        ) as number) ?? 1,\r\n    };\r\n  }\r\n}\r\n"],"version":3}