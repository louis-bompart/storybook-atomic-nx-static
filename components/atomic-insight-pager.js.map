{"file":"atomic-insight-pager.js","mappings":"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","names":["AtomicInsightPager","buildInsightSearchStatus","buildInsightPager"],"sources":["src/components/insight/atomic-insight-pager/atomic-insight-pager.pcss?tag=atomic-insight-pager&encapsulation=shadow","src/components/insight/atomic-insight-pager/atomic-insight-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n[part='page-button'] {\n  @apply bg-transparent;\n}\n\n:host {\n  background: var(--atomic-neutral-light);\n  height: 100%;\n  padding: 1rem 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n","import {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport {\n  buildInsightPager,\n  buildInsightSearchStatus,\n  InsightPager,\n  InsightPagerState,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n} from '../';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-pager',\n  styleUrl: 'atomic-insight-pager.pcss',\n  shadow: true,\n})\nexport class AtomicInsightPager\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public pager!: InsightPager;\n  public searchStatus!: InsightSearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: InsightPagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-insight-pager-');\n\n  public initialize() {\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n    this.pager = buildInsightPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n\n    return this.activePage;\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  public render() {\n    return (\n      <PagerNavigation label={this.bindings.i18n.t('pagination')}>\n        <PagerPreviousButton\n          icon={ArrowLeftIcon}\n          disabled={!this.pagerState.hasPreviousPage}\n          ariaLabel={this.bindings.i18n.t('previous')}\n          onClick={() => {\n            this.pager.previousPage();\n            this.focusOnFirstResultAndScrollToTop();\n          }}\n        />\n        <PagerPageButtons>\n          {this.pagerState.currentPages.map((pageNumber) => {\n            return (\n              <PagerPageButton\n                isSelected={this.pager.isCurrentPage(pageNumber)}\n                ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                onChecked={() => {\n                  this.pager.selectPage(pageNumber);\n                  this.focusOnFirstResultAndScrollToTop();\n                }}\n                page={pageNumber}\n                groupName={this.radioGroupName}\n                ref={(el) => {\n                  const isSelected = this.pager.isCurrentPage(pageNumber);\n                  if (isSelected && el) {\n                    this.focusTarget.setTarget(el);\n                  }\n                }}\n                text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n              />\n            );\n          })}\n        </PagerPageButtons>\n        <PagerNextButton\n          icon={ArrowRightIcon}\n          disabled={!this.pagerState.hasNextPage}\n          ariaLabel={this.bindings.i18n.t('next')}\n          onClick={() => {\n            this.pager.nextPage();\n            this.focusOnFirstResultAndScrollToTop();\n          }}\n        />\n      </PagerNavigation>\n    );\n  }\n}\n"],"version":3}