{"file":"atomic-icon.entry.js","mappings":"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","names":["sanitize"],"sources":["src/components/common/atomic-icon/atomic-icon.pcss?tag=atomic-icon","src/components/common/atomic-icon/atomic-icon.tsx"],"sourcesContent":["@import '../../../global/polyfills.pcss';\r\n\r\natomic-icon {\r\n  display: inline-block;\r\n  fill: currentColor;\r\n  @mixin aspect-ratio-h 1 / 1, auto;\r\n\r\n  > svg {\r\n    width: 100%;\r\n    max-height: 100%;\r\n    @mixin aspect-ratio-h 1 / 1, auto;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  forceUpdate,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport {sanitize} from 'dompurify';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {parseAssetURL} from '../../../utils/utils';\r\nimport {AnyBindings} from '../interface/bindings';\r\n\r\nclass IconFetchError extends Error {\r\n  static fromStatusCode(url: string, statusCode: number, statusText: string) {\r\n    return new IconFetchError(url, `status code ${statusCode} (${statusText})`);\r\n  }\r\n\r\n  static fromError(url: string, error: unknown) {\r\n    return new IconFetchError(url, 'an error', error);\r\n  }\r\n\r\n  private constructor(\r\n    public readonly url: string,\r\n    errorMessage: string,\r\n    public readonly errorObject?: unknown\r\n  ) {\r\n    super(`Could not fetch icon from ${url}, got ${errorMessage}.`);\r\n  }\r\n}\r\n\r\n/**\r\n * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.\r\n *\r\n * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.\r\n */\r\n@Component({\r\n  tag: 'atomic-icon',\r\n  styleUrl: 'atomic-icon.pcss',\r\n  shadow: false,\r\n  assetsDirs: ['assets'],\r\n})\r\nexport class AtomicIcon implements InitializableComponent<AnyBindings> {\r\n  @Element() host!: HTMLElement;\r\n\r\n  @InitializeBindings() public bindings!: AnyBindings;\r\n\r\n  /**\r\n   * The SVG icon to display.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop({reflect: true}) icon!: string;\r\n\r\n  public error!: Error;\r\n  @State() private svg: string | null = null;\r\n\r\n  private async fetchIcon(url: string) {\r\n    try {\r\n      const response = await fetch(url).catch((e) => {\r\n        throw IconFetchError.fromError(url, e);\r\n      });\r\n      if (response.status !== 200 && response.status !== 304) {\r\n        throw IconFetchError.fromStatusCode(\r\n          url,\r\n          response.status,\r\n          response.statusText\r\n        );\r\n      }\r\n      return await response.text();\r\n    } catch (e) {\r\n      this.error = e as Error;\r\n      forceUpdate(this);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private validateSVG(svg: string) {\r\n    if (!/^<svg[\\s\\S]+<\\/svg>$/gm.test(svg)) {\r\n      this.bindings.engine.logger.warn(\r\n        'The inline \"icon\" prop is not an svg element. You may encounter rendering issues.',\r\n        this.icon\r\n      );\r\n    }\r\n  }\r\n\r\n  private async getIcon() {\r\n    const url = parseAssetURL(\r\n      this.icon,\r\n      this.bindings.store.getIconAssetsPath()\r\n    );\r\n    const svg = url ? await this.fetchIcon(url) : this.icon;\r\n\r\n    if (svg) {\r\n      this.validateSVG(svg);\r\n    }\r\n    const sanitizedSvg = svg\r\n      ? sanitize(svg, {\r\n          USE_PROFILES: {svg: true, svgFilters: true},\r\n        })\r\n      : null;\r\n    return sanitizedSvg;\r\n  }\r\n\r\n  @Watch('icon')\r\n  public async updateIcon() {\r\n    const svgPromise = this.getIcon();\r\n    this.svg = await svgPromise;\r\n  }\r\n\r\n  public initialize() {\r\n    this.updateIcon();\r\n  }\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      console.error(this.error, this.host);\r\n      this.host.remove();\r\n      return;\r\n    }\r\n    return <Host innerHTML={this.svg} aria-hidden=\"true\"></Host>;\r\n  }\r\n}\r\n"],"version":3}