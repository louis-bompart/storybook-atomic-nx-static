{"version":3,"names":["atomicResultListCss","AtomicResultListStyle0","AtomicResultList","this","loadingFlag","randomID","resultTemplateRegistered","templateHasError","display","density","gridCellLinkTarget","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","focusTarget","nextNewResultTarget","FocusTargetController","initialize","host","innerHTML","includes","console","warn","resultList","buildResultList","bindings","engine","resultsPerPage","buildResultsPerPage","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","resultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","store","render","updateBreakpoints","listClasses","computeListDisplayClasses","h","ItemListGuard","key","hasError","hasTemplate","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","isAppLoaded","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","renderAsTable","renderAsGrid","renderAsList","getPropsForAtomicResult","result","interactiveResult","buildInteractiveResult","options","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","getItemListDisplayClasses","map","i","propsForAtomicResult","DisplayGrid","item","setRef","element","setNewResultRef","firstItem","propsForTableColumns","templateContentForFirstItem","DisplayTable","logger","DisplayTableRow","rowIndex","DisplayTableData","renderItem","ref","part","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/result-lists/atomic-result-list/atomic-result-list.pcss?tag=atomic-result-list&encapsulation=shadow","src/components/search/result-lists/atomic-result-list/atomic-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../../../common/item-list/styles/table-display.pcss';\r\n@import '../../../common/item-list/styles/list-display.pcss';\r\n@import '../../../common/item-list/styles/grid-display.pcss';\r\n","import {\r\n  ResultList,\r\n  ResultListState,\r\n  buildResultList,\r\n  ResultsPerPageState,\r\n  ResultsPerPage,\r\n  buildResultsPerPage,\r\n  buildInteractiveResult,\r\n  Result,\r\n} from '@coveo/headless';\r\nimport {Component, Element, State, Prop, Method, h} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {DisplayGrid} from '../../../common/item-list/display-grid';\r\nimport {\r\n  DisplayTableData,\r\n  DisplayTable,\r\n  DisplayTableRow,\r\n} from '../../../common/item-list/display-table';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n  ItemTarget,\r\n  getItemListDisplayClasses,\r\n} from '../../../common/layout/display-options';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.\r\n *\r\n * @slot default - The default slot where the result templates are inserted.\r\n *\r\n * @part result-list - The element containing every result of a result list\r\n * @part outline - The element displaying an outline or a divider around a result\r\n * @part result-list-grid-clickable-container - The parent of the result & the clickable link encompassing it, when results are displayed as a grid\r\n * @part result-list-grid-clickable - The clickable link encompassing the result when results are displayed as a grid\r\n * @part result-table - The element of the result table containing a heading and a body\r\n * @part result-table-heading - The element containing the row of cells in the result table's heading\r\n * @part result-table-heading-row - The element containing cells of the result table's heading\r\n * @part result-table-heading-cell - The element representing a cell of the result table's heading\r\n * @part result-table-body - The element containing the rows of the result table's body\r\n * @part result-table-row - The element containing the cells of a row in the result table's body\r\n * @part result-table-row-odd - The element containing the cells of an odd row in the result table's body\r\n * @part result-table-row-even - The element containing the cells of an even row in the result table's body\r\n * @part result-table-cell - The element representing a cell of the result table's body\r\n */\r\n@Component({\r\n  tag: 'atomic-result-list',\r\n  styleUrl: 'atomic-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultList implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public resultList!: ResultList;\r\n  public resultsPerPage!: ResultsPerPage;\r\n  private loadingFlag = randomID('firstResultLoaded-');\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private resultListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('resultList')\r\n  @State()\r\n  private resultListState!: ResultListState;\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  private resultsPerPageState!: ResultsPerPageState;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n  @State() private templateHasError = false;\r\n\r\n  /**\r\n   * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.\r\n   */\r\n  @Prop({reflect: true}) public display: ItemDisplayLayout = 'list';\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) public density: ItemDisplayDensity = 'normal';\r\n\r\n  /**\r\n   * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)).\r\n   * This property is only leveraged when `display` is `grid`.\r\n   * @defaultValue `_self`\r\n   */\r\n  @Prop() gridCellLinkTarget: ItemTarget = '_self';\r\n\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true, mutable: true})\r\n  public imageSize: ItemDisplayImageSize = 'icon';\r\n\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   *\r\n   * @param resultRenderingFunction\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  public get focusTarget() {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  public initialize() {\r\n    if (this.host.innerHTML.includes('<atomic-result-children')) {\r\n      console.warn(\r\n        'Folded results will not render any children for the \"atomic-result-list\". Please use \"atomic-folded-result-list\" instead.'\r\n      );\r\n    }\r\n    this.resultList = buildResultList(this.bindings.engine);\r\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.resultListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\r\n      getIsLoading: () => this.resultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    this.resultListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        hasError={this.resultListState.hasError}\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n        hasItems={this.resultListState.hasResults}\r\n      >\r\n        <DisplayWrapper display={this.display} listClasses={listClasses}>\r\n          <ResultsPlaceholdersGuard\r\n            density={this.density}\r\n            display={this.display}\r\n            imageSize={this.imageSize}\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n            hasItems={this.resultListState.hasResults}\r\n          >\r\n            {this.display === 'table'\r\n              ? this.renderAsTable()\r\n              : this.display === 'grid'\r\n                ? this.renderAsGrid()\r\n                : this.renderAsList()}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicResult(result: Result) {\r\n    return {\r\n      interactiveResult: buildInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.resultListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.resultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      imageSize: this.imageSize,\r\n      display: this.display,\r\n    };\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.resultListState.firstSearchExecuted &&\r\n        this.resultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private renderAsGrid() {\r\n    return this.resultListState.results.map((result, i) => {\r\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n      return (\r\n        <DisplayGrid\r\n          item={result}\r\n          {...propsForAtomicResult.interactiveResult}\r\n          setRef={(element) =>\r\n            element && this.resultListCommon.setNewResultRef(element, i)\r\n          }\r\n        >\r\n          <atomic-result {...this} {...propsForAtomicResult}></atomic-result>\r\n        </DisplayGrid>\r\n      );\r\n    });\r\n  }\r\n\r\n  private renderAsTable() {\r\n    if (!this.resultListState.hasResults) {\r\n      return;\r\n    }\r\n    const listClasses = this.computeListDisplayClasses();\r\n    const firstItem = this.resultListState.results[0];\r\n\r\n    const propsForTableColumns = {\r\n      firstItem,\r\n      templateContentForFirstItem:\r\n        this.itemTemplateProvider.getTemplateContent(firstItem),\r\n    };\r\n\r\n    return (\r\n      <DisplayTable\r\n        {...propsForTableColumns}\r\n        listClasses={listClasses}\r\n        logger={this.bindings.engine.logger}\r\n        itemRenderingFunction={this.itemRenderingFunction}\r\n        host={this.host}\r\n      >\r\n        {this.resultListState.results.map((result, i) => {\r\n          const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n          return (\r\n            <DisplayTableRow\r\n              {...propsForAtomicResult}\r\n              rowIndex={i}\r\n              setRef={(element) =>\r\n                element && this.resultListCommon.setNewResultRef(element, i)\r\n              }\r\n            >\r\n              <DisplayTableData\r\n                {...propsForTableColumns}\r\n                {...propsForAtomicResult}\r\n                renderItem={(content) => {\r\n                  return (\r\n                    <atomic-result\r\n                      {...propsForAtomicResult}\r\n                      content={content}\r\n                    ></atomic-result>\r\n                  );\r\n                }}\r\n              ></DisplayTableData>\r\n            </DisplayTableRow>\r\n          );\r\n        })}\r\n      </DisplayTable>\r\n    );\r\n  }\r\n\r\n  private renderAsList() {\r\n    return this.resultListState.results.map((result, i) => {\r\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\r\n      return (\r\n        <atomic-result\r\n          {...propsForAtomicResult}\r\n          ref={(element) =>\r\n            element && this.resultListCommon.setNewResultRef(element, i)\r\n          }\r\n          part=\"outline\"\r\n        ></atomic-result>\r\n      );\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"}