{"file":"atomic-commerce-sort-dropdown.entry.cjs.js","mappings":"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","names":["randomID","buildProductListing","buildSearch","h","SortGuard","SortContainer","SortLabel","SortSelect","SortOption","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.pcss?tag=atomic-commerce-sort-dropdown&encapsulation=shadow","src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\nselect:hover + div,\nselect:focus-visible + div {\n  @apply border-primary-light text-primary-light;\n}\n","import {\n  Sort,\n  SortState,\n  Search,\n  ProductListing,\n  buildProductListing,\n  buildSearch,\n  SearchState,\n  ProductListingState,\n  SortCriterion,\n} from '@coveo/headless/commerce';\nimport {Component, h, State, Element} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {SortContainer} from '../../common/sort/container';\nimport {SortGuard} from '../../common/sort/guard';\nimport {SortLabel} from '../../common/sort/label';\nimport {SortOption} from '../../common/sort/option';\nimport {SortSelect} from '../../common/sort/select';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting products.\n *\n * @part label - The \"Sort by\" label of the `<select>` element.\n * @part select-parent - The `<select>` element parent.\n * @part select - The `<select>` element of the dropdown list.\n * @part select-separator - The element separating the select from the icon.\n * @part placeholder - The dropdown placeholder for while the interface is initializing.\n *\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-sort-dropdown',\n  styleUrl: 'atomic-commerce-sort-dropdown.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceSortDropdown\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n\n  private id = randomID('atomic-commerce-sort-dropdown-');\n\n  @Element() host!: HTMLElement;\n\n  public sort!: Sort;\n  @BindStateToController('sort')\n  @State()\n  public sortState!: SortState;\n\n  public searchOrListing!: Search | ProductListing;\n  @BindStateToController('searchOrListing')\n  @State()\n  private searchOrListingState!: SearchState | ProductListingState;\n\n  @State() public error!: Error;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.searchOrListing = buildProductListing(this.bindings.engine);\n    } else {\n      this.searchOrListing = buildSearch(this.bindings.engine);\n    }\n    this.sort = this.searchOrListing.sort();\n  }\n\n  private select(e: Event) {\n    const select = e.composedPath()[0] as HTMLSelectElement;\n    this.sort.sortBy(this.getSortByLabel(select.value));\n  }\n\n  private getLabel(sort: SortCriterion) {\n    if (sort.by === 'relevance') {\n      return 'relevance';\n    } else {\n      return sort.fields\n        .map((sortByField) => {\n          return sortByField.displayName || sortByField.name;\n        })\n        .join(' ');\n    }\n  }\n\n  public render() {\n    const {error, responseId, products} = this.searchOrListingState;\n    const {\n      bindings: {i18n},\n      id,\n    } = this;\n    return (\n      <SortGuard\n        firstSearchExecuted={responseId !== ''}\n        hasError={error !== null}\n        hasResults={\n          products.length > 0 && this.sortState.availableSorts.length > 1\n        }\n      >\n        <SortContainer>\n          <SortLabel i18n={i18n} id={id} />\n          <SortSelect i18n={i18n} id={id} onSelect={(evt) => this.select(evt)}>\n            {this.sortState.availableSorts.map((availableSort) => {\n              const label = this.getLabel(availableSort);\n              return (\n                <SortOption\n                  i18n={i18n}\n                  label={label}\n                  selected={this.sort.isSortedBy(availableSort)}\n                  value={label}\n                />\n              );\n            })}\n          </SortSelect>\n        </SortContainer>\n      </SortGuard>\n    );\n  }\n\n  private getSortByLabel(label: string) {\n    const sortByLabel: Record<string, SortCriterion> = {};\n    this.sortState.availableSorts.forEach((availableSort) => {\n      sortByLabel[this.getLabel(availableSort)] = availableSort;\n    });\n\n    return sortByLabel[label];\n  }\n}\n"],"version":3}