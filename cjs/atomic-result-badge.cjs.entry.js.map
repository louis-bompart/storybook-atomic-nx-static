{"file":"atomic-result-badge.entry.cjs.js","mappings":";;;;;;;;;;;;AAAA,MAAM,oBAAoB,GAAG,ykuCAAykuC,CAAC;AACvmuC,gCAAe,oBAAoB;;;;;;;;;;;;MC2CtB,iBAAiB;;;;;;;IA2BpB,UAAU;QAChB,QACEA,yBACE,IAAI,EAAC,mBAAmB,EACxB,IAAI,EAAE,IAAI,CAAC,IAAK,EAChB,KAAK,EAAC,sBAAsB,GACf,EACf;KACH;IAEO,cAAc;QACpB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC5B,OAAOA,gCAAoB,KAAK,EAAE,IAAI,CAAC,KAAK,GAAuB,CAAC;SACrE;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC5B,OAAOA,yBAAa,KAAK,EAAE,IAAI,CAAC,KAAK,GAAgB,CAAC;SACvD;QACD,OAAOA,qBAAa,CAAC;KACtB;IAEO,UAAU;QAChB,OAAOA,kBAAM,IAAI,EAAC,oBAAoB,IAAE,IAAI,CAAC,cAAc,EAAE,CAAQ,CAAC;KACvE;IAEO,WAAW;QACjB,QACEA,iBACE,IAAI,EAAC,sBAAsB,EAC3B,KAAK,EAAC,gHAAgH,IAErH,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE,EAC9B,IAAI,CAAC,UAAU,EAAE,CACd,EACN;KACH;IAED,mBAAmB;QACjB,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,QAAQ,GACZC,eAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;gBACjE,IAAI,CAAC;YACP,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;aACpB;SACF;KACF;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;KAC3B;;;AA3EwB;IAAxBC,sCAAa,EAAE;iDAAyB;;;;;","names":["h","ResultTemplatesHelpers","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-badge/atomic-result-badge.pcss?tag=atomic-result-badge&encapsulation=shadow","src/components/search/result-template-components/atomic-result-badge/atomic-result-badge.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n\n:host {\n  display: inline-flex;\n  place-items: center;\n  height: var(--row-height, auto);\n  word-break: break-word;\n}\n","import {Result, ResultTemplatesHelpers} from '@coveo/headless';\nimport {Component, Element, Prop, h} from '@stencil/core';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-badge` element renders a badge to highlight special features of a result.\n *\n * A badge can either display:\n * * Text:\n * ```html\n * <atomic-result-badge label=\"trending\"></atomic-result-badge>\n * ```\n * * The contents of a single-value field:\n * ```html\n * <atomic-result-badge field=\"objecttype\"></atomic-result-badge>\n * ```\n * * An icon:\n * ```html\n * <atomic-result-badge icon=\"https://my-website.fake/star.svg\"></atomic-result-badge>\n * ```\n * * Slotted elements:\n * ```html\n * <atomic-result-badge icon=\"https://my-website.fake/stopwatch.svg\">\n *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>\n * </atomic-result-badge>\n * ```\n *\n * The contents of a multi-value field can be displayed as in the following example:\n * ```html\n * <atomic-result-badge icon=\"https://my-website.fake/language.svg\">\n *    <atomic-result-multi-value-text field=\"language\"></atomic-result-multi-value-text>\n * </atomic-result-badge>\n * ```\n *\n * @part result-badge-element - The decorative outer-most element with the background color and text color.\n * @part result-badge-icon - The icon displayed at the left-end of the badge, if present.\n * @part result-badge-label - The wrapper around the contents at the right-end of the badge. This may be text, a field or slotted elements depending on which was configured.\n * @slot default - The element(s) to display inside the badge, instead of a field or label.\n */\n@Component({\n  tag: 'atomic-result-badge',\n  styleUrl: 'atomic-result-badge.pcss',\n  shadow: true,\n})\nexport class AtomicResultBadge {\n  @ResultContext() private result!: Result;\n  @Element() host!: HTMLElement;\n  /**\n   * The field to display in the badge.\n   *\n   * Not compatible with `label`, slotted elements nor multi-value fields.\n   */\n  @Prop({reflect: true}) public field?: string;\n\n  /**\n   * The text to display in the badge.\n   *\n   * Not compatible with `field` nor slotted elements.\n   */\n  @Prop({reflect: true}) public label?: string;\n\n  /**\n   * Specifies an icon to display at the left-end of the badge.\n   * This can be used in conjunction with `field`, `label` or slotted elements.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly\n   */\n  @Prop({reflect: true}) public icon?: string;\n\n  private renderIcon() {\n    return (\n      <atomic-icon\n        part=\"result-badge-icon\"\n        icon={this.icon!}\n        class=\"w-3 h-3 fill-current\"\n      ></atomic-icon>\n    );\n  }\n\n  private getTextContent() {\n    if (this.field !== undefined) {\n      return <atomic-result-text field={this.field}></atomic-result-text>;\n    }\n    if (this.label !== undefined) {\n      return <atomic-text value={this.label}></atomic-text>;\n    }\n    return <slot></slot>;\n  }\n\n  private renderText() {\n    return <span part=\"result-badge-label\">{this.getTextContent()}</span>;\n  }\n\n  private renderBadge() {\n    return (\n      <div\n        part=\"result-badge-element\"\n        class=\"inline-flex place-items-center space-x-1.5 h-full px-3 bg-neutral-light text-neutral-dark text-xs rounded-full\"\n      >\n        {this.icon && this.renderIcon()}\n        {this.renderText()}\n      </div>\n    );\n  }\n\n  componentWillRender() {\n    if (this.field) {\n      const hasValue =\n        ResultTemplatesHelpers.getResultProperty(this.result, this.field) !==\n        null;\n      if (!hasValue) {\n        this.host.remove();\n      }\n    }\n  }\n\n  render() {\n    return this.renderBadge();\n  }\n}\n"],"version":3}