{"file":"atomic-commerce-search-box-query-suggestions2.js","mappings":";;;;;;;;MA6Ba,uCAAuC;;;;;;;;;;IAwBlD,iBAAiB;QACf,IAAI;YACF,iCAAiC,CAAY,CAAC,QAAQ;gBACpD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;aAC1B,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,KAAc,CAAC;SAC7B;KACF;IAEO,UAAU;QAChB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAA4C,CAAC;QAC1E,MAAM,EAAC,oBAAoB,EAAE,qBAAqB,EAAC,GACjDA,EAAuB,CAAC,MAAM,CAAC,CAAC;QAElC,MAAM,CAAC,QAAQ,CACb,oBAAoB,CAAC;YACnB,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACpB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;SACrC,CAAC,CACH,CAAC;QAEF,OAAO;YACL,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YACvE,OAAO,EAAE,MACP,MAAM,CAAC,QAAQ,CACb,qBAAqB,CAAC;gBACpB,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;aACrB,CAAC,CACH;YACH,WAAW,EAAE,MAAM,IAAI,CAAC,WAAW,EAAE;SACtC,CAAC;KACH;IAEO,WAAW;QACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;QACtE,MAAM,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC;QAChE,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,CAAC,WAAW;aACvD,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;aACb,GAAG,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;KACrD;IAEO,UAAU,CAAC,UAAsB;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;QACtE,MAAM,WAAW,GAAG,oCAAoC,CACtD,UAAU,EACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CACnB,CAAC;QAEF,OAAO;YACL,GAAG,WAAW;YACd,OAAO,GACL,EAAC,wBAAwB,QACvB,EAAC,mBAAmB,IAClB,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,UAAU,EAC7B,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,MAAM,GAAG,CAAC,GACxD,EAEF,EAAC,mBAAmB,IAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,GAAI,CAC1C,CAC5B;YACD,QAAQ,EAAE;gBACR,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aACzE;SACF,CAAC;KACH;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,QACE,+EACE,OAAO,EAAE,IAAI,CAAC,IAAI,EAClB,KAAK,EAAE,IAAI,CAAC,KAAK,GACO,EAC1B;SACH;KACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["loadQuerySuggestActions"],"sources":["src/components/commerce/search-box-suggestions/atomic-commerce-search-box-query-suggestions/atomic-commerce-search-box-query-suggestions.tsx"],"sourcesContent":["import {\r\n  SearchBox,\r\n  Suggestion,\r\n  CommerceEngine,\r\n  loadQuerySuggestActions,\r\n} from '@coveo/headless/commerce';\r\nimport {Component, Element, Prop, State, h} from '@stencil/core';\r\nimport SearchIcon from '../../../../images/search.svg';\r\nimport {\r\n  getPartialSearchBoxSuggestionElement,\r\n  QuerySuggestionContainer,\r\n  QuerySuggestionIcon,\r\n  QuerySuggestionText,\r\n} from '../../../common/suggestions/query-suggestions';\r\nimport {\r\n  dispatchSearchBoxSuggestionsEvent,\r\n  SearchBoxSuggestionElement,\r\n  SearchBoxSuggestions,\r\n  SearchBoxSuggestionsBindings,\r\n} from '../../../common/suggestions/suggestions-common';\r\n\r\n/**\r\n * The `atomic-commerce-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-commerce-search-box-query-suggestions',\r\n  shadow: true,\r\n})\r\nexport class AtomicCommerceSearchBoxQuerySuggestions {\r\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox>;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The SVG icon to display.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop() public icon?: string;\r\n\r\n  /**\r\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\r\n   */\r\n  @Prop({reflect: true}) public maxWithQuery?: number;\r\n  /**\r\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\r\n   */\r\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\r\n\r\n  componentWillLoad() {\r\n    try {\r\n      dispatchSearchBoxSuggestionsEvent<SearchBox>((bindings) => {\r\n        this.bindings = bindings;\r\n        return this.initialize();\r\n      }, this.host);\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private initialize(): SearchBoxSuggestions {\r\n    const engine = this.bindings.engine as CommerceEngine<{querySet: string}>;\r\n    const {registerQuerySuggest, fetchQuerySuggestions} =\r\n      loadQuerySuggestActions(engine);\r\n\r\n    engine.dispatch(\r\n      registerQuerySuggest({\r\n        id: this.bindings.id,\r\n        count: this.bindings.numberOfQueries,\r\n      })\r\n    );\r\n\r\n    return {\r\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\r\n      onInput: () =>\r\n        engine.dispatch(\r\n          fetchQuerySuggestions({\r\n            id: this.bindings.id,\r\n          })\r\n        ),\r\n      renderItems: () => this.renderItems(),\r\n    };\r\n  }\r\n\r\n  private renderItems(): SearchBoxSuggestionElement[] {\r\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\r\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\r\n    return this.bindings.searchBoxController.state.suggestions\r\n      .slice(0, max)\r\n      .map((suggestion) => this.renderItem(suggestion));\r\n  }\r\n\r\n  private renderItem(suggestion: Suggestion) {\r\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\r\n    const partialItem = getPartialSearchBoxSuggestionElement(\r\n      suggestion,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return {\r\n      ...partialItem,\r\n      content: (\r\n        <QuerySuggestionContainer>\r\n          <QuerySuggestionIcon\r\n            icon={this.icon || SearchIcon}\r\n            hasSuggestion={this.bindings.getSuggestions().length > 1}\r\n          />\r\n\r\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\r\n        </QuerySuggestionContainer>\r\n      ),\r\n      onSelect: () => {\r\n        this.bindings.searchBoxController.selectSuggestion(suggestion.rawValue);\r\n      },\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={this.error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"version":3}