{"version":3,"names":["ColorFacetCheckbox","props","children","id","randomID","count","numberOfResults","toLocaleString","i18n","language","ariaLabel","t","value","displayValue","partValue","_a","match","RegExp","toString","labelRef","h","key","class","role","part","isSelected","onClick","onMouseDown","e","createRipple","color","parent","ref","htmlFor","text","atomicColorFacetCss","AtomicColorFacetStyle0","AtomicColorFacet","this","resultIndexToFocusOnShowMore","label","numberOfValues","withSearch","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","allowedValues","customSort","initialize","searchStatus","buildSearchStatus","bindings","engine","facet","buildFacet","options","facetOptions","announceFacetSearchResultsWithAriaLive","msg","facetSearchAriaMessage","facetId","state","facetInfo","element","host","isHidden","store","registerFacet","initializePopover","hasValues","values","length","numberOfActiveValues","numberOfSelectedValues","initializeDependenciesManager","focusTargets","showLessFocus","FocusTargetController","showMoreFocus","headerFocus","disconnectedCallback","isConnected","dependenciesManager","stopWatching","searchStatusState","hasError","enabled","componentShouldUpdate","next","prev","propName","shouldUpdateFacetSearchComponent","facetSearch","facetState","filter","buildFacetConditionsManager","conditions","parseDependsOn","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","onToggleCollapse","headerRef","el","setTarget","renderSearchInput","FacetSearchInput","query","onChange","clear","updateCaptions","getFieldCaptions","field","updateText","search","onClear","renderValue","facetValue","isShowLessFocusTarget","isShowMoreFocusTarget","getFieldValueCaption","isExcluded","partValueWithDisplayValue","replace","partValueWithAPIValue","searchQuery","buttonRef","FacetValueLabelHighlight","FacetValueBox","renderValuesContainer","classes","FacetValuesGroup","renderValues","map","i","toggleSelect","renderSearchResults","rawValue","select","renderMatches","FacetSearchMatches","numberOfMatches","hasMoreMatches","moreValuesAvailable","renderShowMoreLess","FacetShowMoreLess","onShowMore","showMoreValues","onShowLess","showLessValues","canShowLessValues","canShowMoreValues","undefined","render","Hidden","firstSearchExecuted","FacetPlaceholder","FacetContainer","shouldDisplaySearchResults","__decorate","InitializeBindings","BindStateToController","MapProp","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/facets/color-facet-checkbox/color-facet-checkbox.tsx","src/components/search/facets/atomic-color-facet/atomic-color-facet.pcss?tag=atomic-color-facet&encapsulation=shadow","src/components/search/facets/atomic-color-facet/atomic-color-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {createRipple} from '../../../../utils/ripple';\nimport {randomID} from '../../../../utils/utils';\nimport {FacetValueProps} from '../../../common/facets/facet-common';\n\nexport const ColorFacetCheckbox: FunctionalComponent<FacetValueProps> = (\n  props,\n  children\n) => {\n  const id = randomID('facet-value-');\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\n  const ariaLabel = props.i18n.t('facet-value', {\n    value: props.displayValue,\n    count: props.numberOfResults,\n  });\n  const partValue = props.displayValue\n    .match(new RegExp('-?[_a-zA-Z]+[_a-zA-Z0-9-]*'))\n    ?.toString();\n  let labelRef: HTMLLabelElement;\n\n  return (\n    <li key={props.displayValue} class=\"relative flex items-center\">\n      <button\n        id={id}\n        role=\"checkbox\"\n        part={`value-checkbox value-${partValue}${\n          props.isSelected ? ' value-checkbox-checked' : ''\n        }`}\n        onClick={() => props.onClick()}\n        onMouseDown={(e) =>\n          createRipple(e, {color: 'neutral', parent: labelRef})\n        }\n        aria-checked={props.isSelected.toString()}\n        class={`value-checkbox ${props.isSelected ? 'ring-primary' : ''}`}\n        aria-label={ariaLabel}\n      ></button>\n      <label\n        ref={(ref) => (labelRef = ref!)}\n        htmlFor={id}\n        part=\"value-checkbox-label\"\n        onMouseDown={(e) => createRipple(e, {color: 'neutral'})}\n      >\n        {children}\n        <span part=\"value-count\" class=\"value-count\">\n          {props.i18n.t('between-parentheses', {\n            text: count,\n          })}\n        </span>\n      </label>\n    </li>\n  );\n};\n","@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n@import '../color-facet-checkbox/color-facet-checkbox.pcss';\n\n/**\n * @prop --atomic-facet-color-boxes-per-row: Number of facet values for the Color Facet to display per row, when the display is 'box'\n * @prop --atomic-facet-color-boxes-gap: Gap value for facet values for the Color Facet , when the display is 'box'\n */\n.box-color-container {\n  @apply grid px-2;\n  grid-template-columns: repeat(var(--atomic-facet-color-boxes-per-row, 3), minmax(0, 1fr));\n  gap: var(--atomic-facet-color-boxes-gap, 0.5rem);\n}\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  FacetValue,\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  FacetResultsMustMatch,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {\n  getFieldCaptions,\n  getFieldValueCaption,\n} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\nimport {\n  shouldUpdateFacetSearchComponent,\n  shouldDisplaySearchResults,\n} from '../../../common/facets/facet-search/facet-search-utils';\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {FacetValueBox} from '../../../common/facets/facet-value-box/facet-value-box';\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\nimport {ColorFacetCheckbox} from '../color-facet-checkbox/color-facet-checkbox';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-color-facet` displays a facet of the results for the current query as colors.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n * @part default-color-value - The default part name used to customize color facet values. Should be defined before dynamic parts.\n * @part value-* - The dynamic part name used to customize a facet value. The `*` is a syntactical placeholder for a specific facet value. For example, if the component's `field` property is set to 'filetype' and your source has a `YouTubeVideo` file type, the part would be targeted like this: `atomic-color-facet::part(value-YouTubeVideo)...`.\n *\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-color-facet',\n  styleUrl: 'atomic-color-facet.pcss',\n  shadow: true,\n})\nexport class AtomicColorFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: Facet;\n  private dependenciesManager?: FacetConditionsManager;\n  private resultIndexToFocusOnShowMore = 0;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain a search box.\n   *\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'box' = 'box';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n  // @Prop() public customSort?: string; TODO: KIT-753 Add customSort option for facet\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-color-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-color-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-color-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-color-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\n   *\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\n   * them.\n   *\n   * ```html\n   * <atomic-color-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-color-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-color-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-color-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n\n  private showMoreFocus?: FocusTargetController;\n\n  private headerFocus?: FocusTargetController;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n    this.facetId = this.facet.state.facetId;\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n    this.bindings.store.registerFacet('facets', facetInfo);\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n    this.initializeDependenciesManager();\n  }\n\n  private get focusTargets() {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLessFocus: this.showLessFocus,\n      showMoreFocus: this.showMoreFocus,\n      headerFocus: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return (\n      this.searchStatusState.hasError ||\n      !this.facet.state.enabled ||\n      !this.facet.state.values.length\n    );\n  }\n\n  public componentShouldUpdate(\n    next: unknown,\n    prev: unknown,\n    propName: keyof AtomicColorFacet\n  ) {\n    if (propName === 'facetState' && prev && this.withSearch) {\n      return shouldUpdateFacetSearchComponent(\n        (next as FacetState).facetSearch,\n        (prev as FacetState).facetSearch\n      );\n    }\n\n    return true;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facetState.values.filter(({state}) => state === 'selected')\n      .length;\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTargets.headerFocus.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={this.headingLevel}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTargets.headerFocus.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderSearchInput() {\n    if (!this.withSearch) {\n      return;\n    }\n\n    return (\n      <FacetSearchInput\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={this.facetState.facetSearch.query}\n        onChange={(value) => {\n          if (value === '') {\n            this.facet.facetSearch.clear();\n            return;\n          }\n          this.facet.facetSearch.updateCaptions(\n            getFieldCaptions(this.field, this.bindings.i18n)\n          );\n          this.facet.facetSearch.updateText(value);\n          this.facet.facetSearch.search();\n        }}\n        onClear={() => this.facet.facetSearch.clear()}\n      ></FacetSearchInput>\n    );\n  }\n\n  private renderValue(\n    facetValue: FacetValue,\n    onClick: () => void,\n    isShowLessFocusTarget: boolean,\n    isShowMoreFocusTarget: boolean\n  ) {\n    const displayValue = getFieldValueCaption(\n      this.facetId!,\n      facetValue.value,\n      this.bindings.i18n\n    );\n    const isSelected = facetValue.state === 'selected';\n    const isExcluded = facetValue.state === 'excluded';\n    const partValueWithDisplayValue = displayValue.replace(/[^a-z0-9]/gi, '');\n    const partValueWithAPIValue = facetValue.value.replace(/[^a-z0-9]/gi, '');\n    switch (this.displayValuesAs) {\n      case 'checkbox':\n        return (\n          <ColorFacetCheckbox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n            searchQuery={this.facetState.facetSearch.query}\n            buttonRef={(element) => {\n              isShowLessFocusTarget &&\n                this.focusTargets.showLessFocus.setTarget(element);\n              isShowMoreFocusTarget &&\n                this.focusTargets.showMoreFocus.setTarget(element);\n            }}\n          >\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n              searchQuery={this.facetState.facetSearch.query}\n            ></FacetValueLabelHighlight>\n          </ColorFacetCheckbox>\n        );\n      case 'box':\n        return (\n          <FacetValueBox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n            searchQuery={this.facetState.facetSearch.query}\n            buttonRef={(element) => {\n              isShowLessFocusTarget &&\n                this.focusTargets.showLessFocus.setTarget(element);\n              isShowMoreFocusTarget &&\n                this.focusTargets.showMoreFocus.setTarget(element);\n            }}\n          >\n            <div\n              part={`value-${partValueWithDisplayValue} value-${partValueWithAPIValue} default-color-value`}\n              class=\"value-box-color w-full h-12 bg-neutral-dark rounded-md mb-2\"\n            ></div>\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n              isExcluded={isExcluded}\n              searchQuery={this.facetState.facetSearch.query}\n            ></FacetValueLabelHighlight>\n          </FacetValueBox>\n        );\n    }\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-color-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facetState.values.map((value, i) =>\n        this.renderValue(\n          value,\n          () => this.facet.toggleSelect(value),\n          i === 0,\n          i ===\n            (this.sortCriteria === 'automatic'\n              ? 0\n              : this.resultIndexToFocusOnShowMore)\n        )\n      )\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facetState.facetSearch.values.map((value) =>\n        this.renderValue(\n          {\n            state: 'idle',\n            numberOfResults: value.count,\n            value: value.rawValue,\n          },\n          () => this.facet.facetSearch.select(value),\n          false,\n          false\n        )\n      ),\n      this.facetState.facetSearch.query\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facetState.facetSearch.query}\n        numberOfMatches={this.facetState.facetSearch.values.length}\n        hasMoreMatches={this.facetState.facetSearch.moreValuesAvailable}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.resultIndexToFocusOnShowMore = this.facet.state.values.length;\n          this.focusTargets.showMoreFocus.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLessFocus.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowLessValues={this.facetState.canShowLessValues}\n        canShowMoreValues={this.facetState.canShowMoreValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      injectionDepth: this.injectionDepth,\n      filterFacetCount: this.filterFacetCount,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n\n  public render() {\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatusState.firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.facetState.values.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && [\n          this.renderSearchInput(),\n          shouldDisplaySearchResults(this.facetState.facetSearch)\n            ? [this.renderSearchResults(), this.renderMatches()]\n            : [this.renderValues(), this.renderShowMoreLess()],\n        ]}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"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"}