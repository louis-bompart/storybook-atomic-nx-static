{"file":"atomic-result-html.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;MAqBa,gBAAgB;;;;;;QAkBG,aAAQ,GAAG,IAAI,CAAC;;;wBAAL,IAAI;;IAEtC,MAAM;QACX,MAAM,WAAW,GAAGA,0CAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACnB,OAAO;SACR;QAED,QACEC,yBAAa,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAgB,EACxE;KACH;;;AA7B4B;IAA5BC,sCAAkB,EAAE;kDAA4B;AACxB;IAAxBC,sCAAa,EAAE;gDAAyB;;;;","names":["getStringValueFromResultOrNull","h","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-html/atomic-result-html.tsx"],"sourcesContent":["import {Result} from '@coveo/headless';\nimport {Component, Prop, h, Element, State} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-html` component renders the HTML value of a string result field.\n *\n * There is an inherent XSS security concern associated with the usage of this component.\n *\n * Use only with fields for which you are certain the data is harmless.\n */\n@Component({\n  tag: 'atomic-result-html',\n  shadow: false,\n})\nexport class AtomicResultHtml implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   *  The result field which the component should use.\n   * If set, Atomic searches for the specified field in the `Result` object first.\n   * If there's no such a field, Atomic searches through the `Result.raw` object.\n   * It's important to include the necessary field in the `ResultList` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).\n   */\n  @Prop({reflect: true}) public sanitize = true;\n\n  public render() {\n    const resultValue = getStringValueFromResultOrNull(this.result, this.field);\n    if (!resultValue) {\n      this.host.remove();\n      return;\n    }\n\n    return (\n      <atomic-html value={resultValue} sanitize={this.sanitize}></atomic-html>\n    );\n  }\n}\n"],"version":3}