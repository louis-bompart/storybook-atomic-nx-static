{"file":"atomic-insight-facet.js","mappings":"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","names":["AtomicInsightFacet","buildInsightFacet","buildInsightSearchStatus","buildInsightFacetConditionsManager"],"sources":["src/components/insight/atomic-insight-facet/atomic-insight-facet.pcss?tag=atomic-insight-facet&encapsulation=shadow","src/components/insight/atomic-insight-facet/atomic-insight-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\n@import '../../common/facets/facet-search/facet-search.pcss';\n@import '../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\n@import '../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {FacetResultsMustMatch} from '@coveo/headless';\nimport {Component, h, State, Prop, Element, VNode} from '@stencil/core';\nimport {\n  buildInsightFacet,\n  buildInsightFacetConditionsManager,\n  buildInsightSearchStatus,\n  InsightCategoryFacetValueRequest,\n  InsightFacet,\n  InsightFacetConditionsManager,\n  InsightFacetOptions,\n  InsightFacetSortCriterion,\n  InsightFacetState,\n  InsightFacetValueRequest,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n} from '..';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../utils/accessibility-utils';\nimport {getFieldCaptions} from '../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {FacetInfo} from '../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../common/facets/facet-guard';\nimport {FacetHeader} from '../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetSearchInput} from '../../common/facets/facet-search/facet-search-input';\nimport {FacetSearchInputGuard} from '../../common/facets/facet-search/facet-search-input-guard';\nimport {FacetSearchMatches} from '../../common/facets/facet-search/facet-search-matches';\nimport {shouldDisplaySearchResults} from '../../common/facets/facet-search/facet-search-utils';\nimport {FacetSearchValue} from '../../common/facets/facet-search/facet-search-value';\nimport {FacetShowMoreLess} from '../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {\n  FacetValueProps,\n  FacetValue,\n} from '../../common/facets/facet-value/facet-value';\nimport {FacetValuesGroup} from '../../common/facets/facet-values-group/facet-values-group';\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-facet',\n  styleUrl: 'atomic-insight-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facet!: InsightFacet;\n  public searchStatus!: InsightSearchStatus;\n  public withSearch = false;\n  public dependsOn = {};\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: InsightFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightFacetSortCriterion =\n    'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n  /**\n   * Whether to allow excluding values from the facet.\n   */\n  @Prop({reflect: true}) public enableExclusion = false;\n\n  private showLessFocus?: FocusTargetController;\n  private showMoreFocus?: FocusTargetController;\n  private headerFocus?: FocusTargetController;\n  private facetConditionsManager?: InsightFacetConditionsManager;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    const options: InsightFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n\n    this.facet = buildInsightFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n    this.initAriaLive();\n    this.initConditionManager();\n    this.initPopover();\n    this.registerFacet();\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    this.facetConditionsManager?.stopWatching();\n  }\n\n  public render() {\n    return (\n      <FacetGuard\n        enabled={this.facetState.enabled}\n        hasError={this.searchStatusState.hasError}\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\n        hasResults={this.facetState.values.length > 0}\n      >\n        {this.searchStatusState.firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={this.bindings.i18n}\n              label={this.label}\n              onClearFilters={() => {\n                this.focusTargets.header.focusAfterSearch();\n                this.facet.deselectAll();\n              }}\n              numberOfActiveValues={this.activeValues.length}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\n            ></FacetHeader>\n            <FacetSearchInputGuard\n              canShowMoreValues={this.facetState.canShowMoreValues}\n              numberOfDisplayedValues={this.facetState.values.length}\n              withSearch={this.withSearch}\n            >\n              <FacetSearchInput\n                i18n={this.bindings.i18n}\n                label={this.label}\n                onChange={(value) => {\n                  if (value === '') {\n                    this.facet.facetSearch.clear();\n                    return;\n                  }\n                  this.facet.facetSearch.updateCaptions(\n                    getFieldCaptions(this.field, this.bindings.i18n)\n                  );\n                  this.facet.facetSearch.updateText(value);\n                  this.facet.facetSearch.search();\n                }}\n                onClear={() => this.facet.facetSearch.clear()}\n                query={this.facetState.facetSearch.query}\n              />\n            </FacetSearchInputGuard>\n            {shouldDisplaySearchResults(this.facetState.facetSearch)\n              ? [this.renderSearchResults(), this.renderMatches()]\n              : [this.renderValues(), this.renderShowMoreLess()]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            numberOfValues={this.numberOfValues}\n            isCollapsed={this.isCollapsed}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facet.state.facetSearch.values.map((value) => (\n        <FacetSearchValue\n          {...this.facetValueProps}\n          facetCount={value.count}\n          onExclude={() => this.facet.facetSearch.exclude(value)}\n          onSelect={() => this.facet.facetSearch.select(value)}\n          facetValue={value.rawValue}\n        />\n      ))\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value, i) => {\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\n        const shouldFocusOnShowMoreAfterInteraction =\n          i ===\n          (this.sortCriteria === 'automatic'\n            ? 0\n            : this.facetState.values.length - 1);\n\n        return (\n          <FacetValue\n            {...this.facetValueProps}\n            facetCount={value.numberOfResults}\n            onExclude={() => this.facet.toggleExclude(value)}\n            onSelect={() => this.facet.toggleSelect(value)}\n            facetValue={value.value}\n            facetState={value.state}\n            setRef={(btn) => {\n              if (shouldFocusOnShowLessAfterInteraction) {\n                this.showLessFocus?.setTarget(btn);\n              }\n              if (shouldFocusOnShowMoreAfterInteraction) {\n                this.showMoreFocus?.setTarget(btn);\n              }\n            }}\n          />\n        );\n      })\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.focusTargets.showMore.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLess.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowMoreValues={this.facet.state.canShowMoreValues}\n        canShowLessValues={this.facet.state.canShowLessValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facet.state.facetSearch.query}\n        numberOfMatches={this.facet.state.facetSearch.values.length}\n        hasMoreMatches={this.facet.state.facetSearch.moreValuesAvailable}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private get activeValues() {\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\n  }\n\n  private get facetValueProps(): Pick<\n    FacetValueProps,\n    | 'displayValuesAs'\n    | 'facetSearchQuery'\n    | 'enableExclusion'\n    | 'field'\n    | 'i18n'\n  > {\n    return {\n      facetSearchQuery: this.facetState.facetSearch.query,\n      displayValuesAs: this.displayValuesAs,\n      enableExclusion: this.enableExclusion,\n      field: this.field,\n      i18n: this.bindings.i18n,\n    };\n  }\n\n  private initAriaLive() {\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n  }\n\n  private initConditionManager() {\n    this.facetConditionsManager = buildInsightFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private initPopover() {\n    initializePopover(this.host, {\n      ...this.facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.activeValues.length,\n    });\n  }\n\n  private get isHidden() {\n    return !this.facet.state.enabled || !this.facet.state.values.length;\n  }\n\n  private get facetInfo(): FacetInfo {\n    return {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n  }\n\n  private registerFacet() {\n    this.bindings.store.registerFacet('facets', this.facetInfo);\n  }\n}\n"],"version":3}