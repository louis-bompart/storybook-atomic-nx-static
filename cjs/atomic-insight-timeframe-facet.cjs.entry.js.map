{"file":"atomic-insight-timeframe-facet.entry.cjs.js","mappings":"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","names":["TimeframeFacetCommon","buildInsightFacetConditionsManager","parseDependsOn","buildInsightDateRange","deserializeInsightRelativeDate","buildInsightSearchStatus","FocusTargetController","buildInsightDateFacet","buildInsightDateFilter","loadInsightDateFacetSetActions","h","FacetPlaceholder","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.pcss?tag=atomic-insight-timeframe-facet&encapsulation=shadow","src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\n","import {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  buildInsightDateFacet,\n  buildInsightDateFilter,\n  buildInsightDateRange,\n  buildInsightFacetConditionsManager,\n  buildInsightSearchStatus,\n  deserializeInsightRelativeDate,\n  InsightDateFacet,\n  InsightDateFacetState,\n  InsightDateFilter,\n  InsightDateFilterState,\n  InsightDateRangeRequest,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n  loadInsightDateFacetSetActions,\n  InsightRangeFacetSortCriterion,\n  InsightFacetValueRequest,\n  InsightCategoryFacetValueRequest,\n} from '..';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {MapProp} from '../../../utils/props-utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {TimeframeFacetCommon} from '../../common/facets/timeframe-facet-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-timeframe-facet',\n  styleUrl: './atomic-insight-timeframe-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightTimeframeFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetForDateRange?: InsightDateFacet;\n  public facetForDatePicker?: InsightDateFacet;\n\n  private timeframeFacetCommon?: TimeframeFacetCommon;\n  public filter?: InsightDateFilter;\n  public searchStatus!: InsightSearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facetForDateRange')\n  @State()\n  public facetState!: InsightDateFacetState;\n  @BindStateToController('facetForDatePicker')\n  @State()\n  public facetForDatePickerState?: InsightDateFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: InsightDateFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the atomic-breadbox component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field = 'date';\n  /**\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\n   */\n  @Prop({reflect: true}) public withDatePicker = false;\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-insight-timeframe-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-insight-timeframe-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-insight-timeframe-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-insight-timeframe-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\n    'descending';\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\n      facetId: this.facetId,\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      dependsOn: this.dependsOn,\n      withDatePicker: this.withDatePicker,\n      setFacetId: (id: string) => (this.facetId = id),\n      buildDependenciesManager: () =>\n        buildInsightFacetConditionsManager(this.bindings.engine, {\n          facetId:\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\n          conditions: parseDependsOn<\n            InsightFacetValueRequest | InsightCategoryFacetValueRequest\n          >(this.dependsOn),\n        }),\n      buildDateRange: buildInsightDateRange,\n      getSearchStatusState: () => this.searchStatusState,\n      deserializeRelativeDate: deserializeInsightRelativeDate,\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\n      initializeFacetForDateRange: (values: InsightDateRangeRequest[]) =>\n        this.initializeFacetForDateRange(values),\n      initializeFilter: () => this.initializeFilter(),\n      sortCriteria: this.sortCriteria,\n    });\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public disconnectedCallback() {\n    this.timeframeFacetCommon?.disconnectedCallback();\n  }\n\n  private initializeFacetForDatePicker() {\n    this.facetForDatePicker = buildInsightDateFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n    return this.facetForDatePicker;\n  }\n\n  private initializeFacetForDateRange(values: InsightDateRangeRequest[]) {\n    this.facetForDateRange = buildInsightDateFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        currentValues: values,\n        generateAutomaticRanges: false,\n        sortCriteria: 'descending',\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForDateRange;\n  }\n\n  private initializeFilter() {\n    this.filter = buildInsightDateFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n\n    return this.filter;\n  }\n\n  @Listen('atomic/dateInputApply')\n  public applyDateInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadInsightDateFacetSetActions(\n          this.bindings.engine\n        ).deselectAllDateFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    if (!this.timeframeFacetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={5}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.timeframeFacetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      headerFocus: this.focusTarget,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"version":3}