{"file":"atomic-facet.entry.esm.js","mappings":"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","names":["buildFacetConditionsManager"],"sources":["src/components/search/facets/atomic-facet/atomic-facet.pcss?tag=atomic-facet&encapsulation=shadow","src/components/search/facets/atomic-facet/atomic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n@import '../../../common/facets/facet-search/facet-search.pcss';\r\n@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\r\n@import '../../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\r\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\r\n","import {\r\n  Facet,\r\n  buildFacet,\r\n  FacetState,\r\n  FacetOptions,\r\n  FacetSortCriterion,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildSearchStatus,\r\n  buildFacetConditionsManager,\r\n  FacetResultsMustMatch,\r\n  FacetConditionsManager,\r\n  FacetValueRequest,\r\n  CategoryFacetValueRequest,\r\n} from '@coveo/headless';\r\nimport {\r\n  Component,\r\n  h,\r\n  State,\r\n  Prop,\r\n  Element,\r\n  VNode,\r\n  Fragment,\r\n} from '@stencil/core';\r\nimport {\r\n  AriaLiveRegion,\r\n  FocusTargetController,\r\n} from '../../../../utils/accessibility-utils';\r\nimport {getFieldCaptions} from '../../../../utils/field-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetGuard} from '../../../common/facets/facet-guard';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\r\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\r\nimport {FacetSearchInputGuard} from '../../../common/facets/facet-search/facet-search-input-guard';\r\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\r\nimport {\r\n  shouldDisplaySearchResults,\r\n  shouldUpdateFacetSearchComponent,\r\n} from '../../../common/facets/facet-search/facet-search-utils';\r\nimport {FacetSearchValue} from '../../../common/facets/facet-search/facet-search-value';\r\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\r\nimport {\r\n  FacetValueProps,\r\n  FacetValue,\r\n} from '../../../common/facets/facet-value/facet-value';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {initializePopover} from '../atomic-popover/popover-type';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\r\n * An `atomic-facet` displays a facet of the results for the current query.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part search-wrapper - The search box wrapper.\r\n * @part search-input - The search box input.\r\n * @part search-icon - The search box submit button.\r\n * @part search-clear-button - The button to clear the search box of input.\r\n * @part more-matches - The label indicating there are more matches for the current facet search query.\r\n * @part no-matches - The label indicating there are no matches for the current facet search query.\r\n * @part matches-query - The highlighted query inside the matches labels.\r\n * @part search-highlight - The highlighted query inside the facet values.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n * @part value-link - The facet value when display is 'link'.\r\n * @part value-link-selected - The selected facet value when display is 'link'.\r\n * @part value-box - The facet value when display is 'box'.\r\n * @part value-box-selected - The selected facet value when display is 'box'.\r\n * @part value-exclude-button - The button to exclude a facet value, available when display is 'checkbox'.\r\n *\r\n * @part show-more - The show more results button.\r\n * @part show-less - The show less results button.\r\n * @part show-more-less-icon - The icons of the show more & show less buttons.\r\n */\r\n@Component({\r\n  tag: 'atomic-facet',\r\n  styleUrl: 'atomic-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facet!: Facet;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: FacetState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of values to request for this facet.\r\n   * Also determines the number of additional values to request each time more values are shown.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n  /**\r\n   * Whether this facet should contain a search box.\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public withSearch = true;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\r\n  /**\r\n   * Specifies how a result must match the selected facet values.\r\n   * Allowed values:\r\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\r\n   * - `allValues`: A result will match if all corresponding facet values are selected.\r\n   */\r\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\r\n    'atLeastOneValue';\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\r\n   * Possible values are 'checkbox', 'link', and 'box'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\r\n    'checkbox';\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * Whether to allow excluding values from the facet.\r\n   */\r\n  @Prop({reflect: true}) public enableExclusion = false;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop() public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n  /**\r\n   * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.\r\n   *\r\n   * If you specify a list of values for this option, the facet uses only these values (if they are available in\r\n   * the current result set).\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\r\n   * current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use\r\n   * those other values.\r\n   *\r\n   * ```html\r\n   * <atomic-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-facet>\r\n   * ```\r\n   *\r\n   * The maximum amount of allowed values is 25.\r\n   *\r\n   * Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public allowedValues: string[] | string = '[]';\r\n\r\n  /**\r\n   * Identifies the facet values that must appear at the top, in this order.\r\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\r\n   *\r\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\r\n   *\r\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\r\n   *\r\n   * ```html\r\n   * <atomic-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-facet>\r\n   * ```\r\n   * The maximum amount of custom sort values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public customSort: string[] | string = '[]';\r\n\r\n  private showLessFocus?: FocusTargetController;\r\n  private showMoreFocus?: FocusTargetController;\r\n  private headerFocus?: FocusTargetController;\r\n  private facetConditionsManager?: FacetConditionsManager;\r\n\r\n  @AriaLiveRegion('facet-search')\r\n  protected facetSearchAriaMessage!: string;\r\n\r\n  public initialize() {\r\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\r\n    this.facetId = this.facet.state.facetId;\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.initAriaLive();\r\n    this.initConditionManager();\r\n    this.initPopover();\r\n    this.registerFacet();\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.facetConditionsManager?.stopWatching();\r\n  }\r\n\r\n  public componentShouldUpdate(\r\n    next: unknown,\r\n    prev: unknown,\r\n    propName: keyof AtomicFacet\r\n  ) {\r\n    if (\r\n      this.isFacetState(prev, propName) &&\r\n      this.isFacetState(next, propName)\r\n    ) {\r\n      return shouldUpdateFacetSearchComponent(\r\n        next.facetSearch,\r\n        prev.facetSearch\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <FacetGuard\r\n        enabled={this.facetState.enabled}\r\n        hasError={this.searchStatusState.hasError}\r\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\r\n        hasResults={this.facetState.values.length > 0}\r\n      >\r\n        {this.searchStatusState.firstSearchExecuted ? (\r\n          <FacetContainer>\r\n            <FacetHeader\r\n              i18n={this.bindings.i18n}\r\n              label={this.definedLabel}\r\n              onClearFilters={() => {\r\n                this.focusTargets.header.focusAfterSearch();\r\n                this.facet.deselectAll();\r\n              }}\r\n              numberOfActiveValues={this.activeValues.length}\r\n              isCollapsed={this.isCollapsed}\r\n              headingLevel={this.headingLevel}\r\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\r\n            ></FacetHeader>\r\n            {this.renderBody()}\r\n          </FacetContainer>\r\n        ) : (\r\n          <FacetPlaceholder\r\n            numberOfValues={this.numberOfValues}\r\n            isCollapsed={this.isCollapsed}\r\n          />\r\n        )}\r\n      </FacetGuard>\r\n    );\r\n  }\r\n\r\n  private renderBody() {\r\n    if (this.isCollapsed) {\r\n      return;\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <FacetSearchInputGuard\r\n          canShowMoreValues={this.facetState.canShowMoreValues}\r\n          numberOfDisplayedValues={this.facetState.values.length}\r\n          withSearch={this.withSearch}\r\n        >\r\n          <FacetSearchInput\r\n            i18n={this.bindings.i18n}\r\n            label={this.definedLabel}\r\n            onChange={(value) => {\r\n              if (value === '') {\r\n                this.facet.facetSearch.clear();\r\n                return;\r\n              }\r\n              this.facet.facetSearch.updateCaptions(\r\n                getFieldCaptions(this.field, this.bindings.i18n)\r\n              );\r\n              this.facet.facetSearch.updateText(value);\r\n              this.facet.facetSearch.search();\r\n            }}\r\n            onClear={() => this.facet.facetSearch.clear()}\r\n            query={this.facetState.facetSearch.query}\r\n          />\r\n        </FacetSearchInputGuard>\r\n        {shouldDisplaySearchResults(this.facetState.facetSearch)\r\n          ? [this.renderSearchResults(), this.renderMatches()]\r\n          : [this.renderValues(), this.renderShowMoreLess()]}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[], query?: string) {\r\n    const classes = `mt-3 ${\r\n      this.displayValuesAs === 'box' ? 'box-container' : ''\r\n    }`;\r\n    return (\r\n      <FacetValuesGroup\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        query={query}\r\n      >\r\n        <ul class={classes} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderSearchResults() {\r\n    return this.renderValuesContainer(\r\n      this.facet.state.facetSearch.values.map((value) => (\r\n        <FacetSearchValue\r\n          {...this.facetValueProps}\r\n          facetCount={value.count}\r\n          onExclude={() => this.facet.facetSearch.exclude(value)}\r\n          onSelect={() =>\r\n            this.displayValuesAs === 'link'\r\n              ? this.facet.facetSearch.singleSelect(value)\r\n              : this.facet.facetSearch.select(value)\r\n          }\r\n          facetValue={value.rawValue}\r\n        />\r\n      ))\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facet.state.values.map((value, i) => {\r\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\r\n        const shouldFocusOnShowMoreAfterInteraction =\r\n          i ===\r\n          (this.sortCriteria === 'automatic'\r\n            ? 0\r\n            : this.facet.state.values.length - this.numberOfValues);\r\n\r\n        return (\r\n          <FacetValue\r\n            {...this.facetValueProps}\r\n            facetCount={value.numberOfResults}\r\n            onExclude={() => this.facet.toggleExclude(value)}\r\n            onSelect={() =>\r\n              this.displayValuesAs === 'link'\r\n                ? this.facet.toggleSingleSelect(value)\r\n                : this.facet.toggleSelect(value)\r\n            }\r\n            facetValue={value.value}\r\n            facetState={value.state}\r\n            setRef={(btn) => {\r\n              if (shouldFocusOnShowLessAfterInteraction) {\r\n                this.showLessFocus?.setTarget(btn);\r\n              }\r\n              if (shouldFocusOnShowMoreAfterInteraction) {\r\n                this.showMoreFocus?.setTarget(btn);\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private renderShowMoreLess() {\r\n    return (\r\n      <FacetShowMoreLess\r\n        label={this.label}\r\n        i18n={this.bindings.i18n}\r\n        onShowMore={() => {\r\n          this.focusTargets.showMore.focusAfterSearch();\r\n          this.facet.showMoreValues();\r\n        }}\r\n        onShowLess={() => {\r\n          this.focusTargets.showLess.focusAfterSearch();\r\n          this.facet.showLessValues();\r\n        }}\r\n        canShowMoreValues={this.facet.state.canShowMoreValues}\r\n        canShowLessValues={this.facet.state.canShowLessValues}\r\n      ></FacetShowMoreLess>\r\n    );\r\n  }\r\n\r\n  private renderMatches() {\r\n    return (\r\n      <FacetSearchMatches\r\n        i18n={this.bindings.i18n}\r\n        query={this.facet.state.facetSearch.query}\r\n        numberOfMatches={this.facet.state.facetSearch.values.length}\r\n        hasMoreMatches={this.facet.state.facetSearch.moreValuesAvailable}\r\n      ></FacetSearchMatches>\r\n    );\r\n  }\r\n\r\n  private get activeValues() {\r\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\r\n  }\r\n\r\n  private get facetOptions(): FacetOptions {\r\n    return {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfValues,\r\n      sortCriteria: this.sortCriteria,\r\n      resultsMustMatch: this.resultsMustMatch,\r\n      facetSearch: {numberOfValues: this.numberOfValues},\r\n      filterFacetCount: this.filterFacetCount,\r\n      injectionDepth: this.injectionDepth,\r\n      allowedValues: this.allowedValues.length\r\n        ? [...this.allowedValues]\r\n        : undefined,\r\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\r\n    };\r\n  }\r\n\r\n  private get facetValueProps(): Pick<\r\n    FacetValueProps,\r\n    | 'displayValuesAs'\r\n    | 'facetSearchQuery'\r\n    | 'enableExclusion'\r\n    | 'field'\r\n    | 'i18n'\r\n  > {\r\n    return {\r\n      facetSearchQuery: this.facetState.facetSearch.query,\r\n      displayValuesAs: this.displayValuesAs,\r\n      enableExclusion: this.enableExclusion,\r\n      field: this.field,\r\n      i18n: this.bindings.i18n,\r\n    };\r\n  }\r\n\r\n  private get isHidden() {\r\n    return !this.facet.state.enabled || !this.facet.state.values.length;\r\n  }\r\n\r\n  private initConditionManager() {\r\n    this.facetConditionsManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private registerFacet() {\r\n    this.bindings.store.registerFacet('facets', this.facetInfo);\r\n  }\r\n\r\n  private initPopover() {\r\n    initializePopover(this.host, {\r\n      ...this.facetInfo,\r\n      hasValues: () => !!this.facet.state.values.length,\r\n      numberOfActiveValues: () => this.activeValues.length,\r\n    });\r\n  }\r\n\r\n  private initAriaLive() {\r\n    announceFacetSearchResultsWithAriaLive(\r\n      this.facet,\r\n      this.label,\r\n      (msg) => (this.facetSearchAriaMessage = msg),\r\n      this.bindings.i18n\r\n    );\r\n  }\r\n\r\n  private get facetInfo(): FacetInfo {\r\n    return {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n  }\r\n\r\n  private get definedLabel() {\r\n    return this.label === 'no-label' && this.facetState?.label\r\n      ? this.facetState.label\r\n      : this.label;\r\n  }\r\n\r\n  private get focusTargets(): {\r\n    showLess: FocusTargetController;\r\n    showMore: FocusTargetController;\r\n    header: FocusTargetController;\r\n  } {\r\n    if (!this.showLessFocus) {\r\n      this.showLessFocus = new FocusTargetController(this);\r\n    }\r\n    if (!this.showMoreFocus) {\r\n      this.showMoreFocus = new FocusTargetController(this);\r\n    }\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n\r\n    return {\r\n      showLess: this.showLessFocus,\r\n      showMore: this.showMoreFocus,\r\n      header: this.headerFocus,\r\n    };\r\n  }\r\n\r\n  private isFacetState(state: unknown, propName: string): state is FacetState {\r\n    return (\r\n      propName === 'facetState' &&\r\n      typeof (state as FacetState)?.facetId === 'string'\r\n    );\r\n  }\r\n}\r\n"],"version":3}