{"version":3,"names":["atomicSmartSnippetCss","AtomicSmartSnippetStyle0","AtomicSmartSnippet","this","id","randomID","headingLevel","maximumHeight","collapsedHeight","feedbackSent","onSelectInlineLink","event","smartSnippet","selectInlineLink","detail","onBeginDelayedSelectInlineLink","beginDelayedSelectInlineLink","onCancelPendingSelectInlineLink","cancelPendingSelectInlineLink","initialize","buildSmartSnippet","bindings","engine","smartSnippetCommon","SmartSnippetCommon","modalTagName","getSourceAnchorAttributes","getAttributesFromLinkSlot","host","getHost","getBindings","getModalRef","modalRef","getHeadingLevel","getCollapsedHeight","getMaximumHeight","getSmartSnippetState","smartSnippetState","getSmartSnippet","getSnippetStyle","snippetStyle","getFeedbackSent","getSnippetMaximumHeight","snippetMaximumHeight","undefined","getSnippetCollapsedHeight","snippetCollapsedHeight","setModalRef","bind","setFeedbackSent","store","waitUntilAppLoaded","hideDuringRender","ref","isSent","componentWillUpdate","liked","disliked","componentDidRender","isAppLoaded","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss?tag=atomic-smart-snippet&encapsulation=shadow","src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {\n  buildSmartSnippet,\n  InlineLink,\n  SmartSnippet,\n  SmartSnippetState,\n} from '@coveo/headless';\nimport {Component, Prop, State, Element, Listen} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {getAttributesFromLinkSlot} from '../../../common/item-link/attributes-slot';\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.\n *\n * You can style the snippet by inserting a template element as follows:\n * ```html\n * <atomic-smart-snippet>\n *   <template>\n *     <style>\n *       b {\n *         color: blue;\n *       }\n *     </style>\n *   </template>\n * </atomic-smart-snippet>\n * ```\n *\n * @slot source-anchor-attributes - Lets you pass [attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) down to anchor elements, overriding other attributes.\n * To be used exclusively in anchor elements, such as: `<a slot=\"source-anchor-attributes\" target=\"_blank\"></a>`.\n *\n * @part smart-snippet - The wrapper of the entire smart snippet.\n * @part question - The header displaying the question that is answered by the found document excerpt.\n * @part answer - The container displaying the full document excerpt.\n * @part truncated-answer - The container displaying only part of the answer.\n * @part show-more-button - The show more button.\n * @part show-less-button - The show less button.\n * @part body - The body of the smart snippet, containing the truncated answer and the show more or show less button.\n * @part footer - The footer underneath the answer.\n * @part source-url - The URL to the document the excerpt is from.\n * @part source-title - The title of the document the excerpt is from.\n * @part feedback-banner - The feedback banner underneath the source.\n * @part feedback-inquiry-and-buttons - A wrapper around the feedback inquiry and the feedback buttons.\n * @part feedback-inquiry - The message asking the end user to provide feedback on whether the excerpt was useful.\n * @part feedback-buttons - The wrapper around the buttons after the inquiry.\n * @part feedback-like-button - The button allowing the end user to signal that the excerpt was useful.\n * @part feedback-dislike-button - The button allowing the end user to signal that the excerpt wasn't useful.\n * @part feedback-thank-you-container - The wrapper around the 'thank you' message and feedback button.\n * @part feedback-thank-you - The message thanking the end user for providing feedback.\n * @part feedback-explain-why-button - The button a user can press to provide detailed feedback.\n */\n@Component({\n  tag: 'atomic-smart-snippet',\n  styleUrl: 'atomic-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicSmartSnippet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public smartSnippet!: SmartSnippet;\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: SmartSnippetState;\n  public error!: Error;\n  @Element() public host!: HTMLElement;\n  private id = randomID();\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n\n  private smartSnippetCommon!: SmartSnippetCommon;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  @State() feedbackSent = false;\n\n  @Prop({reflect: true}) public snippetMaximumHeight?: number;\n\n  @Prop({reflect: true}) public snippetCollapsedHeight?: number;\n\n  @Listen('selectInlineLink')\n  onSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.selectInlineLink(event.detail);\n  }\n\n  @Listen('beginDelayedSelectInlineLink')\n  onBeginDelayedSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.beginDelayedSelectInlineLink(event.detail);\n  }\n\n  @Listen('cancelPendingSelectInlineLink')\n  onCancelPendingSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.cancelPendingSelectInlineLink(event.detail);\n  }\n\n  public initialize() {\n    this.smartSnippet = buildSmartSnippet(this.bindings.engine);\n    this.smartSnippetCommon = new SmartSnippetCommon({\n      id: this.id,\n      modalTagName: 'atomic-smart-snippet-feedback-modal',\n      getSourceAnchorAttributes: () =>\n        getAttributesFromLinkSlot(this.host, 'source-anchor-attributes'),\n      getHost: () => this.host,\n      getBindings: () => this.bindings,\n      getModalRef: () => this.modalRef,\n      getHeadingLevel: () => this.headingLevel,\n      getCollapsedHeight: () => this.collapsedHeight,\n      getMaximumHeight: () => this.maximumHeight,\n      getSmartSnippetState: () => this.smartSnippetState,\n      getSmartSnippet: () => this.smartSnippet,\n      getSnippetStyle: () => this.snippetStyle,\n      getFeedbackSent: () => this.feedbackSent,\n      getSnippetMaximumHeight: this.snippetMaximumHeight\n        ? () => this.snippetMaximumHeight!\n        : undefined,\n      getSnippetCollapsedHeight: this.snippetCollapsedHeight\n        ? () => this.snippetCollapsedHeight!\n        : undefined,\n      setModalRef: this.setModalRef.bind(this),\n      setFeedbackSent: this.setFeedbackSent.bind(this),\n    });\n    this.bindings.store.waitUntilAppLoaded(() =>\n      this.smartSnippetCommon.hideDuringRender(false)\n    );\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public componentDidRender() {\n    if (this.bindings.store.isAppLoaded()) {\n      this.smartSnippetCommon.hideDuringRender(false);\n    }\n  }\n\n  public render() {\n    return this.smartSnippetCommon.render();\n  }\n}\n"],"mappings":"yYAAA,MAAMA,EAAwB,02wCAC9B,MAAAC,EAAeD,E,iXC4DFE,EAAkB,M,yBAQrBC,KAAAC,GAAKC,IAQiBF,KAAAG,aAAe,EAKtBH,KAAAI,cAAgB,IAIhBJ,KAAAK,gBAAkB,IAgBhCL,KAAAM,aAAe,M,mDAzBqB,E,mBAKN,I,qBAIE,I,8CAgBjB,M,0EAOxB,kBAAAC,CAAmBC,GACjBR,KAAKS,aAAaC,iBAAiBF,EAAMG,O,CAI3C,8BAAAC,CAA+BJ,GAC7BR,KAAKS,aAAaI,6BAA6BL,EAAMG,O,CAIvD,+BAAAG,CAAgCN,GAC9BR,KAAKS,aAAaM,8BAA8BP,EAAMG,O,CAGjD,UAAAK,GACLhB,KAAKS,aAAeQ,EAAkBjB,KAAKkB,SAASC,QACpDnB,KAAKoB,mBAAqB,IAAIC,EAAmB,CAC/CpB,GAAID,KAAKC,GACTqB,aAAc,sCACdC,0BAA2B,IACzBC,EAA0BxB,KAAKyB,KAAM,4BACvCC,QAAS,IAAM1B,KAAKyB,KACpBE,YAAa,IAAM3B,KAAKkB,SACxBU,YAAa,IAAM5B,KAAK6B,SACxBC,gBAAiB,IAAM9B,KAAKG,aAC5B4B,mBAAoB,IAAM/B,KAAKK,gBAC/B2B,iBAAkB,IAAMhC,KAAKI,cAC7B6B,qBAAsB,IAAMjC,KAAKkC,kBACjCC,gBAAiB,IAAMnC,KAAKS,aAC5B2B,gBAAiB,IAAMpC,KAAKqC,aAC5BC,gBAAiB,IAAMtC,KAAKM,aAC5BiC,wBAAyBvC,KAAKwC,qBAC1B,IAAMxC,KAAKwC,qBACXC,UACJC,0BAA2B1C,KAAK2C,uBAC5B,IAAM3C,KAAK2C,uBACXF,UACJG,YAAa5C,KAAK4C,YAAYC,KAAK7C,MACnC8C,gBAAiB9C,KAAK8C,gBAAgBD,KAAK7C,QAE7CA,KAAKkB,SAAS6B,MAAMC,oBAAmB,IACrChD,KAAKoB,mBAAmB6B,iBAAiB,Q,CAIrC,WAAAL,CAAYM,GAClBlD,KAAK6B,SAAWqB,C,CAGV,eAAAJ,CAAgBK,GACtBnD,KAAKM,aAAe6C,C,CAGf,mBAAAC,GACL,KAAMpD,KAAKkC,kBAAkBmB,OAASrD,KAAKkC,kBAAkBoB,UAAW,CACtEtD,KAAK8C,gBAAgB,M,EAIlB,kBAAAS,GACL,GAAIvD,KAAKkB,SAAS6B,MAAMS,cAAe,CACrCxD,KAAKoB,mBAAmB6B,iBAAiB,M,EAItC,MAAAQ,GACL,OAAOzD,KAAKoB,mBAAmBqC,Q,6BAjHJC,EAAA,CAA5BC,K,+BAIMD,EAAA,CAFNE,EAAsB,iB"}