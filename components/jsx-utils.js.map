{"file":"jsx-utils.js","mappings":";;MAUa,eAAe,GAA8C,CAAC,EACzE,QAAQ,EACR,GAAG,EACH,MAAM,EACN,KAAK,GACN;IACC,MAAM,mBAAmB,GAAG,QAAQ,CAAC;IACrC,MAAM,0BAA0B,GAAG,QAAQ,CAAC;IAC5C,MAAM,yBAAyB,GAAG,CAAC,QAAgB,KACjD,GAAG,mBAAmB,GAAG,0BAA0B,GAAG,QAAQ,GAAG,mBAAmB,EAAE,CAAC;IACzF,MAAM,uBAAuB,GAAG,CAAC,WAAmB,KAClD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAE/B,MAAM,eAAe,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK;QACpC,QAAQ;QACR,yBAAyB,CAAC,QAAQ,CAAC;KACpC,CAAC,CACH,CAAC;IACF,MAAM,+BAA+B,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;QAC3D,aAAa,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC;QACnC,KAAK;QACL,GAAG,eAAe;KACnB,CAAC,CAAC;IAEH,QACE,EAAC,QAAQ,QACN,+BAA+B;SAC7B,KAAK,CAAC,mBAAmB,CAAC;SAC1B,GAAG,CAAC,CAAC,IAAI,KACR,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC;UACvC,uBAAuB,CAAC,IAAI,CAAC;UAC7B,IAAI,CACT,CACM,EACX;AACJ;;;;","names":[],"sources":["src/utils/jsx-utils.tsx"],"sourcesContent":["import {Fragment, FunctionalComponent, h, VNode} from '@stencil/core';\nimport {AnyBindings} from '../components/common/interface/bindings';\n\nexport interface LocalizedStringProps {\n  bindings: AnyBindings;\n  key: string;\n  params: Record<string, VNode | string>;\n  count?: number;\n}\n\nexport const LocalizedString: FunctionalComponent<LocalizedStringProps> = ({\n  bindings,\n  key,\n  params,\n  count,\n}) => {\n  const delimitingCharacter = '\\u001d'; // Unicode group separator\n  const placeholderPrefixCharacter = '\\u001a'; // Unicode substitute character\n  const getPlaceholderForParamKey = (paramKey: string) =>\n    `${delimitingCharacter}${placeholderPrefixCharacter}${paramKey}${delimitingCharacter}`;\n  const getParamFromPlaceholder = (placeholder: string) =>\n    params[placeholder.slice(1)];\n\n  const placeholdersMap = Object.fromEntries(\n    Object.keys(params).map((paramKey) => [\n      paramKey,\n      getPlaceholderForParamKey(paramKey),\n    ])\n  );\n  const localizedStringWithPlaceholders = bindings.i18n.t(key, {\n    interpolation: {escapeValue: false},\n    count,\n    ...placeholdersMap,\n  });\n\n  return (\n    <Fragment>\n      {localizedStringWithPlaceholders\n        .split(delimitingCharacter)\n        .map((text) =>\n          text.startsWith(placeholderPrefixCharacter)\n            ? getParamFromPlaceholder(text)\n            : text\n        )}\n    </Fragment>\n  );\n};\n"],"version":3}