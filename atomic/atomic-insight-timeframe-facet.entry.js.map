{"file":"atomic-insight-timeframe-facet.entry.esm.js","mappings":"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","names":["buildInsightFacetConditionsManager","buildInsightDateRange","deserializeInsightRelativeDate","buildInsightSearchStatus","buildInsightDateFacet","buildInsightDateFilter","loadInsightDateFacetSetActions"],"sources":["src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.pcss?tag=atomic-insight-timeframe-facet&encapsulation=shadow","src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\r\n","import {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightDateFacet,\r\n  buildInsightDateFilter,\r\n  buildInsightDateRange,\r\n  buildInsightFacetConditionsManager,\r\n  buildInsightSearchStatus,\r\n  deserializeInsightRelativeDate,\r\n  InsightDateFacet,\r\n  InsightDateFacetState,\r\n  InsightDateFilter,\r\n  InsightDateFilterState,\r\n  InsightDateRangeRequest,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n  loadInsightDateFacetSetActions,\r\n  InsightRangeFacetSortCriterion,\r\n  InsightFacetValueRequest,\r\n  InsightCategoryFacetValueRequest,\r\n} from '..';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../common/facets/depends-on';\r\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {TimeframeFacetCommon} from '../../common/facets/timeframe-facet-common';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-timeframe-facet',\r\n  styleUrl: './atomic-insight-timeframe-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightTimeframeFacet\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public facetForDateRange?: InsightDateFacet;\r\n  public facetForDatePicker?: InsightDateFacet;\r\n\r\n  private timeframeFacetCommon?: TimeframeFacetCommon;\r\n  public filter?: InsightDateFilter;\r\n  public searchStatus!: InsightSearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facetForDateRange')\r\n  @State()\r\n  public facetState!: InsightDateFacetState;\r\n  @BindStateToController('facetForDatePicker')\r\n  @State()\r\n  public facetForDatePickerState?: InsightDateFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: InsightDateFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the atomic-breadbox component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field = 'date';\r\n  /**\r\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\r\n   */\r\n  @Prop({reflect: true}) public withDatePicker = false;\r\n  /**\r\n   * Specifies if the facet is collapsed.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-timeframe-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-insight-timeframe-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-timeframe-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-insight-timeframe-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\r\n    'descending';\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  public initialize() {\r\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\r\n      facetId: this.facetId,\r\n      host: this.host,\r\n      bindings: this.bindings,\r\n      label: this.label,\r\n      field: this.field,\r\n      headingLevel: this.headingLevel,\r\n      dependsOn: this.dependsOn,\r\n      withDatePicker: this.withDatePicker,\r\n      setFacetId: (id: string) => (this.facetId = id),\r\n      buildDependenciesManager: () =>\r\n        buildInsightFacetConditionsManager(this.bindings.engine, {\r\n          facetId:\r\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\r\n          conditions: parseDependsOn<\r\n            InsightFacetValueRequest | InsightCategoryFacetValueRequest\r\n          >(this.dependsOn),\r\n        }),\r\n      buildDateRange: buildInsightDateRange,\r\n      getSearchStatusState: () => this.searchStatusState,\r\n      deserializeRelativeDate: deserializeInsightRelativeDate,\r\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\r\n      initializeFacetForDateRange: (values: InsightDateRangeRequest[]) =>\r\n        this.initializeFacetForDateRange(values),\r\n      initializeFilter: () => this.initializeFilter(),\r\n      sortCriteria: this.sortCriteria,\r\n    });\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.timeframeFacetCommon?.disconnectedCallback();\r\n  }\r\n\r\n  private initializeFacetForDatePicker() {\r\n    this.facetForDatePicker = buildInsightDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input_range`,\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        field: this.field,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n    return this.facetForDatePicker;\r\n  }\r\n\r\n  private initializeFacetForDateRange(values: InsightDateRangeRequest[]) {\r\n    this.facetForDateRange = buildInsightDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        currentValues: values,\r\n        generateAutomaticRanges: false,\r\n        sortCriteria: 'descending',\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForDateRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    this.filter = buildInsightDateFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n\r\n    return this.filter;\r\n  }\r\n\r\n  @Listen('atomic/dateInputApply')\r\n  public applyDateInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadInsightDateFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllDateFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.timeframeFacetCommon) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={5}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n    return this.timeframeFacetCommon.render({\r\n      hasError: this.searchStatusState.hasError,\r\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\r\n      isCollapsed: this.isCollapsed,\r\n      headerFocus: this.focusTarget,\r\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\r\n    });\r\n  }\r\n}\r\n"],"version":3}