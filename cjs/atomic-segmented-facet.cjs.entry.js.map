{"file":"atomic-segmented-facet.entry.cjs.js","mappings":"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","names":["h","Button","buildSearchStatus","buildFacet","buildFacetConditionsManager","parseDependsOn","FacetValuesGroup","getFieldValueCaption","Hidden","InitializeBindings","BindStateToController","MapProp","ArrayProp"],"sources":["src/components/search/facets/facet-segmented-value/facet-segmented-value.tsx","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.pcss?tag=atomic-segmented-facet&encapsulation=shadow","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\nimport {Button} from '../../../common/button';\r\nimport {FacetValueProps} from '../../../common/facets/facet-common';\r\n\r\nexport const FacetSegmentedValue: FunctionalComponent<FacetValueProps> = (\r\n  props\r\n) => {\r\n  const compactCount = new Intl.NumberFormat(props.i18n.language, {\r\n    notation: 'compact',\r\n  }).format(props.numberOfResults);\r\n\r\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\r\n\r\n  const ariaLabel = props.i18n.t('facet-value', {\r\n    value: props.displayValue,\r\n    count: props.numberOfResults,\r\n  });\r\n\r\n  return (\r\n    <li key={props.displayValue}>\r\n      <Button\r\n        style=\"square-neutral\"\r\n        part={`value-box${props.isSelected ? ' value-box-selected' : ''}`}\r\n        onClick={() => props.onClick()}\r\n        class={`value-box flex box-border h-full items-center p-2 group ${\r\n          props.isSelected\r\n            ? 'selected border-primary shadow-inner-primary'\r\n            : 'hover:border-primary-light focus-visible:border-primary-light'\r\n        }`}\r\n        ariaPressed={props.isSelected.toString()}\r\n        ariaLabel={ariaLabel}\r\n      >\r\n        <span\r\n          title={props.displayValue}\r\n          part=\"value-label\"\r\n          class={`value-label truncate ${\r\n            props.isSelected\r\n              ? 'text-primary'\r\n              : 'group-hover:text-primary-light group-focus:text-primary'\r\n          }`}\r\n        >\r\n          {props.displayValue}\r\n        </span>\r\n        <span\r\n          title={count}\r\n          part=\"value-count\"\r\n          class={`value-box-count truncate pl-1 w-auto mt-0 text-sm ${\r\n            props.isSelected\r\n              ? 'text-primary'\r\n              : 'text-neutral-dark group-hover:text-primary-light group-focus:text-primary'\r\n          }`}\r\n        >\r\n          {props.i18n.t('between-parentheses', {\r\n            text: compactCount,\r\n          })}\r\n        </span>\r\n      </Button>\r\n    </li>\r\n  );\r\n};\r\n","@import '../../../common/facets/facet-common.pcss';\r\n@import '../facet-segmented-value/facet-segmented-value.pcss';\r\n","import {\r\n  buildFacet,\r\n  buildFacetConditionsManager,\r\n  buildSearchStatus,\r\n  CategoryFacetValueRequest,\r\n  Facet,\r\n  FacetConditionsManager,\r\n  FacetOptions,\r\n  FacetSortCriterion,\r\n  FacetState,\r\n  FacetValue,\r\n  FacetValueRequest,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n} from '@coveo/headless';\r\nimport {Component, h, Prop, State, VNode} from '@stencil/core';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {FacetSegmentedValue} from '../facet-segmented-value/facet-segmented-value';\r\n\r\n/**\r\n * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.\r\n * @part segmented-container - The container that holds the segmented facets.\r\n * @part label - The facet value label.\r\n * @part values - The facet values container.\r\n * @part value-box - The facet value.\r\n * @part value-box-selected - The selected facet value.\r\n * @part placeholder - The placeholder displayed when the facet is loading.\r\n */\r\n@Component({\r\n  tag: 'atomic-segmented-facet',\r\n  styleUrl: 'atomic-segmented-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSegmentedFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public searchStatus!: SearchStatus;\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: FacetState;\r\n  public facet!: Facet;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label?: string;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop() public injectionDepth = 1000;\r\n  /**\r\n   * The number of values to request for this facet.\r\n   * Also determines the number of additional values to request each time more values are shown.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 6;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-segmented-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-segmented-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-segmented-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-segmented-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-segmented-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n  /**\r\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\r\n   *\r\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\r\n   * the current result set).\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\r\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\r\n   * them.\r\n   *\r\n   * ```html\r\n   * <atomic-segmented-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-segmented-facet>\r\n   * ```\r\n   *\r\n   * The maximum amount of allowed values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public allowedValues: string[] | string = '[]';\r\n\r\n  /**\r\n   * Identifies the facet values that must appear at the top, in this order.\r\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\r\n   *\r\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\r\n   *\r\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\r\n   *\r\n   * ```html\r\n   * <atomic-segmented-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-segmented-facet>\r\n   * ```\r\n   * The maximum amount of custom sort values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public customSort: string[] | string = '[]';\r\n\r\n  private dependenciesManager!: FacetConditionsManager;\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n\r\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\r\n    this.facetId = this.facet.state.facetId;\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.dependenciesManager.stopWatching();\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[]) {\r\n    const classes = 'box-container flex h-10';\r\n    return (\r\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\r\n        <ul class={classes} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.field,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n    const isSelected = facetValue.state !== 'idle';\r\n\r\n    return (\r\n      <FacetSegmentedValue\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={isSelected}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n        searchQuery={this.facetState.facetSearch.query}\r\n      ></FacetSegmentedValue>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facetState.values.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private renderLabel() {\r\n    if (!this.label) {\r\n      return;\r\n    }\r\n    return (\r\n      <b class=\"mr-2\" part=\"label\">\r\n        {this.label}:\r\n      </b>\r\n    );\r\n  }\r\n\r\n  private get facetOptions(): FacetOptions {\r\n    return {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfValues,\r\n      sortCriteria: this.sortCriteria,\r\n      facetSearch: {numberOfValues: this.numberOfValues},\r\n      filterFacetCount: this.filterFacetCount,\r\n      injectionDepth: this.injectionDepth,\r\n      hasBreadcrumbs: false,\r\n      allowedValues: this.allowedValues.length\r\n        ? [...this.allowedValues]\r\n        : undefined,\r\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatus.state.hasError || !this.facet.state.enabled) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    if (!this.searchStatus.state.firstSearchExecuted) {\r\n      return (\r\n        <div\r\n          part=\"placeholder\"\r\n          aria-hidden\r\n          class=\"h-8 w-48 bg-neutral animate-pulse rounded\"\r\n        ></div>\r\n      );\r\n    }\r\n\r\n    if (!this.facetState.values.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        part=\"segmented-container\"\r\n        class=\"flex whitespace-nowrap h-10 items-center\"\r\n      >\r\n        {this.renderLabel()}\r\n        {this.renderValues()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}