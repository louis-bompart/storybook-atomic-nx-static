{"file":"atomic-result-template.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;MAqBa,oBAAoB;IAqB/B;;;;;;;;;QAPe,eAAU,GAA8B,EAAE,CAAC;QAErB,cAAS,GAA6B,EAAE,CAAC;QAEzC,iBAAY,GAC/C,EAAE,CAAC;;0BALkD,EAAE;QAQvD,IAAI,CAAC,oBAAoB,GAAG,IAAIA,yCAAoB,CAAC;YACnD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,CAAC,GAAG;gBACZ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;aAClB;YACD,YAAY,EAAE;gBACZ,oBAAoB;gBACpB,2BAA2B;gBAC3B,mCAAmC;aACpC;YACD,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;KACJ;IAEM,iBAAiB;QACtB,IAAI,CAAC,oBAAoB,CAAC,eAAe,GAAGC,wCAAmB,CAC7D,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,YAAY,CAClB,CAAC;KACH;;;;IAMM,MAAM,WAAW;QACtB,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3E;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5D;;;AArCoC;IAApCC,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;uDAAiD;AAEzC;IAApCA,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;0DACxB;;;;","names":["ResultTemplateCommon","makeMatchConditions","MapProp"],"sources":["src/components/search/result-templates/atomic-result-template/atomic-result-template.tsx"],"sourcesContent":["import {ResultTemplate, ResultTemplateCondition} from '@coveo/headless';\nimport {Component, Element, Prop, Method, State} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeMatchConditions,\n  ResultTemplateCommon,\n} from '../../../common/result-templates/result-template-common';\n\n/**\n * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.\n *\n * A `template` element must be the child of an `atomic-result-template`, and either an `atomic-result-list` or `atomic-folded-result-list` must be the parent of each `atomic-result-template`.\n *\n * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n */\n@Component({\n  tag: 'atomic-result-template',\n  shadow: true,\n})\nexport class AtomicResultTemplate {\n  private resultTemplateCommon: ResultTemplateCommon;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLDivElement;\n\n  /**\n   * A function that must return true on results for the result template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\n   */\n  @Prop() public conditions: ResultTemplateCondition[] = [];\n\n  @MapProp({splitValues: true}) public mustMatch: Record<string, string[]> = {};\n\n  @MapProp({splitValues: true}) public mustNotMatch: Record<string, string[]> =\n    {};\n\n  constructor() {\n    this.resultTemplateCommon = new ResultTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: [\n        'atomic-result-list',\n        'atomic-folded-result-list',\n        'atomic-search-box-instant-results',\n      ],\n      allowEmpty: true,\n    });\n  }\n\n  public componentWillLoad() {\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the appropriate result template based on conditions applied.\n   */\n  @Method()\n  public async getTemplate(): Promise<ResultTemplate<DocumentFragment> | null> {\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.resultTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"version":3}