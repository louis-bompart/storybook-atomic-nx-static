{"file":"atomic-commerce-sort-dropdown.entry.cjs.js","mappings":";;;;;;;;;;;;;AAAA,MAAM,6BAA6B,GAAG,6wuCAA6wuC,CAAC;AACpzuC,yCAAe,6BAA6B;;;;;;;;;;;;MCwC/B,0BAA0B;;;QAK7B,OAAE,GAAGA,cAAQ,CAAC,gCAAgC,CAAC,CAAC;;;;;IAgBjD,UAAU;QACf,IAAI,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,iBAAiB,EAAE;YAC7D,IAAI,CAAC,eAAe,GAAGC,eAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAClE;aAAM;YACL,IAAI,CAAC,eAAe,GAAGC,eAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;KACzC;IAEO,MAAM,CAAC,CAAQ;QACrB,MAAM,MAAM,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAsB,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KACrD;IAEO,QAAQ,CAAC,IAAmB;QAClC,IAAI,IAAI,CAAC,EAAE,KAAK,WAAW,EAAE;YAC3B,OAAO,WAAW,CAAC;SACpB;aAAM;YACL,OAAO,IAAI,CAAC,MAAM;iBACf,GAAG,CAAC,CAAC,WAAW;gBACf,OAAO,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC;aACpD,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC,CAAC;SACd;KACF;IAEM,MAAM;QACX,MAAM,EAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAChE,MAAM,EACJ,QAAQ,EAAE,EAAC,IAAI,EAAC,EAChB,EAAE,GACH,GAAG,IAAI,CAAC;QACT,QACEC,QAACC,gBAAS,qDACR,mBAAmB,EAAE,UAAU,KAAK,EAAE,EACtC,QAAQ,EAAE,KAAK,KAAK,IAAI,EACxB,UAAU,EACR,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,IAGjED,QAACE,oBAAa,uDACZF,QAACG,gBAAS,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAI,EACjCH,QAACI,iBAAU,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAChE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa;YAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC3C,QACEJ,QAACK,iBAAU,IACT,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAC7C,KAAK,EAAE,KAAK,GACZ,EACF;SACH,CAAC,CACS,CACC,CACN,EACZ;KACH;IAEO,cAAc,CAAC,KAAa;QAClC,MAAM,WAAW,GAAkC,EAAE,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa;YAClD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,GAAG,aAAa,CAAC;SAC3D,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;KAC3B;;;AArF4B;IAA5BC,sCAAkB,EAAE;4DAAoC;AASlD;IAFNC,yCAAqB,CAAC,MAAM,CAAC;6DAED;AAKrB;IAFPA,yCAAqB,CAAC,iBAAiB,CAAC;wEAEwB;;;;;","names":["randomID","buildProductListing","buildSearch","h","SortGuard","SortContainer","SortLabel","SortSelect","SortOption","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.pcss?tag=atomic-commerce-sort-dropdown&encapsulation=shadow","src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\nselect:hover + div,\r\nselect:focus-visible + div {\r\n  @apply border-primary-light text-primary-light;\r\n}\r\n","import {\r\n  Sort,\r\n  SortState,\r\n  Search,\r\n  ProductListing,\r\n  buildProductListing,\r\n  buildSearch,\r\n  SearchState,\r\n  ProductListingState,\r\n  SortCriterion,\r\n} from '@coveo/headless/commerce';\r\nimport {Component, h, State, Element} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {SortContainer} from '../../common/sort/container';\r\nimport {SortGuard} from '../../common/sort/guard';\r\nimport {SortLabel} from '../../common/sort/label';\r\nimport {SortOption} from '../../common/sort/option';\r\nimport {SortSelect} from '../../common/sort/select';\r\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\r\n\r\n/**\r\n * The `atomic-commerce-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting products.\r\n *\r\n * @part label - The \"Sort by\" label of the `<select>` element.\r\n * @part select-parent - The `<select>` element parent.\r\n * @part select - The `<select>` element of the dropdown list.\r\n * @part select-separator - The element separating the select from the icon.\r\n * @part placeholder - The dropdown placeholder for while the interface is initializing.\r\n *\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-commerce-sort-dropdown',\r\n  styleUrl: 'atomic-commerce-sort-dropdown.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicCommerceSortDropdown\r\n  implements InitializableComponent<CommerceBindings>\r\n{\r\n  @InitializeBindings() public bindings!: CommerceBindings;\r\n\r\n  private id = randomID('atomic-commerce-sort-dropdown-');\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  public sort!: Sort;\r\n  @BindStateToController('sort')\r\n  @State()\r\n  public sortState!: SortState;\r\n\r\n  public searchOrListing!: Search | ProductListing;\r\n  @BindStateToController('searchOrListing')\r\n  @State()\r\n  private searchOrListingState!: SearchState | ProductListingState;\r\n\r\n  @State() public error!: Error;\r\n\r\n  public initialize() {\r\n    if (this.bindings.interfaceElement.type === 'product-listing') {\r\n      this.searchOrListing = buildProductListing(this.bindings.engine);\r\n    } else {\r\n      this.searchOrListing = buildSearch(this.bindings.engine);\r\n    }\r\n    this.sort = this.searchOrListing.sort();\r\n  }\r\n\r\n  private select(e: Event) {\r\n    const select = e.composedPath()[0] as HTMLSelectElement;\r\n    this.sort.sortBy(this.getSortByLabel(select.value));\r\n  }\r\n\r\n  private getLabel(sort: SortCriterion) {\r\n    if (sort.by === 'relevance') {\r\n      return 'relevance';\r\n    } else {\r\n      return sort.fields\r\n        .map((sortByField) => {\r\n          return sortByField.displayName || sortByField.name;\r\n        })\r\n        .join(' ');\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const {error, responseId, products} = this.searchOrListingState;\r\n    const {\r\n      bindings: {i18n},\r\n      id,\r\n    } = this;\r\n    return (\r\n      <SortGuard\r\n        firstSearchExecuted={responseId !== ''}\r\n        hasError={error !== null}\r\n        hasResults={\r\n          products.length > 0 && this.sortState.availableSorts.length > 1\r\n        }\r\n      >\r\n        <SortContainer>\r\n          <SortLabel i18n={i18n} id={id} />\r\n          <SortSelect i18n={i18n} id={id} onSelect={(evt) => this.select(evt)}>\r\n            {this.sortState.availableSorts.map((availableSort) => {\r\n              const label = this.getLabel(availableSort);\r\n              return (\r\n                <SortOption\r\n                  i18n={i18n}\r\n                  label={label}\r\n                  selected={this.sort.isSortedBy(availableSort)}\r\n                  value={label}\r\n                />\r\n              );\r\n            })}\r\n          </SortSelect>\r\n        </SortContainer>\r\n      </SortGuard>\r\n    );\r\n  }\r\n\r\n  private getSortByLabel(label: string) {\r\n    const sortByLabel: Record<string, SortCriterion> = {};\r\n    this.sortState.availableSorts.forEach((availableSort) => {\r\n      sortByLabel[this.getLabel(availableSort)] = availableSort;\r\n    });\r\n\r\n    return sortByLabel[label];\r\n  }\r\n}\r\n"],"version":3}