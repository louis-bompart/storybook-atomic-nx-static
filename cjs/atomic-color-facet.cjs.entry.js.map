{"file":"atomic-color-facet.entry.cjs.js","mappings":"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","names":["randomID","h","createRipple","buildSearchStatus","buildFacet","announceFacetSearchResultsWithAriaLive","initializePopover","FocusTargetController","shouldUpdateFacetSearchComponent","buildFacetConditionsManager","parseDependsOn","FacetHeader","FacetSearchInput","getFieldCaptions","getFieldValueCaption","FacetValueLabelHighlight","FacetValueBox","FacetValuesGroup","FacetSearchMatches","FacetShowMoreLess","Hidden","FacetPlaceholder","FacetContainer","shouldDisplaySearchResults","InitializeBindings","BindStateToController","MapProp","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/facets/color-facet-checkbox/color-facet-checkbox.tsx","src/components/search/facets/atomic-color-facet/atomic-color-facet.pcss?tag=atomic-color-facet&encapsulation=shadow","src/components/search/facets/atomic-color-facet/atomic-color-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {createRipple} from '../../../../utils/ripple';\nimport {randomID} from '../../../../utils/utils';\nimport {FacetValueProps} from '../../../common/facets/facet-common';\n\nexport const ColorFacetCheckbox: FunctionalComponent<FacetValueProps> = (\n  props,\n  children\n) => {\n  const id = randomID('facet-value-');\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\n  const ariaLabel = props.i18n.t('facet-value', {\n    value: props.displayValue,\n    count: props.numberOfResults,\n  });\n  const partValue = props.displayValue\n    .match(new RegExp('-?[_a-zA-Z]+[_a-zA-Z0-9-]*'))\n    ?.toString();\n  let labelRef: HTMLLabelElement;\n\n  return (\n    <li key={props.displayValue} class=\"relative flex items-center\">\n      <button\n        id={id}\n        role=\"checkbox\"\n        part={`value-checkbox value-${partValue}${\n          props.isSelected ? ' value-checkbox-checked' : ''\n        }`}\n        onClick={() => props.onClick()}\n        onMouseDown={(e) =>\n          createRipple(e, {color: 'neutral', parent: labelRef})\n        }\n        aria-checked={props.isSelected.toString()}\n        class={`value-checkbox ${props.isSelected ? 'ring-primary' : ''}`}\n        aria-label={ariaLabel}\n      ></button>\n      <label\n        ref={(ref) => (labelRef = ref!)}\n        htmlFor={id}\n        part=\"value-checkbox-label\"\n        onMouseDown={(e) => createRipple(e, {color: 'neutral'})}\n      >\n        {children}\n        <span part=\"value-count\" class=\"value-count\">\n          {props.i18n.t('between-parentheses', {\n            text: count,\n          })}\n        </span>\n      </label>\n    </li>\n  );\n};\n","@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n@import '../color-facet-checkbox/color-facet-checkbox.pcss';\n\n/**\n * @prop --atomic-facet-color-boxes-per-row: Number of facet values for the Color Facet to display per row, when the display is 'box'\n * @prop --atomic-facet-color-boxes-gap: Gap value for facet values for the Color Facet , when the display is 'box'\n */\n.box-color-container {\n  @apply grid px-2;\n  grid-template-columns: repeat(var(--atomic-facet-color-boxes-per-row, 3), minmax(0, 1fr));\n  gap: var(--atomic-facet-color-boxes-gap, 0.5rem);\n}\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  FacetValue,\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  FacetResultsMustMatch,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {\n  getFieldCaptions,\n  getFieldValueCaption,\n} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\nimport {\n  shouldUpdateFacetSearchComponent,\n  shouldDisplaySearchResults,\n} from '../../../common/facets/facet-search/facet-search-utils';\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {FacetValueBox} from '../../../common/facets/facet-value-box/facet-value-box';\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\nimport {ColorFacetCheckbox} from '../color-facet-checkbox/color-facet-checkbox';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-color-facet` displays a facet of the results for the current query as colors.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n * @part default-color-value - The default part name used to customize color facet values. Should be defined before dynamic parts.\n * @part value-* - The dynamic part name used to customize a facet value. The `*` is a syntactical placeholder for a specific facet value. For example, if the component's `field` property is set to 'filetype' and your source has a `YouTubeVideo` file type, the part would be targeted like this: `atomic-color-facet::part(value-YouTubeVideo)...`.\n *\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-color-facet',\n  styleUrl: 'atomic-color-facet.pcss',\n  shadow: true,\n})\nexport class AtomicColorFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: Facet;\n  private dependenciesManager?: FacetConditionsManager;\n  private resultIndexToFocusOnShowMore = 0;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain a search box.\n   *\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'box' = 'box';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n  // @Prop() public customSort?: string; TODO: KIT-753 Add customSort option for facet\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-color-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-color-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-color-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-color-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\n   *\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\n   * them.\n   *\n   * ```html\n   * <atomic-color-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-color-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-color-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-color-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n\n  private showMoreFocus?: FocusTargetController;\n\n  private headerFocus?: FocusTargetController;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n    this.facetId = this.facet.state.facetId;\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n    this.bindings.store.registerFacet('facets', facetInfo);\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n    this.initializeDependenciesManager();\n  }\n\n  private get focusTargets() {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLessFocus: this.showLessFocus,\n      showMoreFocus: this.showMoreFocus,\n      headerFocus: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return (\n      this.searchStatusState.hasError ||\n      !this.facet.state.enabled ||\n      !this.facet.state.values.length\n    );\n  }\n\n  public componentShouldUpdate(\n    next: unknown,\n    prev: unknown,\n    propName: keyof AtomicColorFacet\n  ) {\n    if (propName === 'facetState' && prev && this.withSearch) {\n      return shouldUpdateFacetSearchComponent(\n        (next as FacetState).facetSearch,\n        (prev as FacetState).facetSearch\n      );\n    }\n\n    return true;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facetState.values.filter(({state}) => state === 'selected')\n      .length;\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTargets.headerFocus.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={this.headingLevel}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTargets.headerFocus.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderSearchInput() {\n    if (!this.withSearch) {\n      return;\n    }\n\n    return (\n      <FacetSearchInput\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={this.facetState.facetSearch.query}\n        onChange={(value) => {\n          if (value === '') {\n            this.facet.facetSearch.clear();\n            return;\n          }\n          this.facet.facetSearch.updateCaptions(\n            getFieldCaptions(this.field, this.bindings.i18n)\n          );\n          this.facet.facetSearch.updateText(value);\n          this.facet.facetSearch.search();\n        }}\n        onClear={() => this.facet.facetSearch.clear()}\n      ></FacetSearchInput>\n    );\n  }\n\n  private renderValue(\n    facetValue: FacetValue,\n    onClick: () => void,\n    isShowLessFocusTarget: boolean,\n    isShowMoreFocusTarget: boolean\n  ) {\n    const displayValue = getFieldValueCaption(\n      this.facetId!,\n      facetValue.value,\n      this.bindings.i18n\n    );\n    const isSelected = facetValue.state === 'selected';\n    const isExcluded = facetValue.state === 'excluded';\n    const partValueWithDisplayValue = displayValue.replace(/[^a-z0-9]/gi, '');\n    const partValueWithAPIValue = facetValue.value.replace(/[^a-z0-9]/gi, '');\n    switch (this.displayValuesAs) {\n      case 'checkbox':\n        return (\n          <ColorFacetCheckbox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n            searchQuery={this.facetState.facetSearch.query}\n            buttonRef={(element) => {\n              isShowLessFocusTarget &&\n                this.focusTargets.showLessFocus.setTarget(element);\n              isShowMoreFocusTarget &&\n                this.focusTargets.showMoreFocus.setTarget(element);\n            }}\n          >\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n              searchQuery={this.facetState.facetSearch.query}\n            ></FacetValueLabelHighlight>\n          </ColorFacetCheckbox>\n        );\n      case 'box':\n        return (\n          <FacetValueBox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n            searchQuery={this.facetState.facetSearch.query}\n            buttonRef={(element) => {\n              isShowLessFocusTarget &&\n                this.focusTargets.showLessFocus.setTarget(element);\n              isShowMoreFocusTarget &&\n                this.focusTargets.showMoreFocus.setTarget(element);\n            }}\n          >\n            <div\n              part={`value-${partValueWithDisplayValue} value-${partValueWithAPIValue} default-color-value`}\n              class=\"value-box-color w-full h-12 bg-neutral-dark rounded-md mb-2\"\n            ></div>\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n              isExcluded={isExcluded}\n              searchQuery={this.facetState.facetSearch.query}\n            ></FacetValueLabelHighlight>\n          </FacetValueBox>\n        );\n    }\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-color-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facetState.values.map((value, i) =>\n        this.renderValue(\n          value,\n          () => this.facet.toggleSelect(value),\n          i === 0,\n          i ===\n            (this.sortCriteria === 'automatic'\n              ? 0\n              : this.resultIndexToFocusOnShowMore)\n        )\n      )\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facetState.facetSearch.values.map((value) =>\n        this.renderValue(\n          {\n            state: 'idle',\n            numberOfResults: value.count,\n            value: value.rawValue,\n          },\n          () => this.facet.facetSearch.select(value),\n          false,\n          false\n        )\n      ),\n      this.facetState.facetSearch.query\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facetState.facetSearch.query}\n        numberOfMatches={this.facetState.facetSearch.values.length}\n        hasMoreMatches={this.facetState.facetSearch.moreValuesAvailable}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.resultIndexToFocusOnShowMore = this.facet.state.values.length;\n          this.focusTargets.showMoreFocus.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLessFocus.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowLessValues={this.facetState.canShowLessValues}\n        canShowMoreValues={this.facetState.canShowMoreValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      injectionDepth: this.injectionDepth,\n      filterFacetCount: this.filterFacetCount,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n\n  public render() {\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatusState.firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.facetState.values.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && [\n          this.renderSearchInput(),\n          shouldDisplaySearchResults(this.facetState.facetSearch)\n            ? [this.renderSearchResults(), this.renderMatches()]\n            : [this.renderValues(), this.renderShowMoreLess()],\n        ]}\n      </FacetContainer>\n    );\n  }\n}\n"],"version":3}