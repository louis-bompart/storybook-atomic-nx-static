{"file":"atomic-query-error.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;AAAA,MAAM,mBAAmB,GAAG,u+tCAAu+tC,CAAC;AACpguC,+BAAe,mBAAmB;;;;;;;;;;;;MCiCrB,gBAAgB;;;QAQlB,iBAAY,GAAG,KAAK,CAAC;;;4BAAN,KAAK;;IAKtB,UAAU;QACf,IAAI,CAAC,UAAU,GAAGA,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzD;IAEM,MAAM;QACX,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,eAAe,CAAC;QAC/C,MAAM,EACJ,QAAQ,EAAE,EACR,IAAI,EACJ,MAAM,EAAE,EACN,KAAK,EAAE,EACL,aAAa,EAAE,EAAC,cAAc,EAAE,WAAW,EAAC,GAC7C,GACF,GACF,GACF,GAAG,IAAI,CAAC;QACT,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,WAAW,GAAGC,iCAA2B,CAC5C,IAAI,EACJ,cAAc,EACd,WAAW,EACX,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CACZ,CAAC;SACH;QACD,QACEC,QAACC,qBAAe,qDAAC,QAAQ,EAAE,QAAQ,IACjCD,QAACE,yBAAmB,uDAClBF,QAACG,oBAAc,qDAAC,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAI,EAC1CH,QAACI,qBAAe,qDACd,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EACV,cAAc,EAAE,cAAc,GAC9B,EACFJ,QAACK,2BAAqB,qDACpB,IAAI,EAAE,IAAI,EACV,cAAc,EAAE,cAAc,EAC9B,GAAG,EAAE,WAAW,EAChB,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GACtB,EACFL,QAACM,wBAAkB,qDACjB,IAAI,EAAEN,QAACO,oBAAc,IAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAI,EAC5D,UAAU,EAAE,OAAO,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,EAC1D,IAAI,EAAE,IAAI,GACV,EACFP,QAACQ,uBAAiB,qDAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,GAAI,CACxC,CACN,EAClB;KACH;;AA5D4B;IAA5BC,sCAAkB,EAAE;kDAA4B;AAKzC;IAFPC,yCAAqB,CAAC,YAAY,CAAC;yDAEM;AAKhC;IADTC,iCAAc,CAAC,aAAa,CAAC;qDACC;;;;;","names":["buildQueryError","getAriaMessageFromErrorType","h","QueryErrorGuard","QueryErrorContainer","QueryErrorIcon","QueryErrorTitle","QueryErrorDescription","QueryErrorShowMore","QueryErrorLink","QueryErrorDetails","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/search/atomic-query-error/atomic-query-error.pcss?tag=atomic-query-error&encapsulation=shadow","src/components/search/atomic-query-error/atomic-query-error.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n","import {QueryError, QueryErrorState, buildQueryError} from '@coveo/headless';\r\nimport {Component, h, State} from '@stencil/core';\r\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {QueryErrorContainer} from '../../common/query-error/container';\r\nimport {QueryErrorDescription} from '../../common/query-error/description';\r\nimport {QueryErrorDetails} from '../../common/query-error/details';\r\nimport {QueryErrorGuard} from '../../common/query-error/guard';\r\nimport {QueryErrorIcon} from '../../common/query-error/icon';\r\nimport {QueryErrorLink} from '../../common/query-error/link';\r\nimport {QueryErrorShowMore} from '../../common/query-error/show-more';\r\nimport {QueryErrorTitle} from '../../common/query-error/title';\r\nimport {getAriaMessageFromErrorType} from '../../common/query-error/utils';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.\r\n *\r\n * @part icon - The svg related to the error.\r\n * @part title - The title of the error.\r\n * @part description - A description of the error.\r\n * @part doc-link - A link to the relevant documentation.\r\n * @part more-info-btn - A button to request additional error information.\r\n * @part error-info - Additional error information.\r\n */\r\n@Component({\r\n  tag: 'atomic-query-error',\r\n  styleUrl: 'atomic-query-error.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicQueryError implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public queryError!: QueryError;\r\n\r\n  @BindStateToController('queryError')\r\n  @State()\r\n  private queryErrorState!: QueryErrorState;\r\n  @State() public error!: Error;\r\n  @State() showMoreInfo = false;\r\n\r\n  @AriaLiveRegion('query-error')\r\n  protected ariaMessage!: string;\r\n\r\n  public initialize() {\r\n    this.queryError = buildQueryError(this.bindings.engine);\r\n  }\r\n\r\n  public render() {\r\n    const {hasError, error} = this.queryErrorState;\r\n    const {\r\n      bindings: {\r\n        i18n,\r\n        engine: {\r\n          state: {\r\n            configuration: {organizationId, platformUrl},\r\n          },\r\n        },\r\n      },\r\n    } = this;\r\n    if (hasError) {\r\n      this.ariaMessage = getAriaMessageFromErrorType(\r\n        i18n,\r\n        organizationId,\r\n        platformUrl,\r\n        error?.type\r\n      );\r\n    }\r\n    return (\r\n      <QueryErrorGuard hasError={hasError}>\r\n        <QueryErrorContainer>\r\n          <QueryErrorIcon errorType={error?.type} />\r\n          <QueryErrorTitle\r\n            errorType={error?.type}\r\n            i18n={i18n}\r\n            organizationId={organizationId}\r\n          />\r\n          <QueryErrorDescription\r\n            i18n={i18n}\r\n            organizationId={organizationId}\r\n            url={platformUrl}\r\n            errorType={error?.type}\r\n          />\r\n          <QueryErrorShowMore\r\n            link={<QueryErrorLink i18n={i18n} errorType={error?.type} />}\r\n            onShowMore={() => (this.showMoreInfo = !this.showMoreInfo)}\r\n            i18n={i18n}\r\n          />\r\n          <QueryErrorDetails error={error} show={this.showMoreInfo} />\r\n        </QueryErrorContainer>\r\n      </QueryErrorGuard>\r\n    );\r\n  }\r\n}\r\n"],"version":3}