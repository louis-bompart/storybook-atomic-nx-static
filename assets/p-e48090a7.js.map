{"version":3,"names":["buildDebouncedQueue","options","actions","intervalId","dequeueAction","action","shift","execute","clearInterval","cancelActionIfQueued","id","filter","enqueue","uniqueId","push","setInterval","delay","clear","debounce","wait","timer","args","clearTimeout","Promise","resolve","setTimeout"],"sources":["src/utils/debounce-utils.tsx"],"sourcesContent":["export interface DebouncedQueueOptions {\r\n  delay: number;\r\n}\r\n\r\nexport interface DebouncedQueue {\r\n  enqueue(execute: () => void, uniqueId?: string): void;\r\n  clear(): void;\r\n  cancelActionIfQueued(id: string): void;\r\n}\r\n\r\ninterface QueuedAction {\r\n  id?: string;\r\n  execute: () => void;\r\n}\r\n\r\nexport function buildDebouncedQueue(\r\n  options: DebouncedQueueOptions\r\n): DebouncedQueue {\r\n  let actions: QueuedAction[] = [];\r\n  let intervalId: ReturnType<typeof setInterval> | null = null;\r\n\r\n  function dequeueAction() {\r\n    const action = actions.shift();\r\n    if (action) {\r\n      action.execute();\r\n    } else {\r\n      clearInterval(intervalId!);\r\n      intervalId = null;\r\n    }\r\n  }\r\n\r\n  function cancelActionIfQueued(id: string) {\r\n    actions = actions.filter((action) => action.id !== id);\r\n  }\r\n\r\n  return {\r\n    enqueue(execute: () => void, uniqueId?: string) {\r\n      if (uniqueId) {\r\n        cancelActionIfQueued(uniqueId);\r\n      }\r\n      actions.push({id: uniqueId, execute});\r\n      if (intervalId === null) {\r\n        dequeueAction();\r\n        intervalId = setInterval(dequeueAction, options.delay);\r\n      }\r\n    },\r\n    clear() {\r\n      actions = [];\r\n    },\r\n    cancelActionIfQueued,\r\n  };\r\n}\r\n\r\nexport function debounce<\r\n  ExecuteParameters extends unknown[],\r\n  ExecuteReturnType,\r\n>(\r\n  execute: (\r\n    ...args: ExecuteParameters\r\n  ) => Promise<ExecuteReturnType> | ExecuteReturnType,\r\n  wait: number\r\n) {\r\n  let timer: ReturnType<typeof setTimeout>;\r\n\r\n  return (...args: ExecuteParameters): Promise<ExecuteReturnType> => {\r\n    clearTimeout(timer);\r\n    return new Promise((resolve) => {\r\n      timer = setTimeout(() => resolve(execute(...args)), wait);\r\n    });\r\n  };\r\n}\r\n"],"mappings":"SAegBA,EACdC,GAEA,IAAIC,EAA0B,GAC9B,IAAIC,EAAoD,KAExD,SAASC,IACP,MAAMC,EAASH,EAAQI,QACvB,GAAID,EAAQ,CACVA,EAAOE,S,KACF,CACLC,cAAcL,GACdA,EAAa,I,EAIjB,SAASM,EAAqBC,GAC5BR,EAAUA,EAAQS,QAAQN,GAAWA,EAAOK,KAAOA,G,CAGrD,MAAO,CACL,OAAAE,CAAQL,EAAqBM,GAC3B,GAAIA,EAAU,CACZJ,EAAqBI,E,CAEvBX,EAAQY,KAAK,CAACJ,GAAIG,EAAUN,YAC5B,GAAIJ,IAAe,KAAM,CACvBC,IACAD,EAAaY,YAAYX,EAAeH,EAAQe,M,GAGpD,KAAAC,GACEf,EAAU,E,EAEZO,uBAEJ,C,SAEgBS,EAIdX,EAGAY,GAEA,IAAIC,EAEJ,MAAO,IAAIC,KACTC,aAAaF,GACb,OAAO,IAAIG,SAASC,IAClBJ,EAAQK,YAAW,IAAMD,EAAQjB,KAAWc,KAAQF,EAAK,GACzD,CAEN,Q"}