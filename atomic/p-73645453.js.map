{"version":3,"names":["formatHumanReadable","manualRanges","field","i18n","facetValue","logger","formatter","manualRangeLabel","_a","find","range","areRangesEqual","label","getFieldValueCaption","t","start","formatNumberLocalized","end","value","languages","error","firstRange","secondRange","endInclusive","NumericFacetValueLink","props","displayValuesAs","onClick","displayValue","isSelected","state","h","FacetValueCheckbox","numberOfResults","FacetValueLabelHighlight","FacetValueLink","NumericFacetValuesContainer","children","FacetValuesGroup","class","part"],"sources":["src/components/common/facets/numeric-facet/formatter.ts","src/components/common/facets/numeric-facet/value-link.tsx","src/components/common/facets/numeric-facet/values-container.tsx"],"sourcesContent":["import {i18n} from 'i18next';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {NumberFormatter} from '../../formats/format-common';\n\nexport interface FacetValueRange {\n  endInclusive: boolean;\n  start: number;\n  end: number;\n  label?: string;\n  state: 'selected' | 'idle' | 'excluded';\n}\n\nexport interface FormatFacetValueRange {\n  field: string;\n  facetValue: FacetValueRange & {numberOfResults: number};\n  manualRanges: FacetValueRange[];\n  i18n: i18n;\n  logger: Pick<Console, 'error'>;\n  formatter: NumberFormatter;\n}\n\nexport const formatHumanReadable = ({\n  manualRanges,\n  field,\n  i18n,\n  facetValue,\n  logger,\n  formatter,\n}: FormatFacetValueRange) => {\n  const manualRangeLabel = manualRanges.find((range) =>\n    areRangesEqual(range, facetValue)\n  )?.label;\n  return manualRangeLabel\n    ? getFieldValueCaption(field, manualRangeLabel, i18n)\n    : i18n.t('to', {\n        start: formatNumberLocalized(facetValue.start, i18n, logger, formatter),\n        end: formatNumberLocalized(facetValue.end, i18n, logger, formatter),\n      });\n};\n\nexport const formatNumberLocalized = (\n  value: number,\n  i18n: FormatFacetValueRange['i18n'],\n  logger: FormatFacetValueRange['logger'],\n  formatter: FormatFacetValueRange['formatter']\n) => {\n  try {\n    return formatter(value, i18n.languages as string[]);\n  } catch (error) {\n    logger.error(\n      `atomic-numeric-facet facet value \"${value}\" could not be formatted correctly.`,\n      error\n    );\n    return value;\n  }\n};\n\nconst areRangesEqual = (\n  firstRange: FacetValueRange,\n  secondRange: FacetValueRange\n) => {\n  return (\n    firstRange.start === secondRange.start &&\n    firstRange.end === secondRange.end &&\n    firstRange.endInclusive === secondRange.endInclusive\n  );\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {FacetValueCheckbox} from '../facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLabelHighlight} from '../facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValueLink} from '../facet-value-link/facet-value-link';\nimport {FormatFacetValueRange, formatHumanReadable} from './formatter';\n\ninterface NumericFacetValueLinkProps extends FormatFacetValueRange {\n  onClick: () => void;\n  logger: Pick<Console, 'error'>;\n  displayValuesAs: 'checkbox' | 'link';\n}\n\nexport const NumericFacetValueLink: FunctionalComponent<\n  NumericFacetValueLinkProps\n> = (props) => {\n  const {facetValue, displayValuesAs, i18n, onClick} = props;\n  const displayValue = formatHumanReadable(props);\n  const isSelected = facetValue.state === 'selected';\n  switch (displayValuesAs) {\n    case 'checkbox':\n      return (\n        <FacetValueCheckbox\n          displayValue={displayValue}\n          numberOfResults={facetValue.numberOfResults}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={() => onClick()}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n          ></FacetValueLabelHighlight>\n        </FacetValueCheckbox>\n      );\n    case 'link':\n      return (\n        <FacetValueLink\n          displayValue={displayValue}\n          numberOfResults={facetValue.numberOfResults}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onClick}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n          ></FacetValueLabelHighlight>\n        </FacetValueLink>\n      );\n  }\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport {FacetValuesGroup} from '../facet-values-group/facet-values-group';\n\ninterface NumericFacetValuesContainerProps {\n  i18n: i18n;\n  label: string;\n}\nexport const NumericFacetValuesContainer: FunctionalComponent<\n  NumericFacetValuesContainerProps\n> = ({i18n, label}, children) => {\n  return (\n    <FacetValuesGroup i18n={i18n} label={label}>\n      <ul class=\"mt-3\" part=\"values\">\n        {children}\n      </ul>\n    </FacetValuesGroup>\n  );\n};\n"],"mappings":"8NAqBaA,EAAsB,EACjCC,eACAC,QACAC,OACAC,aACAC,SACAC,gB,MAEA,MAAMC,GAAmBC,EAAAP,EAAaQ,MAAMC,GAC1CC,EAAeD,EAAON,QACvB,MAAAI,SAAA,SAAAA,EAAEI,MACH,OAAOL,EACHM,EAAqBX,EAAOK,EAAkBJ,GAC9CA,EAAKW,EAAE,KAAM,CACXC,MAAOC,EAAsBZ,EAAWW,MAAOZ,EAAME,EAAQC,GAC7DW,IAAKD,EAAsBZ,EAAWa,IAAKd,EAAME,EAAQC,IACzD,EAGD,MAAMU,EAAwB,CACnCE,EACAf,EACAE,EACAC,KAEA,IACE,OAAOA,EAAUY,EAAOf,EAAKgB,U,CAC7B,MAAOC,GACPf,EAAOe,MACL,qCAAqCF,uCACrCE,GAEF,OAAOF,C,GAIX,MAAMP,EAAiB,CACrBU,EACAC,IAGED,EAAWN,QAAUO,EAAYP,OACjCM,EAAWJ,MAAQK,EAAYL,KAC/BI,EAAWE,eAAiBD,EAAYC,a,MCpD/BC,EAERC,IACH,MAAMrB,WAACA,EAAUsB,gBAAEA,EAAevB,KAAEA,EAAIwB,QAAEA,GAAWF,EACrD,MAAMG,EAAe5B,EAAoByB,GACzC,MAAMI,EAAazB,EAAW0B,QAAU,WACxC,OAAQJ,GACN,IAAK,WACH,OACEK,EAACC,EAAkB,CACjBJ,aAAcA,EACdK,gBAAiB7B,EAAW6B,gBAC5BJ,WAAYA,EACZ1B,KAAMA,EACNwB,QAAS,IAAMA,KAEfI,EAACG,EAAwB,CACvBN,aAAcA,EACdC,WAAYA,KAIpB,IAAK,OACH,OACEE,EAACI,EAAc,CACbP,aAAcA,EACdK,gBAAiB7B,EAAW6B,gBAC5BJ,WAAYA,EACZ1B,KAAMA,EACNwB,QAASA,GAETI,EAACG,EAAwB,CACvBN,aAAcA,EACdC,WAAYA,K,QCrCXO,EAET,EAAEjC,OAAMS,SAAQyB,IAEhBN,EAACO,EAAgB,CAACnC,KAAMA,EAAMS,MAAOA,GACnCmB,EAAA,MAAIQ,MAAM,OAAOC,KAAK,UACnBH,W"}