{"file":"atomic-insight-result-list.entry.cjs.js","mappings":"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","names":["randomID","buildInsightResultList","buildInsightResultsPerPage","ItemTemplateProvider","ItemListCommon","FocusTargetController","h","ItemListGuard","DisplayWrapper","ResultsPlaceholdersGuard","ItemDisplayGuard","getItemListDisplayClasses","buildInsightInteractiveResult","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.pcss?tag=atomic-insight-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../styles/list-display.pcss';\r\n","import {Component, h, Element, State, Prop, Method} from '@stencil/core';\r\nimport {\r\n  InsightResultList,\r\n  InsightResultListState,\r\n  buildInsightResultList,\r\n  InsightResult,\r\n  buildInsightInteractiveResult,\r\n  buildInsightResultsPerPage,\r\n  InsightResultsPerPage,\r\n  InsightResultsPerPageState,\r\n} from '../..';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  getItemListDisplayClasses,\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n} from '../../../common/layout/display-options';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result-list',\r\n  styleUrl: 'atomic-insight-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightResultList\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public resultList!: InsightResultList;\r\n  public resultsPerPage!: InsightResultsPerPage;\r\n  private loadingFlag = randomID('firstInsightResultLoaded-');\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private display: ItemDisplayLayout = 'list';\r\n  private itemListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  public resultsPerPageState!: InsightResultsPerPageState;\r\n  @BindStateToController('resultList')\r\n  @State()\r\n  public resultListState!: InsightResultListState;\r\n  @State() private templateHasError = false;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   *\r\n   * @param resultRenderingFunction\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  public initialize() {\r\n    this.resultList = buildInsightResultList(this.bindings.engine, {\r\n      options: {\r\n        fieldsToInclude: this.bindings.store.state.fieldsToInclude || undefined,\r\n      },\r\n    });\r\n    this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\r\n\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-insight-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.itemListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\r\n      getIsLoading: () => this.resultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  public get focusTarget(): FocusTargetController {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  public render() {\r\n    this.itemListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n        hasItems={this.resultListState.hasResults}\r\n        hasError={this.resultListState.hasError}\r\n      >\r\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\r\n          <ResultsPlaceholdersGuard\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n            display={this.display}\r\n            density={this.density}\r\n            imageSize={this.imageSize}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\r\n            hasItems={this.resultListState.hasResults}\r\n          >\r\n            {this.resultListState.results.map((result, i) => {\r\n              const atomicInsightResultProps =\r\n                this.getPropsForAtomicInsightResult(result);\r\n              return (\r\n                <atomic-insight-result\r\n                  {...atomicInsightResultProps}\r\n                  part=\"outline\"\r\n                  ref={(element) =>\r\n                    element && this.itemListCommon.setNewResultRef(element, i)\r\n                  }\r\n                ></atomic-insight-result>\r\n              );\r\n            })}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.resultListState.firstSearchExecuted &&\r\n        this.resultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicInsightResult(result: InsightResult) {\r\n    return {\r\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.itemListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.resultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      imageSize: this.imageSize,\r\n      display: this.display,\r\n    };\r\n  }\r\n}\r\n"],"version":3}