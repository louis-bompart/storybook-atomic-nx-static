{"file":"atomic-color-facet.js","mappings":"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","names":["AtomicColorFacet","buildSearchStatus","buildFacet","buildFacetConditionsManager"],"sources":["src/components/search/facets/color-facet-checkbox/color-facet-checkbox.tsx","src/components/search/facets/atomic-color-facet/atomic-color-facet.pcss?tag=atomic-color-facet&encapsulation=shadow","src/components/search/facets/atomic-color-facet/atomic-color-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\nimport {createRipple} from '../../../../utils/ripple';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {FacetValueProps} from '../../../common/facets/facet-common';\r\n\r\nexport const ColorFacetCheckbox: FunctionalComponent<FacetValueProps> = (\r\n  props,\r\n  children\r\n) => {\r\n  const id = randomID('facet-value-');\r\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\r\n  const ariaLabel = props.i18n.t('facet-value', {\r\n    value: props.displayValue,\r\n    count: props.numberOfResults,\r\n  });\r\n  const partValue = props.displayValue\r\n    .match(new RegExp('-?[_a-zA-Z]+[_a-zA-Z0-9-]*'))\r\n    ?.toString();\r\n  let labelRef: HTMLLabelElement;\r\n\r\n  return (\r\n    <li key={props.displayValue} class=\"relative flex items-center\">\r\n      <button\r\n        id={id}\r\n        role=\"checkbox\"\r\n        part={`value-checkbox value-${partValue}${\r\n          props.isSelected ? ' value-checkbox-checked' : ''\r\n        }`}\r\n        onClick={() => props.onClick()}\r\n        onMouseDown={(e) =>\r\n          createRipple(e, {color: 'neutral', parent: labelRef})\r\n        }\r\n        aria-checked={props.isSelected.toString()}\r\n        class={`value-checkbox ${props.isSelected ? 'ring-primary' : ''}`}\r\n        aria-label={ariaLabel}\r\n      ></button>\r\n      <label\r\n        ref={(ref) => (labelRef = ref!)}\r\n        htmlFor={id}\r\n        part=\"value-checkbox-label\"\r\n        onMouseDown={(e) => createRipple(e, {color: 'neutral'})}\r\n      >\r\n        {children}\r\n        <span part=\"value-count\" class=\"value-count\">\r\n          {props.i18n.t('between-parentheses', {\r\n            text: count,\r\n          })}\r\n        </span>\r\n      </label>\r\n    </li>\r\n  );\r\n};\r\n","@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-search/facet-search.pcss';\r\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\r\n@import '../color-facet-checkbox/color-facet-checkbox.pcss';\r\n\r\n/**\r\n * @prop --atomic-facet-color-boxes-per-row: Number of facet values for the Color Facet to display per row, when the display is 'box'\r\n * @prop --atomic-facet-color-boxes-gap: Gap value for facet values for the Color Facet , when the display is 'box'\r\n */\r\n.box-color-container {\r\n  @apply grid px-2;\r\n  grid-template-columns: repeat(var(--atomic-facet-color-boxes-per-row, 3), minmax(0, 1fr));\r\n  gap: var(--atomic-facet-color-boxes-gap, 0.5rem);\r\n}\r\n","import {\r\n  Facet,\r\n  buildFacet,\r\n  FacetState,\r\n  FacetOptions,\r\n  FacetSortCriterion,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildSearchStatus,\r\n  FacetValue,\r\n  buildFacetConditionsManager,\r\n  FacetConditionsManager,\r\n  FacetResultsMustMatch,\r\n  FacetValueRequest,\r\n  CategoryFacetValueRequest,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\r\nimport {\r\n  AriaLiveRegion,\r\n  FocusTargetController,\r\n} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  getFieldCaptions,\r\n  getFieldValueCaption,\r\n} from '../../../../utils/field-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\r\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\r\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\r\nimport {\r\n  shouldUpdateFacetSearchComponent,\r\n  shouldDisplaySearchResults,\r\n} from '../../../common/facets/facet-search/facet-search-utils';\r\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\r\nimport {FacetValueBox} from '../../../common/facets/facet-value-box/facet-value-box';\r\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {initializePopover} from '../atomic-popover/popover-type';\r\nimport {ColorFacetCheckbox} from '../color-facet-checkbox/color-facet-checkbox';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\r\n * An `atomic-color-facet` displays a facet of the results for the current query as colors.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part search-wrapper - The search box wrapper.\r\n * @part search-input - The search box input.\r\n * @part search-icon - The search box submit button.\r\n * @part search-clear-button - The button to clear the search box of input.\r\n * @part more-matches - The label indicating there are more matches for the current facet search query.\r\n * @part no-matches - The label indicating there are no matches for the current facet search query.\r\n * @part matches-query - The highlighted query inside the matches labels.\r\n * @part search-highlight - The highlighted query inside the facet values.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n * @part default-color-value - The default part name used to customize color facet values. Should be defined before dynamic parts.\r\n * @part value-* - The dynamic part name used to customize a facet value. The `*` is a syntactical placeholder for a specific facet value. For example, if the component's `field` property is set to 'filetype' and your source has a `YouTubeVideo` file type, the part would be targeted like this: `atomic-color-facet::part(value-YouTubeVideo)...`.\r\n *\r\n * @part value-box - The facet value when display is 'box'.\r\n * @part value-box-selected - The selected facet value when display is 'box'.\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n *\r\n * @part show-more - The show more results button.\r\n * @part show-less - The show less results button.\r\n * @part show-more-less-icon - The icons of the show more & show less buttons.\r\n */\r\n@Component({\r\n  tag: 'atomic-color-facet',\r\n  styleUrl: 'atomic-color-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicColorFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facet!: Facet;\r\n  private dependenciesManager?: FacetConditionsManager;\r\n  private resultIndexToFocusOnShowMore = 0;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: FacetState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of values to request for this facet.\r\n   * Also determines the number of additional values to request each time more values are shown.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n  /**\r\n   * Whether this facet should contain a search box.\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public withSearch = true;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\r\n  /**\r\n   * Specifies how a result must match the selected facet values.\r\n   * Allowed values:\r\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\r\n   * - `allValues`: A result will match if all corresponding facet values are selected.\r\n   */\r\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\r\n    'atLeastOneValue';\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection).\r\n   * Possible values are 'checkbox', and 'box'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'box' = 'box';\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n  // @Prop() public customSort?: string; TODO: KIT-753 Add customSort option for facet\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-color-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-color-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-color-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-color-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  /**\r\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\r\n   *\r\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\r\n   * the current result set).\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\r\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\r\n   * them.\r\n   *\r\n   * ```html\r\n   * <atomic-color-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-color-facet>\r\n   * ```\r\n   *\r\n   * The maximum amount of allowed values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public allowedValues: string[] | string = '[]';\r\n\r\n  /**\r\n   * Identifies the facet values that must appear at the top, in this order.\r\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\r\n   *\r\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\r\n   *\r\n   * Example:\r\n   *\r\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\r\n   *\r\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\r\n   *\r\n   * ```html\r\n   * <atomic-color-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-color-facet>\r\n   * ```\r\n   * The maximum amount of custom sort values is 25.\r\n   *\r\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public customSort: string[] | string = '[]';\r\n\r\n  private showLessFocus?: FocusTargetController;\r\n\r\n  private showMoreFocus?: FocusTargetController;\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  @AriaLiveRegion('facet-search')\r\n  protected facetSearchAriaMessage!: string;\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\r\n    announceFacetSearchResultsWithAriaLive(\r\n      this.facet,\r\n      this.label,\r\n      (msg) => (this.facetSearchAriaMessage = msg),\r\n      this.bindings.i18n\r\n    );\r\n    this.facetId = this.facet.state.facetId;\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n    this.bindings.store.registerFacet('facets', facetInfo);\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => !!this.facet.state.values.length,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n    this.initializeDependenciesManager();\r\n  }\r\n\r\n  private get focusTargets() {\r\n    if (!this.showLessFocus) {\r\n      this.showLessFocus = new FocusTargetController(this);\r\n    }\r\n    if (!this.showMoreFocus) {\r\n      this.showMoreFocus = new FocusTargetController(this);\r\n    }\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n\r\n    return {\r\n      showLessFocus: this.showLessFocus,\r\n      showMoreFocus: this.showMoreFocus,\r\n      headerFocus: this.headerFocus,\r\n    };\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    if (this.host.isConnected) {\r\n      return;\r\n    }\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private get isHidden() {\r\n    return (\r\n      this.searchStatusState.hasError ||\r\n      !this.facet.state.enabled ||\r\n      !this.facet.state.values.length\r\n    );\r\n  }\r\n\r\n  public componentShouldUpdate(\r\n    next: unknown,\r\n    prev: unknown,\r\n    propName: keyof AtomicColorFacet\r\n  ) {\r\n    if (propName === 'facetState' && prev && this.withSearch) {\r\n      return shouldUpdateFacetSearchComponent(\r\n        (next as FacetState).facetSearch,\r\n        (prev as FacetState).facetSearch\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facetState.values.filter(({state}) => state === 'selected')\r\n      .length;\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTargets.headerFocus.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={this.headingLevel}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTargets.headerFocus.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  private renderSearchInput() {\r\n    if (!this.withSearch) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <FacetSearchInput\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        query={this.facetState.facetSearch.query}\r\n        onChange={(value) => {\r\n          if (value === '') {\r\n            this.facet.facetSearch.clear();\r\n            return;\r\n          }\r\n          this.facet.facetSearch.updateCaptions(\r\n            getFieldCaptions(this.field, this.bindings.i18n)\r\n          );\r\n          this.facet.facetSearch.updateText(value);\r\n          this.facet.facetSearch.search();\r\n        }}\r\n        onClear={() => this.facet.facetSearch.clear()}\r\n      ></FacetSearchInput>\r\n    );\r\n  }\r\n\r\n  private renderValue(\r\n    facetValue: FacetValue,\r\n    onClick: () => void,\r\n    isShowLessFocusTarget: boolean,\r\n    isShowMoreFocusTarget: boolean\r\n  ) {\r\n    const displayValue = getFieldValueCaption(\r\n      this.facetId!,\r\n      facetValue.value,\r\n      this.bindings.i18n\r\n    );\r\n    const isSelected = facetValue.state === 'selected';\r\n    const isExcluded = facetValue.state === 'excluded';\r\n    const partValueWithDisplayValue = displayValue.replace(/[^a-z0-9]/gi, '');\r\n    const partValueWithAPIValue = facetValue.value.replace(/[^a-z0-9]/gi, '');\r\n    switch (this.displayValuesAs) {\r\n      case 'checkbox':\r\n        return (\r\n          <ColorFacetCheckbox\r\n            displayValue={displayValue}\r\n            numberOfResults={facetValue.numberOfResults}\r\n            isSelected={isSelected}\r\n            i18n={this.bindings.i18n}\r\n            onClick={onClick}\r\n            searchQuery={this.facetState.facetSearch.query}\r\n            buttonRef={(element) => {\r\n              isShowLessFocusTarget &&\r\n                this.focusTargets.showLessFocus.setTarget(element);\r\n              isShowMoreFocusTarget &&\r\n                this.focusTargets.showMoreFocus.setTarget(element);\r\n            }}\r\n          >\r\n            <FacetValueLabelHighlight\r\n              displayValue={displayValue}\r\n              isSelected={isSelected}\r\n              searchQuery={this.facetState.facetSearch.query}\r\n            ></FacetValueLabelHighlight>\r\n          </ColorFacetCheckbox>\r\n        );\r\n      case 'box':\r\n        return (\r\n          <FacetValueBox\r\n            displayValue={displayValue}\r\n            numberOfResults={facetValue.numberOfResults}\r\n            isSelected={isSelected}\r\n            i18n={this.bindings.i18n}\r\n            onClick={onClick}\r\n            searchQuery={this.facetState.facetSearch.query}\r\n            buttonRef={(element) => {\r\n              isShowLessFocusTarget &&\r\n                this.focusTargets.showLessFocus.setTarget(element);\r\n              isShowMoreFocusTarget &&\r\n                this.focusTargets.showMoreFocus.setTarget(element);\r\n            }}\r\n          >\r\n            <div\r\n              part={`value-${partValueWithDisplayValue} value-${partValueWithAPIValue} default-color-value`}\r\n              class=\"value-box-color w-full h-12 bg-neutral-dark rounded-md mb-2\"\r\n            ></div>\r\n            <FacetValueLabelHighlight\r\n              displayValue={displayValue}\r\n              isSelected={isSelected}\r\n              isExcluded={isExcluded}\r\n              searchQuery={this.facetState.facetSearch.query}\r\n            ></FacetValueLabelHighlight>\r\n          </FacetValueBox>\r\n        );\r\n    }\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[], query?: string) {\r\n    const classes = `mt-3 ${\r\n      this.displayValuesAs === 'box' ? 'box-color-container' : ''\r\n    }`;\r\n    return (\r\n      <FacetValuesGroup\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        query={query}\r\n      >\r\n        <ul class={classes} part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.facetState.values.map((value, i) =>\r\n        this.renderValue(\r\n          value,\r\n          () => this.facet.toggleSelect(value),\r\n          i === 0,\r\n          i ===\r\n            (this.sortCriteria === 'automatic'\r\n              ? 0\r\n              : this.resultIndexToFocusOnShowMore)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  private renderSearchResults() {\r\n    return this.renderValuesContainer(\r\n      this.facetState.facetSearch.values.map((value) =>\r\n        this.renderValue(\r\n          {\r\n            state: 'idle',\r\n            numberOfResults: value.count,\r\n            value: value.rawValue,\r\n          },\r\n          () => this.facet.facetSearch.select(value),\r\n          false,\r\n          false\r\n        )\r\n      ),\r\n      this.facetState.facetSearch.query\r\n    );\r\n  }\r\n\r\n  private renderMatches() {\r\n    return (\r\n      <FacetSearchMatches\r\n        i18n={this.bindings.i18n}\r\n        query={this.facetState.facetSearch.query}\r\n        numberOfMatches={this.facetState.facetSearch.values.length}\r\n        hasMoreMatches={this.facetState.facetSearch.moreValuesAvailable}\r\n      ></FacetSearchMatches>\r\n    );\r\n  }\r\n\r\n  private renderShowMoreLess() {\r\n    return (\r\n      <FacetShowMoreLess\r\n        label={this.label}\r\n        i18n={this.bindings.i18n}\r\n        onShowMore={() => {\r\n          this.resultIndexToFocusOnShowMore = this.facet.state.values.length;\r\n          this.focusTargets.showMoreFocus.focusAfterSearch();\r\n          this.facet.showMoreValues();\r\n        }}\r\n        onShowLess={() => {\r\n          this.focusTargets.showLessFocus.focusAfterSearch();\r\n          this.facet.showLessValues();\r\n        }}\r\n        canShowLessValues={this.facetState.canShowLessValues}\r\n        canShowMoreValues={this.facetState.canShowMoreValues}\r\n      ></FacetShowMoreLess>\r\n    );\r\n  }\r\n\r\n  private get facetOptions(): FacetOptions {\r\n    return {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfValues,\r\n      sortCriteria: this.sortCriteria,\r\n      resultsMustMatch: this.resultsMustMatch,\r\n      facetSearch: {numberOfValues: this.numberOfValues},\r\n      injectionDepth: this.injectionDepth,\r\n      filterFacetCount: this.filterFacetCount,\r\n      allowedValues: this.allowedValues.length\r\n        ? [...this.allowedValues]\r\n        : undefined,\r\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    if (!this.searchStatusState.firstSearchExecuted) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfValues}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n\r\n    if (!this.facetState.values.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && [\r\n          this.renderSearchInput(),\r\n          shouldDisplaySearchResults(this.facetState.facetSearch)\r\n            ? [this.renderSearchResults(), this.renderMatches()]\r\n            : [this.renderValues(), this.renderShowMoreLess()],\r\n        ]}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n"],"version":3}