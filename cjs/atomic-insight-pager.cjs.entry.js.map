{"file":"atomic-insight-pager.entry.cjs.js","mappings":"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","names":["randomID","buildInsightSearchStatus","buildInsightPager","FocusTargetController","h","PagerNavigation","PagerPreviousButton","ArrowLeftIcon","PagerPageButtons","PagerPageButton","PagerNextButton","ArrowRightIcon","InitializeBindings","BindStateToController"],"sources":["src/components/insight/atomic-insight-pager/atomic-insight-pager.pcss?tag=atomic-insight-pager&encapsulation=shadow","src/components/insight/atomic-insight-pager/atomic-insight-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\n[part='page-button'] {\r\n  @apply bg-transparent;\r\n}\r\n\r\n:host {\r\n  background: var(--atomic-neutral-light);\r\n  height: 100%;\r\n  padding: 1rem 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n","import {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightPager,\r\n  buildInsightSearchStatus,\r\n  InsightPager,\r\n  InsightPagerState,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n} from '../';\r\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\r\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {\r\n  PagerNextButton,\r\n  PagerPageButton,\r\n  PagerPageButtons,\r\n  PagerPreviousButton,\r\n} from '../../common/pager/pager-buttons';\r\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-pager',\r\n  styleUrl: 'atomic-insight-pager.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightPager\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public pager!: InsightPager;\r\n  public searchStatus!: InsightSearchStatus;\r\n\r\n  @BindStateToController('pager')\r\n  @State()\r\n  public pagerState!: InsightPagerState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() error!: Error;\r\n\r\n  @Event({\r\n    eventName: 'atomic/scrollToTop',\r\n  })\r\n  private scrollToTopEvent!: EventEmitter;\r\n\r\n  /**\r\n   * Specifies how many page buttons to display in the pager.\r\n   */\r\n  @Prop({reflect: true}) numberOfPages = 5;\r\n\r\n  private activePage?: FocusTargetController;\r\n  private radioGroupName = randomID('atomic-insight-pager-');\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n    this.pager = buildInsightPager(this.bindings.engine, {\r\n      options: {numberOfPages: this.numberOfPages},\r\n    });\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.activePage) {\r\n      this.activePage = new FocusTargetController(this);\r\n    }\r\n\r\n    return this.activePage;\r\n  }\r\n\r\n  private async focusOnFirstResultAndScrollToTop() {\r\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\r\n    this.scrollToTopEvent.emit();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <PagerNavigation label={this.bindings.i18n.t('pagination')}>\r\n        <PagerPreviousButton\r\n          icon={ArrowLeftIcon}\r\n          disabled={!this.pagerState.hasPreviousPage}\r\n          ariaLabel={this.bindings.i18n.t('previous')}\r\n          onClick={() => {\r\n            this.pager.previousPage();\r\n            this.focusOnFirstResultAndScrollToTop();\r\n          }}\r\n        />\r\n        <PagerPageButtons>\r\n          {this.pagerState.currentPages.map((pageNumber) => {\r\n            return (\r\n              <PagerPageButton\r\n                isSelected={this.pager.isCurrentPage(pageNumber)}\r\n                ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\r\n                onChecked={() => {\r\n                  this.pager.selectPage(pageNumber);\r\n                  this.focusOnFirstResultAndScrollToTop();\r\n                }}\r\n                page={pageNumber}\r\n                groupName={this.radioGroupName}\r\n                ref={(el) => {\r\n                  const isSelected = this.pager.isCurrentPage(pageNumber);\r\n                  if (isSelected && el) {\r\n                    this.focusTarget.setTarget(el);\r\n                  }\r\n                }}\r\n                text={pageNumber.toLocaleString(this.bindings.i18n.language)}\r\n              />\r\n            );\r\n          })}\r\n        </PagerPageButtons>\r\n        <PagerNextButton\r\n          icon={ArrowRightIcon}\r\n          disabled={!this.pagerState.hasNextPage}\r\n          ariaLabel={this.bindings.i18n.t('next')}\r\n          onClick={() => {\r\n            this.pager.nextPage();\r\n            this.focusOnFirstResultAndScrollToTop();\r\n          }}\r\n        />\r\n      </PagerNavigation>\r\n    );\r\n  }\r\n}\r\n"],"version":3}