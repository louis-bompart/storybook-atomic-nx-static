{"file":"radio-button-f3d98433.js","mappings":";;;;MAuBa,WAAW,GAA0C,CAAC,KAAK;;IACtE,MAAM,UAAU,GAAG,CAAC,WAAW,CAAC,CAAC;IACjC,IAAI,WAES,CAAC;IACd,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,MAAM,WAAW,GAAG,4BAA4B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9D,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzD,WAAW,GAAG,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,EAAE,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC;KAC5D;IACD,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC7B;IACD,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,MAAM,UAAU,GAAG;QACjB,IAAI,EAAE,KAAK,CAAC,SAAS;QACrB,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;QAC3B,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,YAAY,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,KAAK,CAAC,IAAI;QAC3C,cAAc,EAAE,KAAK,CAAC,WAAW;QACjC,KAAK,EAAE,KAAK,CAAC,IAAI;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;KACf,CAAC;IAEF,QACE,aACE,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE,CAAC,CAAC,eACV,OAAC,CAAC,CAAC,aAAkC,CAAC,OAAO,KAAI,MAAA,KAAK,CAAC,SAAS,qDAAI,CAAA,CAAA,EAAA,EAEtE,WAAW,EAAE,WAAW,KACpB,UAAU,GACd,EACF;AACJ;;;;","names":[],"sources":["src/components/common/radio-button.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\r\nimport {JSXBase} from '@stencil/core/internal';\r\nimport {createRipple} from '../../utils/ripple';\r\nimport {\r\n  ButtonStyle,\r\n  getClassNameForButtonStyle,\r\n  getRippleColorForButtonStyle,\r\n} from './button-style';\r\n\r\nexport interface RadioButtonProps {\r\n  groupName: string;\r\n  onChecked?(): void;\r\n  style?: ButtonStyle;\r\n  key?: string | number;\r\n  checked?: boolean;\r\n  class?: string;\r\n  text?: string;\r\n  part?: string;\r\n  ariaLabel?: string;\r\n  ariaCurrent?: string;\r\n  ref?(element?: HTMLInputElement): void;\r\n}\r\n\r\nexport const RadioButton: FunctionalComponent<RadioButtonProps> = (props) => {\r\n  const classNames = ['btn-radio'];\r\n  let onMouseDown:\r\n    | JSXBase.DOMAttributes<HTMLInputElement>['onMouseDown']\r\n    | undefined;\r\n  if (props.style) {\r\n    const rippleColor = getRippleColorForButtonStyle(props.style);\r\n    classNames.push(getClassNameForButtonStyle(props.style));\r\n\r\n    onMouseDown = (e) => createRipple(e, {color: rippleColor});\r\n  }\r\n  if (props.checked) {\r\n    classNames.push('selected');\r\n  }\r\n  if (props.class) {\r\n    classNames.push(props.class);\r\n  }\r\n\r\n  const attributes = {\r\n    name: props.groupName,\r\n    key: props.key,\r\n    checked: props.checked,\r\n    class: classNames.join(' '),\r\n    part: props.part,\r\n    'aria-label': props.ariaLabel ?? props.text,\r\n    'aria-current': props.ariaCurrent,\r\n    value: props.text,\r\n    ref: props.ref,\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"radio\"\r\n      onChange={(e) =>\r\n        (e.currentTarget as HTMLInputElement).checked && props.onChecked?.()\r\n      }\r\n      onMouseDown={onMouseDown}\r\n      {...attributes}\r\n    />\r\n  );\r\n};\r\n"],"version":3}