{"version":3,"names":["atomicInsightPagerCss","AtomicInsightPagerStyle0","AtomicInsightPager","this","numberOfPages","radioGroupName","randomID","initialize","searchStatus","buildInsightSearchStatus","bindings","engine","pager","buildInsightPager","options","focusTarget","activePage","FocusTargetController","focusOnFirstResultAndScrollToTop","_a","store","state","resultList","focusOnFirstResultAfterNextSearch","scrollToTopEvent","emit","render","h","PagerNavigation","key","label","i18n","t","PagerPreviousButton","icon","ArrowLeftIcon","disabled","pagerState","hasPreviousPage","ariaLabel","onClick","previousPage","PagerPageButtons","currentPages","map","pageNumber","PagerPageButton","isSelected","isCurrentPage","onChecked","selectPage","page","groupName","ref","el","setTarget","text","toLocaleString","language","PagerNextButton","ArrowRightIcon","hasNextPage","nextPage","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/atomic-insight-pager/atomic-insight-pager.pcss?tag=atomic-insight-pager&encapsulation=shadow","src/components/insight/atomic-insight-pager/atomic-insight-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\n[part='page-button'] {\r\n  @apply bg-transparent;\r\n}\r\n\r\n:host {\r\n  background: var(--atomic-neutral-light);\r\n  height: 100%;\r\n  padding: 1rem 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n","import {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightPager,\r\n  buildInsightSearchStatus,\r\n  InsightPager,\r\n  InsightPagerState,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n} from '../';\r\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\r\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {\r\n  PagerNextButton,\r\n  PagerPageButton,\r\n  PagerPageButtons,\r\n  PagerPreviousButton,\r\n} from '../../common/pager/pager-buttons';\r\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-pager',\r\n  styleUrl: 'atomic-insight-pager.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightPager\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public pager!: InsightPager;\r\n  public searchStatus!: InsightSearchStatus;\r\n\r\n  @BindStateToController('pager')\r\n  @State()\r\n  public pagerState!: InsightPagerState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() error!: Error;\r\n\r\n  @Event({\r\n    eventName: 'atomic/scrollToTop',\r\n  })\r\n  private scrollToTopEvent!: EventEmitter;\r\n\r\n  /**\r\n   * Specifies how many page buttons to display in the pager.\r\n   */\r\n  @Prop({reflect: true}) numberOfPages = 5;\r\n\r\n  private activePage?: FocusTargetController;\r\n  private radioGroupName = randomID('atomic-insight-pager-');\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n    this.pager = buildInsightPager(this.bindings.engine, {\r\n      options: {numberOfPages: this.numberOfPages},\r\n    });\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.activePage) {\r\n      this.activePage = new FocusTargetController(this);\r\n    }\r\n\r\n    return this.activePage;\r\n  }\r\n\r\n  private async focusOnFirstResultAndScrollToTop() {\r\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\r\n    this.scrollToTopEvent.emit();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <PagerNavigation label={this.bindings.i18n.t('pagination')}>\r\n        <PagerPreviousButton\r\n          icon={ArrowLeftIcon}\r\n          disabled={!this.pagerState.hasPreviousPage}\r\n          ariaLabel={this.bindings.i18n.t('previous')}\r\n          onClick={() => {\r\n            this.pager.previousPage();\r\n            this.focusOnFirstResultAndScrollToTop();\r\n          }}\r\n        />\r\n        <PagerPageButtons>\r\n          {this.pagerState.currentPages.map((pageNumber) => {\r\n            return (\r\n              <PagerPageButton\r\n                isSelected={this.pager.isCurrentPage(pageNumber)}\r\n                ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\r\n                onChecked={() => {\r\n                  this.pager.selectPage(pageNumber);\r\n                  this.focusOnFirstResultAndScrollToTop();\r\n                }}\r\n                page={pageNumber}\r\n                groupName={this.radioGroupName}\r\n                ref={(el) => {\r\n                  const isSelected = this.pager.isCurrentPage(pageNumber);\r\n                  if (isSelected && el) {\r\n                    this.focusTarget.setTarget(el);\r\n                  }\r\n                }}\r\n                text={pageNumber.toLocaleString(this.bindings.i18n.language)}\r\n              />\r\n            );\r\n          })}\r\n        </PagerPageButtons>\r\n        <PagerNextButton\r\n          icon={ArrowRightIcon}\r\n          disabled={!this.pagerState.hasNextPage}\r\n          ariaLabel={this.bindings.i18n.t('next')}\r\n          onClick={() => {\r\n            this.pager.nextPage();\r\n            this.focusOnFirstResultAndScrollToTop();\r\n          }}\r\n        />\r\n      </PagerNavigation>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"meAAA,MAAMA,EAAwB,8puCAC9B,MAAAC,EAAeD,E,iXCkCFE,EAAkB,M,8EAuBNC,KAAAC,cAAgB,EAG/BD,KAAAE,eAAiBC,EAAS,yB,mGAHK,C,CAKhC,UAAAC,GACLJ,KAAKK,aAAeC,EAAyBN,KAAKO,SAASC,QAC3DR,KAAKS,MAAQC,EAAkBV,KAAKO,SAASC,OAAQ,CACnDG,QAAS,CAACV,cAAeD,KAAKC,gB,CAIlC,eAAYW,GACV,IAAKZ,KAAKa,WAAY,CACpBb,KAAKa,WAAa,IAAIC,EAAsBd,K,CAG9C,OAAOA,KAAKa,U,CAGN,sCAAME,G,aACNC,EAAAhB,KAAKO,SAASU,MAAMC,MAAMC,cAAU,MAAAH,SAAA,SAAAA,EAAEI,qCAC5CpB,KAAKqB,iBAAiBC,M,CAGjB,MAAAC,GACL,OACEC,EAACC,EAAe,CAAAC,IAAA,2CAACC,MAAO3B,KAAKO,SAASqB,KAAKC,EAAE,eAC3CL,EAACM,EAAmB,CAAAJ,IAAA,2CAClBK,KAAMC,EACNC,UAAWjC,KAAKkC,WAAWC,gBAC3BC,UAAWpC,KAAKO,SAASqB,KAAKC,EAAE,YAChCQ,QAAS,KACPrC,KAAKS,MAAM6B,eACXtC,KAAKe,kCAAkC,IAG3CS,EAACe,EAAgB,CAAAb,IAAA,4CACd1B,KAAKkC,WAAWM,aAAaC,KAAKC,GAE/BlB,EAACmB,EAAe,CACdC,WAAY5C,KAAKS,MAAMoC,cAAcH,GACrCN,UAAWpC,KAAKO,SAASqB,KAAKC,EAAE,cAAe,CAACa,eAChDI,UAAW,KACT9C,KAAKS,MAAMsC,WAAWL,GACtB1C,KAAKe,kCAAkC,EAEzCiC,KAAMN,EACNO,UAAWjD,KAAKE,eAChBgD,IAAMC,IACJ,MAAMP,EAAa5C,KAAKS,MAAMoC,cAAcH,GAC5C,GAAIE,GAAcO,EAAI,CACpBnD,KAAKY,YAAYwC,UAAUD,E,GAG/BE,KAAMX,EAAWY,eAAetD,KAAKO,SAASqB,KAAK2B,eAK3D/B,EAACgC,EAAe,CAAA9B,IAAA,2CACdK,KAAM0B,EACNxB,UAAWjC,KAAKkC,WAAWwB,YAC3BtB,UAAWpC,KAAKO,SAASqB,KAAKC,EAAE,QAChCQ,QAAS,KACPrC,KAAKS,MAAMkD,WACX3D,KAAKe,kCAAkC,I,GAtFpB6C,EAAA,CAA5BC,K,+BAMMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB"}