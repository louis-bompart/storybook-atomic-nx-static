import { i18n } from 'i18next';
import { InsightLogLevel, InsightEngine, InsightEngineConfiguration, PlatformEnvironmentInsight } from '..';
import { InitializeEvent } from '../../../utils/initialization-utils';
import { CommonBindings, NonceBindings } from '../../common/interface/bindings';
import { i18nCompatibilityVersion } from '../../common/interface/i18n';
import { BaseAtomicInterface } from '../../common/interface/interface-common';
import { AtomicInsightStore } from './store';
export type InsightInitializationOptions = InsightEngineConfiguration;
export type InsightBindings = CommonBindings<InsightEngine, AtomicInsightStore, HTMLAtomicInsightInterfaceElement> & NonceBindings;
/**
 * @internal
 */
export declare class AtomicInsightInterface implements BaseAtomicInterface<InsightEngine> {
    private initialized;
    error?: Error;
    /**
     * The service insight interface headless engine.
     */
    engine?: InsightEngine;
    /**
     * Whether analytics should be enabled.
     */
    analytics: boolean;
    /**
     * The service insight interface i18next instance.
     */
    i18n: i18n;
    /**
     * The severity level of the messages to log in the console.
     */
    logLevel?: InsightLogLevel;
    /**
     * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
     */
    localizationCompatibilityVersion: i18nCompatibilityVersion;
    /**
     * The service insight interface language.
     */
    language: string;
    /**
     * The language assets path. By default, this will be a relative URL pointing to `./lang`.
     *
     * Example: "/mypublicpath/languages"
     *
     */
    languageAssetsPath: string;
    /**
     * The icon assets path. By default, this will be a relative URL pointing to `./assets`.
     *
     * Example: "/mypublicpath/icons"
     *
     */
    iconAssetsPath: string;
    /**
     * A list of non-default fields to include in the query results.
     *
     * Specify the property as an array using a JSON string representation:
     * ```html
     * <atomic-insight-interface fields-to-include='["fieldA", "fieldB"]'></atomic-insight-interface>
     * ```
     */
    fieldsToInclude: string[] | string;
    /**
     * The number of results per page. By default, this is set to `5`.
     */
    resultsPerPage: number;
    /**
     * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.
     * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,
     * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers
     * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').
     * Otherwise you may see console errors such as
     *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]
     *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
     * When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.
     * @example:
     * ```html
     * <script nonce="<YOUR_GENERATED_NONCE>">
     *  import {setNonce} from '@coveo/atomic';
     *  setNonce('<YOUR_GENERATED_NONCE>');
     * </script>
     * ```
     */
    CspNonce?: string;
    host: HTMLAtomicInsightInterfaceElement;
    private store;
    private commonInterfaceHelper;
    constructor();
    connectedCallback(): void;
    componentWillLoad(): void;
    private initResultsPerPage;
    registerFieldsToInclude(): void;
    /**
     * Returns the unique, organization-specific endpoint(s)
     * @param {string} organizationId
     * @param {'prod'|'hipaa'|'staging'|'dev'} [env=Prod]
     */
    getOrganizationEndpoints(organizationId: string, env?: PlatformEnvironmentInsight): Promise<{
        platform: string;
        analytics: string;
        search: string;
        admin: string;
    }>;
    /**
     * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
     */
    initialize(options: InsightInitializationOptions): Promise<void>;
    /**
     * Initializes the connection with an already preconfigured headless insight engine.
     *
     */
    initializeWithInsightEngine(engine: InsightEngine): Promise<void>;
    /**
     *
     * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.
     */
    executeFirstSearch(): Promise<void>;
    updateIconAssetsPath(): void;
    handleInitialization(event: InitializeEvent): void;
    updateLanguage(): void;
    toggleAnalytics(): void;
    get bindings(): InsightBindings;
    private initEngine;
    private internalInitialization;
    render(): any;
}
