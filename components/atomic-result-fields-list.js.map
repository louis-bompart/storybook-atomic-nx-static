{"file":"atomic-result-fields-list.js","mappings":"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","names":["AtomicResultFieldsList"],"sources":["src/components/search/result-template-components/atomic-result-fields-list/atomic-result-fields-list.pcss?tag=atomic-result-fields-list","src/components/search/result-template-components/atomic-result-fields-list/atomic-result-fields-list.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n\natomic-result-fields-list {\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  height: 100%;\n\n  > * {\n    &::after {\n      display: block;\n      content: ' ';\n      width: 1px;\n      height: 1rem;\n      margin: 0 1rem;\n      background-color: var(--atomic-neutral);\n      vertical-align: middle;\n    }\n\n    &.hide-divider::after {\n      visibility: hidden;\n    }\n  }\n}\n","import {Result} from '@coveo/headless';\nimport {Component, h, Element, Host} from '@stencil/core';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-fields-list` component selectively renders its children to ensure they fit the parent element and adds dividers between them.\n */\n@Component({\n  tag: 'atomic-result-fields-list',\n  styleUrl: 'atomic-result-fields-list.pcss',\n  shadow: false,\n})\nexport class AtomicResultFieldsList {\n  @ResultContext()\n  protected result!: Result;\n\n  private resizeObserver?: ResizeObserver;\n\n  private updatingChildren = false;\n  private rows: number[] = [];\n  @Element() private host!: HTMLElement;\n\n  public connectedCallback() {\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver(() => this.update());\n      this.resizeObserver.observe(this.host.parentElement!);\n    }\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  public componentDidRender() {\n    this.update();\n  }\n\n  public update() {\n    if (this.updatingChildren) {\n      return;\n    }\n    this.updatingChildren = true;\n    this.showDividers();\n    this.showChildren();\n    this.hideChildrenToFit();\n    this.hideDividersAtEndOfRows();\n    this.updatingChildren = false;\n  }\n\n  private get children() {\n    return Array.from(this.host.children) as HTMLElement[];\n  }\n\n  private get isOverflowing() {\n    return (\n      this.host.scrollWidth > this.host.clientWidth ||\n      this.host.scrollHeight > this.host.clientHeight\n    );\n  }\n\n  private getSortedChildrenBySize() {\n    return this.children.sort((a, b) => a.offsetWidth - b.offsetWidth);\n  }\n\n  private hide(element: HTMLElement) {\n    element.style.display = 'none';\n  }\n\n  private show(element: HTMLElement) {\n    element.style.display = '';\n  }\n\n  private isChildHidden(element: HTMLElement) {\n    return element.style.display === 'none';\n  }\n\n  private setHideDivider(element: HTMLElement, hideDivider: boolean) {\n    element.classList.toggle('hide-divider', hideDivider);\n  }\n\n  private showChildren() {\n    this.children.forEach((child) => this.show(child));\n  }\n\n  private showDividers() {\n    this.children.forEach((child) => this.setHideDivider(child, false));\n  }\n\n  private hideChildrenToFit() {\n    const children = this.getSortedChildrenBySize();\n    for (let i = children.length - 1; this.isOverflowing && i >= 0; i--) {\n      this.hide(children[i]);\n    }\n  }\n\n  private hideDividersAtEndOfRows() {\n    this.rows = [];\n    let previousChild: HTMLElement | null = null;\n    this.children\n      .filter((child) => !this.isChildHidden(child))\n      .forEach((child) => {\n        const row = child.offsetTop;\n        if (this.rows.indexOf(row) === -1) {\n          this.rows.push(row);\n          if (previousChild) {\n            this.setHideDivider(previousChild, true);\n          }\n        }\n        previousChild = child;\n      });\n    if (previousChild) {\n      this.setHideDivider(previousChild, true);\n    }\n  }\n\n  render() {\n    return <Host></Host>;\n  }\n}\n"],"version":3}