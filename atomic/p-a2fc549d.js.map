{"version":3,"names":["defaultTemplate","content","document","createDocumentFragment","linkEl","createElement","appendChild","conditions","TemplateProvider","constructor","props","buildManager","makeDefaultTemplate","this","templateManager","registerResultTemplates","customTemplates","Promise","all","templateElements","map","async","resultTemplateElement","template","getTemplate","setTemplateHasError","templates","length","includeDefaultTemplate","concat","filter","registerTemplates","setResultTemplateRegistered","getTemplateContent","item","selectTemplate","templatesRegistered","getResultTemplateRegistered","hasError","getTemplateHasError"],"sources":["src/components/common/template-provider/template-provider.ts"],"sourcesContent":["import {Template, TemplatesManager} from '@coveo/headless';\r\n\r\nexport interface TemplateElement<ItemType> extends HTMLElement {\r\n  getTemplate(): Promise<Template<ItemType, DocumentFragment> | null>;\r\n}\r\n\r\nexport interface TemplateProviderProps<ItemType> {\r\n  getResultTemplateRegistered(): boolean;\r\n  setResultTemplateRegistered(value: boolean): void;\r\n  getTemplateHasError(): boolean;\r\n  setTemplateHasError(value: boolean): void;\r\n  templateElements: TemplateElement<ItemType>[];\r\n  includeDefaultTemplate: boolean;\r\n}\r\n\r\nfunction defaultTemplate() {\r\n  const content = document.createDocumentFragment();\r\n  const linkEl = document.createElement('atomic-result-link');\r\n  content.appendChild(linkEl);\r\n  return {\r\n    content,\r\n    conditions: [],\r\n  };\r\n}\r\n\r\nexport class TemplateProvider<ItemType> {\r\n  private templateManager: TemplatesManager<ItemType, DocumentFragment>;\r\n\r\n  constructor(\r\n    private props: TemplateProviderProps<ItemType>,\r\n    private buildManager: () => TemplatesManager<ItemType, DocumentFragment>,\r\n    private makeDefaultTemplate: () => Template<\r\n      ItemType,\r\n      DocumentFragment\r\n    > = defaultTemplate\r\n  ) {\r\n    this.templateManager = this.buildManager();\r\n    this.registerResultTemplates();\r\n  }\r\n\r\n  private async registerResultTemplates() {\r\n    const customTemplates = await Promise.all(\r\n      this.props.templateElements.map(async (resultTemplateElement) => {\r\n        const template = await resultTemplateElement.getTemplate();\r\n        if (!template) {\r\n          this.props.setTemplateHasError(true);\r\n        }\r\n        return template;\r\n      })\r\n    );\r\n\r\n    const templates = (\r\n      !customTemplates.length && this.props.includeDefaultTemplate\r\n        ? [this.makeDefaultTemplate()]\r\n        : []\r\n    ).concat(\r\n      customTemplates.filter((template) => template) as Template<\r\n        ItemType,\r\n        DocumentFragment\r\n      >[]\r\n    );\r\n\r\n    this.templateManager.registerTemplates(...templates);\r\n    this.props.setResultTemplateRegistered(true);\r\n  }\r\n\r\n  public getTemplateContent(item: ItemType) {\r\n    return this.templateManager.selectTemplate(item)!;\r\n  }\r\n\r\n  public get templatesRegistered() {\r\n    return this.props.getResultTemplateRegistered();\r\n  }\r\n\r\n  public get hasError() {\r\n    return this.props.getTemplateHasError();\r\n  }\r\n}\r\n"],"mappings":"AAeA,SAASA,IACP,MAAMC,EAAUC,SAASC,yBACzB,MAAMC,EAASF,SAASG,cAAc,sBACtCJ,EAAQK,YAAYF,GACpB,MAAO,CACLH,UACAM,WAAY,GAEhB,C,MAEaC,EAGX,WAAAC,CACUC,EACAC,EACAC,EAGJZ,GALIa,KAAAH,QACAG,KAAAF,eACAE,KAAAD,sBAKRC,KAAKC,gBAAkBD,KAAKF,eAC5BE,KAAKE,yB,CAGC,6BAAMA,GACZ,MAAMC,QAAwBC,QAAQC,IACpCL,KAAKH,MAAMS,iBAAiBC,KAAIC,MAAOC,IACrC,MAAMC,QAAiBD,EAAsBE,cAC7C,IAAKD,EAAU,CACbV,KAAKH,MAAMe,oBAAoB,K,CAEjC,OAAOF,CAAQ,KAInB,MAAMG,IACHV,EAAgBW,QAAUd,KAAKH,MAAMkB,uBAClC,CAACf,KAAKD,uBACN,IACJiB,OACAb,EAAgBc,QAAQP,GAAaA,KAMvCV,KAAKC,gBAAgBiB,qBAAqBL,GAC1Cb,KAAKH,MAAMsB,4BAA4B,K,CAGlC,kBAAAC,CAAmBC,GACxB,OAAOrB,KAAKC,gBAAgBqB,eAAeD,E,CAG7C,uBAAWE,GACT,OAAOvB,KAAKH,MAAM2B,6B,CAGpB,YAAWC,GACT,OAAOzB,KAAKH,MAAM6B,qB"}