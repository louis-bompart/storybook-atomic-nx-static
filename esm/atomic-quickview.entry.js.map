{"file":"atomic-quickview.entry.js","mappings":"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","names":["buildQuickview"],"sources":["src/components/search/result-template-components/atomic-quickview/atomic-quickview.pcss?tag=atomic-quickview&encapsulation=shadow","src/components/search/result-template-components/atomic-quickview/atomic-quickview.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  Result,\n  buildQuickview,\n  Quickview,\n  QuickviewState,\n} from '@coveo/headless';\nimport {Component, h, Listen, Prop, State} from '@stencil/core';\nimport QuickviewIcon from '../../../../images/quickview.svg';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {Button} from '../../../common/button';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-quickview` component renders a button which the end user can click to open a modal box containing a preview\n * about a result.\n *\n * The `atomic-quickview` is not meant to replace the `atomic-result-link` to access an item in a result template; it has certain limitations (e.g., custom styles and embedded\n * images/links may not work as expected in an `atomic-quickview`).\n *\n * @part button - The button that opens the quickview modal on click.\n * @part icon - The icon for the quickview button.\n */\n@Component({\n  tag: 'atomic-quickview',\n  styleUrl: 'atomic-quickview.pcss',\n  shadow: true,\n})\nexport class AtomicQuickview implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n  private buttonFocusTarget?: FocusTargetController;\n\n  @State() public error!: Error;\n\n  public quickview!: Quickview;\n\n  @BindStateToController('quickview')\n  @State()\n  public quickviewState!: QuickviewState;\n\n  /**\n   * The `sandbox` attribute to apply to the quickview iframe.\n   *\n   * The quickview is loaded inside an iframe with a [`sandbox`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox) attribute for security reasons.\n   *\n   * This attribute exists primarily to protect against potential XSS attacks that could originate from the document being displayed.\n   *\n   * By default, the sandbox attributes are: `allow-popups allow-top-navigation allow-same-origin`.\n   *\n   * `allow-same-origin` is not optional, and must always be included in the list of allowed capabilities for the component to function properly.\n   */\n  @Prop() public sandbox =\n    'allow-popups allow-top-navigation allow-same-origin';\n\n  @AriaLiveRegion('quickview')\n  protected quickviewAriaMessage!: string;\n\n  @Listen('atomic/quickview/next', {target: 'body'})\n  public onNextQuickview(evt: Event) {\n    evt.stopImmediatePropagation();\n    this.quickview.next();\n  }\n\n  @Listen('atomic/quickview/previous', {target: 'body'})\n  public onPreviousQuickview(evt: Event) {\n    evt.stopImmediatePropagation();\n    this.quickview.previous();\n  }\n\n  private quickviewModalRef?: HTMLAtomicQuickviewModalElement;\n\n  public get focusTarget() {\n    if (!this.buttonFocusTarget) {\n      this.buttonFocusTarget = new FocusTargetController(this);\n    }\n    return this.buttonFocusTarget;\n  }\n\n  public initialize() {\n    this.quickview = buildQuickview(this.bindings.engine, {\n      options: {result: this.result},\n    });\n    new Schema({\n      sandbox: new StringValue({\n        required: true,\n        regex: /allow-same-origin/,\n      }),\n    }).validate({sandbox: this.sandbox});\n  }\n\n  private addQuickviewModalIfNeeded() {\n    if (this.quickviewModalRef) {\n      return;\n    }\n\n    const quickviewModal = this.bindings.interfaceElement.querySelector(\n      'atomic-quickview-modal'\n    );\n    if (quickviewModal) {\n      this.quickviewModalRef = quickviewModal;\n      return;\n    }\n    this.quickviewModalRef = document.createElement('atomic-quickview-modal');\n    this.quickviewModalRef.setAttribute('sandbox', this.sandbox);\n    this.bindings.interfaceElement.appendChild(this.quickviewModalRef);\n  }\n\n  private updateModalContent() {\n    if (this.quickviewModalRef && this.quickview.state.content) {\n      this.quickviewModalRef.content = this.quickview.state.content;\n      this.quickviewModalRef.result = this.result;\n      this.quickviewModalRef.total = this.quickviewState.totalResults;\n      this.quickviewModalRef.current = this.quickviewState.currentResult;\n      this.quickviewModalRef.modalCloseCallback = () =>\n        this.focusTarget.focus();\n\n      this.quickviewAriaMessage = this.quickviewState.isLoading\n        ? this.bindings.i18n.t('quickview-loading')\n        : this.bindings.i18n.t('quickview-loaded', {\n            first: this.quickviewState.currentResult,\n            last: this.quickviewState.totalResults,\n            title: this.result.title,\n          });\n    }\n  }\n\n  private onClick(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.quickview.fetchResultContent();\n  }\n\n  public render() {\n    this.addQuickviewModalIfNeeded();\n    this.updateModalContent();\n    if (this.quickviewState.resultHasPreview) {\n      return (\n        <Button\n          part=\"button\"\n          title={this.bindings.i18n.t('quickview')}\n          style=\"outline-primary\"\n          class=\"p-2\"\n          onClick={(event) => this.onClick(event)}\n          ref={this.focusTarget.setTarget}\n        >\n          <atomic-icon\n            part=\"icon\"\n            class=\"w-5 flex justify-center\"\n            icon={QuickviewIcon}\n          ></atomic-icon>\n        </Button>\n      );\n    }\n  }\n}\n"],"version":3}