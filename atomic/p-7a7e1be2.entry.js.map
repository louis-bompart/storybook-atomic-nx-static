{"version":3,"names":["AtomicInsightResultChildrenTemplate","constructor","hostRef","this","conditions","mustMatch","mustNotMatch","resultTemplateCommon","ResultTemplateCommon","host","setError","err","error","validParents","componentWillLoad","makeDefinedConditions","ifDefined","ifNotDefined","matchConditions","makeMatchConditions","getTemplate","render","renderIfError","__decorate","MapProp","splitValues"],"sources":["src/components/insight/result-templates/atomic-insight-result-children-template/atomic-insight-result-children-template.tsx"],"sourcesContent":["import {ResultTemplate, ResultTemplateCondition} from '@coveo/headless';\nimport {Component, Element, Prop, State, Method} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeDefinedConditions,\n  makeMatchConditions,\n  ResultTemplateCommon,\n} from '../../../common/result-templates/result-template-common';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-children-template',\n  shadow: true,\n})\nexport class AtomicInsightResultChildrenTemplate {\n  @Element() public host!: HTMLDivElement;\n\n  @State() public error!: Error;\n\n  /**\n   * A function that must return true on results for the result template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\n   */\n  @Prop() public conditions: ResultTemplateCondition[] = [];\n\n  /**\n   * The field that, when defined on a result item, would allow the template to be applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n\n  /**\n   * The field that, when defined on a result item, would prevent the template from being applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  /**\n   * The field and values that define which result items the condition must be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`\n   */\n  @MapProp({splitValues: true}) public mustMatch: Record<string, string[]> = {};\n\n  /**\n   * The field and values that define which result items the condition must not be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\"`\n   */\n  @MapProp({splitValues: true}) public mustNotMatch: Record<string, string[]> =\n    {};\n\n  public resultTemplateCommon: ResultTemplateCommon;\n\n  constructor() {\n    this.resultTemplateCommon = new ResultTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: ['atomic-insight-result-children'],\n    });\n  }\n\n  public componentWillLoad() {\n    this.conditions = makeDefinedConditions(this.ifDefined, this.ifNotDefined);\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the appropriate result template based on conditions applied.\n   */\n  @Method()\n  public async getTemplate(): Promise<ResultTemplate<DocumentFragment> | null> {\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.resultTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"mappings":"koBAgBaA,EAAmC,MA6C9C,WAAAC,CAAAC,G,UAjCeC,KAAAC,WAAwC,GAqBlBD,KAAAE,UAAsC,GAOtCF,KAAAG,aACnC,G,qCA7BqD,G,qDAkCrDH,KAAKI,qBAAuB,IAAIC,EAAqB,CACnDC,KAAMN,KAAKM,KACXC,SAAWC,IACTR,KAAKS,MAAQD,CAAG,EAElBE,aAAc,CAAC,mC,CAIZ,iBAAAC,GACLX,KAAKC,WAAaW,EAAsBZ,KAAKa,UAAWb,KAAKc,cAC7Dd,KAAKI,qBAAqBW,gBAAkBC,EAC1ChB,KAAKE,UACLF,KAAKG,a,CAQF,iBAAMc,GACX,OAAOjB,KAAKI,qBAAqBa,YAAYjB,KAAKC,WAAYD,KAAKS,M,CAG9D,MAAAS,GACL,OAAOlB,KAAKI,qBAAqBe,cAAcnB,KAAKS,M,6BAvCjBW,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q,gCAOcF,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q"}