{"file":"atomic-insight-interface.entry.js","mappings":";;;;;;;;;;;;SAQgB,kBAAkB,CAChC,kBAA8C,EAC9C,OAAgB;;IAEhB,QAAQ,MAAA,kBAAkB,CAAC,SAAS,0CAAE,aAAa;QACjD,KAAK,MAAM;YACT,OAAO,sBAAsB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QAC7D,KAAK,QAAQ,CAAC;QACd;YACE,OAAO,wBAAwB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;KAChE;AACH,CAAC;AAED,SAAS,wBAAwB,CAC/B,kBAA8C,EAC9C,OAAgB;IAEhB,MAAM,yBAAyB,GAAG,CAChC,KAAa,EACb,OAAyB,KACtB,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;IAE1D,MAAM,oBAAoB,GAAkC;QAC1D,yBAAyB;QACzB,OAAO;QACP,gBAAgB,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI;QACxC,IAAI,QAAQ,CAAC,QAAQ,IAAI,EAAC,YAAY,EAAE,QAAQ,CAAC,QAAQ,EAAC,CAAC;KAC5D,CAAC;IAEF,IAAI,kBAAkB,CAAC,SAAS,EAAE;QAChC,OAAO;YACL,GAAG,oBAAoB;YACvB,GAAG,kBAAkB,CAAC,SAAS;YAC/B,yBAAyB;SAC1B,CAAC;KACH;IACD,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAED,SAAS,gBAAgB,CACvB,KAAa,EACb,OAAyB,EACzB,MAAkC;IAElC,IAAI,MAAM,GAAG,6BAA6B,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACnE,MAAM,GAAG,iCAAiC,CAAC,MAAM,CAAC,CAAC;IACnD,OAAO,MAAM,CAAC;AAChB;;SC1BgB,wBAAwB;IACtC,MAAM,WAAW,GAAG,uBAAuB,CAAyB;QAClE,MAAM,EAAE,EAAE;QACV,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE,EAAE;QACd,cAAc,EAAE,EAAE;QAClB,YAAY,EAAE,EAAE;QAChB,cAAc,EAAE,EAAE;QAClB,eAAe,EAAE,EAAE;QACnB,aAAa,EAAE,EAAE;KAClB,CAAC,CAAC;IACH,OAAO;QACL,GAAG,WAAW;QAEd,qBAAqB,CAAC,MAAqB;YACzC,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC;SAC7C;KACF,CAAC;AACJ;;AC/CA,MAAM,yBAAyB,GAAG,skuCAAskuC,CAAC;AACzmuC,qCAAe,yBAAyB;;;;;;;;;;;;ACgCxC,MAAM,+BAA+B,GAAG,6BAA6B,CAAC;MAiBzD,sBAAsB;IA0FjC;;QAvFQ,gBAAW,GAAG,KAAK,CAAC;;;;QAWE,cAAS,GAAG,IAAI,CAAC;;;;QAKhC,SAAI,GAASA,QAAO,CAAC,cAAc,EAAE,CAAC;;;;QAQtC,qCAAgC,GAC7C,IAAI,CAAC;;;;QAIuB,aAAQ,GAAG,IAAI,CAAC;;;;;;;QAQhB,uBAAkB,GAAG,QAAQ,CAAC;;;;;;;QAQ9B,mBAAc,GAAG,UAAU,CAAC;;;;;;;;;QAWnD,oBAAe,GAAsB,IAAI,CAAC;;;;QAK1B,mBAAc,GAAG,CAAC,CAAC;QAuBlC,UAAK,GAAG,wBAAwB,EAAE,CAAC;;;yBAzED,IAAI;oBAKlBA,QAAO,CAAC,cAAc,EAAE;;gDASlD,IAAI;wBAImC,IAAI;kCAQM,QAAQ;8BAQZ,UAAU;+BAWb,IAAI;8BAKR,CAAC;;QA2BvC,IAAI,CAAC,qBAAqB,GAAG,IAAI,2BAA2B,CAC1D,IAAI,EACJ,aAAa,CACd,CAAC;KACH;IAEM,iBAAiB;QACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,+BAA+B,CAAC,CAAC;KAC5D;IAEM,iBAAiB;QACtB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACzB;KACF;IAEO,kBAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5D,OAAO;SACR;QACDC,EAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC/C,YAAY,EAAE,EAAC,eAAe,EAAE,IAAI,CAAC,cAAc,EAAC;SACrD,CAAC,CAAC;KACJ;IAEM,uBAAuB;QAC5B,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,MAAO,CAAC,QAAQ,CACnBC,EAAgB,CAAC,IAAI,CAAC,MAAO,CAAC,CAAC,uBAAuB,CAAC;gBACrD,GAAG,IAAI,CAAC,eAAe;aACxB,CAAC,CACH,CAAC;SACH;KACF;;;;;;IAOgB,MAAM,wBAAwB,CAC7C,cAAsB,EACtB,MAAkC,MAAM;QAExC,OAAOC,EAA+B,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;KAC7D;;;;IAKgB,UAAU,CAAC,OAAqC;QAC/D,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;KACpE;;;;;IAMgB,2BAA2B,CAAC,MAAqB;QAChE,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;KAClE;;;;;IAMgB,MAAM,kBAAkB;QACvC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5D,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO,CAAC,KAAK,CACX,yFAAyF,EACzF,IAAI,CAAC,IAAI,CACV,CAAC;YACF,OAAO;SACR;QACD,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;KAClC;IAGM,oBAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;KACvD;IAGM,oBAAoB,CAAC,KAAsB;QAChD,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;KAC3D;IAGM,cAAc;QACnB,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,CAAC;KAC/C;IAGM,eAAe;QACpB,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC;KAChD;IAED,IAAW,QAAQ;QACjB,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAO;YACpB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,gBAAgB,EAAE,IAAI,CAAC,IAAI;YAC3B,kBAAkB,EAAE;gBAClB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBACjD,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC/C;gBACD,OAAO,QAAQ,CAAC;aACjB;YACD,mBAAmB,EAAE;gBACnB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAClD,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC/C;gBACD,OAAO,QAAQ,CAAC;aACjB;SACF,CAAC;KACH;IAEO,UAAU,CAAC,OAAqC;QACtD,MAAM,eAAe,GAAG,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACpE,IAAI;YACF,IAAI,CAAC,MAAM,GAAGC,EAAkB,CAAC;gBAC/B,aAAa,EAAE;oBACb,GAAG,OAAO;oBACV,SAAS,EAAE,eAAe;iBAC3B;gBACD,aAAa,EAAE;oBACb,KAAK,EAAE,IAAI,CAAC,QAAQ;iBACrB;aACF,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,KAAc,CAAC;YAC5B,MAAM,KAAK,CAAC;SACb;KACF;IAEO,MAAM,sBAAsB,CAAC,UAAsB;QACzD,MAAM,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,CAAC;QAC7D,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;IAED,MAAM;QACJ,QACE,IAAI,CAAC,MAAM,KACT,+DACE,6DAAM,IAAI,EAAC,aAAa,GAAQ,EAChC,8DAAa,CACR,CACR,EACD;KACH;;;;;;;;AA7LM;IAFN,SAAS,EAAE;+DAEqC;;;;;","names":["i18next","buildInsightResultsPerPage","loadFieldActions","getOrganizationEndpointsInsight","buildInsightEngine"],"sources":["src/components/insight/atomic-insight-interface/analytics-config.ts","src/components/insight/atomic-insight-interface/store.ts","src/components/insight/atomic-insight-interface/atomic-insight-interface.pcss?tag=atomic-insight-interface&encapsulation=shadow","src/components/insight/atomic-insight-interface/atomic-insight-interface.tsx"],"sourcesContent":["import {InsightAnalyticsConfiguration, InsightEngineConfiguration} from '..';\r\nimport {\r\n  AnalyticsPayload,\r\n  augmentAnalyticsWithAtomicVersion,\r\n  augmentWithExternalMiddleware,\r\n  getNextAnalyticsConfig,\r\n} from '../../common/interface/analytics-config';\r\n\r\nexport function getAnalyticsConfig(\r\n  searchEngineConfig: InsightEngineConfiguration,\r\n  enabled: boolean\r\n): InsightAnalyticsConfiguration {\r\n  switch (searchEngineConfig.analytics?.analyticsMode) {\r\n    case 'next':\r\n      return getNextAnalyticsConfig(searchEngineConfig, enabled);\r\n    case 'legacy':\r\n    default:\r\n      return getLegacyAnalyticsConfig(searchEngineConfig, enabled);\r\n  }\r\n}\r\n\r\nfunction getLegacyAnalyticsConfig(\r\n  searchEngineConfig: InsightEngineConfiguration,\r\n  enabled: boolean\r\n): InsightAnalyticsConfiguration {\r\n  const analyticsClientMiddleware = (\r\n    event: string,\r\n    payload: AnalyticsPayload\r\n  ) => augmentAnalytics(event, payload, searchEngineConfig);\r\n\r\n  const defaultConfiguration: InsightAnalyticsConfiguration = {\r\n    analyticsClientMiddleware,\r\n    enabled,\r\n    documentLocation: document.location.href,\r\n    ...(document.referrer && {originLevel3: document.referrer}),\r\n  };\r\n\r\n  if (searchEngineConfig.analytics) {\r\n    return {\r\n      ...defaultConfiguration,\r\n      ...searchEngineConfig.analytics,\r\n      analyticsClientMiddleware,\r\n    };\r\n  }\r\n  return defaultConfiguration;\r\n}\r\n\r\nfunction augmentAnalytics(\r\n  event: string,\r\n  payload: AnalyticsPayload,\r\n  config: InsightEngineConfiguration\r\n) {\r\n  let result = augmentWithExternalMiddleware(event, payload, config);\r\n  result = augmentAnalyticsWithAtomicVersion(result);\r\n  return result;\r\n}\r\n","import {\r\n  InsightDateFacetValue,\r\n  InsightEngine,\r\n  InsightNumericFacetValue,\r\n} from '..';\r\nimport {\r\n  FacetInfo,\r\n  FacetStore,\r\n  FacetValueFormat,\r\n} from '../../common/facets/facet-common-store';\r\nimport {\r\n  AtomicCommonStore,\r\n  AtomicCommonStoreData,\r\n  createAtomicCommonStore,\r\n} from '../../common/interface/store';\r\n\r\nexport interface AtomicInsightStoreData extends AtomicCommonStoreData {\r\n  fieldsToInclude: string[];\r\n  facets: FacetStore<FacetInfo>;\r\n  numericFacets: FacetStore<\r\n    FacetInfo & FacetValueFormat<InsightNumericFacetValue>\r\n  >;\r\n  dateFacets: FacetStore<FacetInfo & FacetValueFormat<InsightDateFacetValue>>;\r\n  categoryFacets: FacetStore<FacetInfo>;\r\n}\r\n\r\nexport interface AtomicInsightStore\r\n  extends AtomicCommonStore<AtomicInsightStoreData> {}\r\n\r\nexport function createAtomicInsightStore(): AtomicInsightStore {\r\n  const commonStore = createAtomicCommonStore<AtomicInsightStoreData>({\r\n    facets: {},\r\n    numericFacets: {},\r\n    dateFacets: {},\r\n    categoryFacets: {},\r\n    loadingFlags: [],\r\n    iconAssetsPath: '',\r\n    fieldsToInclude: [],\r\n    facetElements: [],\r\n  });\r\n  return {\r\n    ...commonStore,\r\n\r\n    getUniqueIDFromEngine(engine: InsightEngine): string {\r\n      return engine.state.search.searchResponseId;\r\n    },\r\n  };\r\n}\r\n","@import '../../../global/global.pcss';\r\n\r\n:host {\r\n  position: relative;\r\n}\r\n\r\nslot[name='full-search'] {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  display: block;\r\n}\r\n","import {loadFieldActions} from '@coveo/headless/insight';\r\nimport {\r\n  Component,\r\n  Element,\r\n  h,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  setNonce,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport i18next, {i18n} from 'i18next';\r\nimport {\r\n  InsightLogLevel,\r\n  InsightEngine,\r\n  InsightEngineConfiguration,\r\n  buildInsightEngine,\r\n  buildInsightResultsPerPage,\r\n  getOrganizationEndpointsInsight,\r\n  PlatformEnvironmentInsight,\r\n} from '..';\r\nimport {InitializeEvent} from '../../../utils/initialization-utils';\r\nimport {ArrayProp} from '../../../utils/props-utils';\r\nimport {CommonBindings, NonceBindings} from '../../common/interface/bindings';\r\nimport {i18nCompatibilityVersion} from '../../common/interface/i18n';\r\nimport {\r\n  BaseAtomicInterface,\r\n  CommonAtomicInterfaceHelper,\r\n} from '../../common/interface/interface-common';\r\nimport {getAnalyticsConfig} from './analytics-config';\r\nimport {AtomicInsightStore, createAtomicInsightStore} from './store';\r\n\r\nconst FirstInsightRequestExecutedFlag = 'firstInsightRequestExecuted';\r\nexport type InsightInitializationOptions = InsightEngineConfiguration;\r\nexport type InsightBindings = CommonBindings<\r\n  InsightEngine,\r\n  AtomicInsightStore,\r\n  HTMLAtomicInsightInterfaceElement\r\n> &\r\n  NonceBindings;\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-interface',\r\n  styleUrl: 'atomic-insight-interface.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightInterface\r\n  implements BaseAtomicInterface<InsightEngine>\r\n{\r\n  private initialized = false;\r\n\r\n  @State() public error?: Error;\r\n\r\n  /**\r\n   * The service insight interface headless engine.\r\n   */\r\n  @Prop({mutable: true}) public engine?: InsightEngine;\r\n  /**\r\n   * Whether analytics should be enabled.\r\n   */\r\n  @Prop({reflect: true}) public analytics = true;\r\n\r\n  /**\r\n   * The service insight interface i18next instance.\r\n   */\r\n  @Prop() public i18n: i18n = i18next.createInstance();\r\n  /**\r\n   * The severity level of the messages to log in the console.\r\n   */\r\n  @Prop({reflect: true}) public logLevel?: InsightLogLevel;\r\n  /**\r\n   * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).\r\n   */\r\n  @Prop() public localizationCompatibilityVersion: i18nCompatibilityVersion =\r\n    'v3';\r\n  /**\r\n   * The service insight interface language.\r\n   */\r\n  @Prop({reflect: true}) public language = 'en';\r\n\r\n  /**\r\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\r\n   *\r\n   * Example: \"/mypublicpath/languages\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\r\n\r\n  /**\r\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\r\n   *\r\n   * Example: \"/mypublicpath/icons\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\r\n  /**\r\n   * A list of non-default fields to include in the query results.\r\n   *\r\n   * Specify the property as an array using a JSON string representation:\r\n   * ```html\r\n   * <atomic-insight-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-insight-interface>\r\n   * ```\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public fieldsToInclude: string[] | string = '[]';\r\n\r\n  /**\r\n   * The number of results per page. By default, this is set to `5`.\r\n   */\r\n  @Prop({reflect: true}) resultsPerPage = 5;\r\n\r\n  /**\r\n   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.\r\n   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,\r\n   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers\r\n   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').\r\n   * Otherwise you may see console errors such as\r\n   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]\r\n   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].\r\n   * When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.\r\n   * @example:\r\n   * ```html\r\n   * <script nonce=\"<YOUR_GENERATED_NONCE>\">\r\n   *  import {setNonce} from '@coveo/atomic';\r\n   *  setNonce('<YOUR_GENERATED_NONCE>');\r\n   * </script>\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) public CspNonce?: string;\r\n\r\n  @Element() public host!: HTMLAtomicInsightInterfaceElement;\r\n\r\n  private store = createAtomicInsightStore();\r\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<InsightEngine>;\r\n\r\n  public constructor() {\r\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\r\n      this,\r\n      'CoveoAtomic'\r\n    );\r\n  }\r\n\r\n  public connectedCallback() {\r\n    this.store.setLoadingFlag(FirstInsightRequestExecutedFlag);\r\n  }\r\n\r\n  public componentWillLoad() {\r\n    if (this.CspNonce) {\r\n      setNonce(this.CspNonce);\r\n    }\r\n  }\r\n\r\n  private initResultsPerPage() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n    buildInsightResultsPerPage(this.bindings.engine, {\r\n      initialState: {numberOfResults: this.resultsPerPage},\r\n    });\r\n  }\r\n\r\n  public registerFieldsToInclude() {\r\n    if (this.fieldsToInclude.length) {\r\n      this.engine!.dispatch(\r\n        loadFieldActions(this.engine!).registerFieldsToInclude([\r\n          ...this.fieldsToInclude,\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the unique, organization-specific endpoint(s)\r\n   * @param {string} organizationId\r\n   * @param {'prod'|'hipaa'|'staging'|'dev'} [env=Prod]\r\n   */\r\n  @Method() public async getOrganizationEndpoints(\r\n    organizationId: string,\r\n    env: PlatformEnvironmentInsight = 'prod'\r\n  ) {\r\n    return getOrganizationEndpointsInsight(organizationId, env);\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.\r\n   */\r\n  @Method() public initialize(options: InsightInitializationOptions) {\r\n    return this.internalInitialization(() => this.initEngine(options));\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with an already preconfigured headless insight engine.\r\n   *\r\n   */\r\n  @Method() public initializeWithInsightEngine(engine: InsightEngine) {\r\n    return this.internalInitialization(() => (this.engine = engine));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.\r\n   */\r\n  @Method() public async executeFirstSearch() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n    if (!this.initialized) {\r\n      console.error(\r\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\r\n        this.host\r\n      );\r\n      return;\r\n    }\r\n    this.engine.executeFirstSearch();\r\n  }\r\n\r\n  @Watch('iconAssetsPath')\r\n  public updateIconAssetsPath() {\r\n    this.store.set('iconAssetsPath', this.iconAssetsPath);\r\n  }\r\n\r\n  @Listen('atomic/initializeComponent')\r\n  public handleInitialization(event: InitializeEvent) {\r\n    this.commonInterfaceHelper.onComponentInitializing(event);\r\n  }\r\n\r\n  @Watch('language')\r\n  public updateLanguage() {\r\n    this.commonInterfaceHelper.onLanguageChange();\r\n  }\r\n\r\n  @Watch('analytics')\r\n  public toggleAnalytics() {\r\n    this.commonInterfaceHelper.onAnalyticsChange();\r\n  }\r\n\r\n  public get bindings(): InsightBindings {\r\n    return {\r\n      engine: this.engine!,\r\n      i18n: this.i18n,\r\n      store: this.store,\r\n      interfaceElement: this.host,\r\n      createStyleElement: () => {\r\n        const styleTag = document.createElement('style');\r\n        if (this.CspNonce) {\r\n          styleTag.setAttribute('nonce', this.CspNonce);\r\n        }\r\n        return styleTag;\r\n      },\r\n      createScriptElement: () => {\r\n        const styleTag = document.createElement('script');\r\n        if (this.CspNonce) {\r\n          styleTag.setAttribute('nonce', this.CspNonce);\r\n        }\r\n        return styleTag;\r\n      },\r\n    };\r\n  }\r\n\r\n  private initEngine(options: InsightInitializationOptions) {\r\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\r\n    try {\r\n      this.engine = buildInsightEngine({\r\n        configuration: {\r\n          ...options,\r\n          analytics: analyticsConfig,\r\n        },\r\n        loggerOptions: {\r\n          level: this.logLevel,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async internalInitialization(initEngine: () => void) {\r\n    await this.commonInterfaceHelper.onInitialization(initEngine);\r\n    this.store.unsetLoadingFlag(FirstInsightRequestExecutedFlag);\r\n    this.initResultsPerPage();\r\n    this.initialized = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.engine && (\r\n        <host>\r\n          <slot name=\"full-search\"></slot>\r\n          <slot></slot>\r\n        </host>\r\n      )\r\n    );\r\n  }\r\n}\r\n"],"version":3}