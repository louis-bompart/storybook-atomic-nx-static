{"file":"atomic-sort-dropdown.entry.cjs.js","mappings":"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","names":["randomID","buildSearchStatus","buildSort","Schema","StringValue","parseCriterionExpression","h","SortGuard","SortContainer","SortLabel","SortSelect","SortOption","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-sort-dropdown/atomic-sort-dropdown.pcss?tag=atomic-sort-dropdown&encapsulation=shadow","src/components/search/atomic-sort-dropdown/atomic-sort-dropdown.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\nselect:hover + div,\r\nselect:focus-visible + div {\r\n  @apply border-primary-light text-primary-light;\r\n}\r\n","import {Schema, StringValue} from '@coveo/bueno';\r\nimport {\r\n  Sort,\r\n  buildSort,\r\n  SortState,\r\n  parseCriterionExpression,\r\n  buildSearchStatus,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Element} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {SortContainer} from '../../common/sort/container';\r\nimport {SortGuard} from '../../common/sort/guard';\r\nimport {SortLabel} from '../../common/sort/label';\r\nimport {SortOption} from '../../common/sort/option';\r\nimport {SortSelect} from '../../common/sort/select';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.\r\n *\r\n * @part label - The \"Sort by\" label of the `<select>` element.\r\n * @part select-parent - The `<select>` element parent.\r\n * @part select - The `<select>` element of the dropdown list.\r\n * @part select-separator - The element separating the select from the icon.\r\n * @part placeholder - The dropdown placeholder for while the search interface is initializing.\r\n */\r\n@Component({\r\n  tag: 'atomic-sort-dropdown',\r\n  styleUrl: 'atomic-sort-dropdown.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSortDropdown implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  private sort!: Sort;\r\n  public searchStatus!: SearchStatus;\r\n  private id = randomID('atomic-sort-dropdown-');\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @State() @BindStateToController('sort') public sortState!: SortState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  private searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  public initialize() {\r\n    this.buildOptions();\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.sort = buildSort(this.bindings.engine, {\r\n      initialState: {\r\n        criterion: this.bindings.store.state.sortOptions[0]?.criteria,\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildOptions() {\r\n    const sortExpressionElements = Array.from(\r\n      this.host.querySelectorAll('atomic-sort-expression')\r\n    );\r\n\r\n    if (!sortExpressionElements.length) {\r\n      this.error = new Error(\r\n        'The \"atomic-sort-dropdown\" element requires at least one \"atomic-sort-expression\" child.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.bindings.store.set(\r\n      'sortOptions',\r\n      sortExpressionElements.map(({expression, label}) => {\r\n        new Schema({\r\n          label: new StringValue({emptyAllowed: false, required: true}),\r\n        }).validate({label});\r\n\r\n        return {\r\n          criteria: parseCriterionExpression(expression),\r\n          expression,\r\n          label,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private get options() {\r\n    return this.bindings.store.state.sortOptions;\r\n  }\r\n\r\n  private select(e: Event) {\r\n    const select = e.composedPath()[0] as HTMLSelectElement;\r\n    const option = this.options.find(\r\n      (option) => option.expression === select.value\r\n    );\r\n    option && this.sort.sortBy(option.criteria);\r\n  }\r\n\r\n  public render() {\r\n    const {hasError, hasResults, firstSearchExecuted} = this.searchStatusState;\r\n    const {\r\n      bindings: {i18n},\r\n      id,\r\n    } = this;\r\n\r\n    return [\r\n      <SortGuard\r\n        firstSearchExecuted={firstSearchExecuted}\r\n        hasError={hasError}\r\n        hasResults={hasResults}\r\n      >\r\n        <SortContainer>\r\n          <SortLabel i18n={i18n} id={id} />\r\n          <SortSelect i18n={i18n} id={id} onSelect={(evt) => this.select(evt)}>\r\n            {this.options.map(({label, criteria, expression}) => (\r\n              <SortOption\r\n                i18n={i18n}\r\n                label={label}\r\n                selected={this.sort.isSortedBy(criteria)}\r\n                value={expression}\r\n              />\r\n            ))}\r\n          </SortSelect>\r\n        </SortContainer>\r\n      </SortGuard>,\r\n      <slot></slot>,\r\n    ];\r\n  }\r\n}\r\n"],"version":3}