{"version":3,"names":["atomicResultMultiValueTextCss","AtomicResultMultiValueTextStyle0","AtomicResultMultiText","this","maxValuesToDisplay","delimiter","sortedValues","initialize","breadcrumbManager","buildBreadcrumbManager","bindings","engine","resultValues","value","ResultTemplatesHelpers","getResultProperty","result","field","Array","isArray","map","v","trim","error","Error","split","facetSelectedValues","state","facetBreadcrumbs","filter","facet","reduce","values","updateSortedValues","allValues","allValuesSet","Set","firstValues","has","from","set","add","getShouldDisplayLabel","length","getNumberOfValuesToDisplay","Math","min","renderValue","label","getFieldValueCaption","i18n","kebabValue","titleToKebab","h","key","part","name","renderSeparator","beforeValue","afterValue","class","renderMoreLabel","t","renderListItems","numberOfValuesToDisplay","nodes","i","push","componentWillRender","render","host","remove","__decorate","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-multi-value-text/atomic-result-multi-value-text.pcss?tag=atomic-result-multi-value-text&encapsulation=shadow","src/components/search/result-template-components/atomic-result-multi-value-text/atomic-result-multi-value-text.tsx"],"sourcesContent":[":host {\n  > ul {\n    display: flex;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n\n    li {\n      display: inline-block;\n    }\n  }\n}\n\n.separator {\n  &::before {\n    display: inline;\n    content: ',\\00a0';\n  }\n}\n","import {\n  BreadcrumbManager,\n  buildBreadcrumbManager,\n  Result,\n  ResultTemplatesHelpers,\n} from '@coveo/headless';\nimport {Component, Element, Prop, h, State, VNode} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {titleToKebab} from '../../../../utils/utils';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.\n * @part result-multi-value-text-list - The list of field values.\n * @part result-multi-value-text-separator - The separator to display between each of the field values.\n * @part result-multi-value-text-value - A field value.\n * @part result-multi-value-text-value-more - A label indicating some values were omitted.\n * @slot result-multi-value-text-value-* - A custom caption value that's specified for a given part of a multi-text field value. For example, if you want to use `Off-Campus Resident` as a caption value for `Off-campus apartment` in `Off-campus apartment;On-campus apartment`, you'd use `<span slot=\"result-multi-value-text-value-off-campus-apartment\">Off-Campus Resident</span>`). The suffix of this slot corresponds with the field value, written in kebab case.\n */\n@Component({\n  tag: 'atomic-result-multi-value-text',\n  styleUrl: 'atomic-result-multi-value-text.pcss',\n  shadow: true,\n})\nexport class AtomicResultMultiText {\n  public breadcrumbManager!: BreadcrumbManager;\n\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The field that the component should use.\n   * The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first.\n   * Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n\n  /**\n   * The maximum number of field values to display.\n   * If there are _n_ more values than the specified maximum, the last displayed value will be \"_n_ more...\".\n   */\n  @Prop({reflect: true}) public maxValuesToDisplay = 3;\n\n  /**\n   * The delimiter used to separate values when the field isn't indexed as a multi value field.\n   */\n  @Prop({reflect: true}) public delimiter: string | null = null;\n\n  private sortedValues: string[] | null = null;\n\n  public initialize() {\n    this.breadcrumbManager = buildBreadcrumbManager(this.bindings.engine);\n  }\n\n  private get resultValues() {\n    const value = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      this.field\n    );\n\n    if (value === null) {\n      return null;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((v) => `${v}`.trim());\n    }\n\n    if (typeof value !== 'string' || value.trim() === '') {\n      this.error = new Error(\n        `Could not parse \"${value}\" from field \"${this.field}\" as a string array.`\n      );\n      return null;\n    }\n\n    return this.delimiter\n      ? value.split(this.delimiter).map((value) => value.trim())\n      : [value];\n  }\n\n  private get facetSelectedValues() {\n    return this.breadcrumbManager.state.facetBreadcrumbs\n      .filter((facet) => facet.field === this.field)\n      .reduce(\n        (values, facet) => [\n          ...values,\n          ...facet.values.map(({value}) => value.value),\n        ],\n        [] as string[]\n      );\n  }\n\n  private updateSortedValues() {\n    const allValues = this.resultValues;\n    if (allValues === null) {\n      this.sortedValues = null;\n      return;\n    }\n    const allValuesSet = new Set(allValues);\n    const firstValues = this.facetSelectedValues.filter((value) =>\n      allValuesSet.has(value)\n    );\n    this.sortedValues = Array.from(\n      allValues.reduce((set, value) => set.add(value), new Set(firstValues))\n    );\n  }\n\n  private getShouldDisplayLabel(values: string[]) {\n    return (\n      this.maxValuesToDisplay > 0 && values.length > this.maxValuesToDisplay\n    );\n  }\n\n  private getNumberOfValuesToDisplay(values: string[]) {\n    if (values.length <= this.maxValuesToDisplay) {\n      return values.length;\n    }\n    if (this.maxValuesToDisplay < 2) {\n      return this.maxValuesToDisplay;\n    }\n    return Math.min(values.length - 2, this.maxValuesToDisplay);\n  }\n\n  private renderValue(value: string) {\n    const label = getFieldValueCaption(this.field, value, this.bindings.i18n);\n    const kebabValue = titleToKebab(value);\n    return (\n      <li key={value} part=\"result-multi-value-text-value\">\n        <slot name={`result-multi-value-text-value-${kebabValue}`}>\n          {label}\n        </slot>\n      </li>\n    );\n  }\n\n  private renderSeparator(beforeValue: string, afterValue: string) {\n    return (\n      <li\n        aria-hidden=\"true\"\n        part=\"result-multi-value-text-separator\"\n        key={`${beforeValue}~${afterValue}`}\n        class=\"separator\"\n      ></li>\n    );\n  }\n\n  private renderMoreLabel(value: number) {\n    return (\n      <li key=\"more-field-values\" part=\"result-multi-value-text-value-more\">\n        {this.bindings.i18n.t('n-more', {value})}\n      </li>\n    );\n  }\n\n  private renderListItems(values: string[]) {\n    const numberOfValuesToDisplay = this.getNumberOfValuesToDisplay(values);\n\n    const nodes: VNode[] = [];\n    for (let i = 0; i < numberOfValuesToDisplay; i++) {\n      if (i > 0) {\n        nodes.push(this.renderSeparator(values[i - 1], values[i]));\n      }\n      nodes.push(this.renderValue(values[i]));\n    }\n    if (this.getShouldDisplayLabel(values)) {\n      nodes.push(\n        this.renderSeparator(\n          values[numberOfValuesToDisplay - 1],\n          'more-field-values'\n        )\n      );\n      nodes.push(this.renderMoreLabel(values.length - numberOfValuesToDisplay));\n    }\n    return nodes;\n  }\n\n  public componentWillRender() {\n    this.updateSortedValues();\n  }\n\n  public render() {\n    if (this.sortedValues === null) {\n      this.host.remove();\n      return;\n    }\n    return (\n      <ul part=\"result-multi-value-text-list\">\n        {...this.renderListItems(this.sortedValues)}\n      </ul>\n    );\n  }\n}\n"],"mappings":"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"}