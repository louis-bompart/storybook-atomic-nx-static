{"file":"atomic-load-more-results.js","mappings":";;;;;;AAAA,MAAM,wBAAwB,GAAG,yvuCAAyvuC,CAAC;AAC3xuC,oCAAe,wBAAwB;;;;;;;;;;;;MCiC1BA,uBAAqB;;;;;;;;;IAazB,UAAU;QACf,IAAI,CAAC,YAAY,GAAGC,EAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAGC,EAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtD,OAAO,EAAE;gBACP,eAAe,EAAE,EAAE;aACpB;SACF,CAAC,CAAC;KACJ;IAEO,MAAM,OAAO;;QACnB,MAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,0CAAE,oBAAoB,EAAE,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACpC;IAEM,MAAM;QACX,MAAM,EAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAC7D,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,QACE,EAAC,aAAa,qDACZ,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,IAE3C,EAAC,iBAAiB,uDAChB,EAAC,eAAe,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,GAAI,EACnD,EAAC,mBAAmB,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAI,EAC3C,EAAC,cAAc,qDACb,IAAI,EAAE,IAAI,EACV,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB,EACxD,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,CACgB,CACN,EAChB;KACH;;;;;;;AA9C4B;IAA5B,kBAAkB,EAAE;yDAA4B;AAMzC;IAFP,qBAAqB,CAAC,cAAc,CAAC;kEAEQ;AAGtC;IAFP,qBAAqB,CAAC,YAAY,CAAC;gEAEM;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicLoadMoreResults","buildQuerySummary","buildResultList"],"sources":["src/components/search/atomic-load-more-results/atomic-load-more-results.pcss?tag=atomic-load-more-results&encapsulation=shadow","src/components/search/atomic-load-more-results/atomic-load-more-results.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\n/**\r\n * @prop --atomic-more-results-progress-bar-color-from: Color of the start of the gradient for the load more results progress bar.\r\n * @prop --atomic-more-results-progress-bar-color-to: Color of the end of the gradient for the load more results progress bar.\r\n */\r\n.progress-bar {\r\n  --tw-gradient-from: var(--atomic-more-results-progress-bar-color-from, var(--atomic-primary-dark));\r\n  --tw-gradient-to: var(--atomic-more-results-progress-bar-color-to, var(--atomic-primary-light));\r\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\r\n}\r\n","import {\r\n  QuerySummary,\r\n  QuerySummaryState,\r\n  buildQuerySummary,\r\n  ResultList,\r\n  ResultListState,\r\n  buildResultList,\r\n} from '@coveo/headless';\r\nimport {Component, h, State} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {LoadMoreButton} from '../../common/load-more/button';\r\nimport {LoadMoreContainer} from '../../common/load-more/container';\r\nimport {LoadMoreGuard} from '../../common/load-more/guard';\r\nimport {LoadMoreProgressBar} from '../../common/load-more/progress-bar';\r\nimport {LoadMoreSummary} from '../../common/load-more/summary';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-load-more-results` component allows the user to load additional results if more are available.\r\n *\r\n * @part container - The container of the component.\r\n * @part showing-results - The summary displaying which results are shown and how many are available.\r\n * @part highlight - The highlighted number of results displayed and number of results available.\r\n * @part progress-bar - The progress bar displaying a percentage of results shown over the total number of results available.\r\n * @part load-more-results-button - The \"Load more results\" button.\r\n */\r\n@Component({\r\n  tag: 'atomic-load-more-results',\r\n  styleUrl: 'atomic-load-more-results.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicLoadMoreResults {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public querySummary!: QuerySummary;\r\n  public resultList!: ResultList;\r\n\r\n  @BindStateToController('querySummary')\r\n  @State()\r\n  private querySummaryState!: QuerySummaryState;\r\n  @BindStateToController('resultList')\r\n  @State()\r\n  private resultListState!: ResultListState;\r\n  @State() public error!: Error;\r\n\r\n  public initialize() {\r\n    this.querySummary = buildQuerySummary(this.bindings.engine);\r\n    this.resultList = buildResultList(this.bindings.engine, {\r\n      options: {\r\n        fieldsToInclude: [],\r\n      },\r\n    });\r\n  }\r\n\r\n  private async onClick() {\r\n    this.bindings.store.state.resultList?.focusOnNextNewResult();\r\n    this.resultList.fetchMoreResults();\r\n  }\r\n\r\n  public render() {\r\n    const {lastResult: from, total: to} = this.querySummaryState;\r\n    const {i18n} = this.bindings;\r\n\r\n    return (\r\n      <LoadMoreGuard\r\n        hasResults={this.querySummaryState.hasResults}\r\n        isLoaded={this.bindings.store.isAppLoaded()}\r\n      >\r\n        <LoadMoreContainer>\r\n          <LoadMoreSummary from={from} to={to} i18n={i18n} />\r\n          <LoadMoreProgressBar from={from} to={to} />\r\n          <LoadMoreButton\r\n            i18n={i18n}\r\n            moreAvailable={this.resultListState.moreResultsAvailable}\r\n            onClick={() => this.onClick()}\r\n          />\r\n        </LoadMoreContainer>\r\n      </LoadMoreGuard>\r\n    );\r\n  }\r\n}\r\n"],"version":3}