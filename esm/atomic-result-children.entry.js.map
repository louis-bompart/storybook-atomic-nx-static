{"file":"atomic-result-children.entry.js","mappings":"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","names":["buildInteractiveResult"],"sources":["src/components/search/result-lists/atomic-result-children/atomic-result-children.pcss?tag=atomic-result-children&encapsulation=shadow","src/components/search/result-lists/atomic-result-children/atomic-result-children.tsx"],"sourcesContent":["@import '../../../../components/common/result-children/result-children.pcss';\n","import {\n  buildInteractiveResult,\n  FoldedResult,\n  FoldedResultList,\n  FoldedResultListState,\n} from '@coveo/headless';\nimport {Component, Element, State, h, Listen, Prop} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {elementHasAncestorTag} from '../../../../utils/utils';\nimport {extractUnfoldedItem} from '../../../common/interface/item';\nimport {\n  ChildTemplatesContext,\n  ChildTemplatesContextEvent,\n  DisplayConfig,\n  ItemDisplayConfigContext,\n} from '../../../common/item-list/item-decorators';\nimport {\n  FoldedItemListContext,\n  FoldedItemListStateContext,\n} from '../../../common/item-list/item-list-decorators';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {ItemDisplayImageSize} from '../../../common/layout/display-options';\nimport {ResultChildrenCommon} from '../../../common/result-children/result-children-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../../result-template-components/result-template-decorators';\n\nconst childTemplateComponent = 'atomic-result-children-template';\nconst componentTag = 'atomic-result-children';\n\n/**\n * The `atomic-result-children` component is responsible for displaying child results by applying one or more child result templates.\n * Includes two slots, \"before-children\" and \"after-children\", which allow for rendering content before and after the list of children,\n * only when children exist.\n * @part children-root - The wrapper for the message when there are child results\n * @part no-result-root - The wrapper for the message when there are no results.\n * @part show-hide-button - The button that allows to collapse or show all child results.\n * @slot before-children - Slot that allows rendering content before the list of children, only when children exist.\n * @slot after-children - Slot that allows rendering content after the list of children, only when children exist.\n */\n@Component({\n  tag: 'atomic-result-children',\n  styleUrl: 'atomic-result-children.pcss',\n  shadow: true,\n})\nexport class AtomicResultChildren implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ChildTemplatesContext()\n  public itemTemplateProvider?: ItemTemplateProvider;\n  @FoldedItemListContext()\n  private foldedResultList!: FoldedResultList;\n  @ResultContext({folded: true})\n  private result!: FoldedResult;\n  @ItemDisplayConfigContext()\n  private displayConfig!: DisplayConfig;\n  private initialChildren!: FoldedResult[];\n\n  @Element() public host!: HTMLDivElement;\n  @State() public error!: Error;\n  @State() private resultTemplateRegistered = false;\n  @State() private templateHasError = false;\n  @FoldedItemListStateContext()\n  @State()\n  private foldedResultListState!: FoldedResultListState;\n  @State()\n  private showInitialChildren = false;\n\n  /**\n   * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.\n   */\n  @Prop() inheritTemplates = false;\n  /**\n   * The expected size of the image displayed in the children results.\n   */\n  @Prop({reflect: true}) imageSize?: ItemDisplayImageSize;\n  /**\n   * The non-localized copy for an empty result state. An empty string will result in the component being hidden.\n   */\n  @Prop() public noResultText = 'no-documents-related';\n\n  private resultChildrenCommon!: ResultChildrenCommon;\n\n  @Listen('atomic/resolveChildTemplates')\n  public resolveChildTemplates(event: ChildTemplatesContextEvent) {\n    event.preventDefault();\n    event.detail(this.itemTemplateProvider);\n  }\n\n  public initialize() {\n    this.resultChildrenCommon = new ResultChildrenCommon({\n      getHost: () => this.host,\n      getBindings: () => this.bindings,\n      getResult: () => this.result,\n      getShowInitialChildren: () => this.showInitialChildren,\n      getFoldedResultList: () => this.foldedResultList,\n      getInitialChildren: () => this.initialChildren,\n      getInheritTemplates: () => this.inheritTemplates,\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      getNoResultText: () => this.noResultText,\n      getDisplayConfig: () => this.displayConfig,\n      getImageSize: () => this.imageSize,\n      getFoldedResultListState: () => this.foldedResultListState,\n      renderChild: this.renderChild.bind(this),\n      setInitialChildren: (initialChildren: FoldedResult[]) =>\n        (this.initialChildren = initialChildren),\n      toggleShowInitialChildren: () =>\n        (this.showInitialChildren = !this.showInitialChildren),\n    });\n\n    if (this.inheritTemplates) {\n      return;\n    }\n\n    const childrenTemplates = Array.from(\n      this.host.querySelectorAll(childTemplateComponent)\n    ).filter(\n      (template) => !elementHasAncestorTag(template, childTemplateComponent)\n    );\n\n    if (!childrenTemplates.length) {\n      this.error = new Error(\n        `The \"${componentTag}\" component requires at least one \"${childTemplateComponent}\" component.`\n      );\n      return;\n    }\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: false,\n      templateElements: childrenTemplates,\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n  }\n\n  private renderChild(child: FoldedResult, isLast: boolean) {\n    const content = this.itemTemplateProvider?.getTemplateContent(child.result);\n\n    if (!content) {\n      return;\n    }\n\n    const key =\n      child.result.uniqueId +\n      child.children.map((child) => child.result.uniqueId);\n    return (\n      <atomic-result\n        key={key}\n        content={content}\n        result={child}\n        interactiveResult={buildInteractiveResult(this.bindings.engine, {\n          options: {result: extractUnfoldedItem(child)},\n        })}\n        store={this.bindings.store}\n        density={this.displayConfig.density}\n        imageSize={this.imageSize || this.displayConfig.imageSize}\n        classes={`child-result ${isLast ? 'last-child' : ''}`.trim()}\n      ></atomic-result>\n    );\n  }\n\n  public componentWillRender() {\n    this.resultChildrenCommon.componentWillRender();\n  }\n\n  public render() {\n    return this.resultChildrenCommon.render();\n  }\n}\n"],"version":3}