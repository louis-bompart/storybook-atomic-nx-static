{"version":3,"names":["getFieldTableColumns","props","itemRenderingFunction","getFieldTableColumnsFromRenderingFunction","getFieldTableColumnsFromHTMLTemplate","contentOfRenderingFunction","document","createElement","contentOfRenderingFunctionAsString","firstItem","innerHTML","Array","from","querySelectorAll","tableElementTagName","templateContentForFirstItem","DisplayTable","children","fieldColumns","length","logger","error","host","h","class","listClasses","part","map","column","value","getAttribute","DisplayTableRow","key","rowIndex","setRef","ref","element","DisplayTableData","renderItem"],"sources":["src/components/common/item-list/display-table.tsx"],"sourcesContent":["import {FunctionalComponent, VNode, h} from '@stencil/core';\r\nimport {tableElementTagName} from '../../search/atomic-table-result/table-element-utils';\r\nimport {AnyItem} from '../interface/item';\r\nimport {ItemRenderingFunction} from './item-list-common';\r\n\r\ninterface TableColumnsProps {\r\n  templateContentForFirstItem: DocumentFragment;\r\n  firstItem: AnyItem;\r\n  itemRenderingFunction?: ItemRenderingFunction;\r\n}\r\n\r\nexport interface DisplayTableProps extends TableColumnsProps {\r\n  logger: Pick<Console, 'error'>;\r\n  host: HTMLElement;\r\n  listClasses: string;\r\n}\r\n\r\nexport interface TableDataProps extends TableColumnsProps {\r\n  key: string;\r\n}\r\n\r\nexport interface DisplayTableRowProps {\r\n  key: string;\r\n  rowIndex: number;\r\n  setRef: (element?: HTMLElement) => void;\r\n}\r\n\r\nconst getFieldTableColumns = (props: TableColumnsProps) => {\r\n  if (props.itemRenderingFunction) {\r\n    return getFieldTableColumnsFromRenderingFunction(props);\r\n  }\r\n  return getFieldTableColumnsFromHTMLTemplate(props);\r\n};\r\n\r\nconst getFieldTableColumnsFromRenderingFunction = (\r\n  props: Pick<TableColumnsProps, 'itemRenderingFunction' | 'firstItem'>\r\n): HTMLAtomicTableElementElement[] => {\r\n  const contentOfRenderingFunction = document.createElement('div');\r\n\r\n  const contentOfRenderingFunctionAsString = props.itemRenderingFunction!(\r\n    props.firstItem,\r\n    document.createElement('div')\r\n  );\r\n  contentOfRenderingFunction.innerHTML = contentOfRenderingFunctionAsString;\r\n\r\n  return Array.from(\r\n    contentOfRenderingFunction.querySelectorAll(tableElementTagName)\r\n  );\r\n};\r\n\r\nconst getFieldTableColumnsFromHTMLTemplate = (\r\n  props: Pick<DisplayTableProps, 'templateContentForFirstItem'>\r\n): HTMLAtomicTableElementElement[] =>\r\n  Array.from(\r\n    props.templateContentForFirstItem.querySelectorAll(tableElementTagName)\r\n  );\r\n\r\nexport const DisplayTable: FunctionalComponent<DisplayTableProps> = (\r\n  props,\r\n  children\r\n) => {\r\n  const fieldColumns = getFieldTableColumns(props);\r\n\r\n  if (!fieldColumns.length) {\r\n    props.logger.error(\r\n      'atomic-table-element elements missing in the template to display columns.',\r\n      props.host\r\n    );\r\n  }\r\n\r\n  return (\r\n    <table class={`list-root ${props.listClasses}`} part=\"result-table\">\r\n      <thead part=\"result-table-heading\">\r\n        <tr part=\"result-table-heading-row\">\r\n          {fieldColumns.map((column) => (\r\n            <th part=\"result-table-heading-cell\">\r\n              <atomic-text value={column.getAttribute('label')!}></atomic-text>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody part=\"result-table-body\">{...children}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport const DisplayTableRow: FunctionalComponent<DisplayTableRowProps> = (\r\n  {key, rowIndex, setRef},\r\n  children\r\n) => {\r\n  return (\r\n    <tr\r\n      key={key}\r\n      part={\r\n        'result-table-row ' +\r\n        (rowIndex % 2 === 1 ? 'result-table-row-even' : 'result-table-row-odd')\r\n      }\r\n      ref={(element) => setRef(element)}\r\n    >\r\n      {...children}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport const DisplayTableData: FunctionalComponent<\r\n  TableDataProps & {\r\n    renderItem: (content: HTMLAtomicTableElementElement) => VNode;\r\n  }\r\n> = (props) => {\r\n  const fieldColumns = getFieldTableColumns(props);\r\n\r\n  return fieldColumns.map((column) => {\r\n    const key = column.getAttribute('label')! + props.key;\r\n    return (\r\n      <td key={key} part=\"result-table-cell\">\r\n        {props.renderItem(column)}\r\n      </td>\r\n    );\r\n  });\r\n};\r\n"],"mappings":"wEA2BA,MAAMA,EAAwBC,IAC5B,GAAIA,EAAMC,sBAAuB,CAC/B,OAAOC,EAA0CF,E,CAEnD,OAAOG,EAAqCH,EAAM,EAGpD,MAAME,EACJF,IAEA,MAAMI,EAA6BC,SAASC,cAAc,OAE1D,MAAMC,EAAqCP,EAAMC,sBAC/CD,EAAMQ,UACNH,SAASC,cAAc,QAEzBF,EAA2BK,UAAYF,EAEvC,OAAOG,MAAMC,KACXP,EAA2BQ,iBAAiBC,GAC7C,EAGH,MAAMV,EACJH,GAEAU,MAAMC,KACJX,EAAMc,4BAA4BF,iBAAiBC,I,MAG1CE,EAAuD,CAClEf,EACAgB,KAEA,MAAMC,EAAelB,EAAqBC,GAE1C,IAAKiB,EAAaC,OAAQ,CACxBlB,EAAMmB,OAAOC,MACX,4EACApB,EAAMqB,K,CAIV,OACEC,EAAA,SAAOC,MAAO,aAAavB,EAAMwB,cAAeC,KAAK,gBACnDH,EAAA,SAAOG,KAAK,wBACVH,EAAA,MAAIG,KAAK,4BACNR,EAAaS,KAAKC,GACjBL,EAAA,MAAIG,KAAK,6BACPH,EAAA,eAAaM,MAAOD,EAAOE,aAAa,gBAKhDP,EAAA,SAAOG,KAAK,wBAAwBT,GAC9B,E,MAICc,EAA6D,EACvEC,MAAKC,WAAUC,UAChBjB,IAGEM,EAAA,MACES,IAAKA,EACLN,KACE,qBACCO,EAAW,IAAM,EAAI,wBAA0B,wBAElDE,IAAMC,GAAYF,EAAOE,OAErBnB,G,MAKGoB,EAIRpC,IACH,MAAMiB,EAAelB,EAAqBC,GAE1C,OAAOiB,EAAaS,KAAKC,IACvB,MAAMI,EAAMJ,EAAOE,aAAa,SAAY7B,EAAM+B,IAClD,OACET,EAAA,MAAIS,IAAKA,EAAKN,KAAK,qBAChBzB,EAAMqC,WAAWV,GACf,GAEP,S"}