{"version":3,"names":["AtomicFacetManager","this","collapseFacetsAfter","sortFacets","facets","getFacetsInChildren","host","sortedFacets","sortFacetsUsingManager","facetManager","visibleFacets","invisibleFacets","sortFacetVisibility","bindings","store","getAllFacets","generator","getAutomaticFacetGenerator","updateCollapseFacetsDependingOnFacetsVisibility","length","append","initialize","validateProps","buildFacetManager","engine","i18n","on","Schema","collapseFacetAfter","NumberValue","min","required","validate","payload","map","f","facetId","sort","disconnectedCallback","off","render","h","key","__decorate","InitializeBindings","BindStateToController","onUpdateCallbackMethod"],"sources":["src/components/search/atomic-facet-manager/atomic-facet-manager.tsx"],"sourcesContent":["import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  FacetManager,\n  buildFacetManager,\n  FacetManagerState,\n} from '@coveo/headless';\nimport {Component, h, Element, State, Prop} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {\n  getFacetsInChildren,\n  getAutomaticFacetGenerator,\n  sortFacetVisibility,\n  collapseFacetsAfter,\n  BaseFacetElement,\n} from '../../common/facets/facet-common';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.\n */\n@Component({\n  tag: 'atomic-facet-manager',\n  shadow: false,\n})\nexport class AtomicFacetManager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private facetManager!: FacetManager;\n\n  @Element() private host!: HTMLDivElement;\n\n  @BindStateToController('facetManager', {\n    onUpdateCallbackMethod: 'sortFacets',\n  })\n  @State()\n  public facetManagerState!: FacetManagerState;\n  @State() public error!: Error;\n\n  /**\n   * The number of expanded facets inside the manager.\n   * Remaining facets are automatically collapsed.\n   *\n   * Using the value `0` collapses all facets.\n   * Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.\n   */\n  @Prop({reflect: true}) public collapseFacetsAfter = 4;\n\n  public initialize() {\n    this.validateProps();\n    this.facetManager = buildFacetManager(this.bindings.engine);\n\n    // An update has to be forced for the facets to be visually updated, without being interacted with.\n    this.bindings.i18n.on('languageChanged', this.sortFacets);\n  }\n\n  private sortFacets = () => {\n    const facets = getFacetsInChildren(this.host);\n\n    const sortedFacets = this.sortFacetsUsingManager(facets, this.facetManager);\n\n    const {visibleFacets, invisibleFacets} = sortFacetVisibility(\n      sortedFacets,\n      this.bindings.store.getAllFacets()\n    );\n\n    const generator = getAutomaticFacetGenerator(this.host);\n\n    collapseFacetsAfter(visibleFacets, this.collapseFacetsAfter);\n\n    generator?.updateCollapseFacetsDependingOnFacetsVisibility(\n      this.collapseFacetsAfter,\n      visibleFacets.length\n    );\n\n    this.host.append(\n      ...[\n        ...visibleFacets,\n        ...invisibleFacets,\n        ...(generator ? [generator] : []),\n      ]\n    );\n  };\n\n  private validateProps() {\n    new Schema({\n      collapseFacetAfter: new NumberValue({min: -1, required: true}),\n    }).validate({\n      collapseFacetAfter: this.collapseFacetsAfter,\n    });\n  }\n\n  private sortFacetsUsingManager(\n    facets: BaseFacetElement[],\n    facetManager: FacetManager\n  ): BaseFacetElement[] {\n    const payload = facets.map((f) => ({\n      facetId: f.facetId,\n      payload: f,\n    }));\n    return facetManager.sort(payload).map((f) => f.payload);\n  }\n\n  disconnectedCallback() {\n    this.bindings.i18n.off('languageChanged', this.sortFacets);\n  }\n\n  public render() {\n    return <slot />;\n  }\n}\n"],"mappings":"8pBA4BaA,EAAkB,M,yBAoBCC,KAAAC,oBAAsB,EAU5CD,KAAAE,WAAa,KACnB,MAAMC,EAASC,EAAoBJ,KAAKK,MAExC,MAAMC,EAAeN,KAAKO,uBAAuBJ,EAAQH,KAAKQ,cAE9D,MAAMC,cAACA,EAAaC,gBAAEA,GAAmBC,EACvCL,EACAN,KAAKY,SAASC,MAAMC,gBAGtB,MAAMC,EAAYC,EAA2BhB,KAAKK,MAElDJ,EAAoBQ,EAAeT,KAAKC,qBAExCc,IAAS,MAATA,SAAS,SAATA,EAAWE,gDACTjB,KAAKC,oBACLQ,EAAcS,QAGhBlB,KAAKK,KAAKc,UACL,IACEV,KACAC,KACCK,EAAY,CAACA,GAAa,IAEjC,E,+EAnCiD,C,CAE7C,UAAAK,GACLpB,KAAKqB,gBACLrB,KAAKQ,aAAec,EAAkBtB,KAAKY,SAASW,QAGpDvB,KAAKY,SAASY,KAAKC,GAAG,kBAAmBzB,KAAKE,W,CA+BxC,aAAAmB,GACN,IAAIK,EAAO,CACTC,mBAAoB,IAAIC,EAAY,CAACC,KAAM,EAAGC,SAAU,SACvDC,SAAS,CACVJ,mBAAoB3B,KAAKC,qB,CAIrB,sBAAAM,CACNJ,EACAK,GAEA,MAAMwB,EAAU7B,EAAO8B,KAAKC,IAAC,CAC3BC,QAASD,EAAEC,QACXH,QAASE,MAEX,OAAO1B,EAAa4B,KAAKJ,GAASC,KAAKC,GAAMA,EAAEF,S,CAGjD,oBAAAK,GACErC,KAAKY,SAASY,KAAKc,IAAI,kBAAmBtC,KAAKE,W,CAG1C,MAAAqC,GACL,OAAOC,EAAA,QAAAC,IAAA,4C,6BAjFoBC,EAAA,CAA5BC,K,+BASMD,EAAA,CAJNE,EAAsB,eAAgB,CACrCC,uBAAwB,gB"}