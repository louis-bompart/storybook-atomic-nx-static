{"file":"atomic-automatic-facet-generator2.js","mappings":";;;;;;;;;AAAA,MAAM,gCAAgC,GAAG,u+tCAAu+tC,CAAC;AACjhuC,4CAAe,gCAAgC;;;;;;;;;;;;MCgClC,6BAA6B;;;;;;;;;;;QAqBV,iBAAY,GAAG,CAAC,CAAC;;;;;;;QAQjB,mBAAc,GAAG,CAAC,CAAC;QAEhC,wBAAmB,GAAG,CAAC,CAAC,CAAC;;;;4BAVG,CAAC;8BAQC,CAAC;mCAET,CAAC,CAAC;;IAElC,UAAU;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,GAAGA,EAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,uBAAuB,GAAGC,EAA4B,CACzD,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB;YACE,OAAO,EAAE;gBACP,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,cAAc,EAAE,IAAI,CAAC,cAAc;aACpC;SACF,CACF,CAAC;KACH;IAGM,MAAM,+CAA+C,CAC1D,aAAqB,EACrB,qBAA6B;QAE7B,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;YACxB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;YAC9B,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CACjC,CAAC,EACD,aAAa,GAAG,qBAAqB,CACtC,CAAC;KACH;IAEO,aAAa;QACnB,IAAI,MAAM,CAAC;YACT,kBAAkB,EAAE,IAAI,WAAW,CAAC,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;SAChE,CAAC,CAAC,QAAQ,CAAC;YACV,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;SAC7C,CAAC,CAAC;KACJ;IAEO,mBAAmB,CAAC,KAAa;QACvC,IAAI,IAAI,CAAC,mBAAmB,KAAK,CAAC,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,mBAAmB;cAC3B,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB;cACpC,IAAI,CAAC;KACV;IAEM,MAAM;QACX,MAAM,eAAe,GACnB,IAAI,CAAC,4BAA4B,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK;YACjE,QACE,8BACE,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EACtB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EACxB,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EAC1B,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GACpB,EAC1B;SACH,CAAC,CAAC;QACL,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE;YAChD,OAAO,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAC,EAAE,CAAC,CAAC,EAAE,KAAK,MACtD,EAAC,gBAAgB,IACf,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAC5C,CACH,CAAC,CAAC;SACJ;QAED,OAAO,eAAe,CAAC;KACxB;;;;;;;;;;;AAtG4B;IAA5B,kBAAkB,EAAE;+DAA4B;AAMzC;IAFP,qBAAqB,CAAC,yBAAyB,CAAC;mFAEmB;AAK7D;IAFN,qBAAqB,CAAC,cAAc,CAAC;wEAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["buildSearchStatus","buildAutomaticFacetGenerator"],"sources":["src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  AutomaticFacetGenerator,\n  AutomaticFacetGeneratorState,\n  SearchStatus,\n  SearchStatusState,\n  buildAutomaticFacetGenerator,\n  buildSearchStatus,\n} from '@coveo/headless';\nimport {Component, Method, Prop, State, h} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\n * and requested in the query, automatic facets are dynamically generated by the index\n * in response to the search query.\n *\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\n *\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\n */\n@Component({\n  tag: 'atomic-automatic-facet-generator',\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\n  shadow: false,\n})\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @State() public error!: Error;\n\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\n  @BindStateToController('automaticFacetGenerator')\n  @State()\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\n\n  public searchStatus!: SearchStatus;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n\n  /**\n   * The desired count of automatic facets.\n   *\n   * Minimum: `1`\n   * Maximum: `20`\n   * @defaultValue `5`\n   */\n  @Prop({reflect: true}) public desiredCount = 5;\n\n  /**\n   * The desired number of automatically generated facet values.\n   *\n   * Minimum: `1`\n   * @defaultValue `8`\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n\n  @State() private collapseFacetsAfter = -1;\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\n      this.bindings.engine,\n      {\n        options: {\n          desiredCount: this.desiredCount,\n          numberOfValues: this.numberOfValues,\n        },\n      }\n    );\n  }\n\n  @Method()\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\n    collapseAfter: number,\n    numberOfVisibleFacets: number\n  ) {\n    if (collapseAfter === -1) {\n      this.collapseFacetsAfter = -1;\n      return;\n    }\n    this.collapseFacetsAfter = Math.max(\n      0,\n      collapseAfter - numberOfVisibleFacets\n    );\n  }\n\n  private validateProps() {\n    new Schema({\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\n    }).validate({\n      collapseFacetAfter: this.collapseFacetsAfter,\n    });\n  }\n\n  private shouldCollapseFacet(index: number): boolean {\n    if (this.collapseFacetsAfter === -1) {\n      return false;\n    }\n    return this.collapseFacetsAfter\n      ? index + 1 > this.collapseFacetsAfter\n      : true;\n  }\n\n  public render() {\n    const automaticFacets =\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\n        return (\n          <atomic-automatic-facet\n            key={facet.state.field}\n            field={facet.state.field}\n            facetId={facet.state.field}\n            facet={facet}\n            searchStatus={this.searchStatus}\n            isCollapsed={this.shouldCollapseFacet(index)}\n          ></atomic-automatic-facet>\n        );\n      });\n    if (!this.searchStatus.state.firstSearchExecuted) {\n      return Array.from({length: this.desiredCount}, (_, index) => (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.shouldCollapseFacet(index)}\n        />\n      ));\n    }\n\n    return automaticFacets;\n  }\n}\n"],"version":3}