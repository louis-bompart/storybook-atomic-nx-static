{"file":"atomic-aria-live.entry.cjs.js","mappings":";;;;;;;;;MAsBa,cAAc;;;QAER,YAAO,GAAsB,EAAE,CAAC;QAEzC,kBAAa,GAAGA,iCAAmB,CAAC,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;QAClD,OAAE,GAAGC,cAAQ,CAAC,YAAY,CAAC,CAAC;uBAHU,EAAE;;IAMtC,cAAc,CAAC,EAAC,MAAM,EAAE,IAAI,EAAqC;QACzE,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;SAC1B;KACF;IAED,IAAY,mBAAmB;QAC7B,IAAI,OAAO,GAAmB,IAAI,CAAC,IAAI,CAAC;QACxC,OAAO,OAAO,EAAE;YACd,IAAI,OAAO,CAAC,OAAO,KAAK,yBAAyB,EAAE;gBACjD,OAAO,IAAI,CAAC;aACb;YACD,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;SACjC;QACD,OAAO,KAAK,CAAC;KACd;;;;IAMM,MAAM,aAAa,CACxB,MAAc,EACd,OAAe,EACf,SAAkB;QAElB,MAAM,YAAY,GAAG,OAClB,IAAI,CAAC,OAAO,GAAG,EAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,EAAC,SAAS,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;QAErE,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SAClD;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAChD,YAAY,EAAE,CAAC;SAChB;KACF;;;;IAMM,MAAM,cAAc,CAAC,MAAc,EAAE,SAAkB;QAC5D,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,OAAO,GAAG,EAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,EAAC,SAAS,EAAE,OAAO,EAAE,EAAE,EAAC,EAAC,CAAC;KACtE;IAEM,oBAAoB;QACzB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KAC5B;IAEM,MAAM;QACX,QACEC,QAACC,UAAI,qDACH,KAAK,EAAE;gBACL,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,GAAG;gBACX,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,GAAG;aACZ,IAEA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAC/B,CAAC,CAAC,UAAU,EAAE,EAAC,SAAS,EAAE,OAAO,EAAC,CAAC,MACjCD,iBACE,GAAG,EAAE,UAAU,EACf,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,UAAU,EAAE,eACnB,SAAS,GAAG,WAAW,GAAG,QAAQ,EAC7C,IAAI,EAAC,QAAQ,IAEZ,OAAO,CACJ,CACP,CACF,CACI,EACP;KACH;;;;;;","names":["buildDebouncedQueue","randomID","h","Host"],"sources":["src/components/search/atomic-search-interface/atomic-aria-live.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  Host,\n  State,\n  Element,\n  Method,\n  Listen,\n} from '@stencil/core';\nimport {FindAriaLiveEventArgs} from '../../../utils/accessibility-utils';\nimport {buildDebouncedQueue} from '../../../utils/debounce-utils';\nimport {randomID} from '../../../utils/utils';\n\ntype Regions = {[regionName: string]: {assertive: boolean; message: string}};\n\n/**\n * The `atomic-aria-live` component notifies screen readers of changes in the search interface.\n */\n@Component({\n  tag: 'atomic-aria-live',\n  shadow: false,\n})\nexport class AtomicAriaLive {\n  @Element() private host!: HTMLAtomicAriaLiveElement;\n  @State() private regions: Readonly<Regions> = {};\n\n  private messagesQueue = buildDebouncedQueue({delay: 500});\n  private id = randomID('aria-live-');\n\n  @Listen('atomic/accessibility/findAriaLive', {target: 'document'})\n  protected onFindAriaLive({detail: args}: CustomEvent<FindAriaLiveEventArgs>) {\n    if (!args.element || !this.isInSearchInterface) {\n      args.element = this.host;\n    }\n  }\n\n  private get isInSearchInterface() {\n    let element: Element | null = this.host;\n    while (element) {\n      if (element.tagName === 'ATOMIC-SEARCH-INTERFACE') {\n        return true;\n      }\n      element = element.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  @Method()\n  public async updateMessage(\n    region: string,\n    message: string,\n    assertive: boolean\n  ) {\n    const updateRegion = () =>\n      (this.regions = {...this.regions, [region]: {assertive, message}});\n\n    if (message) {\n      this.messagesQueue.enqueue(updateRegion, region);\n    } else {\n      this.messagesQueue.cancelActionIfQueued(region);\n      updateRegion();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  @Method()\n  public async registerRegion(region: string, assertive: boolean) {\n    if (region in this.regions) {\n      return;\n    }\n    this.regions = {...this.regions, [region]: {assertive, message: ''}};\n  }\n\n  public disconnectedCallback() {\n    this.messagesQueue.clear();\n  }\n\n  public render() {\n    return (\n      <Host\n        style={{\n          position: 'absolute',\n          display: 'block',\n          height: '0',\n          overflow: 'hidden',\n          margin: '0',\n        }}\n      >\n        {Object.entries(this.regions).map(\n          ([regionName, {assertive, message}]) => (\n            <div\n              key={regionName}\n              id={`${this.id}-${regionName}`}\n              aria-live={assertive ? 'assertive' : 'polite'}\n              role=\"status\"\n            >\n              {message}\n            </div>\n          )\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}