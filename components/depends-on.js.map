{"file":"depends-on.js","mappings":"SAcgB,cAAc,CAE5B,SAAiC;IACjC,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,MAAM,8CAA8C,CAAC;KACtD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,aAAa,CAAC;QAClE,OAAO;YACL,aAAa;YACb,SAAS,EAAE,CAAC,MAAM;gBAChB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK;oBACvB,IAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE;wBAC/B,MAAM,aAAa,GAAG,oCAAoC,CAAC,KAAK,CAAC,CAAC;wBAClE,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,KAAK,CAAC;yBACd;wBACD,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,IAAI,CAAC;yBACb;wBACD,OAAO,aAAa,CAAC,KAAK,KAAK,aAAa,CAAC;qBAC9C;oBACD,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;wBAC7B,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;4BAC9B,OAAO,KAAK,CAAC;yBACd;wBACD,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,IAAI,CAAC;yBACb;wBACD,OAAO,KAAK,CAAC,KAAK,KAAK,aAAa,CAAC;qBACtC;oBACD,OAAO,KAAK,CAAC;iBACd,CAAC,CAAC;aACJ;SACF,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AAED,SAAS,oBAAoB,CAAC,OAAgB;IAC5C,MAAM,eAAe,GAAG,OAAkC,CAAC;IAC3D,QACE,CAAC,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ;QACxB,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC;SACvC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,KAAK,CAAA;QACtB,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ,MAAM,IAAI,EACrD;AACJ,CAAC;AAED,SAAS,oCAAoC,CAC3C,KAAc;IAEd,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;QAChC,OAAO,IAAI,CAAC;KACb;IACD,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;QAC9B,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;QAClC,MAAM,aAAa,GAAG,oCAAoC,CAAC,KAAK,CAAC,CAAC;QAClE,IAAI,aAAa,KAAK,IAAI,EAAE;YAC1B,OAAO,aAAa,CAAC;SACtB;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,kBAAkB,CAAC,KAAc;IACxC,MAAM,QAAQ,GAAG,KAAgC,CAAC;IAClD,QACE,OAAO,IAAI,QAAQ;QACnB,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ;QAClC,EAAE,UAAU,IAAI,QAAQ,CAAC,EACzB;AACJ;;;;","names":[],"sources":["src/components/common/facets/depends-on.ts"],"sourcesContent":["type GenericCondition<AnyFacetValueRequest> = {\n  parentFacetId: string;\n  condition(parentValues: AnyFacetValueRequest[]): boolean;\n};\n\ninterface SimpleFacetValue {\n  value: string;\n  state: string;\n}\n\ninterface CategoryFacetValue extends SimpleFacetValue {\n  children: SimpleFacetValue[];\n}\n\nexport function parseDependsOn<\n  FacetValue extends SimpleFacetValue | CategoryFacetValue,\n>(dependsOn: Record<string, string>): GenericCondition<FacetValue>[] {\n  if (Object.keys(dependsOn).length > 1) {\n    throw \"Depending on multiple facets isn't supported\";\n  }\n\n  return Object.entries(dependsOn).map(([parentFacetId, expectedValue]) => {\n    return {\n      parentFacetId,\n      condition: (values) => {\n        return values.some((value) => {\n          if (isCategoryFacetValue(value)) {\n            const selectedValue = getSelectedCategoryFacetValueRequest(value);\n            if (!selectedValue) {\n              return false;\n            }\n            if (!expectedValue) {\n              return true;\n            }\n            return selectedValue.value === expectedValue;\n          }\n          if (isSimpleFacetValue(value)) {\n            if (value.state !== 'selected') {\n              return false;\n            }\n            if (!expectedValue) {\n              return true;\n            }\n            return value.value === expectedValue;\n          }\n          return false;\n        });\n      },\n    };\n  });\n}\n\nfunction isCategoryFacetValue(request: unknown): request is CategoryFacetValue {\n  const requestAsRecord = request as Record<string, unknown>;\n  return (\n    (requestAsRecord?.children &&\n      Array.isArray(requestAsRecord.children) &&\n      requestAsRecord?.state &&\n      typeof requestAsRecord.state === 'string') === true\n  );\n}\n\nfunction getSelectedCategoryFacetValueRequest(\n  value: unknown\n): CategoryFacetValue | null {\n  if (!isCategoryFacetValue(value)) {\n    return null;\n  }\n  if (value.state === 'selected') {\n    return value;\n  }\n  for (const child of value.children) {\n    const selectedValue = getSelectedCategoryFacetValueRequest(child);\n    if (selectedValue !== null) {\n      return selectedValue;\n    }\n  }\n  return null;\n}\n\nfunction isSimpleFacetValue(value: unknown): value is SimpleFacetValue {\n  const asRecord = value as Record<string, unknown>;\n  return (\n    'value' in asRecord &&\n    typeof asRecord.value === 'string' &&\n    !('children' in asRecord)\n  );\n}\n"],"version":3}