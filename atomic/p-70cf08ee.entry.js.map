{"version":3,"names":["atomicFieldConditionCss","AtomicFieldConditionStyle0","AtomicFieldCondition","this","mustMatch","mustNotMatch","conditions","shouldBeRemoved","componentWillLoad","ifDefined","fieldNames","split","push","ResultTemplatesHelpers","fieldsMustBeDefined","ifNotDefined","fieldsMustNotBeDefined","makeMatchConditions","render","every","condition","result","h","componentDidLoad","host","remove","__decorate","MapProp","splitValues","ResultContext"],"sources":["src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.pcss?tag=atomic-field-condition","src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.tsx"],"sourcesContent":["atomic-field-condition {\n  max-width: 100%;\n}\n","import {\n  Result,\n  ResultTemplateCondition,\n  ResultTemplatesHelpers,\n} from '@coveo/headless';\nimport {Component, Prop, h, Element} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {makeMatchConditions} from '../../../common/result-templates/result-template-common';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.\n * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n */\n@Component({\n  tag: 'atomic-field-condition',\n  styleUrl: 'atomic-field-condition.pcss',\n  shadow: false,\n})\nexport class AtomicFieldCondition {\n  @Element() host!: HTMLElement;\n\n  /**\n   * Verifies whether the specified fields are defined.\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n  /**\n   * Verifies whether the specified fields are not defined.\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  @MapProp({splitValues: true}) mustMatch: Record<string, string[]> = {};\n\n  @MapProp({splitValues: true}) mustNotMatch: Record<string, string[]> = {};\n\n  private conditions: ResultTemplateCondition[] = [];\n  private shouldBeRemoved = false;\n\n  @ResultContext() private result!: Result;\n\n  public componentWillLoad() {\n    if (this.ifDefined) {\n      const fieldNames = this.ifDefined.split(',');\n      this.conditions.push(\n        ResultTemplatesHelpers.fieldsMustBeDefined(fieldNames)\n      );\n    }\n\n    if (this.ifNotDefined) {\n      const fieldNames = this.ifNotDefined.split(',');\n      this.conditions.push(\n        ResultTemplatesHelpers.fieldsMustNotBeDefined(fieldNames)\n      );\n    }\n\n    this.conditions.push(\n      ...makeMatchConditions(this.mustMatch, this.mustNotMatch)\n    );\n  }\n\n  public render() {\n    if (!this.conditions.every((condition) => condition(this.result))) {\n      this.shouldBeRemoved = true;\n      return '';\n    }\n\n    return <slot />;\n  }\n\n  public componentDidLoad() {\n    this.shouldBeRemoved && this.host.remove();\n  }\n}\n"],"mappings":"qWAAA,MAAMA,EAA0B,yCAChC,MAAAC,EAAeD,E,iXCoBFE,EAAoB,M,yBAYDC,KAAAC,UAAsC,GAEtCD,KAAAE,aAAyC,GAE/DF,KAAAG,WAAwC,GACxCH,KAAAI,gBAAkB,M,qDAInB,iBAAAC,GACL,GAAIL,KAAKM,UAAW,CAClB,MAAMC,EAAaP,KAAKM,UAAUE,MAAM,KACxCR,KAAKG,WAAWM,KACdC,EAAuBC,oBAAoBJ,G,CAI/C,GAAIP,KAAKY,aAAc,CACrB,MAAML,EAAaP,KAAKY,aAAaJ,MAAM,KAC3CR,KAAKG,WAAWM,KACdC,EAAuBG,uBAAuBN,G,CAIlDP,KAAKG,WAAWM,QACXK,EAAoBd,KAAKC,UAAWD,KAAKE,c,CAIzC,MAAAa,GACL,IAAKf,KAAKG,WAAWa,OAAOC,GAAcA,EAAUjB,KAAKkB,UAAU,CACjElB,KAAKI,gBAAkB,KACvB,MAAO,E,CAGT,OAAOe,EAAA,Y,CAGF,gBAAAC,GACLpB,KAAKI,iBAAmBJ,KAAKqB,KAAKC,Q,6BAvCNC,EAAA,CAA7BC,EAAQ,CAACC,YAAa,Q,gCAEOF,EAAA,CAA7BC,EAAQ,CAACC,YAAa,Q,mCAKEF,EAAA,CAAxBG,K"}