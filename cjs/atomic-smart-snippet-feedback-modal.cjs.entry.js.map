{"file":"atomic-smart-snippet-feedback-modal.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;AAAA,MAAM,kCAAkC,GAAG,m2uCAAm2uC,CAAC;AAC/4uC,8CAAe,kCAAkC;;;;;;;;;;;;MCmDpC,+BAA+B;;;;QAUJ,WAAM,GAAG,KAAK,CAAC;QAIpC,WAAM,GAAGA,cAAQ,CAChC,2CAA2C,CAC5C,CAAC;;;sBAN6C,KAAK;;;IAWpD,eAAe,CAAC,MAAe;QAC7B,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;SAChC;KACF;IAED,UAAU;QACR,IAAI,CAAC,YAAY,GAAGC,eAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,+BAA+B,GAAG,IAAIC,+DAA+B,CAAC;YACzE,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI;YACxB,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,gBAAgB,EAAE,MAAM,IAAI,CAAC,aAAa;YAC1C,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,kBAAkB,EAAE,MAAM,IAAI,CAAC,eAAe;YAC9C,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,SAAS,EAAE,MAAM,IAAI,CAAC,MAAM;YAC5B,SAAS,EAAE,MAAM,IAAI,CAAC,MAAM;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;YACpC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YAClD,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;SACvD,CAAC,CAAC;KACJ;IAEO,SAAS,CAAC,MAAe;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;IAEO,gBAAgB,CAAC,MAAsC;QAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;KAC7B;IAEO,kBAAkB,CAAC,GAAyB;QAClD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;KAC5B;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,+BAA+B,CAAC,MAAM,EAAE,CAAC;KACtD;;;;;;AA3D4B;IAA5BC,sCAAkB,EAAE;iEAA4B;;;;;","names":["randomID","buildSmartSnippet","SmartSnippetFeedbackModalCommon","InitializeBindings"],"sources":["src/components/search/smart-snippets/atomic-smart-snippet-feedback-modal/atomic-smart-snippet-feedback-modal.pcss?tag=atomic-smart-snippet-feedback-modal&encapsulation=shadow","src/components/search/smart-snippets/atomic-smart-snippet-feedback-modal/atomic-smart-snippet-feedback-modal.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet-feedback-modal/atomic-smart-snippet-feedback-modal.pcss';\r\n","import {\r\n  buildSmartSnippet,\r\n  SmartSnippet,\r\n  SmartSnippetFeedback,\r\n} from '@coveo/headless';\r\nimport {\r\n  Component,\r\n  State,\r\n  Prop,\r\n  Watch,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {SmartSnippetFeedbackModalCommon} from '../../../common/smart-snippets/atomic-smart-snippet-feedback-modal/smart-snippet-feedback-modal-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-smart-snippet-feedback-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-smart-snippet` is initialized.\r\n *\r\n * When the modal is opened, the class `atomic-modal-opened` is added to the body, allowing further customization.\r\n *\r\n * @part backdrop - The transparent backdrop hiding the content behind the modal.\r\n * @part container - The modal's outermost container with the outline and background.\r\n * @part header-wrapper - The wrapper around the header.\r\n * @part header - The header of the modal, containing the title.\r\n * @part header-ruler - The horizontal ruler underneath the header.\r\n * @part body-wrapper - The wrapper around the body.\r\n * @part body - The body of the modal, between the header and the footer.\r\n * @part form - The wrapper around the reason and details.\r\n * @part reason-title - The title above the reason radio buttons.\r\n * @part reason - A wrapper around the radio button and the label of a reason.\r\n * @part reason-radio - A radio button representing a reason.\r\n * @part reason-label - A label linked to a radio button representing a reason.\r\n * @part details-title - The title above the details input.\r\n * @part details-input - The input to specify additional details.\r\n * @part footer-wrapper - The wrapper with a shadow around the footer.\r\n * @part footer - The footer at the bottom of the modal.\r\n * @part buttons - The wrapper around the cancel and submit buttons.\r\n * @part cancel-button - The cancel button.\r\n * @part submit-button - The submit button.\r\n */\r\n@Component({\r\n  tag: 'atomic-smart-snippet-feedback-modal',\r\n  styleUrl: 'atomic-smart-snippet-feedback-modal.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSmartSnippetFeedbackModal implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @Element() public host!: HTMLElement;\r\n  public smartSnippet!: SmartSnippet;\r\n\r\n  @State() public error!: Error;\r\n\r\n  private smartSnippetFeedbackModalCommon!: SmartSnippetFeedbackModalCommon;\r\n\r\n  @Prop({mutable: true}) source?: HTMLElement;\r\n  @Prop({reflect: true, mutable: true}) isOpen = false;\r\n\r\n  @State() currentAnswer?: SmartSnippetFeedback | 'other' | undefined;\r\n  private detailsInputRef?: HTMLTextAreaElement;\r\n  private readonly formId = randomID(\r\n    'atomic-smart-snippet-feedback-modal-form-'\r\n  );\r\n\r\n  @Event() feedbackSent!: EventEmitter;\r\n\r\n  @Watch('isOpen')\r\n  watchToggleOpen(isOpen: boolean) {\r\n    if (isOpen) {\r\n      this.smartSnippet.openFeedbackModal();\r\n      this.currentAnswer = undefined;\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    this.smartSnippet = buildSmartSnippet(this.bindings.engine);\r\n    this.smartSnippetFeedbackModalCommon = new SmartSnippetFeedbackModalCommon({\r\n      formId: this.formId,\r\n      getHost: () => this.host,\r\n      getBindings: () => this.bindings,\r\n      getCurrentAnswer: () => this.currentAnswer,\r\n      getSmartSnippet: () => this.smartSnippet,\r\n      getDetailsInputRef: () => this.detailsInputRef,\r\n      getFeedbackSent: () => this.feedbackSent,\r\n      getSource: () => this.source,\r\n      getIsOpen: () => this.isOpen,\r\n      setIsOpen: this.setIsOpen.bind(this),\r\n      setCurrentAnswer: this.setCurrentAnswer.bind(this),\r\n      setDetailsInputRef: this.setDetailsInputRef.bind(this),\r\n    });\r\n  }\r\n\r\n  private setIsOpen(isOpen: boolean) {\r\n    this.isOpen = isOpen;\r\n  }\r\n\r\n  private setCurrentAnswer(answer: SmartSnippetFeedback | 'other') {\r\n    this.currentAnswer = answer;\r\n  }\r\n\r\n  private setDetailsInputRef(ref?: HTMLTextAreaElement) {\r\n    this.detailsInputRef = ref;\r\n  }\r\n\r\n  public render() {\r\n    return this.smartSnippetFeedbackModalCommon.render();\r\n  }\r\n}\r\n"],"version":3}