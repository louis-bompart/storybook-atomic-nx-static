{"version":3,"names":["atomicInsightNumericFacetCss","AtomicInsightNumericFacetStyle0","AtomicInsightNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","initialize","validateProps","computeFacetId","initializeFacetForInput","initializeFacetForRange","initializeFilter","initializeDependenciesManager","initializeSearchStatus","registerFacetToStore","focusTarget","headerFocus","FocusTargetController","disconnectedCallback","_a","dependenciesManager","stopWatching","withInput","facetForInput","buildInsightNumericFacet","bindings","engine","options","facetId","generateAutomaticRanges","field","Array","from","host","querySelectorAll","map","start","end","endInclusive","buildInsightNumericRange","facetForRange","currentValues","length","filter","buildInsightNumericFilter","buildInsightFacetConditionsManager","_b","state","conditions","parseDependsOn","searchStatus","buildInsightSearchStatus","facetInfo","i18n","t","element","isHidden","store","registerFacet","format","value","formatHumanReadable","facetValue","logger","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","numericFacets","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadInsightNumericFacetSetActions","deselectAllNumericFacetValues","render","searchStatusState","firstSearchExecuted","hasError","h","FacetGuard","key","enabled","hasResults","shouldRenderFacet","FacetContainer","FacetHeader","onClearFilters","focusAfterSearch","filterState","range","clear","_c","deselectAll","onToggleCollapse","headerRef","el","setTarget","shouldRenderValues","renderValues","shouldRenderInput","type","FacetPlaceholder","NumericFacetValuesContainer","valuesToRender","NumericFacetValueLink","onClick","toggleSingleSelect","toggleSelect","values","hasInputRange","numberOfResults","shouldDisplayInputForFacetRange","facetValues","hasInput","get","randomID","facetState","_d","Schema","StringValue","constrainTo","validate","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.pcss?tag=atomic-insight-numeric-facet&encapsulation=shadow","src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.tsx"],"sourcesContent":["@import '../../common/facets/numeric-facet-common.pcss';\r\n","import {Schema, StringValue} from '@coveo/bueno';\r\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightFacetConditionsManager,\r\n  buildInsightNumericFacet,\r\n  buildInsightNumericFilter,\r\n  buildInsightNumericRange,\r\n  buildInsightSearchStatus,\r\n  InsightCategoryFacetValueRequest,\r\n  InsightFacetConditionsManager,\r\n  InsightFacetValueRequest,\r\n  InsightNumericFacet,\r\n  InsightNumericFacetState,\r\n  InsightNumericFilter,\r\n  InsightNumericFilterState,\r\n  InsightNumericRangeRequest,\r\n  InsightRangeFacetRangeAlgorithm,\r\n  InsightRangeFacetSortCriterion,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n  loadInsightNumericFacetSetActions,\r\n} from '..';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../utils/props-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {parseDependsOn} from '../../common/facets/depends-on';\r\nimport {shouldDisplayInputForFacetRange} from '../../common/facets/facet-common';\r\nimport {FacetInfo} from '../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../common/facets/facet-container/facet-container';\r\nimport {FacetGuard} from '../../common/facets/facet-guard';\r\nimport {FacetHeader} from '../../common/facets/facet-header/facet-header';\r\nimport {NumberInputType} from '../../common/facets/facet-number-input/number-input-type';\r\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {formatHumanReadable} from '../../common/facets/numeric-facet/formatter';\r\nimport {NumericFacetValueLink} from '../../common/facets/numeric-facet/value-link';\r\nimport {NumericFacetValuesContainer} from '../../common/facets/numeric-facet/values-container';\r\nimport {\r\n  defaultNumberFormatter,\r\n  NumberFormatter,\r\n} from '../../common/formats/format-common';\r\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-numeric-facet',\r\n  styleUrl: './atomic-insight-numeric-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightNumericFacet\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public facetForRange?: InsightNumericFacet;\r\n  public facetForInput?: InsightNumericFacet;\r\n  public filter?: InsightNumericFilter;\r\n  public searchStatus!: InsightSearchStatus;\r\n  private manualRanges: (InsightNumericRangeRequest & {label?: string})[] = [];\r\n  private dependenciesManager?: InsightFacetConditionsManager;\r\n\r\n  @Element() private host!: HTMLElement;\r\n  private formatter: NumberFormatter = defaultNumberFormatter;\r\n  @BindStateToController('facetForRange')\r\n  @State()\r\n  public facetState!: InsightNumericFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: InsightNumericFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() public error!: Error;\r\n  @BindStateToController('facetForInput')\r\n  @State()\r\n  public facetForInputState?: InsightNumericFacetState;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of values to request for this facet, when there are no manual ranges.\r\n   * If the number of values is 0, no ranges will be displayed.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n  /**\r\n   * Whether this facet should contain an input allowing users to set custom ranges.\r\n   * Depending on the field, the input can allow either decimal or integer values.\r\n   */\r\n  @Prop({reflect: true}) public withInput?: NumberInputType;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\r\n    'ascending';\r\n  /**\r\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\r\n   */\r\n  @Prop({reflect: true})\r\n  public rangeAlgorithm: InsightRangeFacetRangeAlgorithm = 'equiprobable';\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\r\n   * Possible values are 'checkbox' and 'link'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\r\n    'checkbox';\r\n  /**\r\n   * Specifies if the facet is collapsed.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-numeric-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-insight-numeric-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-numeric-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-insight-numeric-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.computeFacetId();\r\n    this.initializeFacetForInput();\r\n    this.initializeFacetForRange();\r\n    this.initializeFilter();\r\n    this.initializeDependenciesManager();\r\n    this.initializeSearchStatus();\r\n    this.registerFacetToStore();\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private initializeFacetForInput() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n    this.facetForInput = buildInsightNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input_range`,\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        field: this.field,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForInput;\r\n  }\r\n\r\n  private initializeFacetForRange() {\r\n    if (this.numberOfValues <= 0) {\r\n      return;\r\n    }\r\n\r\n    this.manualRanges = Array.from(\r\n      this.host.querySelectorAll('atomic-numeric-range')\r\n    ).map(({start, end, endInclusive, label}) => ({\r\n      ...buildInsightNumericRange({start, end, endInclusive}),\r\n      label,\r\n    }));\r\n\r\n    this.facetForRange = buildInsightNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        numberOfValues: this.numberOfValues,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        currentValues: this.manualRanges,\r\n        generateAutomaticRanges: !this.manualRanges.length,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n\r\n    this.filter = buildInsightNumericFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildInsightFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId:\r\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\r\n        conditions: parseDependsOn<\r\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private initializeSearchStatus() {\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  private registerFacetToStore() {\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n\r\n    this.bindings.store.registerFacet('numericFacets', {\r\n      ...facetInfo,\r\n      format: (value) =>\r\n        formatHumanReadable({\r\n          facetValue: value,\r\n          logger: this.bindings.engine.logger,\r\n          i18n: this.bindings.i18n,\r\n          field: this.field,\r\n          manualRanges: this.manualRanges,\r\n          formatter: this.formatter,\r\n        }),\r\n    });\r\n\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => this.hasValues,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n\r\n    if (this.filter) {\r\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\r\n        this.bindings.store.state.numericFacets[this.facetId!];\r\n    }\r\n  }\r\n\r\n  @Listen('atomic/numberFormat')\r\n  public setFormat(event: CustomEvent<NumberFormatter>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.formatter = event.detail;\r\n  }\r\n\r\n  @Listen('atomic/numberInputApply')\r\n  public applyNumberInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadInsightNumericFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllNumericFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      searchStatusState: {firstSearchExecuted, hasError},\r\n      bindings: {i18n},\r\n      label,\r\n      numberOfSelectedValues,\r\n      isCollapsed,\r\n      headingLevel,\r\n      focusTarget,\r\n      withInput,\r\n      filter,\r\n    } = this;\r\n    return (\r\n      <FacetGuard\r\n        enabled={this.enabled}\r\n        firstSearchExecuted={firstSearchExecuted}\r\n        hasError={hasError}\r\n        hasResults={this.shouldRenderFacet}\r\n      >\r\n        {firstSearchExecuted ? (\r\n          <FacetContainer>\r\n            <FacetHeader\r\n              i18n={i18n}\r\n              label={label}\r\n              onClearFilters={() => {\r\n                focusTarget.focusAfterSearch();\r\n                if (this.filterState?.range) {\r\n                  this.filter?.clear();\r\n                  return;\r\n                }\r\n                this.facetForRange?.deselectAll();\r\n              }}\r\n              numberOfActiveValues={numberOfSelectedValues}\r\n              isCollapsed={isCollapsed}\r\n              headingLevel={headingLevel}\r\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n              headerRef={(el) => focusTarget.setTarget(el)}\r\n            />\r\n            {!isCollapsed && [\r\n              this.shouldRenderValues && this.renderValues(),\r\n              this.shouldRenderInput && (\r\n                <atomic-facet-number-input\r\n                  type={withInput!}\r\n                  bindings={this.bindings}\r\n                  label={label}\r\n                  filter={filter!}\r\n                  filterState={filter!.state}\r\n                ></atomic-facet-number-input>\r\n              ),\r\n            ]}\r\n          </FacetContainer>\r\n        ) : (\r\n          <FacetPlaceholder\r\n            isCollapsed={this.isCollapsed}\r\n            numberOfValues={this.numberOfValues}\r\n          />\r\n        )}\r\n      </FacetGuard>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    const {\r\n      displayValuesAs,\r\n      field,\r\n      manualRanges,\r\n      label,\r\n      bindings: {\r\n        i18n,\r\n        engine: {logger},\r\n      },\r\n    } = this;\r\n\r\n    return (\r\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\r\n        {this.valuesToRender.map((value) => (\r\n          <NumericFacetValueLink\r\n            formatter={this.formatter}\r\n            displayValuesAs={displayValuesAs}\r\n            facetValue={value}\r\n            field={field}\r\n            i18n={i18n}\r\n            logger={logger}\r\n            manualRanges={manualRanges}\r\n            onClick={() =>\r\n              this.displayValuesAs === 'link'\r\n                ? this.facetForRange!.toggleSingleSelect(value)\r\n                : this.facetForRange!.toggleSelect(value)\r\n            }\r\n          />\r\n        ))}\r\n      </NumericFacetValuesContainer>\r\n    );\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    if (this.filter?.state.range) {\r\n      return 1;\r\n    }\r\n\r\n    return (\r\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\r\n        .length || 0\r\n    );\r\n  }\r\n\r\n  private get shouldRenderValues() {\r\n    return (\r\n      !this.hasInputRange &&\r\n      this.numberOfValues > 0 &&\r\n      !!this.valuesToRender.length\r\n    );\r\n  }\r\n\r\n  private get hasInputRange() {\r\n    return !!this.filter?.state.range;\r\n  }\r\n\r\n  private get valuesToRender() {\r\n    return (\r\n      this.facetForRange?.state.values.filter(\r\n        (value) => value.numberOfResults || value.state !== 'idle'\r\n      ) || []\r\n    );\r\n  }\r\n\r\n  private get shouldRenderInput() {\r\n    return shouldDisplayInputForFacetRange({\r\n      hasInputRange: this.hasInputRange,\r\n      searchStatusState: this.searchStatusState,\r\n      facetValues: this.facetForInput?.state.values || [],\r\n      hasInput: !!this.withInput,\r\n    });\r\n  }\r\n\r\n  private computeFacetId() {\r\n    if (this.facetId) {\r\n      return;\r\n    }\r\n\r\n    if (this.bindings.store.get('numericFacets')[this.field]) {\r\n      this.facetId = randomID(`${this.field}_`);\r\n    }\r\n\r\n    this.facetId = this.field;\r\n  }\r\n\r\n  private get isHidden() {\r\n    return !this.shouldRenderFacet || !this.facetState.enabled;\r\n  }\r\n\r\n  private get shouldRenderFacet() {\r\n    return this.shouldRenderInput || this.shouldRenderValues;\r\n  }\r\n\r\n  private get hasValues() {\r\n    if (this.facetForInput?.state.values.length) {\r\n      return true;\r\n    }\r\n\r\n    return !!this.valuesToRender.length;\r\n  }\r\n\r\n  private get enabled() {\r\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\r\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\r\n    }).validate({\r\n      displayValuesAs: this.displayValuesAs,\r\n      withInput: this.withInput,\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"}