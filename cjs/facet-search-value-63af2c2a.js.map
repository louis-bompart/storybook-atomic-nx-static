{"file":"facet-search-value-63af2c2a.js","mappings":";;;;;;;;;AAEA,MAAM,yCAAyC,GAAG,CAAC,CAAC;MAQvC,qBAAqB,GAE9B,CAAC,EAAC,UAAU,EAAE,iBAAiB,EAAE,uBAAuB,EAAC,EAAE,QAAQ;IACrE,IAAI,CAAC,UAAU,EAAE;QACf,OAAO;KACR;;;IAID,IACE,CAAC,iBAAiB;QAClB,uBAAuB,GAAG,yCAAyC,EACnE;QACA,OAAO;KACR;IAED,OAAOA,QAACC,cAAQ,QAAE,QAAQ,CAAY,CAAC;AACzC;;MCLa,UAAU,GAAyC,CAAC,EAC/D,gBAAgB,EAChB,eAAe,EACf,eAAe,EACf,UAAU,EACV,UAAU,EACV,UAAU,EACV,KAAK,EACL,IAAI,EACJ,SAAS,EACT,QAAQ,EACR,MAAM,GACP;IACC,MAAM,YAAY,GAAGC,+BAAoB,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IACnE,MAAM,UAAU,GAAG,UAAU,KAAK,UAAU,CAAC;IAC7C,MAAM,UAAU,GAAG,UAAU,KAAK,UAAU,CAAC;IAC7C,MAAM,aAAa,GAAG,eAAe;UACjC;YACE,SAAS;YACT,KAAK,EAAE,UAAU;SAClB;UACD,EAAE,CAAC;IACP,QAAQ,eAAe;QACrB,KAAK,UAAU;YACb,QACEF,QAACG,qCAAkB,OACb,aAAa,EACjB,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAEDH,QAACI,iDAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACT,EACrB;QACJ,KAAK,MAAM;YACT,QACEJ,QAACK,6BAAc,IACb,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAEDL,QAACI,iDAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACb,EACjB;QACJ,KAAK,KAAK;YACR,QACEJ,QAACM,2BAAa,IACZ,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAEDN,QAACI,iDAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACd,EAChB;KACL;AACH;;MCzGa,gBAAgB,GAEzB,CAAC,KAAK;IACR,OAAOJ,QAAC,UAAU,OAAK,KAAK,EAAE,UAAU,EAAC,MAAM,GAAG,CAAC;AACrD;;;;;;","names":["h","Fragment","getFieldValueCaption","FacetValueCheckbox","FacetValueLabelHighlight","FacetValueLink","FacetValueBox"],"sources":["src/components/common/facets/facet-search/facet-search-input-guard.tsx","src/components/common/facets/facet-value/facet-value.tsx","src/components/common/facets/facet-search/facet-search-value.tsx"],"sourcesContent":["import {Fragment, FunctionalComponent, h} from '@stencil/core';\n\nconst MIN_VALUES_WHERE_FACET_SEARCH_IMPROVES_UX = 9;\n\ninterface FacetSearchInputGuardProps {\n  withSearch: boolean;\n  canShowMoreValues: boolean;\n  numberOfDisplayedValues: number;\n}\n\nexport const FacetSearchInputGuard: FunctionalComponent<\n  FacetSearchInputGuardProps\n> = ({withSearch, canShowMoreValues, numberOfDisplayedValues}, children) => {\n  if (!withSearch) {\n    return;\n  }\n\n  // Hide the input if there are no more values to load from the index and there are less than 8 values to display.\n  // 8 is an arbitrary number, discussed with UX as a good compromise: A list long enough where it's worth searching.\n  if (\n    !canShowMoreValues &&\n    numberOfDisplayedValues < MIN_VALUES_WHERE_FACET_SEARCH_IMPROVES_UX\n  ) {\n    return;\n  }\n\n  return <Fragment>{children}</Fragment>;\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {FacetValueBox} from '../facet-value-box/facet-value-box';\nimport {FacetValueCheckbox} from '../facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLabelHighlight} from '../facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValueLink} from '../facet-value-link/facet-value-link';\n\nexport interface FacetValueProps {\n  field: string;\n  facetValue: string;\n  facetCount: number;\n  facetState: 'idle' | 'selected' | 'excluded';\n  i18n: i18n;\n  enableExclusion: boolean;\n  onExclude: () => void;\n  onSelect: () => void;\n  displayValuesAs: 'checkbox' | 'link' | 'box';\n  facetSearchQuery: string;\n  setRef?: (btn?: HTMLButtonElement) => void;\n}\n\nexport const FacetValue: FunctionalComponent<FacetValueProps> = ({\n  facetSearchQuery,\n  displayValuesAs,\n  enableExclusion,\n  facetCount,\n  facetState,\n  facetValue,\n  field,\n  i18n,\n  onExclude,\n  onSelect,\n  setRef,\n}) => {\n  const displayValue = getFieldValueCaption(field, facetValue, i18n);\n  const isSelected = facetState === 'selected';\n  const isExcluded = facetState === 'excluded';\n  const triStateProps = enableExclusion\n    ? {\n        onExclude,\n        state: facetState,\n      }\n    : {};\n  switch (displayValuesAs) {\n    case 'checkbox':\n      return (\n        <FacetValueCheckbox\n          {...triStateProps}\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            isExcluded={isExcluded}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueCheckbox>\n      );\n    case 'link':\n      return (\n        <FacetValueLink\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueLink>\n      );\n    case 'box':\n      return (\n        <FacetValueBox\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueBox>\n      );\n  }\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {FacetValueProps, FacetValue} from '../facet-value/facet-value';\n\nexport const FacetSearchValue: FunctionalComponent<\n  Omit<FacetValueProps, 'facetState' | 'setRef'>\n> = (props) => {\n  return <FacetValue {...props} facetState=\"idle\" />;\n};\n"],"version":3}