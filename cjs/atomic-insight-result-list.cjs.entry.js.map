{"file":"atomic-insight-result-list.entry.cjs.js","mappings":"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","names":["randomID","buildInsightResultList","buildInsightResultsPerPage","ItemTemplateProvider","ItemListCommon","FocusTargetController","h","ItemListGuard","DisplayWrapper","ResultsPlaceholdersGuard","ItemDisplayGuard","getItemListDisplayClasses","buildInsightInteractiveResult","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.pcss?tag=atomic-insight-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\n@import '../styles/list-display.pcss';\n","import {Component, h, Element, State, Prop, Method} from '@stencil/core';\nimport {\n  InsightResultList,\n  InsightResultListState,\n  buildInsightResultList,\n  InsightResult,\n  buildInsightInteractiveResult,\n  buildInsightResultsPerPage,\n  InsightResultsPerPage,\n  InsightResultsPerPageState,\n} from '../..';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\nimport {\n  ItemListCommon,\n  ItemRenderingFunction,\n} from '../../../common/item-list/item-list-common';\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {\n  getItemListDisplayClasses,\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-list',\n  styleUrl: 'atomic-insight-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicInsightResultList\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public resultList!: InsightResultList;\n  public resultsPerPage!: InsightResultsPerPage;\n  private loadingFlag = randomID('firstInsightResultLoaded-');\n  private itemRenderingFunction: ItemRenderingFunction;\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private nextNewResultTarget?: FocusTargetController;\n  private display: ItemDisplayLayout = 'list';\n  private itemListCommon!: ItemListCommon;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultsPerPage')\n  @State()\n  public resultsPerPageState!: InsightResultsPerPageState;\n  @BindStateToController('resultList')\n  @State()\n  public resultListState!: InsightResultListState;\n  @State() private templateHasError = false;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n\n  public initialize() {\n    this.resultList = buildInsightResultList(this.bindings.engine, {\n      options: {\n        fieldsToInclude: this.bindings.store.state.fieldsToInclude || undefined,\n      },\n    });\n    this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-insight-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.itemListCommon = new ItemListCommon({\n      engineSubscribe: this.bindings.engine.subscribe,\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\n      getIsLoading: () => this.resultListState.isLoading,\n      host: this.host,\n      loadingFlag: this.loadingFlag,\n      nextNewItemTarget: this.focusTarget,\n      store: this.bindings.store,\n    });\n  }\n\n  public get focusTarget(): FocusTargetController {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public render() {\n    this.itemListCommon.updateBreakpoints();\n    const listClasses = this.computeListDisplayClasses();\n\n    return (\n      <ItemListGuard\n        hasTemplate={this.resultTemplateRegistered}\n        templateHasError={this.itemTemplateProvider.hasError}\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\n        hasItems={this.resultListState.hasResults}\n        hasError={this.resultListState.hasError}\n      >\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\n          <ResultsPlaceholdersGuard\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\n            display={this.display}\n            density={this.density}\n            imageSize={this.imageSize}\n          ></ResultsPlaceholdersGuard>\n          <ItemDisplayGuard\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\n            hasItems={this.resultListState.hasResults}\n          >\n            {this.resultListState.results.map((result, i) => {\n              const atomicInsightResultProps =\n                this.getPropsForAtomicInsightResult(result);\n              return (\n                <atomic-insight-result\n                  {...atomicInsightResultProps}\n                  part=\"outline\"\n                  ref={(element) =>\n                    element && this.itemListCommon.setNewResultRef(element, i)\n                  }\n                ></atomic-insight-result>\n              );\n            })}\n          </ItemDisplayGuard>\n        </DisplayWrapper>\n      </ItemListGuard>\n    );\n  }\n\n  private computeListDisplayClasses() {\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\n\n    return getItemListDisplayClasses(\n      this.display,\n      this.density,\n      this.imageSize,\n      this.resultListState.firstSearchExecuted &&\n        this.resultListState.isLoading,\n      displayPlaceholders\n    );\n  }\n\n  private getPropsForAtomicInsightResult(result: InsightResult) {\n    return {\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\n        options: {result},\n      }),\n      result,\n      renderingFunction: this.itemRenderingFunction,\n      loadingFlag: this.loadingFlag,\n      key: this.itemListCommon.getResultId(\n        result.uniqueId,\n        this.resultListState.searchResponseId,\n        this.density,\n        this.imageSize\n      ),\n      content: this.itemTemplateProvider.getTemplateContent(result),\n      store: this.bindings.store,\n      density: this.density,\n      imageSize: this.imageSize,\n      display: this.display,\n    };\n  }\n}\n"],"version":3}