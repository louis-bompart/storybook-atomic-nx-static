{"version":3,"names":["atomicIconCss","AtomicIconStyle0","IconFetchError","Error","fromStatusCode","url","statusCode","statusText","fromError","error","constructor","errorMessage","errorObject","super","this","AtomicIcon","svg","fetchIcon","response","fetch","catch","e","status","text","forceUpdate","validateSVG","test","bindings","engine","logger","warn","icon","getIcon","parseAssetURL","store","getIconAssetsPath","sanitizedSvg","sanitize","USE_PROFILES","svgFilters","updateIcon","svgPromise","initialize","render","console","host","remove","h","Host","innerHTML","__decorate","InitializeBindings"],"sources":["src/components/common/atomic-icon/atomic-icon.pcss?tag=atomic-icon","src/components/common/atomic-icon/atomic-icon.tsx"],"sourcesContent":["@import '../../../global/polyfills.pcss';\n\natomic-icon {\n  display: inline-block;\n  fill: currentColor;\n  @mixin aspect-ratio-h 1 / 1, auto;\n\n  > svg {\n    width: 100%;\n    max-height: 100%;\n    @mixin aspect-ratio-h 1 / 1, auto;\n  }\n}\n","import {\n  Component,\n  Element,\n  forceUpdate,\n  h,\n  Host,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport {sanitize} from 'dompurify';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {parseAssetURL} from '../../../utils/utils';\nimport {AnyBindings} from '../interface/bindings';\n\nclass IconFetchError extends Error {\n  static fromStatusCode(url: string, statusCode: number, statusText: string) {\n    return new IconFetchError(url, `status code ${statusCode} (${statusText})`);\n  }\n\n  static fromError(url: string, error: unknown) {\n    return new IconFetchError(url, 'an error', error);\n  }\n\n  private constructor(\n    public readonly url: string,\n    errorMessage: string,\n    public readonly errorObject?: unknown\n  ) {\n    super(`Could not fetch icon from ${url}, got ${errorMessage}.`);\n  }\n}\n\n/**\n * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.\n *\n * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.\n */\n@Component({\n  tag: 'atomic-icon',\n  styleUrl: 'atomic-icon.pcss',\n  shadow: false,\n  assetsDirs: ['assets'],\n})\nexport class AtomicIcon implements InitializableComponent<AnyBindings> {\n  @Element() host!: HTMLElement;\n\n  @InitializeBindings() public bindings!: AnyBindings;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) icon!: string;\n\n  public error!: Error;\n  @State() private svg: string | null = null;\n\n  private async fetchIcon(url: string) {\n    try {\n      const response = await fetch(url).catch((e) => {\n        throw IconFetchError.fromError(url, e);\n      });\n      if (response.status !== 200 && response.status !== 304) {\n        throw IconFetchError.fromStatusCode(\n          url,\n          response.status,\n          response.statusText\n        );\n      }\n      return await response.text();\n    } catch (e) {\n      this.error = e as Error;\n      forceUpdate(this);\n      return null;\n    }\n  }\n\n  private validateSVG(svg: string) {\n    if (!/^<svg[\\s\\S]+<\\/svg>$/gm.test(svg)) {\n      this.bindings.engine.logger.warn(\n        'The inline \"icon\" prop is not an svg element. You may encounter rendering issues.',\n        this.icon\n      );\n    }\n  }\n\n  private async getIcon() {\n    const url = parseAssetURL(\n      this.icon,\n      this.bindings.store.getIconAssetsPath()\n    );\n    const svg = url ? await this.fetchIcon(url) : this.icon;\n\n    if (svg) {\n      this.validateSVG(svg);\n    }\n    const sanitizedSvg = svg\n      ? sanitize(svg, {\n          USE_PROFILES: {svg: true, svgFilters: true},\n        })\n      : null;\n    return sanitizedSvg;\n  }\n\n  @Watch('icon')\n  public async updateIcon() {\n    const svgPromise = this.getIcon();\n    this.svg = await svgPromise;\n  }\n\n  public initialize() {\n    this.updateIcon();\n  }\n\n  public render() {\n    if (this.error) {\n      console.error(this.error, this.host);\n      this.host.remove();\n      return;\n    }\n    return <Host innerHTML={this.svg} aria-hidden=\"true\"></Host>;\n  }\n}\n"],"mappings":"+LAAA,MAAMA,EAAgB,6RACtB,MAAAC,EAAeD,E,2WCiBf,MAAME,UAAuBC,MAC3B,qBAAOC,CAAeC,EAAaC,EAAoBC,GACrD,OAAO,IAAIL,EAAeG,EAAK,eAAeC,MAAeC,K,CAG/D,gBAAOC,CAAUH,EAAaI,GAC5B,OAAO,IAAIP,EAAeG,EAAK,WAAYI,E,CAG7C,WAAAC,CACkBL,EAChBM,EACgBC,GAEhBC,MAAM,6BAA6BR,UAAYM,MAJ/BG,KAAAT,MAEAS,KAAAF,a,QAiBPG,EAAU,M,yBAeJD,KAAAE,IAAqB,K,6BAAA,I,CAE9B,eAAMC,CAAUZ,GACtB,IACE,MAAMa,QAAiBC,MAAMd,GAAKe,OAAOC,IACvC,MAAMnB,EAAeM,UAAUH,EAAKgB,EAAE,IAExC,GAAIH,EAASI,SAAW,KAAOJ,EAASI,SAAW,IAAK,CACtD,MAAMpB,EAAeE,eACnBC,EACAa,EAASI,OACTJ,EAASX,W,CAGb,aAAaW,EAASK,M,CACtB,MAAOF,GACPP,KAAKL,MAAQY,EACbG,EAAYV,MACZ,OAAO,I,EAIH,WAAAW,CAAYT,GAClB,IAAK,yBAAyBU,KAAKV,GAAM,CACvCF,KAAKa,SAASC,OAAOC,OAAOC,KAC1B,oFACAhB,KAAKiB,K,EAKH,aAAMC,GACZ,MAAM3B,EAAM4B,EACVnB,KAAKiB,KACLjB,KAAKa,SAASO,MAAMC,qBAEtB,MAAMnB,EAAMX,QAAYS,KAAKG,UAAUZ,GAAOS,KAAKiB,KAEnD,GAAIf,EAAK,CACPF,KAAKW,YAAYT,E,CAEnB,MAAMoB,EAAepB,EACjBqB,mBAASrB,EAAK,CACZsB,aAAc,CAACtB,IAAK,KAAMuB,WAAY,QAExC,KACJ,OAAOH,C,CAIF,gBAAMI,GACX,MAAMC,EAAa3B,KAAKkB,UACxBlB,KAAKE,UAAYyB,C,CAGZ,UAAAC,GACL5B,KAAK0B,Y,CAGA,MAAAG,GACL,GAAI7B,KAAKL,MAAO,CACdmC,QAAQnC,MAAMK,KAAKL,MAAOK,KAAK+B,MAC/B/B,KAAK+B,KAAKC,SACV,M,CAEF,OAAOC,EAACC,EAAI,CAACC,UAAWnC,KAAKE,IAAG,cAAc,Q,wHA7EnBkC,EAAA,CAA5BC,K"}