{"file":"atomic-insight-refine-modal2.js","mappings":"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","names":["buildInsightQuerySummary","buildInsightBreadcrumbManager"],"sources":["src/utils/dom-utils.tsx","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.pcss?tag=atomic-insight-refine-modal&encapsulation=shadow","src/components/insight/atomic-insight-refine-modal/atomic-insight-refine-modal.tsx"],"sourcesContent":["export function rectEquals(r1: DOMRect, r2: DOMRect) {\r\n  return (\r\n    r1.x === r2.x &&\r\n    r1.y === r2.y &&\r\n    r1.width === r2.width &&\r\n    r1.height === r2.height\r\n  );\r\n}\r\n","@import '../../common/refine-modal/refine-modal-common.pcss';\r\n","import {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\r\nimport {\r\n  InsightQuerySummary,\r\n  InsightQuerySummaryState,\r\n  buildInsightQuerySummary,\r\n  InsightBreadcrumbManager,\r\n  InsightBreadcrumbManagerState,\r\n  buildInsightBreadcrumbManager,\r\n} from '..';\r\nimport {rectEquals} from '../../../utils/dom-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Button} from '../../common/button';\r\nimport {Hidden} from '../../common/hidden';\r\nimport {\r\n  getClonedFacetElements,\r\n  RefineModalCommon,\r\n} from '../../common/refine-modal/refine-modal-common';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-refine-modal',\r\n  styleUrl: 'atomic-insight-refine-modal.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightRefineModal\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  @Element() public host!: HTMLElement;\r\n\r\n  @BindStateToController('querySummary')\r\n  @State()\r\n  public querySummaryState!: InsightQuerySummaryState;\r\n\r\n  @BindStateToController('breadcrumbManager')\r\n  @State()\r\n  public breadcrumbManagerState!: InsightBreadcrumbManagerState;\r\n\r\n  @State()\r\n  public error!: Error;\r\n\r\n  @State()\r\n  public interfaceDimensions?: DOMRect;\r\n\r\n  @Prop({mutable: true}) openButton?: HTMLElement;\r\n\r\n  @Prop({reflect: true, mutable: true}) isOpen = false;\r\n\r\n  public querySummary!: InsightQuerySummary;\r\n  private breadcrumbManager!: InsightBreadcrumbManager;\r\n\r\n  @Watch('isOpen')\r\n  watchEnabled(isOpen: boolean) {\r\n    if (isOpen) {\r\n      if (!this.host.querySelector('div[slot=\"facets\"]')) {\r\n        this.host.append(\r\n          getClonedFacetElements(\r\n            this.bindings.store.getFacetElements(),\r\n            0,\r\n            this.bindings.interfaceElement\r\n          )\r\n        );\r\n      }\r\n      this.onAnimationFrame();\r\n    }\r\n  }\r\n\r\n  private onAnimationFrame() {\r\n    if (!this.isOpen) {\r\n      return;\r\n    }\r\n    if (this.dimensionChanged()) {\r\n      this.updateDimensions();\r\n    }\r\n    window.requestAnimationFrame(() => this.onAnimationFrame());\r\n  }\r\n\r\n  private dimensionChanged() {\r\n    if (!this.interfaceDimensions) {\r\n      return true;\r\n    }\r\n\r\n    return !rectEquals(\r\n      this.interfaceDimensions,\r\n      this.bindings.interfaceElement.getBoundingClientRect()\r\n    );\r\n  }\r\n\r\n  public updateDimensions() {\r\n    this.interfaceDimensions =\r\n      this.bindings.interfaceElement.getBoundingClientRect();\r\n  }\r\n\r\n  public initialize() {\r\n    this.querySummary = buildInsightQuerySummary(this.bindings.engine);\r\n    this.breadcrumbManager = buildInsightBreadcrumbManager(\r\n      this.bindings.engine\r\n    );\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <div class=\"w-full flex justify-between mb-3\">\r\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\r\n          <Button\r\n            onClick={() => this.breadcrumbManager.deselectAll()}\r\n            style=\"text-primary\"\r\n            text={this.bindings.i18n.t('clear-all-filters')}\r\n            class=\"px-2 py-1\"\r\n          ></Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderBody() {\r\n    if (!this.bindings.store.getFacetElements().length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <aside slot=\"body\" class=\"flex flex-col w-full adjust-for-scroll-bar\">\r\n        {this.renderHeader()}\r\n        <slot name=\"facets\"></slot>\r\n      </aside>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Host>\r\n        {this.interfaceDimensions && (\r\n          <style>\r\n            {`atomic-modal::part(backdrop) {\r\n            top: ${this.interfaceDimensions.top}px;\r\n            left: ${this.interfaceDimensions.left}px;\r\n            width: ${this.interfaceDimensions.width}px;\r\n            height: ${this.interfaceDimensions.height}px;\r\n            }`}\r\n          </style>\r\n        )}\r\n        <RefineModalCommon\r\n          bindings={this.bindings}\r\n          host={this.host}\r\n          isOpen={this.isOpen}\r\n          onClose={() => (this.isOpen = false)}\r\n          querySummaryState={this.querySummaryState}\r\n          title={this.bindings.i18n.t('filters')}\r\n          openButton={this.openButton}\r\n          scope={this.bindings.interfaceElement}\r\n        >\r\n          {this.renderBody()}\r\n        </RefineModalCommon>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    this.host.style.display = '';\r\n  }\r\n}\r\n"],"version":3}