{"version":3,"names":["getAnalyticsConfig","searchEngineConfig","enabled","_a","analytics","analyticsMode","getNextAnalyticsConfig","getLegacyAnalyticsConfig","analyticsClientMiddleware","event","payload","augmentAnalytics","defaultConfiguration","documentLocation","document","location","href","referrer","originLevel3","config","result","augmentWithExternalMiddleware","augmentAnalyticsWithAtomicVersion","createAtomicInsightStore","commonStore","createAtomicCommonStore","facets","numericFacets","dateFacets","categoryFacets","loadingFlags","iconAssetsPath","fieldsToInclude","facetElements","getUniqueIDFromEngine","engine","state","search","searchResponseId","atomicInsightInterfaceCss","AtomicInsightInterfaceStyle0","FirstInsightRequestExecutedFlag","AtomicInsightInterface","constructor","hostRef","this","initialized","i18n","i18next","createInstance","localizationCompatibilityVersion","language","languageAssetsPath","resultsPerPage","store","commonInterfaceHelper","CommonAtomicInterfaceHelper","connectedCallback","setLoadingFlag","componentWillLoad","CspNonce","setNonce","initResultsPerPage","engineIsCreated","buildInsightResultsPerPage","bindings","initialState","numberOfResults","registerFieldsToInclude","length","dispatch","loadFieldActions","getOrganizationEndpoints","organizationId","env","getOrganizationEndpointsInsight","initialize","options","internalInitialization","initEngine","initializeWithInsightEngine","executeFirstSearch","console","error","host","updateIconAssetsPath","set","handleInitialization","onComponentInitializing","updateLanguage","onLanguageChange","toggleAnalytics","onAnalyticsChange","interfaceElement","createStyleElement","styleTag","createElement","setAttribute","createScriptElement","analyticsConfig","buildInsightEngine","configuration","loggerOptions","level","logLevel","onInitialization","unsetLoadingFlag","render","h","key","name","__decorate","ArrayProp"],"sources":["src/components/insight/atomic-insight-interface/analytics-config.ts","src/components/insight/atomic-insight-interface/store.ts","src/components/insight/atomic-insight-interface/atomic-insight-interface.pcss?tag=atomic-insight-interface&encapsulation=shadow","src/components/insight/atomic-insight-interface/atomic-insight-interface.tsx"],"sourcesContent":["import {InsightAnalyticsConfiguration, InsightEngineConfiguration} from '..';\r\nimport {\r\n  AnalyticsPayload,\r\n  augmentAnalyticsWithAtomicVersion,\r\n  augmentWithExternalMiddleware,\r\n  getNextAnalyticsConfig,\r\n} from '../../common/interface/analytics-config';\r\n\r\nexport function getAnalyticsConfig(\r\n  searchEngineConfig: InsightEngineConfiguration,\r\n  enabled: boolean\r\n): InsightAnalyticsConfiguration {\r\n  switch (searchEngineConfig.analytics?.analyticsMode) {\r\n    case 'next':\r\n      return getNextAnalyticsConfig(searchEngineConfig, enabled);\r\n    case 'legacy':\r\n    default:\r\n      return getLegacyAnalyticsConfig(searchEngineConfig, enabled);\r\n  }\r\n}\r\n\r\nfunction getLegacyAnalyticsConfig(\r\n  searchEngineConfig: InsightEngineConfiguration,\r\n  enabled: boolean\r\n): InsightAnalyticsConfiguration {\r\n  const analyticsClientMiddleware = (\r\n    event: string,\r\n    payload: AnalyticsPayload\r\n  ) => augmentAnalytics(event, payload, searchEngineConfig);\r\n\r\n  const defaultConfiguration: InsightAnalyticsConfiguration = {\r\n    analyticsClientMiddleware,\r\n    enabled,\r\n    documentLocation: document.location.href,\r\n    ...(document.referrer && {originLevel3: document.referrer}),\r\n  };\r\n\r\n  if (searchEngineConfig.analytics) {\r\n    return {\r\n      ...defaultConfiguration,\r\n      ...searchEngineConfig.analytics,\r\n      analyticsClientMiddleware,\r\n    };\r\n  }\r\n  return defaultConfiguration;\r\n}\r\n\r\nfunction augmentAnalytics(\r\n  event: string,\r\n  payload: AnalyticsPayload,\r\n  config: InsightEngineConfiguration\r\n) {\r\n  let result = augmentWithExternalMiddleware(event, payload, config);\r\n  result = augmentAnalyticsWithAtomicVersion(result);\r\n  return result;\r\n}\r\n","import {\r\n  InsightDateFacetValue,\r\n  InsightEngine,\r\n  InsightNumericFacetValue,\r\n} from '..';\r\nimport {\r\n  FacetInfo,\r\n  FacetStore,\r\n  FacetValueFormat,\r\n} from '../../common/facets/facet-common-store';\r\nimport {\r\n  AtomicCommonStore,\r\n  AtomicCommonStoreData,\r\n  createAtomicCommonStore,\r\n} from '../../common/interface/store';\r\n\r\nexport interface AtomicInsightStoreData extends AtomicCommonStoreData {\r\n  fieldsToInclude: string[];\r\n  facets: FacetStore<FacetInfo>;\r\n  numericFacets: FacetStore<\r\n    FacetInfo & FacetValueFormat<InsightNumericFacetValue>\r\n  >;\r\n  dateFacets: FacetStore<FacetInfo & FacetValueFormat<InsightDateFacetValue>>;\r\n  categoryFacets: FacetStore<FacetInfo>;\r\n}\r\n\r\nexport interface AtomicInsightStore\r\n  extends AtomicCommonStore<AtomicInsightStoreData> {}\r\n\r\nexport function createAtomicInsightStore(): AtomicInsightStore {\r\n  const commonStore = createAtomicCommonStore<AtomicInsightStoreData>({\r\n    facets: {},\r\n    numericFacets: {},\r\n    dateFacets: {},\r\n    categoryFacets: {},\r\n    loadingFlags: [],\r\n    iconAssetsPath: '',\r\n    fieldsToInclude: [],\r\n    facetElements: [],\r\n  });\r\n  return {\r\n    ...commonStore,\r\n\r\n    getUniqueIDFromEngine(engine: InsightEngine): string {\r\n      return engine.state.search.searchResponseId;\r\n    },\r\n  };\r\n}\r\n","@import '../../../global/global.pcss';\r\n\r\n:host {\r\n  position: relative;\r\n}\r\n\r\nslot[name='full-search'] {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  display: block;\r\n}\r\n","import {loadFieldActions} from '@coveo/headless/insight';\r\nimport {\r\n  Component,\r\n  Element,\r\n  h,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  setNonce,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport i18next, {i18n} from 'i18next';\r\nimport {\r\n  InsightLogLevel,\r\n  InsightEngine,\r\n  InsightEngineConfiguration,\r\n  buildInsightEngine,\r\n  buildInsightResultsPerPage,\r\n  getOrganizationEndpointsInsight,\r\n  PlatformEnvironmentInsight,\r\n} from '..';\r\nimport {InitializeEvent} from '../../../utils/initialization-utils';\r\nimport {ArrayProp} from '../../../utils/props-utils';\r\nimport {CommonBindings, NonceBindings} from '../../common/interface/bindings';\r\nimport {i18nCompatibilityVersion} from '../../common/interface/i18n';\r\nimport {\r\n  BaseAtomicInterface,\r\n  CommonAtomicInterfaceHelper,\r\n} from '../../common/interface/interface-common';\r\nimport {getAnalyticsConfig} from './analytics-config';\r\nimport {AtomicInsightStore, createAtomicInsightStore} from './store';\r\n\r\nconst FirstInsightRequestExecutedFlag = 'firstInsightRequestExecuted';\r\nexport type InsightInitializationOptions = InsightEngineConfiguration;\r\nexport type InsightBindings = CommonBindings<\r\n  InsightEngine,\r\n  AtomicInsightStore,\r\n  HTMLAtomicInsightInterfaceElement\r\n> &\r\n  NonceBindings;\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-interface',\r\n  styleUrl: 'atomic-insight-interface.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightInterface\r\n  implements BaseAtomicInterface<InsightEngine>\r\n{\r\n  private initialized = false;\r\n\r\n  @State() public error?: Error;\r\n\r\n  /**\r\n   * The service insight interface headless engine.\r\n   */\r\n  @Prop({mutable: true}) public engine?: InsightEngine;\r\n  /**\r\n   * Whether analytics should be enabled.\r\n   */\r\n  @Prop({reflect: true}) public analytics = true;\r\n\r\n  /**\r\n   * The service insight interface i18next instance.\r\n   */\r\n  @Prop() public i18n: i18n = i18next.createInstance();\r\n  /**\r\n   * The severity level of the messages to log in the console.\r\n   */\r\n  @Prop({reflect: true}) public logLevel?: InsightLogLevel;\r\n  /**\r\n   * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).\r\n   */\r\n  @Prop() public localizationCompatibilityVersion: i18nCompatibilityVersion =\r\n    'v3';\r\n  /**\r\n   * The service insight interface language.\r\n   */\r\n  @Prop({reflect: true}) public language = 'en';\r\n\r\n  /**\r\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\r\n   *\r\n   * @example: \"/mypublicpath/languages\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\r\n\r\n  /**\r\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\r\n   *\r\n   * @example: \"/mypublicpath/icons\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\r\n  /**\r\n   * A list of non-default fields to include in the query results.\r\n   *\r\n   * Specify the property as an array using a JSON string representation:\r\n   * ```html\r\n   * <atomic-insight-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-insight-interface>\r\n   * ```\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public fieldsToInclude: string[] | string = '[]';\r\n\r\n  /**\r\n   * The number of results per page. By default, this is set to `5`.\r\n   */\r\n  @Prop({reflect: true}) resultsPerPage = 5;\r\n\r\n  /**\r\n   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.\r\n   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,\r\n   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers\r\n   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').\r\n   * Otherwise you may see console errors such as\r\n   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]\r\n   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].\r\n   * When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.\r\n   * @example\r\n   * ```html\r\n   * <script nonce=\"<YOUR_GENERATED_NONCE>\">\r\n   *  import {setNonce} from '@coveo/atomic';\r\n   *  setNonce('<YOUR_GENERATED_NONCE>');\r\n   * </script>\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) public CspNonce?: string;\r\n\r\n  @Element() public host!: HTMLAtomicInsightInterfaceElement;\r\n\r\n  private store = createAtomicInsightStore();\r\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<InsightEngine>;\r\n\r\n  public constructor() {\r\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\r\n      this,\r\n      'CoveoAtomic'\r\n    );\r\n  }\r\n\r\n  public connectedCallback() {\r\n    this.store.setLoadingFlag(FirstInsightRequestExecutedFlag);\r\n  }\r\n\r\n  public componentWillLoad() {\r\n    if (this.CspNonce) {\r\n      setNonce(this.CspNonce);\r\n    }\r\n  }\r\n\r\n  private initResultsPerPage() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n    buildInsightResultsPerPage(this.bindings.engine, {\r\n      initialState: {numberOfResults: this.resultsPerPage},\r\n    });\r\n  }\r\n\r\n  public registerFieldsToInclude() {\r\n    if (this.fieldsToInclude.length) {\r\n      this.engine!.dispatch(\r\n        loadFieldActions(this.engine!).registerFieldsToInclude([\r\n          ...this.fieldsToInclude,\r\n        ])\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the unique, organization-specific endpoint(s)\r\n   * @param {string} organizationId\r\n   * @param {'prod'|'hipaa'|'staging'|'dev'} [env=Prod]\r\n   */\r\n  @Method() public async getOrganizationEndpoints(\r\n    organizationId: string,\r\n    env: PlatformEnvironmentInsight = 'prod'\r\n  ) {\r\n    return getOrganizationEndpointsInsight(organizationId, env);\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.\r\n   */\r\n  @Method() public initialize(options: InsightInitializationOptions) {\r\n    return this.internalInitialization(() => this.initEngine(options));\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with an already preconfigured headless insight engine.\r\n   *\r\n   */\r\n  @Method() public initializeWithInsightEngine(engine: InsightEngine) {\r\n    return this.internalInitialization(() => (this.engine = engine));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.\r\n   */\r\n  @Method() public async executeFirstSearch() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n    if (!this.initialized) {\r\n      console.error(\r\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\r\n        this.host\r\n      );\r\n      return;\r\n    }\r\n    this.engine.executeFirstSearch();\r\n  }\r\n\r\n  @Watch('iconAssetsPath')\r\n  public updateIconAssetsPath() {\r\n    this.store.set('iconAssetsPath', this.iconAssetsPath);\r\n  }\r\n\r\n  @Listen('atomic/initializeComponent')\r\n  public handleInitialization(event: InitializeEvent) {\r\n    this.commonInterfaceHelper.onComponentInitializing(event);\r\n  }\r\n\r\n  @Watch('language')\r\n  public updateLanguage() {\r\n    this.commonInterfaceHelper.onLanguageChange();\r\n  }\r\n\r\n  @Watch('analytics')\r\n  public toggleAnalytics() {\r\n    this.commonInterfaceHelper.onAnalyticsChange();\r\n  }\r\n\r\n  public get bindings(): InsightBindings {\r\n    return {\r\n      engine: this.engine!,\r\n      i18n: this.i18n,\r\n      store: this.store,\r\n      interfaceElement: this.host,\r\n      createStyleElement: () => {\r\n        const styleTag = document.createElement('style');\r\n        if (this.CspNonce) {\r\n          styleTag.setAttribute('nonce', this.CspNonce);\r\n        }\r\n        return styleTag;\r\n      },\r\n      createScriptElement: () => {\r\n        const styleTag = document.createElement('script');\r\n        if (this.CspNonce) {\r\n          styleTag.setAttribute('nonce', this.CspNonce);\r\n        }\r\n        return styleTag;\r\n      },\r\n    };\r\n  }\r\n\r\n  private initEngine(options: InsightInitializationOptions) {\r\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\r\n    try {\r\n      this.engine = buildInsightEngine({\r\n        configuration: {\r\n          ...options,\r\n          analytics: analyticsConfig,\r\n        },\r\n        loggerOptions: {\r\n          level: this.logLevel,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async internalInitialization(initEngine: () => void) {\r\n    await this.commonInterfaceHelper.onInitialization(initEngine);\r\n    this.store.unsetLoadingFlag(FirstInsightRequestExecutedFlag);\r\n    this.initResultsPerPage();\r\n    this.initialized = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.engine && (\r\n        <host>\r\n          <slot name=\"full-search\"></slot>\r\n          <slot></slot>\r\n        </host>\r\n      )\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}