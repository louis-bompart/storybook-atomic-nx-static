{"version":3,"names":["atomicInsightTimeframeFacetCss","AtomicInsightTimeframeFacetStyle0","AtomicInsightTimeframeFacet","this","label","field","withDatePicker","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","sortCriteria","initialize","timeframeFacetCommon","TimeframeFacetCommon","facetId","host","bindings","setFacetId","id","buildDependenciesManager","buildInsightFacetConditionsManager","engine","_b","_a","facetForDateRange","state","filter","conditions","parseDependsOn","buildDateRange","buildInsightDateRange","getSearchStatusState","searchStatusState","deserializeRelativeDate","deserializeInsightRelativeDate","initializeFacetForDatePicker","initializeFacetForDateRange","values","initializeFilter","searchStatus","buildInsightSearchStatus","focusTarget","headerFocus","FocusTargetController","disconnectedCallback","facetForDatePicker","buildInsightDateFacet","options","numberOfValues","generateAutomaticRanges","currentValues","buildInsightDateFilter","applyDateInput","dispatch","loadInsightDateFacetSetActions","deselectAllDateFacetValues","render","h","FacetPlaceholder","hasError","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.pcss?tag=atomic-insight-timeframe-facet&encapsulation=shadow","src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\n","import {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  buildInsightDateFacet,\n  buildInsightDateFilter,\n  buildInsightDateRange,\n  buildInsightFacetConditionsManager,\n  buildInsightSearchStatus,\n  deserializeInsightRelativeDate,\n  InsightDateFacet,\n  InsightDateFacetState,\n  InsightDateFilter,\n  InsightDateFilterState,\n  InsightDateRangeRequest,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n  loadInsightDateFacetSetActions,\n  InsightRangeFacetSortCriterion,\n  InsightFacetValueRequest,\n  InsightCategoryFacetValueRequest,\n} from '..';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {MapProp} from '../../../utils/props-utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {TimeframeFacetCommon} from '../../common/facets/timeframe-facet-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-timeframe-facet',\n  styleUrl: './atomic-insight-timeframe-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightTimeframeFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetForDateRange?: InsightDateFacet;\n  public facetForDatePicker?: InsightDateFacet;\n\n  private timeframeFacetCommon?: TimeframeFacetCommon;\n  public filter?: InsightDateFilter;\n  public searchStatus!: InsightSearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facetForDateRange')\n  @State()\n  public facetState!: InsightDateFacetState;\n  @BindStateToController('facetForDatePicker')\n  @State()\n  public facetForDatePickerState?: InsightDateFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: InsightDateFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the atomic-breadbox component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field = 'date';\n  /**\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\n   */\n  @Prop({reflect: true}) public withDatePicker = false;\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-insight-timeframe-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-insight-timeframe-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-insight-timeframe-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-insight-timeframe-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\n    'descending';\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\n      facetId: this.facetId,\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      dependsOn: this.dependsOn,\n      withDatePicker: this.withDatePicker,\n      setFacetId: (id: string) => (this.facetId = id),\n      buildDependenciesManager: () =>\n        buildInsightFacetConditionsManager(this.bindings.engine, {\n          facetId:\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\n          conditions: parseDependsOn<\n            InsightFacetValueRequest | InsightCategoryFacetValueRequest\n          >(this.dependsOn),\n        }),\n      buildDateRange: buildInsightDateRange,\n      getSearchStatusState: () => this.searchStatusState,\n      deserializeRelativeDate: deserializeInsightRelativeDate,\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\n      initializeFacetForDateRange: (values: InsightDateRangeRequest[]) =>\n        this.initializeFacetForDateRange(values),\n      initializeFilter: () => this.initializeFilter(),\n      sortCriteria: this.sortCriteria,\n    });\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public disconnectedCallback() {\n    this.timeframeFacetCommon?.disconnectedCallback();\n  }\n\n  private initializeFacetForDatePicker() {\n    this.facetForDatePicker = buildInsightDateFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n    return this.facetForDatePicker;\n  }\n\n  private initializeFacetForDateRange(values: InsightDateRangeRequest[]) {\n    this.facetForDateRange = buildInsightDateFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        currentValues: values,\n        generateAutomaticRanges: false,\n        sortCriteria: 'descending',\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForDateRange;\n  }\n\n  private initializeFilter() {\n    this.filter = buildInsightDateFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n\n    return this.filter;\n  }\n\n  @Listen('atomic/dateInputApply')\n  public applyDateInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadInsightDateFacetSetActions(\n          this.bindings.engine\n        ).deselectAllDateFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    if (!this.timeframeFacetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={5}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.timeframeFacetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      headerFocus: this.focusTarget,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"mappings":"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"}