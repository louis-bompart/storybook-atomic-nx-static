{"file":"facet-common-0693d706.js","mappings":"SAgBgB,+BAA+B,CAAC,UAK/C;IACC,MAAM,EAAC,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,WAAW,EAAC,GAAG,UAAU,CAAC;IAC7E,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,KAAK,CAAC;KACd;IAED,IAAI,aAAa,EAAE;QACjB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE;QACjC,OAAO,KAAK,CAAC;KACd;IAED,MAAM,6BAA6B,GACjC,WAAW,CAAC,MAAM,CAChB,CAAC,KAAK,KAAK,KAAK,CAAC,eAAe,IAAI,KAAK,CAAC,KAAK,KAAK,MAAM,CAC3D,IAAI,EAAE,CAAC;IAEV,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE;QACzC,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC;SAOe,mBAAmB,CACjC,aAAiC,EACjC,YAAuD;IAEvD,MAAM,aAAa,GAAuB,EAAE,CAAC;IAC7C,MAAM,eAAe,GAAuB,EAAE,CAAC;IAE/C,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK;QAC1B,IAAI,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACzE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;aAAM;YACL,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF,CAAC,CAAC;IAEH,OAAO,EAAC,aAAa,EAAE,eAAe,EAAC,CAAC;AAC1C,CAAC;SAEe,mBAAmB,CACjC,MAA0B,EAC1B,kBAA0B;IAE1B,IAAI,kBAAkB,KAAK,CAAC,CAAC,EAAE;QAC7B,OAAO;KACR;IAED,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK;QAC1B,KAAK,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,GAAG,kBAAkB,CAAC;KACpD,CAAC,CAAC;AACL,CAAC;SAEe,yBAAyB,CACvC,OAAoB;IAEpB,OAAO,OAAO,CAAC,OAAO,KAAK,kCAAkC,CAAC;AAChE,CAAC;AAED,SAAS,aAAa,CAAC,EAAW;IAChC,OAAO,SAAS,IAAI,EAAE,CAAC;AACzB,CAAC;SAEe,mBAAmB,CAAC,MAAmB;IACrD,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,KACtD,aAAa,CAAC,KAAK,CAAC,CACC,CAAC;IAExB,OAAO,MAAM,CAAC;AAChB,CAAC;SACe,0BAA0B,CACxC,MAAmB;IAEnB,OAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAmB,CAAC,IAAI,CACxD,yBAAyB,CAC1B,CAAC;AACJ,CAAC;AAED,MAAM,WAAW,GAAG,CAAC,KAAa,EAAE,QAAgB,CAAC,KACnD,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAE1D,SAAS,kBAAkB,CACzB,KAAuB,EACvB,OAA+B;;IAE/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,MAAA,OAAO,CAAC,CAAC,CAAC,0CAAE,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC/B,OAAO,CAAC,CAAC;SACV;KACF;IACD,OAAO,OAAO,CAAC,MAAM,CAAC;AACxB,CAAC;AAED;;;;;;;SAOgB,qBAAqB,CACnC,MAA0B,EAC1B,GAAG,OAA+B;IAElC,MAAM,YAAY,GAAyB,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3E,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAClD,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;IACD,OAAO,YAAY,CAAC;AACtB;;;;","names":[],"sources":["src/components/common/facets/facet-common.tsx"],"sourcesContent":["import {i18n} from 'i18next';\r\nimport {FacetValue, SearchStatusState} from '../types';\r\n\r\nexport interface FacetValueProps {\r\n  i18n: i18n;\r\n  displayValue: string;\r\n  numberOfResults: number;\r\n  isSelected: boolean;\r\n  onClick(): void;\r\n  searchQuery?: string;\r\n  class?: string;\r\n  part?: string;\r\n  additionalPart?: string;\r\n  buttonRef?: (element?: HTMLButtonElement) => void;\r\n}\r\n\r\nexport function shouldDisplayInputForFacetRange(facetRange: {\r\n  hasInput: boolean;\r\n  hasInputRange: boolean;\r\n  searchStatusState: SearchStatusState;\r\n  facetValues: Pick<FacetValue, 'numberOfResults' | 'state'>[];\r\n}) {\r\n  const {hasInput, hasInputRange, searchStatusState, facetValues} = facetRange;\r\n  if (!hasInput) {\r\n    return false;\r\n  }\r\n\r\n  if (hasInputRange) {\r\n    return true;\r\n  }\r\n\r\n  if (!searchStatusState.hasResults) {\r\n    return false;\r\n  }\r\n\r\n  const onlyValuesWithResultsOrActive =\r\n    facetValues.filter(\r\n      (value) => value.numberOfResults || value.state !== 'idle'\r\n    ) || [];\r\n\r\n  if (!onlyValuesWithResultsOrActive.length) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport type BaseFacetElement = HTMLElement & {\r\n  facetId: string;\r\n  isCollapsed: boolean;\r\n};\r\n\r\nexport function sortFacetVisibility(\r\n  facetElements: BaseFacetElement[],\r\n  facetInfoMap: Record<string, {isHidden: () => boolean}>\r\n) {\r\n  const visibleFacets: BaseFacetElement[] = [];\r\n  const invisibleFacets: BaseFacetElement[] = [];\r\n\r\n  facetElements.forEach((facet) => {\r\n    if (facetInfoMap[facet.facetId] && facetInfoMap[facet.facetId].isHidden()) {\r\n      invisibleFacets.push(facet);\r\n    } else {\r\n      visibleFacets.push(facet);\r\n    }\r\n  });\r\n\r\n  return {visibleFacets, invisibleFacets};\r\n}\r\n\r\nexport function collapseFacetsAfter(\r\n  facets: BaseFacetElement[],\r\n  visibleFacetsCount: number\r\n) {\r\n  if (visibleFacetsCount === -1) {\r\n    return;\r\n  }\r\n\r\n  facets.forEach((facet, index) => {\r\n    facet.isCollapsed = index + 1 > visibleFacetsCount;\r\n  });\r\n}\r\n\r\nexport function isAutomaticFacetGenerator(\r\n  element: HTMLElement\r\n): element is HTMLAtomicAutomaticFacetGeneratorElement {\r\n  return element.tagName === 'ATOMIC-AUTOMATIC-FACET-GENERATOR';\r\n}\r\n\r\nfunction isPseudoFacet(el: Element): el is BaseFacetElement {\r\n  return 'facetId' in el;\r\n}\r\n\r\nexport function getFacetsInChildren(parent: HTMLElement): BaseFacetElement[] {\r\n  const facets = Array.from(parent.children).filter((child) =>\r\n    isPseudoFacet(child)\r\n  ) as BaseFacetElement[];\r\n\r\n  return facets;\r\n}\r\nexport function getAutomaticFacetGenerator(\r\n  parent: HTMLElement\r\n): HTMLAtomicAutomaticFacetGeneratorElement | undefined {\r\n  return (Array.from(parent.children) as HTMLElement[]).find(\r\n    isAutomaticFacetGenerator\r\n  );\r\n}\r\n\r\nconst get2DMatrix = (xSize: number, ySize: number = 0) =>\r\n  new Array(xSize).fill(null).map(() => new Array(ySize));\r\n\r\nfunction findIndiceOfParent(\r\n  facet: BaseFacetElement,\r\n  parents: (HTMLElement | null)[]\r\n) {\r\n  for (let i = 0; i < parents.length; i++) {\r\n    if (parents[i]?.contains(facet)) {\r\n      return i;\r\n    }\r\n  }\r\n  return parents.length;\r\n}\r\n\r\n/**\r\n * Triage elements by their parents.\r\n * @param facets Facet Elements\r\n * @param parents Elements that may contains the facets\r\n * @returns an array in the same order as the parents, containing the facets that are contained by the corresponding parent.\r\n * The last element of the array contains the facets that are not contained by any of the parents.\r\n */\r\nexport function triageFacetsByParents(\r\n  facets: BaseFacetElement[],\r\n  ...parents: (HTMLElement | null)[]\r\n) {\r\n  const sortedFacets: BaseFacetElement[][] = get2DMatrix(parents.length + 1);\r\n  for (const facet of facets) {\r\n    const indice = findIndiceOfParent(facet, parents);\r\n    sortedFacets[indice].push(facet);\r\n  }\r\n  return sortedFacets;\r\n}\r\n"],"version":3}