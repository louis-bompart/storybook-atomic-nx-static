{"file":"atomic-automatic-facet.atomic-automatic-facet-generator.entry.js","mappings":"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","names":["__decorate","buildSearchStatus","buildAutomaticFacetGenerator"],"sources":["src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.pcss?tag=atomic-automatic-facet&encapsulation=shadow","src/components/search/facets/atomic-automatic-facet/atomic-automatic-facet.tsx","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n","import {isNullOrUndefined} from '@coveo/bueno';\nimport {AutomaticFacet, SearchStatus, FacetValue} from '@coveo/headless';\nimport {Component, Prop, State, h, VNode} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * An automatic facet is a special type of facet generated by the automatic facets feature.\n * Unlike regular facets, which need to be explicitly defined and requested in the query,\n * automatic facets are dynamically generated by the index in response to the query.\n *\n * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`\n * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.\n *\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\n *\n * @part facet - The wrapper for the entire facet.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n */\n@Component({\n  tag: 'atomic-automatic-facet',\n  styleUrl: 'atomic-automatic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicAutomaticFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @State() public error!: Error;\n\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public facetId!: string;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public facet!: AutomaticFacet;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true}) public searchStatus!: SearchStatus;\n  /**\n   * @internal\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed!: boolean;\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget() {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facet.state.values.filter((value) => this.isSelected(value))\n      .length;\n  }\n\n  private isSelected(value: FacetValue) {\n    return value.state === 'selected';\n  }\n\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\n    const displayValue = getFieldValueCaption(\n      this.facet.state.field,\n      facetValue.value,\n      this.bindings.i18n\n    );\n\n    return (\n      <FacetValueCheckbox\n        displayValue={displayValue}\n        numberOfResults={facetValue.numberOfResults}\n        isSelected={this.isSelected(facetValue)}\n        i18n={this.bindings.i18n}\n        onClick={onClick}\n      >\n        <FacetValueLabelHighlight\n          displayValue={displayValue}\n          isSelected={this.isSelected(facetValue)}\n        ></FacetValueLabelHighlight>\n      </FacetValueCheckbox>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.facet.state.label}\n        query={query}\n      >\n        <ul class={'mt-3'} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value) =>\n        this.renderValue(value, () => this.facet.toggleSelect(value))\n      )\n    );\n  }\n\n  private get label() {\n    return isNullOrUndefined(this.facet.state.label)\n      ? this.facet.state.field\n      : this.facet.state.label;\n  }\n\n  public renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={0}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  public render() {\n    if (this.searchStatus.state.hasError) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && this.renderValues()}\n      </FacetContainer>\n    );\n  }\n}\n","@import '../../../../global/global.pcss';\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  AutomaticFacetGenerator,\n  AutomaticFacetGeneratorState,\n  SearchStatus,\n  SearchStatusState,\n  buildAutomaticFacetGenerator,\n  buildSearchStatus,\n} from '@coveo/headless';\nimport {Component, Method, Prop, State, h} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\n * and requested in the query, automatic facets are dynamically generated by the index\n * in response to the search query.\n *\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\n *\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\n */\n@Component({\n  tag: 'atomic-automatic-facet-generator',\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\n  shadow: false,\n})\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @State() public error!: Error;\n\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\n  @BindStateToController('automaticFacetGenerator')\n  @State()\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\n\n  public searchStatus!: SearchStatus;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n\n  /**\n   * The desired count of automatic facets.\n   *\n   * Minimum: `1`\n   * Maximum: `20`\n   * @defaultValue `5`\n   */\n  @Prop({reflect: true}) public desiredCount = 5;\n\n  /**\n   * The desired number of automatically generated facet values.\n   *\n   * Minimum: `1`\n   * @defaultValue `8`\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n\n  @State() private collapseFacetsAfter = -1;\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\n      this.bindings.engine,\n      {\n        options: {\n          desiredCount: this.desiredCount,\n          numberOfValues: this.numberOfValues,\n        },\n      }\n    );\n  }\n\n  @Method()\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\n    collapseAfter: number,\n    numberOfVisibleFacets: number\n  ) {\n    if (collapseAfter === -1) {\n      this.collapseFacetsAfter = -1;\n      return;\n    }\n    this.collapseFacetsAfter = Math.max(\n      0,\n      collapseAfter - numberOfVisibleFacets\n    );\n  }\n\n  private validateProps() {\n    new Schema({\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\n    }).validate({\n      collapseFacetAfter: this.collapseFacetsAfter,\n    });\n  }\n\n  private shouldCollapseFacet(index: number): boolean {\n    if (this.collapseFacetsAfter === -1) {\n      return false;\n    }\n    return this.collapseFacetsAfter\n      ? index + 1 > this.collapseFacetsAfter\n      : true;\n  }\n\n  public render() {\n    const automaticFacets =\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\n        return (\n          <atomic-automatic-facet\n            key={facet.state.field}\n            field={facet.state.field}\n            facetId={facet.state.field}\n            facet={facet}\n            searchStatus={this.searchStatus}\n            isCollapsed={this.shouldCollapseFacet(index)}\n          ></atomic-automatic-facet>\n        );\n      });\n    if (!this.searchStatus.state.firstSearchExecuted) {\n      return Array.from({length: this.desiredCount}, (_, index) => (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.shouldCollapseFacet(index)}\n        />\n      ));\n    }\n\n    return automaticFacets;\n  }\n}\n"],"version":3}