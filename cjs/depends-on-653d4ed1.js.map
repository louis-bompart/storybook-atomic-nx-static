{"file":"depends-on-653d4ed1.js","mappings":";;SAcgB,cAAc,CAE5B,SAAiC;IACjC,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,MAAM,8CAA8C,CAAC;KACtD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,aAAa,CAAC;QAClE,OAAO;YACL,aAAa;YACb,SAAS,EAAE,CAAC,MAAM;gBAChB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK;oBACvB,IAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE;wBAC/B,MAAM,aAAa,GAAG,oCAAoC,CAAC,KAAK,CAAC,CAAC;wBAClE,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,KAAK,CAAC;yBACd;wBACD,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,IAAI,CAAC;yBACb;wBACD,OAAO,aAAa,CAAC,KAAK,KAAK,aAAa,CAAC;qBAC9C;oBACD,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;wBAC7B,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;4BAC9B,OAAO,KAAK,CAAC;yBACd;wBACD,IAAI,CAAC,aAAa,EAAE;4BAClB,OAAO,IAAI,CAAC;yBACb;wBACD,OAAO,KAAK,CAAC,KAAK,KAAK,aAAa,CAAC;qBACtC;oBACD,OAAO,KAAK,CAAC;iBACd,CAAC,CAAC;aACJ;SACF,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AAED,SAAS,oBAAoB,CAAC,OAAgB;IAC5C,MAAM,eAAe,GAAG,OAAkC,CAAC;IAC3D,QACE,CAAC,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ;QACxB,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC;SACvC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,KAAK,CAAA;QACtB,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ,MAAM,IAAI,EACrD;AACJ,CAAC;AAED,SAAS,oCAAoC,CAC3C,KAAc;IAEd,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;QAChC,OAAO,IAAI,CAAC;KACb;IACD,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;QAC9B,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;QAClC,MAAM,aAAa,GAAG,oCAAoC,CAAC,KAAK,CAAC,CAAC;QAClE,IAAI,aAAa,KAAK,IAAI,EAAE;YAC1B,OAAO,aAAa,CAAC;SACtB;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,kBAAkB,CAAC,KAAc;IACxC,MAAM,QAAQ,GAAG,KAAgC,CAAC;IAClD,QACE,OAAO,IAAI,QAAQ;QACnB,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ;QAClC,EAAE,UAAU,IAAI,QAAQ,CAAC,EACzB;AACJ;;;;","names":[],"sources":["src/components/common/facets/depends-on.ts"],"sourcesContent":["type GenericCondition<AnyFacetValueRequest> = {\r\n  parentFacetId: string;\r\n  condition(parentValues: AnyFacetValueRequest[]): boolean;\r\n};\r\n\r\ninterface SimpleFacetValue {\r\n  value: string;\r\n  state: string;\r\n}\r\n\r\ninterface CategoryFacetValue extends SimpleFacetValue {\r\n  children: SimpleFacetValue[];\r\n}\r\n\r\nexport function parseDependsOn<\r\n  FacetValue extends SimpleFacetValue | CategoryFacetValue,\r\n>(dependsOn: Record<string, string>): GenericCondition<FacetValue>[] {\r\n  if (Object.keys(dependsOn).length > 1) {\r\n    throw \"Depending on multiple facets isn't supported\";\r\n  }\r\n\r\n  return Object.entries(dependsOn).map(([parentFacetId, expectedValue]) => {\r\n    return {\r\n      parentFacetId,\r\n      condition: (values) => {\r\n        return values.some((value) => {\r\n          if (isCategoryFacetValue(value)) {\r\n            const selectedValue = getSelectedCategoryFacetValueRequest(value);\r\n            if (!selectedValue) {\r\n              return false;\r\n            }\r\n            if (!expectedValue) {\r\n              return true;\r\n            }\r\n            return selectedValue.value === expectedValue;\r\n          }\r\n          if (isSimpleFacetValue(value)) {\r\n            if (value.state !== 'selected') {\r\n              return false;\r\n            }\r\n            if (!expectedValue) {\r\n              return true;\r\n            }\r\n            return value.value === expectedValue;\r\n          }\r\n          return false;\r\n        });\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nfunction isCategoryFacetValue(request: unknown): request is CategoryFacetValue {\r\n  const requestAsRecord = request as Record<string, unknown>;\r\n  return (\r\n    (requestAsRecord?.children &&\r\n      Array.isArray(requestAsRecord.children) &&\r\n      requestAsRecord?.state &&\r\n      typeof requestAsRecord.state === 'string') === true\r\n  );\r\n}\r\n\r\nfunction getSelectedCategoryFacetValueRequest(\r\n  value: unknown\r\n): CategoryFacetValue | null {\r\n  if (!isCategoryFacetValue(value)) {\r\n    return null;\r\n  }\r\n  if (value.state === 'selected') {\r\n    return value;\r\n  }\r\n  for (const child of value.children) {\r\n    const selectedValue = getSelectedCategoryFacetValueRequest(child);\r\n    if (selectedValue !== null) {\r\n      return selectedValue;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction isSimpleFacetValue(value: unknown): value is SimpleFacetValue {\r\n  const asRecord = value as Record<string, unknown>;\r\n  return (\r\n    'value' in asRecord &&\r\n    typeof asRecord.value === 'string' &&\r\n    !('children' in asRecord)\r\n  );\r\n}\r\n"],"version":3}