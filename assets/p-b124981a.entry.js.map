{"version":3,"names":["atomicResultBadgeCss","AtomicResultBadgeStyle0","AtomicResultBadge","renderIcon","h","part","icon","this","class","getTextContent","field","undefined","label","value","renderText","renderBadge","componentWillRender","hasValue","ResultTemplatesHelpers","getResultProperty","result","host","remove","render","__decorate","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-badge/atomic-result-badge.pcss?tag=atomic-result-badge&encapsulation=shadow","src/components/search/result-template-components/atomic-result-badge/atomic-result-badge.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n\r\n:host {\r\n  display: inline-flex;\r\n  place-items: center;\r\n  height: var(--row-height, auto);\r\n  word-break: break-word;\r\n}\r\n","import {Result, ResultTemplatesHelpers} from '@coveo/headless';\r\nimport {Component, Element, Prop, h} from '@stencil/core';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-badge` element renders a badge to highlight special features of a result.\r\n *\r\n * A badge can either display:\r\n * * Text:\r\n * ```html\r\n * <atomic-result-badge label=\"trending\"></atomic-result-badge>\r\n * ```\r\n * * The contents of a single-value field:\r\n * ```html\r\n * <atomic-result-badge field=\"objecttype\"></atomic-result-badge>\r\n * ```\r\n * * An icon:\r\n * ```html\r\n * <atomic-result-badge icon=\"https://my-website.fake/star.svg\"></atomic-result-badge>\r\n * ```\r\n * * Slotted elements:\r\n * ```html\r\n * <atomic-result-badge icon=\"https://my-website.fake/stopwatch.svg\">\r\n *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>\r\n * </atomic-result-badge>\r\n * ```\r\n *\r\n * The contents of a multi-value field can be displayed as in the following example:\r\n * ```html\r\n * <atomic-result-badge icon=\"https://my-website.fake/language.svg\">\r\n *    <atomic-result-multi-value-text field=\"language\"></atomic-result-multi-value-text>\r\n * </atomic-result-badge>\r\n * ```\r\n *\r\n * @part result-badge-element - The decorative outer-most element with the background color and text color.\r\n * @part result-badge-icon - The icon displayed at the left-end of the badge, if present.\r\n * @part result-badge-label - The wrapper around the contents at the right-end of the badge. This may be text, a field or slotted elements depending on which was configured.\r\n * @slot default - The element(s) to display inside the badge, instead of a field or label.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-badge',\r\n  styleUrl: 'atomic-result-badge.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultBadge {\r\n  @ResultContext() private result!: Result;\r\n  @Element() host!: HTMLElement;\r\n  /**\r\n   * The field to display in the badge.\r\n   *\r\n   * Not compatible with `label`, slotted elements nor multi-value fields.\r\n   */\r\n  @Prop({reflect: true}) public field?: string;\r\n\r\n  /**\r\n   * The text to display in the badge.\r\n   *\r\n   * Not compatible with `field` nor slotted elements.\r\n   */\r\n  @Prop({reflect: true}) public label?: string;\r\n\r\n  /**\r\n   * Specifies an icon to display at the left-end of the badge.\r\n   * This can be used in conjunction with `field`, `label` or slotted elements.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly\r\n   */\r\n  @Prop({reflect: true}) public icon?: string;\r\n\r\n  private renderIcon() {\r\n    return (\r\n      <atomic-icon\r\n        part=\"result-badge-icon\"\r\n        icon={this.icon!}\r\n        class=\"w-3 h-3 fill-current\"\r\n      ></atomic-icon>\r\n    );\r\n  }\r\n\r\n  private getTextContent() {\r\n    if (this.field !== undefined) {\r\n      return <atomic-result-text field={this.field}></atomic-result-text>;\r\n    }\r\n    if (this.label !== undefined) {\r\n      return <atomic-text value={this.label}></atomic-text>;\r\n    }\r\n    return <slot></slot>;\r\n  }\r\n\r\n  private renderText() {\r\n    return <span part=\"result-badge-label\">{this.getTextContent()}</span>;\r\n  }\r\n\r\n  private renderBadge() {\r\n    return (\r\n      <div\r\n        part=\"result-badge-element\"\r\n        class=\"inline-flex place-items-center space-x-1.5 h-full px-3 bg-neutral-light text-neutral-dark text-xs rounded-full\"\r\n      >\r\n        {this.icon && this.renderIcon()}\r\n        {this.renderText()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (this.field) {\r\n      const hasValue =\r\n        ResultTemplatesHelpers.getResultProperty(this.result, this.field) !==\r\n        null;\r\n      if (!hasValue) {\r\n        this.host.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.renderBadge();\r\n  }\r\n}\r\n"],"mappings":"qNAAA,MAAMA,EAAuB,0kuCAC7B,MAAAC,EAAeD,E,iXC2CFE,EAAiB,M,uFA2BpB,UAAAC,GACN,OACEC,EAAA,eACEC,KAAK,oBACLC,KAAMC,KAAKD,KACXE,MAAM,wB,CAKJ,cAAAC,GACN,GAAIF,KAAKG,QAAUC,UAAW,CAC5B,OAAOP,EAAA,sBAAoBM,MAAOH,KAAKG,O,CAEzC,GAAIH,KAAKK,QAAUD,UAAW,CAC5B,OAAOP,EAAA,eAAaS,MAAON,KAAKK,O,CAElC,OAAOR,EAAA,Y,CAGD,UAAAU,GACN,OAAOV,EAAA,QAAMC,KAAK,sBAAsBE,KAAKE,iB,CAGvC,WAAAM,GACN,OACEX,EAAA,OACEC,KAAK,uBACLG,MAAM,kHAELD,KAAKD,MAAQC,KAAKJ,aAClBI,KAAKO,a,CAKZ,mBAAAE,GACE,GAAIT,KAAKG,MAAO,CACd,MAAMO,EACJC,EAAuBC,kBAAkBZ,KAAKa,OAAQb,KAAKG,SAC3D,KACF,IAAKO,EAAU,CACbV,KAAKc,KAAKC,Q,GAKhB,MAAAC,GACE,OAAOhB,KAAKQ,a,6BA1EWS,EAAA,CAAxBC,K"}