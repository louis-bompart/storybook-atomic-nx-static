{"version":3,"names":["atomicInsightResultListCss","AtomicInsightResultListStyle0","AtomicInsightResultList","this","loadingFlag","randomID","display","templateHasError","resultTemplateRegistered","density","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","initialize","resultList","buildInsightResultList","bindings","engine","options","fieldsToInclude","store","state","undefined","resultsPerPage","buildInsightResultsPerPage","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","host","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","itemListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","resultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","focusTarget","nextNewResultTarget","FocusTargetController","render","updateBreakpoints","listClasses","computeListDisplayClasses","h","ItemListGuard","key","hasTemplate","hasError","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","isAppLoaded","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","map","result","i","atomicInsightResultProps","getPropsForAtomicInsightResult","part","ref","element","setNewResultRef","getItemListDisplayClasses","interactiveResult","buildInsightInteractiveResult","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.pcss?tag=atomic-insight-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\n@import '../styles/list-display.pcss';\n","import {Component, h, Element, State, Prop, Method} from '@stencil/core';\nimport {\n  InsightResultList,\n  InsightResultListState,\n  buildInsightResultList,\n  InsightResult,\n  buildInsightInteractiveResult,\n  buildInsightResultsPerPage,\n  InsightResultsPerPage,\n  InsightResultsPerPageState,\n} from '../..';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\nimport {\n  ItemListCommon,\n  ItemRenderingFunction,\n} from '../../../common/item-list/item-list-common';\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {\n  getItemListDisplayClasses,\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-list',\n  styleUrl: 'atomic-insight-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicInsightResultList\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public resultList!: InsightResultList;\n  public resultsPerPage!: InsightResultsPerPage;\n  private loadingFlag = randomID('firstInsightResultLoaded-');\n  private itemRenderingFunction: ItemRenderingFunction;\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private nextNewResultTarget?: FocusTargetController;\n  private display: ItemDisplayLayout = 'list';\n  private itemListCommon!: ItemListCommon;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultsPerPage')\n  @State()\n  public resultsPerPageState!: InsightResultsPerPageState;\n  @BindStateToController('resultList')\n  @State()\n  public resultListState!: InsightResultListState;\n  @State() private templateHasError = false;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n\n  public initialize() {\n    this.resultList = buildInsightResultList(this.bindings.engine, {\n      options: {\n        fieldsToInclude: this.bindings.store.state.fieldsToInclude || undefined,\n      },\n    });\n    this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-insight-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.itemListCommon = new ItemListCommon({\n      engineSubscribe: this.bindings.engine.subscribe,\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\n      getIsLoading: () => this.resultListState.isLoading,\n      host: this.host,\n      loadingFlag: this.loadingFlag,\n      nextNewItemTarget: this.focusTarget,\n      store: this.bindings.store,\n    });\n  }\n\n  public get focusTarget(): FocusTargetController {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public render() {\n    this.itemListCommon.updateBreakpoints();\n    const listClasses = this.computeListDisplayClasses();\n\n    return (\n      <ItemListGuard\n        hasTemplate={this.resultTemplateRegistered}\n        templateHasError={this.itemTemplateProvider.hasError}\n        firstRequestExecuted={this.resultListState.firstSearchExecuted}\n        hasItems={this.resultListState.hasResults}\n        hasError={this.resultListState.hasError}\n      >\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\n          <ResultsPlaceholdersGuard\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\n            display={this.display}\n            density={this.density}\n            imageSize={this.imageSize}\n          ></ResultsPlaceholdersGuard>\n          <ItemDisplayGuard\n            firstRequestExecuted={this.resultListState.firstSearchExecuted}\n            hasItems={this.resultListState.hasResults}\n          >\n            {this.resultListState.results.map((result, i) => {\n              const atomicInsightResultProps =\n                this.getPropsForAtomicInsightResult(result);\n              return (\n                <atomic-insight-result\n                  {...atomicInsightResultProps}\n                  part=\"outline\"\n                  ref={(element) =>\n                    element && this.itemListCommon.setNewResultRef(element, i)\n                  }\n                ></atomic-insight-result>\n              );\n            })}\n          </ItemDisplayGuard>\n        </DisplayWrapper>\n      </ItemListGuard>\n    );\n  }\n\n  private computeListDisplayClasses() {\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\n\n    return getItemListDisplayClasses(\n      this.display,\n      this.density,\n      this.imageSize,\n      this.resultListState.firstSearchExecuted &&\n        this.resultListState.isLoading,\n      displayPlaceholders\n    );\n  }\n\n  private getPropsForAtomicInsightResult(result: InsightResult) {\n    return {\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\n        options: {result},\n      }),\n      result,\n      renderingFunction: this.itemRenderingFunction,\n      loadingFlag: this.loadingFlag,\n      key: this.itemListCommon.getResultId(\n        result.uniqueId,\n        this.resultListState.searchResponseId,\n        this.density,\n        this.imageSize\n      ),\n      content: this.itemTemplateProvider.getTemplateContent(result),\n      store: this.bindings.store,\n      density: this.density,\n      imageSize: this.imageSize,\n      display: this.display,\n    };\n  }\n}\n"],"mappings":"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"}