{"version":3,"names":["atomicCommerceFacetsCss","AtomicCommerceFacetsStyle0","AtomicCommerceFacets","this","collapseFacetsAfter","initialize","validateProps","controller","bindings","interfaceElement","type","buildProductListing","buildSearch","facetGenerator","engine","Schema","collapseFacetAfter","NumberValue","min","required","validate","shouldCollapseFacet","index","render","h","Host","key","facets","map","facet","state","values","length","props","isCollapsed","logger","warn","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/facets/atomic-commerce-facets/atomic-commerce-facets.pcss?tag=atomic-commerce-facets&encapsulation=shadow","src/components/commerce/facets/atomic-commerce-facets/atomic-commerce-facets.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n","import {NumberValue, Schema} from '@coveo/bueno';\r\nimport {\r\n  RegularFacet,\r\n  CategoryFacet,\r\n  DateFacet,\r\n  NumericFacet,\r\n  FacetGeneratorState,\r\n  buildProductListing,\r\n  buildSearch,\r\n  FacetGenerator,\r\n} from '@coveo/headless/commerce';\r\nimport {Component, h, Element, Host, State, Prop} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {CommerceBindings as Bindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\r\n\r\n/**\r\n * The `atomic-commerce-facets` component automatically renders commerce facets based on the Commerce API response.\r\n * Unlike regular facets, which require explicit definition and request in the query, the `atomic-commerce-facets` component dynamically generates facets.\r\n *\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-commerce-facets',\r\n  styleUrl: 'atomic-commerce-facets.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicCommerceFacets implements InitializableComponent<Bindings> {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facetGenerator!: FacetGenerator;\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * The maximum number of facets to expand.\r\n   * Remaining facets are automatically collapsed.\r\n   *\r\n   * Using the value `0` collapses all facets.\r\n   * Using the value `-1` disables the feature and keeps all facets expanded.\r\n   */\r\n  @Prop({reflect: true}) public collapseFacetsAfter = 4;\r\n\r\n  @BindStateToController('facetGenerator')\r\n  @State()\r\n  public facetGeneratorState!: FacetGeneratorState[];\r\n\r\n  @State() public error!: Error;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    const controller =\r\n      this.bindings.interfaceElement.type === 'product-listing'\r\n        ? buildProductListing\r\n        : buildSearch;\r\n    this.facetGenerator = controller(this.bindings.engine).facetGenerator();\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      collapseFacetAfter: new NumberValue({min: -1, required: true}),\r\n    }).validate({\r\n      collapseFacetAfter: this.collapseFacetsAfter,\r\n    });\r\n  }\r\n\r\n  private shouldCollapseFacet(index: number): boolean {\r\n    if (this.collapseFacetsAfter === -1) {\r\n      return false;\r\n    }\r\n    return this.collapseFacetsAfter\r\n      ? index + 1 > this.collapseFacetsAfter\r\n      : true;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Host>\r\n        {this.facetGenerator.facets.map((facet, index) => {\r\n          if (facet.state.values.length === 0) {\r\n            return;\r\n          }\r\n          const props = {isCollapsed: this.shouldCollapseFacet(index)};\r\n\r\n          switch (facet.state.type) {\r\n            case 'regular':\r\n              return (\r\n                <atomic-commerce-facet\r\n                  {...props}\r\n                  facet={facet as RegularFacet}\r\n                ></atomic-commerce-facet>\r\n              );\r\n            case 'numericalRange':\r\n              return (\r\n                <atomic-commerce-numeric-facet\r\n                  {...props}\r\n                  facet={facet as NumericFacet}\r\n                ></atomic-commerce-numeric-facet>\r\n              );\r\n            case 'dateRange':\r\n              return (\r\n                <atomic-commerce-timeframe-facet\r\n                  {...props}\r\n                  facet={facet as DateFacet}\r\n                ></atomic-commerce-timeframe-facet>\r\n              );\r\n            case 'hierarchical':\r\n              return (\r\n                <atomic-commerce-category-facet\r\n                  {...props}\r\n                  facet={facet as CategoryFacet}\r\n                ></atomic-commerce-category-facet>\r\n              );\r\n            default: {\r\n              this.bindings.engine.logger.warn(\r\n                `Unexpected facet type ${facet.state.type}.`\r\n              );\r\n              return;\r\n            }\r\n          }\r\n        })}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"6PAAA,MAAMA,EAA0B,w+tCAChC,MAAAC,EAAeD,E,iXC6BFE,EAAoB,M,yBAYDC,KAAAC,oBAAsB,E,yBAAA,E,wDAQ7C,UAAAC,GACLF,KAAKG,gBACL,MAAMC,EACJJ,KAAKK,SAASC,iBAAiBC,OAAS,kBACpCC,EACAC,EACNT,KAAKU,eAAiBN,EAAWJ,KAAKK,SAASM,QAAQD,gB,CAGjD,aAAAP,GACN,IAAIS,EAAO,CACTC,mBAAoB,IAAIC,EAAY,CAACC,KAAM,EAAGC,SAAU,SACvDC,SAAS,CACVJ,mBAAoBb,KAAKC,qB,CAIrB,mBAAAiB,CAAoBC,GAC1B,GAAInB,KAAKC,uBAAyB,EAAG,CACnC,OAAO,K,CAET,OAAOD,KAAKC,oBACRkB,EAAQ,EAAInB,KAAKC,oBACjB,I,CAGC,MAAAmB,GACL,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACFvB,KAAKU,eAAec,OAAOC,KAAI,CAACC,EAAOP,KACtC,GAAIO,EAAMC,MAAMC,OAAOC,SAAW,EAAG,CACnC,M,CAEF,MAAMC,EAAQ,CAACC,YAAa/B,KAAKkB,oBAAoBC,IAErD,OAAQO,EAAMC,MAAMpB,MAClB,IAAK,UACH,OACEc,EAAA,4BACMS,EACJJ,MAAOA,IAGb,IAAK,iBACH,OACEL,EAAA,oCACMS,EACJJ,MAAOA,IAGb,IAAK,YACH,OACEL,EAAA,sCACMS,EACJJ,MAAOA,IAGb,IAAK,eACH,OACEL,EAAA,qCACMS,EACJJ,MAAOA,IAGb,QAAS,CACP1B,KAAKK,SAASM,OAAOqB,OAAOC,KAC1B,yBAAyBP,EAAMC,MAAMpB,SAEvC,M,mCAvFiB2B,EAAA,CAA5BC,K,+BAeMD,EAAA,CAFNE,EAAsB,mB"}