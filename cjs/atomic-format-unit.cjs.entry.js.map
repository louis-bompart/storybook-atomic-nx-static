{"file":"atomic-format-unit.entry.cjs.js","mappings":";;;;;;;;MAca,gBAAgB;;;;;;;;;;QAkBG,gBAAW,GACvC,OAAO,CAAC;QAaF,WAAM,GAAoB,CAAC,KAAK,EAAE,SAAS;YACjD,OAAO,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE;gBACrC,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;aAC9B,CAAC,CAAC;SACJ,CAAC;;;2BAnBA,OAAO;;IAET,iBAAiB;QACf,IAAI;YACFA,sCAAyB,CACvB,CAAC,KAAK,EAAE,SAAS,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,EACnD,IAAI,CAAC,IAAI,CACV,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,GAAG,KAAc,CAAC;SAC7B;KACF;IAUM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,QACEC,qFACE,OAAO,EAAE,IAAI,CAAC,IAAI,EAClB,KAAK,EAAE,IAAI,CAAC,KAAK,GACO,EAC1B;SACH;KACF;;;;;;","names":["dispatchNumberFormatEvent","h"],"sources":["src/components/search/formats/atomic-format-unit.tsx"],"sourcesContent":["import {Component, Element, Prop, State, h} from '@stencil/core';\nimport {\n  dispatchNumberFormatEvent,\n  NumberFormatter,\n} from '../../common/formats/format-common';\n\n/**\n * The `atomic-format-unit` component is used for formatting numbers with units.\n * The numerical format of compatible parents will be set according to the properties of this component.\n */\n@Component({\n  tag: 'atomic-format-unit',\n  shadow: true,\n})\nexport class AtomicFormatUnit {\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The unit to use in unit formatting.\n   * Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor.\n   * The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)\n   */\n  @Prop({reflect: true}) public unit!: string;\n  /**\n   * The unit formatting style to use in unit formatting.\n   *\n   * * \"long\" (e.g., 16 litres)\n   * * \"short\" (e.g., 16 l)\n   * * \"narrow\" (e.g., 16l)\n   */\n  @Prop({reflect: true}) public unitDisplay?: 'long' | 'short' | 'narrow' =\n    'short';\n\n  componentWillLoad() {\n    try {\n      dispatchNumberFormatEvent(\n        (value, languages) => this.format(value, languages),\n        this.host\n      );\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private format: NumberFormatter = (value, languages) => {\n    return value.toLocaleString(languages, {\n      style: 'unit',\n      unit: this.unit,\n      unitDisplay: this.unitDisplay,\n    });\n  };\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"version":3}