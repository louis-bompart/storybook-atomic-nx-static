{"version":3,"names":["AtomicSearchBoxQuerySuggestions","componentWillLoad","dispatchSearchBoxSuggestionsEvent","bindings","this","initialize","host","error","engine","registerQuerySuggest","fetchQuerySuggestions","loadQuerySuggestActions","dispatch","id","count","numberOfQueries","position","Array","from","parentNode","children","indexOf","onInput","renderItems","hasQuery","searchBoxController","state","value","max","maxWithQuery","maxWithoutQuery","suggestions","slice","map","suggestion","renderItem","partialItem","getPartialSearchBoxSuggestionElement","i18n","content","h","QuerySuggestionContainer","QuerySuggestionIcon","icon","SearchIcon","hasSuggestion","getSuggestions","length","QuerySuggestionText","onSelect","selectSuggestion","rawValue","render","key","element","AtomicSearchBoxRecentQueries","warnUser","once","logger","warn","renderIcon","Clock","storage","SafeStorage","recentQueriesList","buildRecentQueriesList","initialState","queries","retrieveLocalStorage","options","maxLength","clearFilters","subscribe","updateLocalStorage","getParsedJSON","StorageItems","RECENT_QUERIES","analyticsEnabled","disableFeature","setJSON","removeItem","query","filteredQueries","filter","recentQuery","toLowerCase","startsWith","suggestionElements","unshift","renderClear","getPartialRecentQueryClearElement","RecentQueryClear","clear","triggerSuggestions","getPartialRecentQueryElement","RecentQueriesContainer","RecentQueryIcon","RecentQueryText","isStandalone","updateText","submit","executeRecentQuery"],"sources":["src/components/search/search-box-suggestions/atomic-search-box-query-suggestions/atomic-search-box-query-suggestions.tsx","src/components/search/search-box-suggestions/atomic-search-box-recent-queries/atomic-search-box-recent-queries.tsx"],"sourcesContent":["import {\r\n  loadQuerySuggestActions,\r\n  SearchBox,\r\n  SearchEngine,\r\n  Suggestion,\r\n} from '@coveo/headless';\r\nimport {\r\n  QuerySetSection,\r\n  QuerySuggestionSection,\r\n} from '@coveo/headless/dist/definitions/state/state-sections';\r\nimport {Component, Element, Prop, State, h} from '@stencil/core';\r\nimport SearchIcon from '../../../../images/search.svg';\r\nimport {\r\n  getPartialSearchBoxSuggestionElement,\r\n  QuerySuggestionContainer,\r\n  QuerySuggestionIcon,\r\n  QuerySuggestionText,\r\n} from '../../../common/suggestions/query-suggestions';\r\nimport {\r\n  dispatchSearchBoxSuggestionsEvent,\r\n  SearchBoxSuggestionElement,\r\n  SearchBoxSuggestions,\r\n  SearchBoxSuggestionsBindings,\r\n} from '../../../common/suggestions/suggestions-common';\r\n\r\n/**\r\n * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.\r\n */\r\n@Component({\r\n  tag: 'atomic-search-box-query-suggestions',\r\n  shadow: true,\r\n})\r\nexport class AtomicSearchBoxQuerySuggestions {\r\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox>;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The SVG icon to display.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop() public icon?: string;\r\n\r\n  /**\r\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\r\n   */\r\n  @Prop({reflect: true}) public maxWithQuery?: number;\r\n  /**\r\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\r\n   */\r\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\r\n\r\n  componentWillLoad() {\r\n    try {\r\n      dispatchSearchBoxSuggestionsEvent<SearchBox>((bindings) => {\r\n        this.bindings = bindings;\r\n        return this.initialize();\r\n      }, this.host);\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private initialize(): SearchBoxSuggestions {\r\n    const engine = this.bindings.engine as SearchEngine<\r\n      QuerySuggestionSection & QuerySetSection\r\n    >;\r\n    const {registerQuerySuggest, fetchQuerySuggestions} =\r\n      loadQuerySuggestActions(engine);\r\n\r\n    engine.dispatch(\r\n      registerQuerySuggest({\r\n        id: this.bindings.id,\r\n        count: this.bindings.numberOfQueries,\r\n      })\r\n    );\r\n\r\n    return {\r\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\r\n      onInput: () =>\r\n        engine.dispatch(\r\n          fetchQuerySuggestions({\r\n            id: this.bindings.id,\r\n          })\r\n        ),\r\n      renderItems: () => this.renderItems(),\r\n    };\r\n  }\r\n\r\n  private renderItems(): SearchBoxSuggestionElement[] {\r\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\r\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\r\n    return this.bindings.searchBoxController.state.suggestions\r\n      .slice(0, max)\r\n      .map((suggestion) => this.renderItem(suggestion));\r\n  }\r\n\r\n  private renderItem(suggestion: Suggestion) {\r\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\r\n    const partialItem = getPartialSearchBoxSuggestionElement(\r\n      suggestion,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return {\r\n      ...partialItem,\r\n      content: (\r\n        <QuerySuggestionContainer>\r\n          <QuerySuggestionIcon\r\n            icon={this.icon || SearchIcon}\r\n            hasSuggestion={this.bindings.getSuggestions().length > 1}\r\n          />\r\n\r\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\r\n        </QuerySuggestionContainer>\r\n      ),\r\n      onSelect: () => {\r\n        this.bindings.searchBoxController.selectSuggestion(suggestion.rawValue);\r\n      },\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={this.error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  buildRecentQueriesList,\r\n  RecentQueriesList,\r\n  SearchBox,\r\n} from '@coveo/headless';\r\nimport {Component, Element, Prop, State, h} from '@stencil/core';\r\nimport Clock from '../../../../images/clock.svg';\r\nimport {SafeStorage, StorageItems} from '../../../../utils/local-storage-utils';\r\nimport {once} from '../../../../utils/utils';\r\nimport {\r\n  getPartialRecentQueryClearElement,\r\n  getPartialRecentQueryElement,\r\n  RecentQueriesContainer,\r\n  RecentQueryClear,\r\n  RecentQueryIcon,\r\n  RecentQueryText,\r\n} from '../../../common/suggestions/recent-queries';\r\nimport {\r\n  dispatchSearchBoxSuggestionsEvent,\r\n  SearchBoxSuggestionElement,\r\n  SearchBoxSuggestions,\r\n  SearchBoxSuggestionsBindings,\r\n} from '../../../common/suggestions/suggestions-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.\r\n *\r\n * @part recent-query-title - The 'Recent queries' title.\r\n * @part recent-query-clear - The 'Clear' button for clearing recent queries    .\r\n */\r\n@Component({\r\n  tag: 'atomic-search-box-recent-queries',\r\n  shadow: true,\r\n})\r\nexport class AtomicSearchBoxRecentQueries {\r\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox, Bindings>;\r\n  private recentQueriesList!: RecentQueriesList;\r\n  private storage!: SafeStorage;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The SVG icon to display.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop() public icon?: string;\r\n\r\n  /**\r\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\r\n   */\r\n  @Prop({reflect: true}) public maxWithQuery = 3;\r\n  /**\r\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\r\n   */\r\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\r\n\r\n  componentWillLoad() {\r\n    try {\r\n      dispatchSearchBoxSuggestionsEvent<SearchBox, Bindings>((bindings) => {\r\n        this.bindings = bindings;\r\n        return this.initialize();\r\n      }, this.host);\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private renderIcon() {\r\n    return this.icon || Clock;\r\n  }\r\n\r\n  private initialize(): SearchBoxSuggestions {\r\n    this.storage = new SafeStorage();\r\n    this.recentQueriesList = buildRecentQueriesList(this.bindings.engine, {\r\n      initialState: {queries: this.retrieveLocalStorage()},\r\n      options: {maxLength: 1000, clearFilters: this.bindings.clearFilters},\r\n    });\r\n\r\n    this.recentQueriesList.subscribe(() => this.updateLocalStorage());\r\n\r\n    return {\r\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\r\n      renderItems: () => this.renderItems(),\r\n    };\r\n  }\r\n\r\n  private retrieveLocalStorage() {\r\n    return this.storage.getParsedJSON(StorageItems.RECENT_QUERIES, []);\r\n  }\r\n\r\n  private updateLocalStorage() {\r\n    if (!this.recentQueriesList.state.analyticsEnabled) {\r\n      return this.disableFeature();\r\n    }\r\n\r\n    return this.storage.setJSON(\r\n      StorageItems.RECENT_QUERIES,\r\n      this.recentQueriesList.state.queries\r\n    );\r\n  }\r\n\r\n  private warnUser = once(() =>\r\n    this.bindings.engine.logger.warn(\r\n      'Because analytics are disabled, the recent queries feature is deactivated.'\r\n    )\r\n  );\r\n\r\n  private disableFeature() {\r\n    this.warnUser();\r\n    this.storage.removeItem(StorageItems.RECENT_QUERIES);\r\n  }\r\n\r\n  private renderItems(): SearchBoxSuggestionElement[] {\r\n    if (!this.recentQueriesList.state.analyticsEnabled) {\r\n      return [];\r\n    }\r\n\r\n    const query = this.bindings.searchBoxController.state.value;\r\n    const hasQuery = query !== '';\r\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\r\n    const filteredQueries = this.recentQueriesList.state.queries\r\n      .filter(\r\n        (recentQuery) =>\r\n          recentQuery !== query &&\r\n          recentQuery.toLowerCase().startsWith(query.toLowerCase())\r\n      )\r\n      .slice(0, max);\r\n\r\n    const suggestionElements: SearchBoxSuggestionElement[] =\r\n      filteredQueries.map((value) => this.renderItem(value));\r\n    if (suggestionElements.length) {\r\n      suggestionElements.unshift(this.renderClear());\r\n    }\r\n\r\n    return suggestionElements;\r\n  }\r\n\r\n  private renderClear(): SearchBoxSuggestionElement {\r\n    const partialItem = getPartialRecentQueryClearElement(this.bindings.i18n);\r\n\r\n    return {\r\n      ...partialItem,\r\n      content: <RecentQueryClear i18n={this.bindings.i18n} />,\r\n      onSelect: () => {\r\n        this.recentQueriesList.clear();\r\n        this.bindings.triggerSuggestions();\r\n      },\r\n    };\r\n  }\r\n\r\n  private renderItem(value: string): SearchBoxSuggestionElement {\r\n    const query = this.bindings.searchBoxController.state.value;\r\n    const partialItem = getPartialRecentQueryElement(value, this.bindings.i18n);\r\n    return {\r\n      ...partialItem,\r\n      content: (\r\n        <RecentQueriesContainer>\r\n          <RecentQueryIcon icon={this.renderIcon()} />\r\n          <RecentQueryText query={query} value={value} />\r\n        </RecentQueriesContainer>\r\n      ),\r\n\r\n      onSelect: () => {\r\n        if (this.bindings.isStandalone) {\r\n          this.bindings.searchBoxController.updateText(value);\r\n          this.bindings.searchBoxController.submit();\r\n          return;\r\n        }\r\n\r\n        this.recentQueriesList.executeRecentQuery(\r\n          this.recentQueriesList.state.queries.indexOf(value)\r\n        );\r\n      },\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={this.error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}