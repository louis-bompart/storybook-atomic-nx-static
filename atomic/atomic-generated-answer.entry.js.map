{"file":"atomic-generated-answer.entry.esm.js","mappings":"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","names":[],"sources":["src/components/search/atomic-generated-answer/atomic-generated-answer.pcss?tag=atomic-generated-answer&encapsulation=shadow","src/components/search/atomic-generated-answer/atomic-generated-answer.tsx"],"sourcesContent":["@import '../../common/generated-answer/styles/generated-answer.pcss';\r\n","import {\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildSearchStatus,\r\n  buildGeneratedAnswer,\r\n  GeneratedAnswer,\r\n  GeneratedAnswerState,\r\n  GeneratedAnswerStyle,\r\n  buildInteractiveCitation,\r\n} from '@coveo/headless';\r\nimport {Component, Element, State, Prop, Watch} from '@stencil/core';\r\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\r\nimport {debounce} from '../../../utils/debounce-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {GeneratedAnswerCommon} from '../../common/generated-answer/generated-answer-common';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.\r\n * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)\r\n *\r\n * @part container - The container displaying the generated answer.\r\n * @part header-label - The header of the generated answer container.\r\n * @part feedback-button - The \"like\" and \"dislike\" buttons.\r\n * @part toggle - The switch to toggle the visibility of the generated answer.\r\n * @part copy-button - The \"Copy answer\" button.\r\n * @part retry-container - The container for the \"retry\" section.\r\n * @part generated-text - The text of the generated answer.\r\n * @part citations-label - The header of the citations list.\r\n * @part rephrase-label - The header of the rephrase options.\r\n * @part rephrase-buttons - The container of the rephrase buttons section.\r\n * @part rephrase-button - The button for each of the rephrase options (step-by-step instructions, bulleted list, and summary).\r\n * @part rephrase-buttons-container - The container of the rephrase buttons.\r\n * @part rephrase-button-label - The label of the rephrase button.\r\n *\r\n * @part answer-code-block - The generated answer multi-line code blocks.\r\n * @part answer-emphasis - The generated answer emphasized text elements.\r\n * @part answer-inline-code - The generated answer inline code elements.\r\n * @part answer-heading-1 - The generated answer level 1 heading elements.\r\n * @part answer-heading-2 - The generated answer level 2 heading elements.\r\n * @part answer-heading-3 - The generated answer level 3 heading elements.\r\n * @part answer-heading-4 - The generated answer level 4 heading elements.\r\n * @part answer-heading-5 - The generated answer level 5 heading elements.\r\n * @part answer-heading-6 - The generated answer level 6 heading elements.\r\n * @part answer-list-item - The generated answer list item elements for both ordered and unordered lists.\r\n * @part answer-ordered-list - The generated answer ordered list elements.\r\n * @part answer-paragraph - The generated answer paragraph elements.\r\n * @part answer-quote-block - The generated answer quote block elements.\r\n * @part answer-unordered-list - The generated answer unordered list elements.\r\n * @part answer-strong - The generated answer strong text elements.\r\n * @part answer-table - The generated answer table elements.\r\n * @part answer-table-container - The generated answer table container elements.\r\n * @part answer-table-content - The generated answer table content cell elements.\r\n * @part answer-table-header - The generated answer table header cell elements.\r\n *\r\n * @part citation - The link that allows the user to navigate to the item.\r\n * @part citation-popover - The pop-up that shows an item preview when the user hovers over the citation.\r\n * @part citation-index - The content of the citation item.\r\n */\r\n@Component({\r\n  tag: 'atomic-generated-answer',\r\n  styleUrl: 'atomic-generated-answer.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicGeneratedAnswer implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public generatedAnswer!: GeneratedAnswer;\r\n  public searchStatus!: SearchStatus;\r\n  private resizeObserver?: ResizeObserver;\r\n\r\n  @BindStateToController('generatedAnswer', {\r\n    onUpdateCallbackMethod: 'onGeneratedAnswerStateUpdate',\r\n  })\r\n  @State()\r\n  private generatedAnswerState!: GeneratedAnswerState;\r\n\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  private searchStatusState!: SearchStatusState;\r\n\r\n  @State()\r\n  public error!: Error;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State()\r\n  copied = false;\r\n\r\n  @State()\r\n  copyError = false;\r\n\r\n  /**\r\n   * The answer style to apply when the component first loads.\r\n   * Options:\r\n   *   - `default`: Generate the answer without specific formatting instructions.\r\n   *   - `bullet`: Generate the answer as a bulleted list.\r\n   *   - `step`: Generate the answer as step-by-step instructions.\r\n   *   - `concise`: Generate the answer as briefly as possible.\r\n   */\r\n  @Prop() answerStyle: GeneratedAnswerStyle = 'default';\r\n\r\n  /**\r\n   * Whether to render a toggle button that lets the user hide or show the answer.\r\n   */\r\n  @Prop() withToggle?: boolean;\r\n\r\n  /**\r\n   * Whether to allow the answer to be collapsed when the text is taller than 250px.\r\n   */\r\n  @Prop() collapsible?: boolean;\r\n\r\n  @AriaLiveRegion('generated-answer')\r\n  protected ariaMessage!: string;\r\n\r\n  private generatedAnswerCommon!: GeneratedAnswerCommon;\r\n  private fullAnswerHeight?: number;\r\n  private maxCollapsedHeight = 250;\r\n\r\n  public initialize() {\r\n    this.generatedAnswerCommon = new GeneratedAnswerCommon({\r\n      host: this.host,\r\n      withToggle: this.withToggle,\r\n      collapsible: this.collapsible,\r\n      getGeneratedAnswer: () => this.generatedAnswer,\r\n      getGeneratedAnswerState: () => this.generatedAnswerState,\r\n      getSearchStatusState: () => this.searchStatusState,\r\n      getBindings: () => this.bindings,\r\n      getCopied: () => this.copied,\r\n      setCopied: this.setCopied,\r\n      getCopyError: () => this.copyError,\r\n      setCopyError: this.setCopyError,\r\n      setAriaMessage: this.setAriaMessage,\r\n      buildInteractiveCitation: (props) =>\r\n        buildInteractiveCitation(this.bindings.engine, props),\r\n    });\r\n    this.generatedAnswer = buildGeneratedAnswer(this.bindings.engine, {\r\n      initialState: {\r\n        isVisible: this.generatedAnswerCommon.data.isVisible,\r\n        responseFormat: {\r\n          answerStyle: this.answerStyle,\r\n          contentFormat: ['text/markdown', 'text/plain'],\r\n        },\r\n      },\r\n    });\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.generatedAnswerCommon.insertFeedbackModal();\r\n\r\n    if (window.ResizeObserver && this.collapsible) {\r\n      const debouncedAdaptAnswerHeight = debounce(\r\n        () => this.adaptAnswerHeight(),\r\n        100\r\n      );\r\n      this.resizeObserver = new ResizeObserver(debouncedAdaptAnswerHeight);\r\n      this.resizeObserver.observe(this.host);\r\n    }\r\n  }\r\n\r\n  @Watch('generatedAnswerState')\r\n  public updateAnswerCollapsed(\r\n    newState: GeneratedAnswerState,\r\n    oldState: GeneratedAnswerState\r\n  ) {\r\n    const newExpanded = newState.expanded;\r\n    const oldExpanded = oldState ? oldState.expanded : undefined;\r\n\r\n    if (newExpanded !== oldExpanded) {\r\n      const container = this.getAnswerContainer();\r\n\r\n      if (!container) {\r\n        return;\r\n      }\r\n\r\n      this.toggleClass(container, 'answer-collapsed', !newExpanded);\r\n    }\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.resizeObserver?.disconnect();\r\n  }\r\n\r\n  // @ts-expect-error: This function is used by BindStateToController.\r\n  private onGeneratedAnswerStateUpdate = () => {\r\n    if (\r\n      this.generatedAnswerState.isVisible !==\r\n      this.generatedAnswerCommon?.data?.isVisible\r\n    ) {\r\n      this.generatedAnswerCommon.data = {\r\n        ...this.generatedAnswerCommon.data,\r\n        isVisible: this.generatedAnswerState.isVisible,\r\n      };\r\n      this.generatedAnswerCommon.writeStoredData(\r\n        this.generatedAnswerCommon.data\r\n      );\r\n    }\r\n\r\n    this.setAriaMessage(this.generatedAnswerCommon.getGeneratedAnswerStatus());\r\n  };\r\n\r\n  private setCopied = (isCopied: boolean) => {\r\n    this.copied = isCopied;\r\n  };\r\n\r\n  private setCopyError = (copyError: boolean) => {\r\n    this.copyError = copyError;\r\n  };\r\n\r\n  private setAriaMessage = (message: string) => {\r\n    this.ariaMessage = message;\r\n  };\r\n\r\n  private toggleClass(element: Element, className: string, condition: boolean) {\r\n    element.classList.toggle(className, condition);\r\n  }\r\n\r\n  private adaptAnswerHeight() {\r\n    this.fullAnswerHeight = this.host?.shadowRoot\r\n      ?.querySelector('[part=\"generated-text\"]')\r\n      ?.getBoundingClientRect().height;\r\n    this.updateAnswerHeight();\r\n  }\r\n\r\n  private getAnswerContainer() {\r\n    return this.host?.shadowRoot?.querySelector('[part=\"generated-container\"]');\r\n  }\r\n\r\n  private getAnswerFooter() {\r\n    return this.host?.shadowRoot?.querySelector(\r\n      '[part=\"generated-answer-footer\"]'\r\n    );\r\n  }\r\n\r\n  private updateAnswerHeight() {\r\n    const container = this.getAnswerContainer();\r\n    const footer = this.getAnswerFooter();\r\n\r\n    if (!container || !footer) {\r\n      return;\r\n    }\r\n\r\n    if (this.fullAnswerHeight! > this.maxCollapsedHeight) {\r\n      this.toggleClass(\r\n        container,\r\n        'answer-collapsed',\r\n        !this.generatedAnswerState.expanded\r\n      );\r\n      this.toggleClass(footer, 'is-collapsible', true);\r\n      this.toggleClass(\r\n        footer,\r\n        'generating-label-visible',\r\n        this.generatedAnswerState.isStreaming\r\n      );\r\n    } else {\r\n      this.toggleClass(container, 'answer-collapsed', false);\r\n      this.toggleClass(footer, 'is-collapsible', false);\r\n      this.toggleClass(footer, 'generating-label-visible', false);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.generatedAnswerCommon.render();\r\n  }\r\n}\r\n"],"version":3}