{"version":3,"names":["SearchBoxWrapper","props","children","getClasses","baseClasses","focusClasses","disabled","inputTypeClasses","textArea","join","h","part","class","TextAreaClearButton","inputRef","bindings","onClick","defaultButtonProps","Button","style","focus","ariaLabel","i18n","t","icon","ClearSlim","getPopupAttributes","role","autocomplete","autocapitalize","autocorrect","activeDescendant","hasSuggestions","expanded","id","syncTextWithReplica","elem","value","parent","parentNode","dataset","replicatedValue","resetReplicaText","collapseTextArea","classList","remove","expandTextArea","add","SearchTextArea","textAreaRef","loading","onInput","onFocus","onBlur","onChange","onKeyDown","onKeyUp","onClear","popup","defaultInputProps","placeholder","rows","e","key","shiftKey","preventDefault","target","promiseTimeout","prom","ms","timeout","Promise","_","reject","setTimeout","Error","race","then","clearTimeout","SuggestionManager","constructor","ownerSearchBoxProps","this","suggestions","leftSuggestionElements","rightSuggestionElements","leftPanel","undefined","rightPanel","suggestedQuery","queryDataAttribute","suggestionEvents","previousActiveDescendantElement","leftSuggestions","rightSuggestions","triggerSuggestions","debounce","executeQuerySuggestion","getSuggestionDelay","partialSuggestionBindings","clearSuggestions","getSuggestions","getSuggestionElements","allSuggestionElements","activeDescendantElement","hasActiveDescendant","_a","querySelector","_b","onSubmit","updateActiveDescendant","forceUpdate","getHost","clickOnActiveElement","click","isRightPanelInFocus","isNullOrUndefined","panelInFocus","initializeSuggestions","map","event","registerSuggestionsFromEvent","stopPropagation","push","detail","registerSuggestions","isDoubleList","Boolean","length","focusPanel","side","panel","firstElementChild","panelHasActiveDescendant","contains","newValue","updateDescendants","clearSuggestionElements","focusNextValue","nextOrFirstValue","focusValue","scrollActiveDescendantIntoView","updateQueryFromSuggestion","onSuggestionMouseOver","item","thisPanel","query","updateSuggestedQuery","onSuggestionClick","updateOwnerSearchboxQuery","onSelect","focusPreviousValue","firstValue","previousOrLastValue","settled","allSettled","suggestion","resolve","getSuggestionTimeout","fulfilledSuggestions","forEach","j","status","getLogger","warn","splitSuggestions","isDefault","filter","sort","sortSuggestions","getAndFilterLeftSuggestionElements","defaultSuggestedQuery","find","elementHasQuery","lastValue","lastElementChild","previousElementSibling","a","b","position","nextElementSibling","scrollIntoView","block","getAttribute","getSearchBoxValue","updateQuery","onSuggestedQueryChange","updateSuggestionElements","isPanelInFocus","escaped","DOMPurify","sanitize","closest","suggestionElements","filterOnDuplicate","Set","out","suggestionElement","has","elements","renderItems","flat","max","getNumberOfSuggestionsToDisplay","elementHasNoQuery","slice","newPrevDescendantElement","getPartsForSuggestion","isSelected","getClassesForSuggestion","isHTMLElement","el","HTMLElement","ensureContentForRenderedSuggestion","renderedSuggestion","content","replaceChildren","getAriaLabelForRenderedSuggestion","index","lastIndex","isButton","contentLabel","_c","innerText","labelWithType","isMacOS","label","interpolation","escapeValue","count","getContentForSuggestion","Fragment","getCommonSearchSuggestionAttributes","ref","setAttribute","SimpleSearchSuggestion","ButtonSearchSuggestion","onMouseDown","call","onMouseOver"],"sources":["src/components/common/search-box/search-box-wrapper.tsx","src/components/common/search-box/text-area-clear-button.tsx","src/components/common/search-box/search-text-area.tsx","src/utils/promise-utils.ts","src/components/common/suggestions/suggestion-manager.ts","src/components/search/atomic-search-box/search-suggestion.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\n\ninterface Props {\n  disabled: boolean;\n  textArea?: boolean;\n}\n\nexport const SearchBoxWrapper: FunctionalComponent<Props> = (\n  props,\n  children\n) => {\n  const getClasses = () => {\n    const baseClasses =\n      'flex bg-background w-full border border-neutral rounded-md focus-within:ring';\n    const focusClasses = props.disabled\n      ? 'focus-within:border-disabled focus-within:ring-neutral'\n      : 'focus-within:border-primary focus-within:ring-ring-primary';\n    const inputTypeClasses = props.textArea\n      ? 'absolute top-0 left-0'\n      : 'relative h-full';\n\n    return [baseClasses, focusClasses, inputTypeClasses].join(' ');\n  };\n\n  return (\n    <div part=\"wrapper\" class={getClasses()}>\n      {children}\n    </div>\n  );\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport ClearSlim from '../../../images/clear-slim.svg';\nimport {Button, ButtonProps} from '../button';\nimport {AnyBindings} from '../interface/bindings';\n\ninterface Props extends Partial<ButtonProps> {\n  bindings: AnyBindings;\n  inputRef: HTMLInputElement | HTMLTextAreaElement | null;\n}\n\nexport const TextAreaClearButton: FunctionalComponent<Props> = ({\n  inputRef,\n  bindings,\n  onClick,\n  ...defaultButtonProps\n}) => (\n  <div\n    part=\"clear-button-wrapper\"\n    class=\"py-2 flex items-start justify-center items-center ml-2\"\n  >\n    <Button\n      style=\"text-transparent\"\n      part=\"clear-button\"\n      class=\"flex items-center justify-center w-8 h-8 text-neutral-dark shrink-0\"\n      onClick={() => {\n        onClick?.();\n        inputRef?.focus();\n      }}\n      ariaLabel={bindings.i18n.t('clear')}\n      {...defaultButtonProps}\n    >\n      <atomic-icon\n        part=\"clear-icon\"\n        icon={ClearSlim}\n        class=\"w-4 h-4\"\n      ></atomic-icon>\n    </Button>\n  </div>\n);\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {AnyBindings} from '../interface/bindings';\nimport {TextAreaClearButton} from './text-area-clear-button';\n\ninterface Props extends JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  textAreaRef: HTMLTextAreaElement;\n  loading: boolean;\n  bindings: AnyBindings;\n  value: string;\n  ariaLabel: string;\n  onClear(): void;\n  popup?: {\n    id: string;\n    activeDescendant: string;\n    expanded: boolean;\n    hasSuggestions: boolean;\n  };\n}\n\nfunction getPopupAttributes(props: Required<Props>['popup']) {\n  return {\n    role: 'combobox',\n    autocomplete: 'off',\n    autocapitalize: 'off',\n    autocorrect: 'off',\n    ...(props.activeDescendant && {\n      'aria-activedescendant': props.activeDescendant,\n    }),\n    'aria-expanded': `${props.hasSuggestions && props.expanded}`,\n    'aria-autocomplete': 'both',\n    'aria-haspopup': 'true',\n    'aria-controls': props.id,\n  };\n}\n\nfunction syncTextWithReplica(elem: HTMLTextAreaElement, value?: string) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (!parent) {\n    return;\n  }\n  if (elem.value === '\\n') {\n    return;\n  }\n  parent.dataset.replicatedValue = value ?? elem.value;\n}\n\nfunction resetReplicaText(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    delete parent.dataset.replicatedValue;\n  }\n}\n\nfunction collapseTextArea(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    parent.classList.remove('expanded');\n  }\n}\n\nfunction expandTextArea(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    parent.classList.add('expanded');\n  }\n}\n\nexport const SearchTextArea: FunctionalComponent<Props> = ({\n  textAreaRef,\n  loading,\n  bindings,\n  onInput,\n  onFocus,\n  onBlur,\n  onChange,\n  onKeyDown,\n  onKeyUp,\n  value,\n  ariaLabel,\n  onClear,\n  popup,\n  ...defaultInputProps\n}) => (\n  <div class=\"grow flex overflow-hidden\">\n    <div part=\"textarea-expander\" class=\"grow grid overflow-hidden\">\n      <textarea\n        part=\"textarea\"\n        aria-label={ariaLabel}\n        placeholder={bindings.i18n.t('search')}\n        class=\"placeholder-neutral-dark\"\n        rows={1}\n        onInput={(e) => {\n          onInput?.(e);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onKeyDown={(e) => {\n          syncTextWithReplica(textAreaRef);\n          if (e.key === 'Enter') {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n          }\n          onKeyDown?.(e);\n        }}\n        onKeyUp={(e) => {\n          onKeyUp?.(e);\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            return;\n          }\n          syncTextWithReplica(textAreaRef);\n        }}\n        onBlur={(e) => {\n          onBlur?.(e);\n          collapseTextArea(textAreaRef);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onChange={(e) => {\n          onChange?.(e);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onFocus={(e) => {\n          onFocus?.(e);\n          const target = e.target as HTMLTextAreaElement;\n          syncTextWithReplica(textAreaRef ?? target);\n          expandTextArea(textAreaRef ?? target);\n        }}\n        autocomplete=\"off\"\n        {...(popup && getPopupAttributes(popup))}\n        {...defaultInputProps}\n        value={value}\n      />\n    </div>\n\n    {loading && (\n      <div class=\"searchbox-button-wrapper flex items-center justify-center ml-2\">\n        <span\n          part=\"loading\"\n          class=\"loading w-5 h-5 rounded-full bg-gradient-to-r animate-spin mr-2 grid place-items-center\"\n        ></span>\n      </div>\n    )}\n    {!loading && value && (\n      <TextAreaClearButton\n        inputRef={textAreaRef}\n        bindings={bindings}\n        onClick={() => {\n          onClear();\n          resetReplicaText(textAreaRef);\n        }}\n      />\n    )}\n  </div>\n);\n","export function promiseTimeout<T>(prom: T | Promise<T>, ms: number) {\n  let id: NodeJS.Timeout;\n  const timeout = new Promise((_, reject) => {\n    id = setTimeout(() => {\n      reject(new Error('Promise timed out.'));\n    }, ms);\n  });\n  return Promise.race([prom, timeout]).then(() => {\n    clearTimeout(id);\n  });\n}\n","import {isNullOrUndefined} from '@coveo/bueno';\nimport {forceUpdate} from '@stencil/core';\nimport DOMPurify from 'dompurify';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {promiseTimeout} from '../../../utils/promise-utils';\nimport {\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestionsBindings,\n  SearchBoxSuggestionsEvent,\n  elementHasNoQuery,\n  elementHasQuery,\n} from './suggestions-common';\n\n/**\n * List of suggestions that will be displayed along other lists (e.g recent queries) when the search box's input is selected.\n */\nexport interface SearchBoxSuggestions {\n  /**\n   * The search box will sort the position of suggestions using this value, the lowest value being first.\n   * By default, the DOM position will be used.\n   */\n  position: number;\n  /**\n   * Whether the suggestions should be listed in the right or left panel. By default, the suggestions are listed in the right panel.\n   */\n  panel?: 'left' | 'right';\n  /**\n   * Method that returns the list of elements which will be rendered in the list of suggestions.\n   */\n  renderItems(): SearchBoxSuggestionElement[];\n  /**\n   * Hook called when the user changes the search box's input value. This can lead to all the query suggestions being updated.\n   */\n  onInput?(): Promise<unknown> | void;\n  /**\n   * Hook called when the current suggested query changes as the user navigates the list of suggestions.\n   * This is used for instant results, which are rendered based on the current suggested query.\n   * @param q The new current suggested query.\n   */\n  onSuggestedQueryChange?(q: string): Promise<unknown> | void;\n}\n\ninterface SearchBoxProps {\n  getSearchBoxValue: () => string;\n  updateQuery: (suggestedQuery: string) => void;\n  getSuggestionTimeout: () => number;\n  getNumberOfSuggestionsToDisplay: () => number;\n  getSuggestionDelay: () => number;\n  getLogger: () => Pick<typeof console, 'warn'>;\n  getHost: () => HTMLElement;\n}\n\nexport class SuggestionManager<SearchBoxController> {\n  public suggestions: SearchBoxSuggestions[] = [];\n  public leftSuggestionElements: SearchBoxSuggestionElement[] = [];\n  public rightSuggestionElements: SearchBoxSuggestionElement[] = [];\n  public leftPanel: HTMLElement | undefined = undefined;\n  public rightPanel: HTMLElement | undefined = undefined;\n  public triggerSuggestions: () => Promise<void>;\n  public activeDescendant = '';\n  public suggestedQuery = '';\n\n  private queryDataAttribute = 'data-query';\n  private suggestionEvents: SearchBoxSuggestionsEvent<SearchBoxController>[] =\n    [];\n\n  private previousActiveDescendantElement: HTMLElement | null = null;\n  private leftSuggestions: SearchBoxSuggestions[] = [];\n  private rightSuggestions: SearchBoxSuggestions[] = [];\n\n  constructor(private ownerSearchBoxProps: SearchBoxProps) {\n    this.triggerSuggestions = debounce(\n      () => this.executeQuerySuggestion(),\n      this.ownerSearchBoxProps.getSuggestionDelay()\n    );\n  }\n\n  public get partialSuggestionBindings(): Pick<\n    SearchBoxSuggestionsBindings<SearchBoxController>,\n    | 'suggestedQuery'\n    | 'clearSuggestions'\n    | 'triggerSuggestions'\n    | 'getSuggestions'\n    | 'getSuggestionElements'\n  > {\n    return {\n      suggestedQuery: () => this.suggestedQuery,\n      clearSuggestions: () => this.clearSuggestions(),\n      triggerSuggestions: () => this.triggerSuggestions(),\n      getSuggestions: () => this.suggestions,\n      getSuggestionElements: () => this.allSuggestionElements,\n    };\n  }\n\n  public get activeDescendantElement(): HTMLElement | null {\n    if (!this.hasActiveDescendant) {\n      return null;\n    }\n\n    return (\n      this.leftPanel?.querySelector(`#${this.activeDescendant}`) ||\n      this.rightPanel?.querySelector(`#${this.activeDescendant}`) ||\n      null\n    );\n  }\n\n  public onSubmit() {\n    this.updateActiveDescendant();\n    this.clearSuggestions();\n  }\n\n  public updateActiveDescendant(id = '') {\n    this.activeDescendant = id;\n    forceUpdate(this.ownerSearchBoxProps.getHost());\n  }\n\n  public clickOnActiveElement() {\n    this.activeDescendantElement?.click();\n    this.updateActiveDescendant();\n  }\n\n  public isRightPanelInFocus() {\n    if (\n      isNullOrUndefined(this.panelInFocus) ||\n      isNullOrUndefined(this.rightPanel)\n    ) {\n      return false;\n    }\n\n    return this.panelInFocus === this.rightPanel;\n  }\n\n  public initializeSuggestions(\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\n  ) {\n    this.suggestions = this.suggestionEvents.map((event) => event(bindings));\n  }\n\n  public registerSuggestionsFromEvent(\n    event: CustomEvent<SearchBoxSuggestionsEvent<SearchBoxController>>,\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\n  ) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.suggestionEvents.push(event.detail);\n    this.suggestions.push(event.detail(bindings));\n  }\n\n  public registerSuggestions(suggestions: SearchBoxSuggestions) {\n    this.suggestions.push(suggestions);\n  }\n\n  public get isDoubleList() {\n    return Boolean(\n      this.leftSuggestionElements.length && this.rightSuggestionElements.length\n    );\n  }\n\n  public focusPanel(side: 'left' | 'right') {\n    const panel = side === 'left' ? this.leftPanel : this.rightPanel;\n\n    if (this.panelInFocus === panel) {\n      return;\n    }\n    if (panel && panel.firstElementChild) {\n      const panelHasActiveDescendant =\n        this.previousActiveDescendantElement &&\n        panel.contains(this.previousActiveDescendantElement);\n      const newValue = panelHasActiveDescendant\n        ? this.previousActiveDescendantElement!\n        : (panel.firstElementChild as HTMLElement);\n      this.updateDescendants(newValue.id);\n    }\n  }\n\n  public clearSuggestions() {\n    this.clearSuggestionElements();\n    this.updateActiveDescendant();\n  }\n\n  public focusNextValue() {\n    if (!this.hasSuggestions || !this.nextOrFirstValue) {\n      return;\n    }\n\n    this.focusValue(this.nextOrFirstValue as HTMLElement);\n  }\n\n  public focusValue(value: HTMLElement) {\n    this.updateActiveDescendant(value.id);\n    this.scrollActiveDescendantIntoView();\n    this.updateQueryFromSuggestion();\n  }\n\n  public onSuggestionMouseOver(\n    item: SearchBoxSuggestionElement,\n    side: 'left' | 'right',\n    id: string\n  ) {\n    const thisPanel = side === 'left' ? this.leftPanel : this.rightPanel;\n    if (this.panelInFocus === thisPanel) {\n      this.updateActiveDescendant(id);\n    } else {\n      this.updateDescendants(id);\n    }\n    if (item.query) {\n      this.updateSuggestedQuery(item.query);\n    }\n  }\n\n  public onSuggestionClick(item: SearchBoxSuggestionElement, e: Event) {\n    if (item.query) {\n      this.clearSuggestions();\n      this.updateOwnerSearchboxQuery(item.query);\n    }\n    item.onSelect && item.onSelect(e);\n  }\n\n  public get hasSuggestions() {\n    return !!this.allSuggestionElements.length;\n  }\n\n  public get allSuggestionElements() {\n    return [...this.leftSuggestionElements, ...this.rightSuggestionElements];\n  }\n\n  public focusPreviousValue() {\n    if (this.firstValue === this.activeDescendantElement) {\n      this.updateActiveDescendant();\n      return;\n    }\n\n    if (!this.hasSuggestions || !this.previousOrLastValue) {\n      return;\n    }\n\n    this.focusValue(this.previousOrLastValue as HTMLElement);\n  }\n\n  public get hasActiveDescendant() {\n    return this.activeDescendant !== '';\n  }\n\n  private async executeQuerySuggestion() {\n    this.updateActiveDescendant();\n    const settled = await Promise.allSettled(\n      this.suggestions.map((suggestion) =>\n        promiseTimeout(\n          suggestion.onInput ? suggestion.onInput() : Promise.resolve(),\n          this.ownerSearchBoxProps.getSuggestionTimeout()\n        )\n      )\n    );\n\n    const fulfilledSuggestions: SearchBoxSuggestions[] = [];\n\n    settled.forEach((prom, j) => {\n      if (prom.status === 'fulfilled') {\n        fulfilledSuggestions.push(this.suggestions[j]);\n      } else {\n        this.ownerSearchBoxProps\n          .getLogger()\n          .warn(\n            'Some query suggestions are not being shown because the promise timed out.'\n          );\n      }\n    });\n\n    const splitSuggestions = (side: 'left' | 'right', isDefault = false) =>\n      fulfilledSuggestions\n        .filter(\n          (suggestion) =>\n            suggestion.panel === side || (!suggestion.panel && isDefault)\n        )\n        .sort(this.sortSuggestions);\n\n    this.leftSuggestions = splitSuggestions('left', true);\n    this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\n\n    this.rightSuggestions = splitSuggestions('right');\n    this.rightSuggestionElements = this.getSuggestionElements(\n      this.rightSuggestions\n    );\n\n    const defaultSuggestedQuery =\n      this.allSuggestionElements.find(elementHasQuery)?.query || '';\n\n    this.updateSuggestedQuery(defaultSuggestedQuery);\n  }\n\n  private get lastValue() {\n    return this.panelInFocus?.lastElementChild;\n  }\n\n  private get previousOrLastValue() {\n    if (!this.hasActiveDescendant) {\n      return this.lastValue;\n    }\n\n    return (\n      this.activeDescendantElement?.previousElementSibling || this.lastValue\n    );\n  }\n\n  private sortSuggestions(a: SearchBoxSuggestions, b: SearchBoxSuggestions) {\n    return a.position - b.position;\n  }\n\n  private get nextOrFirstValue() {\n    if (!this.hasActiveDescendant) {\n      return this.firstValue;\n    }\n\n    return this.activeDescendantElement?.nextElementSibling || this.firstValue;\n  }\n\n  private get firstValue() {\n    return this.panelInFocus?.firstElementChild;\n  }\n\n  private get panelInFocus() {\n    if (this.leftPanel?.contains(this.activeDescendantElement)) {\n      return this.leftPanel;\n    }\n    if (this.rightPanel?.contains(this.activeDescendantElement)) {\n      return this.rightPanel;\n    }\n    return this.leftPanel || this.rightPanel;\n  }\n\n  private scrollActiveDescendantIntoView() {\n    this.activeDescendantElement?.scrollIntoView({\n      block: 'nearest',\n    });\n  }\n\n  private updateQueryFromSuggestion() {\n    const suggestedQuery = this.activeDescendantElement?.getAttribute(\n      this.queryDataAttribute\n    );\n    this.updateOwnerSearchboxQuery(suggestedQuery || '');\n  }\n\n  private updateOwnerSearchboxQuery(query: string) {\n    if (query && this.ownerSearchBoxProps.getSearchBoxValue() !== query) {\n      this.ownerSearchBoxProps.updateQuery(query);\n      this.updateSuggestedQuery(query);\n    }\n  }\n\n  private async updateSuggestedQuery(suggestedQuery: string) {\n    await Promise.allSettled(\n      this.suggestions.map((suggestion) =>\n        promiseTimeout(\n          suggestion.onSuggestedQueryChange\n            ? suggestion.onSuggestedQueryChange(suggestedQuery)\n            : Promise.resolve(),\n          this.ownerSearchBoxProps.getSuggestionTimeout()\n        )\n      )\n    );\n    this.suggestedQuery = suggestedQuery;\n    this.updateSuggestionElements(suggestedQuery);\n    forceUpdate(this.ownerSearchBoxProps.getHost());\n  }\n\n  private updateSuggestionElements(query: string) {\n    if (!this.isPanelInFocus(this.leftPanel, query)) {\n      this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\n    }\n\n    if (!this.isPanelInFocus(this.rightPanel, query)) {\n      this.rightSuggestionElements = this.getSuggestionElements(\n        this.rightSuggestions\n      );\n    }\n  }\n\n  private isPanelInFocus(\n    panel: HTMLElement | undefined,\n    query: string\n  ): boolean {\n    if (!this.activeDescendantElement) {\n      return false;\n    }\n\n    if (query) {\n      const escaped = DOMPurify.sanitize(query);\n      return !!panel?.querySelector(\n        `[${this.queryDataAttribute}=\"${escaped}\"]`\n      );\n    }\n\n    return this.activeDescendantElement?.closest('ul') === panel;\n  }\n\n  private getAndFilterLeftSuggestionElements() {\n    const suggestionElements = this.getSuggestionElements(this.leftSuggestions);\n    const filterOnDuplicate = new Set();\n\n    const out = suggestionElements.filter((suggestionElement) => {\n      if (isNullOrUndefined(suggestionElement.query)) {\n        return true;\n      }\n      if (filterOnDuplicate.has(suggestionElement.query)) {\n        return false;\n      } else {\n        filterOnDuplicate.add(suggestionElement.query);\n        return true;\n      }\n    });\n\n    return out;\n  }\n\n  private getSuggestionElements(suggestions: SearchBoxSuggestions[]) {\n    const elements = suggestions\n      .map((suggestion) => suggestion.renderItems())\n      .flat();\n\n    const max =\n      this.ownerSearchBoxProps.getNumberOfSuggestionsToDisplay() +\n      elements.filter(elementHasNoQuery).length;\n\n    return elements.slice(0, max);\n  }\n\n  private updateDescendants(activeDescendant = '') {\n    const newPrevDescendantElement = this.activeDescendantElement;\n    this.previousActiveDescendantElement = newPrevDescendantElement;\n    this.updateActiveDescendant(activeDescendant);\n  }\n\n  private clearSuggestionElements() {\n    this.leftSuggestionElements = [];\n    this.rightSuggestionElements = [];\n  }\n}\n","import {h, FunctionalComponent, VNode, Fragment} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {isMacOS} from '../../../utils/device-utils';\nimport {AnyBindings} from '../../common/interface/bindings';\nimport {SearchBoxSuggestionElement} from '../../common/suggestions/suggestions-common';\n\nexport const queryDataAttribute = 'data-query';\n\ntype Side = 'left' | 'right';\n\ninterface SearchSuggestionProps {\n  bindings: AnyBindings;\n  id: string;\n  suggestion: SearchBoxSuggestionElement;\n  isSelected: boolean;\n  side: Side;\n  index: number;\n  lastIndex: number;\n  isDoubleList: boolean;\n}\n\ninterface ButtonSearchSuggestionProps extends SearchSuggestionProps {\n  onClick?(e: Event): void;\n  onMouseOver?(e: Event): void;\n}\n\nfunction getPartsForSuggestion(\n  suggestion: SearchBoxSuggestionElement,\n  isSelected: boolean\n) {\n  let part = 'suggestion';\n  if (isSelected) {\n    part += ' active-suggestion';\n  }\n  if (suggestion.query) {\n    part += ' suggestion-with-query';\n  }\n  if (suggestion.part) {\n    part += ` ${suggestion.part}`;\n  }\n  return part;\n}\n\nfunction getClassesForSuggestion(isSelected: boolean) {\n  return `flex px-4 min-h-[40px] items-center text-left text-neutral-dark cursor-pointer ${\n    isSelected ? 'bg-neutral-light' : ''\n  }`;\n}\n\nfunction isHTMLElement(el: VNode | Element): el is HTMLElement {\n  return el instanceof HTMLElement;\n}\n\nfunction ensureContentForRenderedSuggestion({\n  renderedSuggestion,\n  suggestion,\n}: {\n  renderedSuggestion: HTMLElement;\n  suggestion: SearchBoxSuggestionElement;\n}) {\n  if (isHTMLElement(suggestion.content)) {\n    renderedSuggestion.replaceChildren(suggestion.content);\n  }\n}\n\nfunction getAriaLabelForRenderedSuggestion({\n  bindings,\n  renderedSuggestion,\n  suggestion,\n  side,\n  index,\n  lastIndex,\n  isDoubleList,\n  isButton,\n}: {\n  bindings: AnyBindings;\n  renderedSuggestion: HTMLElement;\n  suggestion: SearchBoxSuggestionElement;\n  side: Side;\n  index: number;\n  lastIndex: number;\n  isDoubleList: boolean;\n  isButton: boolean;\n}) {\n  const contentLabel =\n    suggestion.ariaLabel ??\n    suggestion.query ??\n    renderedSuggestion.innerText ??\n    bindings.i18n.t('no-title');\n  const labelWithType =\n    isMacOS() && isButton\n      ? bindings.i18n.t('search-suggestion-button', {\n          label: contentLabel,\n          interpolation: {escapeValue: false},\n        })\n      : contentLabel;\n  const position = index + 1;\n  const count = lastIndex + 1;\n\n  if (!isDoubleList) {\n    return bindings.i18n.t('search-suggestion-single-list', {\n      label: labelWithType,\n      position,\n      count,\n      interpolation: {escapeValue: false},\n    });\n  }\n\n  return bindings.i18n.t('search-suggestion-double-list', {\n    label: labelWithType,\n    position,\n    count,\n    side: bindings.i18n.t(side === 'left' ? 'left' : 'right'),\n    interpolation: {escapeValue: false},\n  });\n}\n\nfunction getContentForSuggestion(suggestion: SearchBoxSuggestionElement) {\n  return !isHTMLElement(suggestion.content) ? (\n    suggestion.content\n  ) : (\n    <Fragment></Fragment>\n  );\n}\n\nfunction getCommonSearchSuggestionAttributes(\n  {\n    bindings,\n    id,\n    suggestion,\n    isSelected,\n    side,\n    index,\n    lastIndex,\n    isDoubleList,\n  }: SearchSuggestionProps,\n  isButton: boolean\n): JSXBase.HTMLAttributes<HTMLElement> {\n  return {\n    id: id,\n    key: suggestion.key,\n    part: getPartsForSuggestion(suggestion, isSelected),\n    class: getClassesForSuggestion(isSelected),\n    ref: (el) => {\n      if (!el) {\n        return;\n      }\n      ensureContentForRenderedSuggestion({\n        renderedSuggestion: el,\n        suggestion,\n      });\n      el.setAttribute(\n        'aria-label',\n        getAriaLabelForRenderedSuggestion({\n          bindings,\n          renderedSuggestion: el,\n          suggestion,\n          side,\n          index,\n          lastIndex,\n          isDoubleList,\n          isButton,\n        })\n      );\n    },\n  };\n}\n\nexport const SimpleSearchSuggestion: FunctionalComponent<\n  SearchSuggestionProps\n> = (props) => {\n  return (\n    <span {...getCommonSearchSuggestionAttributes(props, false)}>\n      {getContentForSuggestion(props.suggestion)}\n    </span>\n  );\n};\n\nexport const ButtonSearchSuggestion: FunctionalComponent<\n  ButtonSearchSuggestionProps\n> = (props) => {\n  return (\n    <button\n      {...getCommonSearchSuggestionAttributes(props, true)}\n      onMouseDown={(e) => e.preventDefault()}\n      onClick={(e: Event) => props.onClick?.(e)}\n      onMouseOver={(e: Event) => props.onMouseOver?.(e)}\n      {...{[queryDataAttribute]: props.suggestion.query}}\n    >\n      {getContentForSuggestion(props.suggestion)}\n    </button>\n  );\n};\n"],"mappings":"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"}