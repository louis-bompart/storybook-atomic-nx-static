{"file":"atomic-query-error.js","mappings":";;;;;;;;AAAA,MAAM,mBAAmB,GAAG,u+tCAAu+tC,CAAC;AACpguC,+BAAe,mBAAmB;;;;;;;;;;;;MCiCrBA,kBAAgB;;;;;QAQlB,iBAAY,GAAG,KAAK,CAAC;;;4BAAN,KAAK;;IAKtB,UAAU;QACf,IAAI,CAAC,UAAU,GAAGC,EAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzD;IAEM,MAAM;QACX,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,eAAe,CAAC;QAC/C,MAAM,EACJ,QAAQ,EAAE,EACR,IAAI,EACJ,MAAM,EAAE,EACN,KAAK,EAAE,EACL,aAAa,EAAE,EAAC,cAAc,EAAE,WAAW,EAAC,GAC7C,GACF,GACF,GACF,GAAG,IAAI,CAAC;QACT,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,WAAW,GAAG,2BAA2B,CAC5C,IAAI,EACJ,cAAc,EACd,WAAW,EACX,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CACZ,CAAC;SACH;QACD,QACE,EAAC,eAAe,qDAAC,QAAQ,EAAE,QAAQ,IACjC,EAAC,mBAAmB,uDAClB,EAAC,cAAc,qDAAC,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAI,EAC1C,EAAC,eAAe,qDACd,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EACV,cAAc,EAAE,cAAc,GAC9B,EACF,EAAC,qBAAqB,qDACpB,IAAI,EAAE,IAAI,EACV,cAAc,EAAE,cAAc,EAC9B,GAAG,EAAE,WAAW,EAChB,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GACtB,EACF,EAAC,kBAAkB,qDACjB,IAAI,EAAE,EAAC,cAAc,IAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAI,EAC5D,UAAU,EAAE,OAAO,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,EAC1D,IAAI,EAAE,IAAI,GACV,EACF,EAAC,iBAAiB,qDAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,GAAI,CACxC,CACN,EAClB;KACH;;;;;;;AA5D4B;IAA5B,kBAAkB,EAAE;oDAA4B;AAKzC;IAFP,qBAAqB,CAAC,YAAY,CAAC;2DAEM;AAKhC;IADT,cAAc,CAAC,aAAa,CAAC;uDACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicQueryError","buildQueryError"],"sources":["src/components/search/atomic-query-error/atomic-query-error.pcss?tag=atomic-query-error&encapsulation=shadow","src/components/search/atomic-query-error/atomic-query-error.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {QueryError, QueryErrorState, buildQueryError} from '@coveo/headless';\nimport {Component, h, State} from '@stencil/core';\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {QueryErrorContainer} from '../../common/query-error/container';\nimport {QueryErrorDescription} from '../../common/query-error/description';\nimport {QueryErrorDetails} from '../../common/query-error/details';\nimport {QueryErrorGuard} from '../../common/query-error/guard';\nimport {QueryErrorIcon} from '../../common/query-error/icon';\nimport {QueryErrorLink} from '../../common/query-error/link';\nimport {QueryErrorShowMore} from '../../common/query-error/show-more';\nimport {QueryErrorTitle} from '../../common/query-error/title';\nimport {getAriaMessageFromErrorType} from '../../common/query-error/utils';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.\n *\n * @part icon - The svg related to the error.\n * @part title - The title of the error.\n * @part description - A description of the error.\n * @part doc-link - A link to the relevant documentation.\n * @part more-info-btn - A button to request additional error information.\n * @part error-info - Additional error information.\n */\n@Component({\n  tag: 'atomic-query-error',\n  styleUrl: 'atomic-query-error.pcss',\n  shadow: true,\n})\nexport class AtomicQueryError implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public queryError!: QueryError;\n\n  @BindStateToController('queryError')\n  @State()\n  private queryErrorState!: QueryErrorState;\n  @State() public error!: Error;\n  @State() showMoreInfo = false;\n\n  @AriaLiveRegion('query-error')\n  protected ariaMessage!: string;\n\n  public initialize() {\n    this.queryError = buildQueryError(this.bindings.engine);\n  }\n\n  public render() {\n    const {hasError, error} = this.queryErrorState;\n    const {\n      bindings: {\n        i18n,\n        engine: {\n          state: {\n            configuration: {organizationId, platformUrl},\n          },\n        },\n      },\n    } = this;\n    if (hasError) {\n      this.ariaMessage = getAriaMessageFromErrorType(\n        i18n,\n        organizationId,\n        platformUrl,\n        error?.type\n      );\n    }\n    return (\n      <QueryErrorGuard hasError={hasError}>\n        <QueryErrorContainer>\n          <QueryErrorIcon errorType={error?.type} />\n          <QueryErrorTitle\n            errorType={error?.type}\n            i18n={i18n}\n            organizationId={organizationId}\n          />\n          <QueryErrorDescription\n            i18n={i18n}\n            organizationId={organizationId}\n            url={platformUrl}\n            errorType={error?.type}\n          />\n          <QueryErrorShowMore\n            link={<QueryErrorLink i18n={i18n} errorType={error?.type} />}\n            onShowMore={() => (this.showMoreInfo = !this.showMoreInfo)}\n            i18n={i18n}\n          />\n          <QueryErrorDetails error={error} show={this.showMoreInfo} />\n        </QueryErrorContainer>\n      </QueryErrorGuard>\n    );\n  }\n}\n"],"version":3}