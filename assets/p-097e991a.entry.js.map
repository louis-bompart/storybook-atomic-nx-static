{"version":3,"names":["AtomicResultText","this","shouldHighlight","renderWithHighlights","value","highlights","openingDelimiter","closingDelimiter","highlightedValue","HighlightUtils","highlightString","content","innerHTML","replace","RegExp","h","Host","error","possiblyWarnOnBadFieldType","resultValueRaw","ResultTemplatesHelpers","getResultProperty","result","field","isArray","bindings","engine","logger","render","resultValueAsString","getStringValueFromResultOrNull","default","host","remove","getFieldValueCaption","i18n","textValue","highlightsValue","__decorate","InitializeBindings","ResultContext","AtomicText","strings","t","count","connectedCallback","Error"],"sources":["src/components/search/result-template-components/atomic-result-text/atomic-result-text.tsx","src/components/search/atomic-text/atomic-text.tsx"],"sourcesContent":["import {isArray} from '@coveo/bueno';\r\nimport {HighlightUtils, Result, ResultTemplatesHelpers} from '@coveo/headless';\r\nimport {Component, Prop, h, Element, Host, State} from '@stencil/core';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-text` component renders the value of a string result field.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-text',\r\n  shadow: false,\r\n})\r\nexport class AtomicResultText implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The result field which the component should use.\r\n   * This will look in the Result object first, and then in the Result.raw object for the fields.\r\n   * It is important to include the necessary field in the `atomic-search-interface` component.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\r\n   */\r\n  @Prop({reflect: true}) public shouldHighlight = true;\r\n\r\n  /**\r\n   * The locale key for the text to display when the configured field has no value.\r\n   */\r\n  @Prop({reflect: true}) public default?: string;\r\n\r\n  private renderWithHighlights(\r\n    value: string,\r\n    highlights: HighlightUtils.HighlightKeyword[]\r\n  ) {\r\n    try {\r\n      const openingDelimiter = '_openingDelimiter_';\r\n      const closingDelimiter = '_closingDelimiter_';\r\n      const highlightedValue = HighlightUtils.highlightString({\r\n        content: value,\r\n        openingDelimiter,\r\n        closingDelimiter,\r\n        highlights,\r\n      });\r\n      const innerHTML = highlightedValue\r\n        .replace(new RegExp(openingDelimiter, 'g'), '<b>')\r\n        .replace(new RegExp(closingDelimiter, 'g'), '</b>');\r\n      // deepcode ignore ReactSetInnerHtml: This is not React code\r\n      return <Host innerHTML={innerHTML}></Host>;\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n    }\r\n  }\r\n\r\n  private possiblyWarnOnBadFieldType() {\r\n    const resultValueRaw = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      this.field\r\n    );\r\n    if (isArray(resultValueRaw)) {\r\n      this.bindings.engine.logger.error(\r\n        `atomic-result-text cannot be used with multi value field \"${this.field}\" with values \"${resultValueRaw}\". Use atomic-result-multi-value-text instead.`,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const resultValueAsString = getStringValueFromResultOrNull(\r\n      this.result,\r\n      this.field\r\n    );\r\n    if (!resultValueAsString && !this.default) {\r\n      this.possiblyWarnOnBadFieldType();\r\n      this.host.remove();\r\n      return;\r\n    }\r\n\r\n    if (!resultValueAsString && this.default) {\r\n      this.possiblyWarnOnBadFieldType();\r\n      return (\r\n        <atomic-text\r\n          value={getFieldValueCaption(\r\n            this.field,\r\n            this.default,\r\n            this.bindings.i18n\r\n          )}\r\n        ></atomic-text>\r\n      );\r\n    }\r\n\r\n    const textValue = `${resultValueAsString}`;\r\n    const highlightsValue = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      `${this.field}Highlights`\r\n    ) as HighlightUtils.HighlightKeyword[];\r\n\r\n    if (this.shouldHighlight && highlightsValue) {\r\n      return this.renderWithHighlights(textValue, highlightsValue);\r\n    }\r\n\r\n    return getFieldValueCaption(this.field, textValue, this.bindings.i18n);\r\n  }\r\n}\r\n","import {Component, Prop, State} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.\r\n */\r\n@Component({\r\n  tag: 'atomic-text',\r\n  shadow: true,\r\n})\r\nexport class AtomicText implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n\r\n  private strings = {\r\n    value: () =>\r\n      this.bindings.i18n.t(this.value, {\r\n        count: this.count,\r\n      }),\r\n  };\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The string key value.\r\n   */\r\n  @Prop({reflect: true}) public value!: string;\r\n  /**\r\n   * The count value used for plurals.\r\n   */\r\n  @Prop({reflect: true}) public count?: number;\r\n\r\n  public connectedCallback() {\r\n    if (!this.value) {\r\n      this.error = new Error('The \"value\" attribute must be defined.');\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.strings.value();\r\n  }\r\n}\r\n"],"mappings":"ouBAmBaA,EAAgB,M,yBAiBGC,KAAAC,gBAAkB,K,+DAAA,K,uBAOxC,oBAAAC,CACNC,EACAC,GAEA,IACE,MAAMC,EAAmB,qBACzB,MAAMC,EAAmB,qBACzB,MAAMC,EAAmBC,EAAeC,gBAAgB,CACtDC,QAASP,EACTE,mBACAC,mBACAF,eAEF,MAAMO,EAAYJ,EACfK,QAAQ,IAAIC,OAAOR,EAAkB,KAAM,OAC3CO,QAAQ,IAAIC,OAAOP,EAAkB,KAAM,QAE9C,OAAOQ,EAACC,EAAI,CAACJ,UAAWA,G,CACxB,MAAOK,GACPhB,KAAKgB,MAAQA,C,EAIT,0BAAAC,GACN,MAAMC,EAAiBC,EAAuBC,kBAC5CpB,KAAKqB,OACLrB,KAAKsB,OAEP,GAAIC,EAAQL,GAAiB,CAC3BlB,KAAKwB,SAASC,OAAOC,OAAOV,MAC1B,6DAA6DhB,KAAKsB,uBAAuBJ,kDACzFlB,K,EAKC,MAAA2B,GACL,MAAMC,EAAsBC,EAC1B7B,KAAKqB,OACLrB,KAAKsB,OAEP,IAAKM,IAAwB5B,KAAK8B,QAAS,CACzC9B,KAAKiB,6BACLjB,KAAK+B,KAAKC,SACV,M,CAGF,IAAKJ,GAAuB5B,KAAK8B,QAAS,CACxC9B,KAAKiB,6BACL,OACEH,EAAA,eACEX,MAAO8B,EACLjC,KAAKsB,MACLtB,KAAK8B,QACL9B,KAAKwB,SAASU,O,CAMtB,MAAMC,EAAY,GAAGP,IACrB,MAAMQ,EAAkBjB,EAAuBC,kBAC7CpB,KAAKqB,OACL,GAAGrB,KAAKsB,mBAGV,GAAItB,KAAKC,iBAAmBmC,EAAiB,CAC3C,OAAOpC,KAAKE,qBAAqBiC,EAAWC,E,CAG9C,OAAOH,EAAqBjC,KAAKsB,MAAOa,EAAWnC,KAAKwB,SAASU,K,6BA7FtCG,GAA5BC,K,+BACwBD,GAAxBE,K,8YCPUC,EAAU,M,yBAGbxC,KAAAyC,QAAU,CAChBtC,MAAO,IACLH,KAAKwB,SAASU,KAAKQ,EAAE1C,KAAKG,MAAO,CAC/BwC,MAAO3C,KAAK2C,S,+DAcX,iBAAAC,GACL,IAAK5C,KAAKG,MAAO,CACfH,KAAKgB,MAAQ,IAAI6B,MAAM,yC,EAIpB,MAAAlB,GACL,OAAO3B,KAAKyC,QAAQtC,O,GA1BOkC,EAAA,CAA5BC,K"}