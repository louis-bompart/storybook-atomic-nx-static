{"version":3,"names":["AtomicCommerceSearchBoxQuerySuggestions","componentWillLoad","dispatchSearchBoxSuggestionsEvent","bindings","this","initialize","host","error","engine","registerQuerySuggest","fetchQuerySuggestions","loadQuerySuggestActions","dispatch","id","count","numberOfQueries","position","Array","from","parentNode","children","indexOf","onInput","renderItems","hasQuery","searchBoxController","state","value","max","maxWithQuery","maxWithoutQuery","suggestions","slice","map","suggestion","renderItem","partialItem","getPartialSearchBoxSuggestionElement","i18n","content","h","QuerySuggestionContainer","QuerySuggestionIcon","icon","SearchIcon","hasSuggestion","getSuggestions","length","QuerySuggestionText","onSelect","selectSuggestion","rawValue","render","key","element","AtomicCommerceSearchBoxRecentQueries","warnUser","once","logger","warn","renderIcon","Clock","storage","SafeStorage","recentQueriesList","buildRecentQueriesList","initialState","queries","retrieveLocalStorage","options","maxLength","clearFilters","subscribe","updateLocalStorage","getParsedJSON","StorageItems","RECENT_QUERIES","analyticsEnabled","disableFeature","setJSON","removeItem","query","filteredQueries","filter","recentQuery","toLowerCase","startsWith","suggestionElements","unshift","renderClear","getPartialRecentQueryClearElement","RecentQueryClear","clear","triggerSuggestions","getPartialRecentQueryElement","RecentQueriesContainer","RecentQueryIcon","RecentQueryText","isStandalone","updateText","submit","executeRecentQuery"],"sources":["src/components/commerce/search-box-suggestions/atomic-commerce-search-box-query-suggestions/atomic-commerce-search-box-query-suggestions.tsx","src/components/commerce/search-box-suggestions/atomic-commerce-search-box-recent-queries/atomic-commerce-search-box-recent-queries.tsx"],"sourcesContent":["import {\n  SearchBox,\n  Suggestion,\n  CommerceEngine,\n  loadQuerySuggestActions,\n} from '@coveo/headless/commerce';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport SearchIcon from '../../../../images/search.svg';\nimport {\n  getPartialSearchBoxSuggestionElement,\n  QuerySuggestionContainer,\n  QuerySuggestionIcon,\n  QuerySuggestionText,\n} from '../../../common/suggestions/query-suggestions';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../../../common/suggestions/suggestions-common';\n\n/**\n * The `atomic-commerce-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-search-box-query-suggestions',\n  shadow: true,\n})\nexport class AtomicCommerceSearchBoxQuerySuggestions {\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox>;\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery?: number;\n  /**\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent<SearchBox>((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    const engine = this.bindings.engine as CommerceEngine<{querySet: string}>;\n    const {registerQuerySuggest, fetchQuerySuggestions} =\n      loadQuerySuggestActions(engine);\n\n    engine.dispatch(\n      registerQuerySuggest({\n        id: this.bindings.id,\n        count: this.bindings.numberOfQueries,\n      })\n    );\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      onInput: () =>\n        engine.dispatch(\n          fetchQuerySuggestions({\n            id: this.bindings.id,\n          })\n        ),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    return this.bindings.searchBoxController.state.suggestions\n      .slice(0, max)\n      .map((suggestion) => this.renderItem(suggestion));\n  }\n\n  private renderItem(suggestion: Suggestion) {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    const partialItem = getPartialSearchBoxSuggestionElement(\n      suggestion,\n      this.bindings.i18n\n    );\n\n    return {\n      ...partialItem,\n      content: (\n        <QuerySuggestionContainer>\n          <QuerySuggestionIcon\n            icon={this.icon || SearchIcon}\n            hasSuggestion={this.bindings.getSuggestions().length > 1}\n          />\n\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\n        </QuerySuggestionContainer>\n      ),\n      onSelect: () => {\n        this.bindings.searchBoxController.selectSuggestion(suggestion.rawValue);\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n","import {\n  SearchBox,\n  RecentQueriesList,\n  buildRecentQueriesList,\n} from '@coveo/headless/commerce';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport Clock from '../../../../images/clock.svg';\nimport {SafeStorage, StorageItems} from '../../../../utils/local-storage-utils';\nimport {once} from '../../../../utils/utils';\nimport {\n  getPartialRecentQueryClearElement,\n  getPartialRecentQueryElement,\n  RecentQueriesContainer,\n  RecentQueryClear,\n  RecentQueryIcon,\n  RecentQueryText,\n} from '../../../common/suggestions/recent-queries';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../../../common/suggestions/suggestions-common';\nimport {CommerceBindings as Bindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-search-box-recent-queries` component can be added as a child of an `atomic-commerce-search-box` component, allowing for the configuration of recent query suggestions.\n *\n * @part recent-query-title - The 'Recent queries' title.\n * @part recent-query-clear - The 'Clear' button for clearing recent queries.\n *\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-search-box-recent-queries',\n  shadow: true,\n})\nexport class AtomicCommerceSearchBoxRecentQueries {\n  private bindings!: SearchBoxSuggestionsBindings<SearchBox, Bindings>;\n  private recentQueriesList!: RecentQueriesList;\n  private storage!: SafeStorage;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions to display when the user types in the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery = 3;\n  /**\n   * The maximum number of suggestions to display initially, when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent<SearchBox, Bindings>((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private renderIcon() {\n    return this.icon || Clock;\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    this.storage = new SafeStorage();\n    this.recentQueriesList = buildRecentQueriesList(this.bindings.engine, {\n      initialState: {queries: this.retrieveLocalStorage()},\n      options: {maxLength: 1000, clearFilters: this.bindings.clearFilters},\n    });\n\n    this.recentQueriesList.subscribe(() => this.updateLocalStorage());\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private retrieveLocalStorage() {\n    return this.storage.getParsedJSON(StorageItems.RECENT_QUERIES, []);\n  }\n\n  private updateLocalStorage() {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return this.disableFeature();\n    }\n\n    return this.storage.setJSON(\n      StorageItems.RECENT_QUERIES,\n      this.recentQueriesList.state.queries\n    );\n  }\n\n  private warnUser = once(() =>\n    this.bindings.engine.logger.warn(\n      'The recent queries feature is deactivated because analytics are disabled.'\n    )\n  );\n\n  private disableFeature() {\n    this.warnUser();\n    this.storage.removeItem(StorageItems.RECENT_QUERIES);\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return [];\n    }\n\n    const query = this.bindings.searchBoxController.state.value;\n    const hasQuery = query !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    const filteredQueries = this.recentQueriesList.state.queries\n      .filter(\n        (recentQuery) =>\n          recentQuery !== query &&\n          recentQuery.toLowerCase().startsWith(query.toLowerCase())\n      )\n      .slice(0, max);\n\n    const suggestionElements: SearchBoxSuggestionElement[] =\n      filteredQueries.map((value) => this.renderItem(value));\n    if (suggestionElements.length) {\n      suggestionElements.unshift(this.renderClear());\n    }\n\n    return suggestionElements;\n  }\n\n  private renderClear(): SearchBoxSuggestionElement {\n    const partialItem = getPartialRecentQueryClearElement(this.bindings.i18n);\n\n    return {\n      ...partialItem,\n      content: <RecentQueryClear i18n={this.bindings.i18n} />,\n      onSelect: () => {\n        this.recentQueriesList.clear();\n        this.bindings.triggerSuggestions();\n      },\n    };\n  }\n\n  private renderItem(value: string): SearchBoxSuggestionElement {\n    const query = this.bindings.searchBoxController.state.value;\n    const partialItem = getPartialRecentQueryElement(value, this.bindings.i18n);\n    return {\n      ...partialItem,\n      content: (\n        <RecentQueriesContainer>\n          <RecentQueryIcon icon={this.renderIcon()} />\n          <RecentQueryText query={query} value={value} />\n        </RecentQueriesContainer>\n      ),\n\n      onSelect: () => {\n        if (this.bindings.isStandalone) {\n          this.bindings.searchBoxController.updateText(value);\n          this.bindings.searchBoxController.submit();\n          return;\n        }\n\n        this.recentQueriesList.executeRecentQuery(\n          this.recentQueriesList.state.queries.indexOf(value)\n        );\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"mappings":"yfA6BaA,EAAuC,M,6HAwBlD,iBAAAC,GACE,IACEC,GAA8CC,IAC5CC,KAAKD,SAAWA,EAChB,OAAOC,KAAKC,YAAY,GACvBD,KAAKE,K,CACR,MAAOC,GACPH,KAAKG,MAAQA,C,EAIT,UAAAF,GACN,MAAMG,EAASJ,KAAKD,SAASK,OAC7B,MAAMC,qBAACA,EAAoBC,sBAAEA,GAC3BC,EAAwBH,GAE1BA,EAAOI,SACLH,EAAqB,CACnBI,GAAIT,KAAKD,SAASU,GAClBC,MAAOV,KAAKD,SAASY,mBAIzB,MAAO,CACLC,SAAUC,MAAMC,KAAKd,KAAKE,KAAKa,WAAYC,UAAUC,QAAQjB,KAAKE,MAClEgB,QAAS,IACPd,EAAOI,SACLF,EAAsB,CACpBG,GAAIT,KAAKD,SAASU,MAGxBU,YAAa,IAAMnB,KAAKmB,c,CAIpB,WAAAA,GACN,MAAMC,EAAWpB,KAAKD,SAASsB,oBAAoBC,MAAMC,QAAU,GACnE,MAAMC,EAAMJ,EAAWpB,KAAKyB,aAAezB,KAAK0B,gBAChD,OAAO1B,KAAKD,SAASsB,oBAAoBC,MAAMK,YAC5CC,MAAM,EAAGJ,GACTK,KAAKC,GAAe9B,KAAK+B,WAAWD,I,CAGjC,UAAAC,CAAWD,GACjB,MAAMV,EAAWpB,KAAKD,SAASsB,oBAAoBC,MAAMC,QAAU,GACnE,MAAMS,EAAcC,EAClBH,EACA9B,KAAKD,SAASmC,MAGhB,MAAO,IACFF,EACHG,QACEC,EAACC,EAAwB,KACvBD,EAACE,EAAmB,CAClBC,KAAMvC,KAAKuC,MAAQC,EACnBC,cAAezC,KAAKD,SAAS2C,iBAAiBC,OAAS,IAGzDP,EAACQ,EAAmB,CAACd,WAAYA,EAAYV,SAAUA,KAG3DyB,SAAU,KACR7C,KAAKD,SAASsB,oBAAoByB,iBAAiBhB,EAAWiB,SAAS,E,CAKtE,MAAAC,GACL,GAAIhD,KAAKG,MAAO,CACd,OACEiC,EAAA,0BAAAa,IAAA,2CACEC,QAASlD,KAAKE,KACdC,MAAOH,KAAKG,O,oCCzFTgD,EAAoC,M,yBAqBjBnD,KAAAyB,aAAe,EAmDrCzB,KAAAoD,SAAWC,GAAK,IACtBrD,KAAKD,SAASK,OAAOkD,OAAOC,KAC1B,+E,2DArDyC,E,+BAM7C,iBAAA1D,GACE,IACEC,GAAwDC,IACtDC,KAAKD,SAAWA,EAChB,OAAOC,KAAKC,YAAY,GACvBD,KAAKE,K,CACR,MAAOC,GACPH,KAAKG,MAAQA,C,EAIT,UAAAqD,GACN,OAAOxD,KAAKuC,MAAQkB,C,CAGd,UAAAxD,GACND,KAAK0D,QAAU,IAAIC,EACnB3D,KAAK4D,kBAAoBC,EAAuB7D,KAAKD,SAASK,OAAQ,CACpE0D,aAAc,CAACC,QAAS/D,KAAKgE,wBAC7BC,QAAS,CAACC,UAAW,IAAMC,aAAcnE,KAAKD,SAASoE,gBAGzDnE,KAAK4D,kBAAkBQ,WAAU,IAAMpE,KAAKqE,uBAE5C,MAAO,CACLzD,SAAUC,MAAMC,KAAKd,KAAKE,KAAKa,WAAYC,UAAUC,QAAQjB,KAAKE,MAClEiB,YAAa,IAAMnB,KAAKmB,c,CAIpB,oBAAA6C,GACN,OAAOhE,KAAK0D,QAAQY,cAAcC,EAAaC,eAAgB,G,CAGzD,kBAAAH,GACN,IAAKrE,KAAK4D,kBAAkBtC,MAAMmD,iBAAkB,CAClD,OAAOzE,KAAK0E,gB,CAGd,OAAO1E,KAAK0D,QAAQiB,QAClBJ,EAAaC,eACbxE,KAAK4D,kBAAkBtC,MAAMyC,Q,CAUzB,cAAAW,GACN1E,KAAKoD,WACLpD,KAAK0D,QAAQkB,WAAWL,EAAaC,e,CAG/B,WAAArD,GACN,IAAKnB,KAAK4D,kBAAkBtC,MAAMmD,iBAAkB,CAClD,MAAO,E,CAGT,MAAMI,EAAQ7E,KAAKD,SAASsB,oBAAoBC,MAAMC,MACtD,MAAMH,EAAWyD,IAAU,GAC3B,MAAMrD,EAAMJ,EAAWpB,KAAKyB,aAAezB,KAAK0B,gBAChD,MAAMoD,EAAkB9E,KAAK4D,kBAAkBtC,MAAMyC,QAClDgB,QACEC,GACCA,IAAgBH,GAChBG,EAAYC,cAAcC,WAAWL,EAAMI,iBAE9CrD,MAAM,EAAGJ,GAEZ,MAAM2D,EACJL,EAAgBjD,KAAKN,GAAUvB,KAAK+B,WAAWR,KACjD,GAAI4D,EAAmBxC,OAAQ,CAC7BwC,EAAmBC,QAAQpF,KAAKqF,c,CAGlC,OAAOF,C,CAGD,WAAAE,GACN,MAAMrD,EAAcsD,EAAkCtF,KAAKD,SAASmC,MAEpE,MAAO,IACFF,EACHG,QAASC,EAACmD,EAAgB,CAACrD,KAAMlC,KAAKD,SAASmC,OAC/CW,SAAU,KACR7C,KAAK4D,kBAAkB4B,QACvBxF,KAAKD,SAAS0F,oBAAoB,E,CAKhC,UAAA1D,CAAWR,GACjB,MAAMsD,EAAQ7E,KAAKD,SAASsB,oBAAoBC,MAAMC,MACtD,MAAMS,EAAc0D,EAA6BnE,EAAOvB,KAAKD,SAASmC,MACtE,MAAO,IACFF,EACHG,QACEC,EAACuD,EAAsB,KACrBvD,EAACwD,EAAe,CAACrD,KAAMvC,KAAKwD,eAC5BpB,EAACyD,EAAe,CAAChB,MAAOA,EAAOtD,MAAOA,KAI1CsB,SAAU,KACR,GAAI7C,KAAKD,SAAS+F,aAAc,CAC9B9F,KAAKD,SAASsB,oBAAoB0E,WAAWxE,GAC7CvB,KAAKD,SAASsB,oBAAoB2E,SAClC,M,CAGFhG,KAAK4D,kBAAkBqC,mBACrBjG,KAAK4D,kBAAkBtC,MAAMyC,QAAQ9C,QAAQM,GAC9C,E,CAKA,MAAAyB,GACL,GAAIhD,KAAKG,MAAO,CACd,OACEiC,EAAA,0BAAAa,IAAA,2CACEC,QAASlD,KAAKE,KACdC,MAAOH,KAAKG,O"}