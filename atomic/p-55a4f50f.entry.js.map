{"version":3,"names":["atomicInsightSmartSnippetCss","AtomicInsightSmartSnippetStyle0","AtomicInsightSmartSnippet","this","id","randomID","headingLevel","maximumHeight","collapsedHeight","feedbackSent","initialize","smartSnippet","buildInsightSmartSnippet","bindings","engine","smartSnippetCommon","SmartSnippetCommon","modalTagName","getHost","host","getBindings","getModalRef","modalRef","getHeadingLevel","getCollapsedHeight","getMaximumHeight","getSmartSnippetState","smartSnippetState","getSmartSnippet","getSnippetStyle","snippetStyle","getFeedbackSent","setModalRef","bind","setFeedbackSent","store","waitUntilAppLoaded","hideDuringRender","ref","isSent","componentWillUpdate","liked","disliked","componentDidRender","isAppLoaded","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.pcss?tag=atomic-insight-smart-snippet&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {Component, Prop, State, Element} from '@stencil/core';\nimport {\n  buildInsightSmartSnippet,\n  InsightSmartSnippet,\n  InsightSmartSnippetState,\n} from '../..';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet',\n  styleUrl: 'atomic-insight-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: InsightSmartSnippetState;\n  public error!: Error;\n\n  @Element() public host!: HTMLElement;\n\n  private id = randomID();\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n  private smartSnippetCommon!: SmartSnippetCommon;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  @State() feedbackSent = false;\n\n  public initialize() {\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n    this.smartSnippetCommon = new SmartSnippetCommon({\n      id: this.id,\n      modalTagName: 'atomic-insight-smart-snippet-feedback-modal',\n      getHost: () => this.host,\n      getBindings: () => this.bindings,\n      getModalRef: () => this.modalRef,\n      getHeadingLevel: () => this.headingLevel,\n      getCollapsedHeight: () => this.collapsedHeight,\n      getMaximumHeight: () => this.maximumHeight,\n      getSmartSnippetState: () => this.smartSnippetState,\n      getSmartSnippet: () => this.smartSnippet,\n      getSnippetStyle: () => this.snippetStyle,\n      getFeedbackSent: () => this.feedbackSent,\n      setModalRef: this.setModalRef.bind(this),\n      setFeedbackSent: this.setFeedbackSent.bind(this),\n    });\n    this.bindings.store.waitUntilAppLoaded(() =>\n      this.smartSnippetCommon.hideDuringRender(false)\n    );\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicInsightSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public componentDidRender() {\n    if (this.bindings.store.isAppLoaded()) {\n      this.smartSnippetCommon.hideDuringRender(false);\n    }\n  }\n\n  public render() {\n    return this.smartSnippetCommon.render();\n  }\n}\n"],"mappings":"qWAAA,MAAMA,EAA+B,02wCACrC,MAAAC,EAAeD,E,iXCsBFE,EAAyB,M,yBAa5BC,KAAAC,GAAKC,IAOiBF,KAAAG,aAAe,EAKtBH,KAAAI,cAAgB,IAIhBJ,KAAAK,gBAAkB,IAgBhCL,KAAAM,aAAe,M,mDAzBqB,E,mBAKN,I,qBAIE,I,8CAgBjB,K,CAEjB,UAAAC,GACLP,KAAKQ,aAAeC,EAAyBT,KAAKU,SAASC,QAC3DX,KAAKY,mBAAqB,IAAIC,EAAmB,CAC/CZ,GAAID,KAAKC,GACTa,aAAc,8CACdC,QAAS,IAAMf,KAAKgB,KACpBC,YAAa,IAAMjB,KAAKU,SACxBQ,YAAa,IAAMlB,KAAKmB,SACxBC,gBAAiB,IAAMpB,KAAKG,aAC5BkB,mBAAoB,IAAMrB,KAAKK,gBAC/BiB,iBAAkB,IAAMtB,KAAKI,cAC7BmB,qBAAsB,IAAMvB,KAAKwB,kBACjCC,gBAAiB,IAAMzB,KAAKQ,aAC5BkB,gBAAiB,IAAM1B,KAAK2B,aAC5BC,gBAAiB,IAAM5B,KAAKM,aAC5BuB,YAAa7B,KAAK6B,YAAYC,KAAK9B,MACnC+B,gBAAiB/B,KAAK+B,gBAAgBD,KAAK9B,QAE7CA,KAAKU,SAASsB,MAAMC,oBAAmB,IACrCjC,KAAKY,mBAAmBsB,iBAAiB,Q,CAIrC,WAAAL,CAAYM,GAClBnC,KAAKmB,SAAWgB,C,CAGV,eAAAJ,CAAgBK,GACtBpC,KAAKM,aAAe8B,C,CAGf,mBAAAC,GACL,KAAMrC,KAAKwB,kBAAkBc,OAAStC,KAAKwB,kBAAkBe,UAAW,CACtEvC,KAAK+B,gBAAgB,M,EAIlB,kBAAAS,GACL,GAAIxC,KAAKU,SAASsB,MAAMS,cAAe,CACrCzC,KAAKY,mBAAmBsB,iBAAiB,M,EAItC,MAAAQ,GACL,OAAO1C,KAAKY,mBAAmB8B,Q,6BAxFJC,EAAA,CAA5BC,K,+BAKMD,EAAA,CAFNE,EAAsB,iB"}