{"file":"atomic-insight-result-children.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,8BAA8B,GAAG,kzuCAAkzuC,CAAC;AAC11uC,0CAAe,8BAA8B;;;;;;;;;;;;AC4B7C,MAAM,sBAAsB,GAAG,yCAAyC,CAAC;AACzE,MAAM,YAAY,GAAG,gCAAgC,CAAC;MAUzC,oBAAoB;;;QAgBd,6BAAwB,GAAG,KAAK,CAAC;QACjC,qBAAgB,GAAG,KAAK,CAAC;QAKlC,wBAAmB,GAAG,KAAK,CAAC;;;;QAK5B,qBAAgB,GAAG,KAAK,CAAC;;;;QAQlB,iBAAY,GAAG,sBAAsB,CAAC;;wCAnBT,KAAK;gCACb,KAAK;;mCAKX,KAAK;gCAKR,KAAK;;4BAQF,sBAAsB;;IAK7C,qBAAqB,CAAC,KAAiC;QAC5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;KACzC;IAEM,UAAU;QACf,IAAI,CAAC,oBAAoB,GAAG,IAAIA,yCAAoB,CAAC;YACnD,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI;YACxB,WAAW,EAAE,MAAM,IAAI,CAAC,QAAQ;YAChC,SAAS,EAAE,MAAM,IAAI,CAAC,MAAM;YAC5B,sBAAsB,EAAE,MAAM,IAAI,CAAC,mBAAmB;YACtD,mBAAmB,EAAE,MAAM,IAAI,CAAC,gBAAgB;YAChD,kBAAkB,EAAE,MAAM,IAAI,CAAC,eAAe;YAC9C,mBAAmB,EAAE,MAAM,IAAI,CAAC,gBAAgB;YAChD,2BAA2B,EAAE,MAAM,IAAI,CAAC,wBAAwB;YAChE,mBAAmB,EAAE,MAAM,IAAI,CAAC,gBAAgB;YAChD,eAAe,EAAE,MAAM,IAAI,CAAC,YAAY;YACxC,gBAAgB,EAAE,MAAM,IAAI,CAAC,aAAa;YAC1C,YAAY,EAAE,MAAM,IAAI,CAAC,SAAS;YAClC,wBAAwB,EAAE,MAAM,IAAI,CAAC,qBAAqB;YAC1D,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,kBAAkB,EAAE,CAAC,eAAsC,MACxD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YAC1C,yBAAyB,EAAE,OACxB,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC;SACzD,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,OAAO;SACR;QAED,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAClC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CACnD,CAAC,MAAM,CACN,CAAC,QAAQ,KAAK,CAACC,2BAAqB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CACvE,CAAC;QAEF,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,QAAQ,YAAY,sCAAsC,sBAAsB,cAAc,CAC/F,CAAC;YACF,OAAO;SACR;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAIC,yCAAoB,CAAC;YACnD,sBAAsB,EAAE,KAAK;YAC7B,gBAAgB,EAAE,iBAAiB;YACnC,2BAA2B,EAAE,MAAM,IAAI,CAAC,wBAAwB;YAChE,mBAAmB,EAAE,MAAM,IAAI,CAAC,gBAAgB;YAChD,2BAA2B,EAAE,CAAC,KAAc;gBAC1C,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;aACvC;YACD,mBAAmB,EAAE,CAAC,KAAc;gBAClC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC/B;YACD,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;KACJ;IAEO,WAAW,CAAC,KAA0B,EAAE,MAAe;;QAC7D,MAAM,OAAO,GAAG,MAAA,IAAI,CAAC,oBAAoB,0CAAE,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE5E,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,MAAM,GAAG,GACP,KAAK,CAAC,MAAM,CAAC,QAAQ;YACrB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvD,QACEC,mCACE,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,KAAK,EACb,iBAAiB,EAAEC,eAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACrE,OAAO,EAAE,EAAC,MAAM,EAAEC,wCAAmB,CAAC,KAAK,CAAC,EAAC;aAC9C,CAAC,EACF,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAC1B,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,EACnC,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,EACzD,OAAO,EAAE,gBAAgB,MAAM,GAAG,YAAY,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,GACrC,EACzB;KACH;IAEM,mBAAmB;QACxB,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,CAAC;KACjD;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;KAC3C;;;AAhI4B;IAA5BC,sCAAkB,EAAE;sDAAmC;AAEjD;IADNC,oCAAqB,EAAE;kEAC2B;AAE3C;IADPC,wCAAqB,EAAE;8DAC2B;AAE3C;IADPC,0BAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,uBAAuB,EAAC,CAAC;oDAC5B;AAE7B;IADPC,uCAAwB,EAAE;2DACW;AAS9B;IAFPC,6CAA0B,EAAE;mEAEgC;;;;;","names":["ResultChildrenCommon","elementHasAncestorTag","ItemTemplateProvider","h","buildInsightInteractiveResult","extractUnfoldedItem","InitializeBindings","ChildTemplatesContext","FoldedItemListContext","ItemContext","ItemDisplayConfigContext","FoldedItemListStateContext"],"sources":["src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.pcss?tag=atomic-insight-result-children&encapsulation=shadow","src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.tsx"],"sourcesContent":["@import '../../../../components/common/result-children/result-children.pcss';\r\n\r\n[part='children-root'] {\r\n  border-left: 1px solid var(--atomic-neutral);\r\n  padding-left: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n","import {Component, Element, State, h, Listen, Prop} from '@stencil/core';\r\nimport {\r\n  buildInsightInteractiveResult,\r\n  InsightFoldedResultListState,\r\n  InsightFoldedResultList,\r\n  InsightFoldedResult,\r\n} from '../..';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {elementHasAncestorTag} from '../../../../utils/utils';\r\nimport {extractUnfoldedItem} from '../../../common/interface/item';\r\nimport {\r\n  ChildTemplatesContext,\r\n  ChildTemplatesContextEvent,\r\n  DisplayConfig,\r\n  ItemContext,\r\n  ItemDisplayConfigContext,\r\n} from '../../../common/item-list/item-decorators';\r\nimport {\r\n  FoldedItemListContext,\r\n  FoldedItemListStateContext,\r\n} from '../../../common/item-list/item-list-decorators';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {ItemDisplayImageSize} from '../../../common/layout/display-options';\r\nimport {ResultChildrenCommon} from '../../../common/result-children/result-children-common';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\nconst childTemplateComponent = 'atomic-insight-result-children-template';\r\nconst componentTag = 'atomic-insight-result-children';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result-children',\r\n  styleUrl: 'atomic-insight-result-children.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultChildren\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  @ChildTemplatesContext()\r\n  public itemTemplateProvider?: ItemTemplateProvider;\r\n  @FoldedItemListContext()\r\n  private foldedResultList!: InsightFoldedResultList;\r\n  @ItemContext({folded: true, parentName: 'atomic-insight-result'})\r\n  private result!: InsightFoldedResult;\r\n  @ItemDisplayConfigContext()\r\n  private displayConfig!: DisplayConfig;\r\n  private initialChildren!: InsightFoldedResult[];\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n  @State() public error!: Error;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() private templateHasError = false;\r\n  @FoldedItemListStateContext()\r\n  @State()\r\n  private foldedResultListState!: InsightFoldedResultListState;\r\n  @State()\r\n  private showInitialChildren = false;\r\n\r\n  /**\r\n   * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.\r\n   */\r\n  @Prop() inheritTemplates = false;\r\n  /**\r\n   * The expected size of the image displayed in the children results.\r\n   */\r\n  @Prop({reflect: true}) imageSize?: ItemDisplayImageSize;\r\n  /**\r\n   * The non-localized copy for an empty result state. An empty string will result in the component being hidden.\r\n   */\r\n  @Prop() public noResultText = 'no-documents-related';\r\n\r\n  private resultChildrenCommon!: ResultChildrenCommon;\r\n\r\n  @Listen('atomic/resolveChildTemplates')\r\n  public resolveChildTemplates(event: ChildTemplatesContextEvent) {\r\n    event.preventDefault();\r\n    event.detail(this.itemTemplateProvider);\r\n  }\r\n\r\n  public initialize() {\r\n    this.resultChildrenCommon = new ResultChildrenCommon({\r\n      getHost: () => this.host,\r\n      getBindings: () => this.bindings,\r\n      getResult: () => this.result,\r\n      getShowInitialChildren: () => this.showInitialChildren,\r\n      getFoldedResultList: () => this.foldedResultList,\r\n      getInitialChildren: () => this.initialChildren,\r\n      getInheritTemplates: () => this.inheritTemplates,\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      getNoResultText: () => this.noResultText,\r\n      getDisplayConfig: () => this.displayConfig,\r\n      getImageSize: () => this.imageSize,\r\n      getFoldedResultListState: () => this.foldedResultListState,\r\n      renderChild: this.renderChild.bind(this),\r\n      setInitialChildren: (initialChildren: InsightFoldedResult[]) =>\r\n        (this.initialChildren = initialChildren),\r\n      toggleShowInitialChildren: () =>\r\n        (this.showInitialChildren = !this.showInitialChildren),\r\n    });\r\n\r\n    if (this.inheritTemplates) {\r\n      return;\r\n    }\r\n\r\n    const childrenTemplates = Array.from(\r\n      this.host.querySelectorAll(childTemplateComponent)\r\n    ).filter(\r\n      (template) => !elementHasAncestorTag(template, childTemplateComponent)\r\n    );\r\n\r\n    if (!childrenTemplates.length) {\r\n      this.error = new Error(\r\n        `The \"${componentTag}\" component requires at least one \"${childTemplateComponent}\" component.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: false,\r\n      templateElements: childrenTemplates,\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n  }\r\n\r\n  private renderChild(child: InsightFoldedResult, isLast: boolean) {\r\n    const content = this.itemTemplateProvider?.getTemplateContent(child.result);\r\n\r\n    if (!content) {\r\n      return;\r\n    }\r\n\r\n    const key =\r\n      child.result.uniqueId +\r\n      child.children.map((child) => child.result.uniqueId);\r\n    return (\r\n      <atomic-insight-result\r\n        key={key}\r\n        content={content}\r\n        result={child}\r\n        interactiveResult={buildInsightInteractiveResult(this.bindings.engine, {\r\n          options: {result: extractUnfoldedItem(child)},\r\n        })}\r\n        store={this.bindings.store}\r\n        density={this.displayConfig.density}\r\n        imageSize={this.imageSize || this.displayConfig.imageSize}\r\n        classes={`child-result ${isLast ? 'last-child' : ''}`.trim()}\r\n      ></atomic-insight-result>\r\n    );\r\n  }\r\n\r\n  public componentWillRender() {\r\n    this.resultChildrenCommon.componentWillRender();\r\n  }\r\n\r\n  public render() {\r\n    return this.resultChildrenCommon.render();\r\n  }\r\n}\r\n"],"version":3}