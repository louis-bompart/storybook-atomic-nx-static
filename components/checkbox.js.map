{"file":"checkbox.js","mappings":";;;;;;MAkBa,QAAQ,GAAuC,CAAC,KAAK;;IAChE,MAAM,QAAQ,GAAG,MAAA,KAAK,CAAC,IAAI,mCAAI,UAAU,CAAC;IAE1C,MAAM,UAAU,GAAG;QACjB,kHAAkH;KACnH,CAAC;IACF,MAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzB,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,UAAU,CAAC,IAAI,CACb,2EAA2E,CAC5E,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,UAAU,CAAC,CAAC;KACnC;SAAM;QACL,UAAU,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IACD,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,MAAM,UAAU,GAAG;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,EAAE,EAAE,KAAK,CAAC,EAAE;QACZ,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;QAC3B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;QACrB,cAAc,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE;QACxC,YAAY,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,KAAK,CAAC,IAAI;QAC3C,KAAK,EAAE,KAAK,CAAC,IAAI;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;KACf,CAAC;IAEF,QACE,iBACM,UAAU,EACd,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,gBAAM,OAAA,MAAA,KAAK,CAAC,QAAQ,sDAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,WAAW,EAAE,CAAC,CAAC,eAAK,OAAA,MAAA,KAAK,CAAC,WAAW,sDAAG,CAAC,CAAC,CAAA,EAAA;QAE1C,mBACE,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EACxB,KAAK,EAAE,SAAS,KAAK,CAAC,OAAO,GAAG,OAAO,GAAG,QAAQ,EAAE,EACpD,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,KAAK,CAAC,QAAQ,GACP,CACR,EACT;AACJ;;;;","names":[],"sources":["src/components/common/checkbox.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport Tick from '../../images/checkbox.svg';\n\nexport interface CheckboxProps {\n  checked: boolean;\n  onToggle(checked: boolean): void;\n  key?: string | number;\n  id?: string;\n  class?: string;\n  text?: string;\n  part?: string;\n  iconPart?: string;\n  ariaLabel?: string;\n  ariaCurrent?: string;\n  ref?(element?: HTMLElement): void;\n  onMouseDown?(evt: MouseEvent): void;\n}\n\nexport const Checkbox: FunctionalComponent<CheckboxProps> = (props) => {\n  const partName = props.part ?? 'checkbox';\n\n  const classNames = [\n    'w-4 h-4 grid place-items-center rounded no-outline hover:border-primary-light focus-visible:border-primary-light',\n  ];\n  const parts = [partName];\n  if (props.checked) {\n    classNames.push(\n      'selected bg-primary hover:bg-primary-light focus-visible:bg-primary-light'\n    );\n    parts.push(`${partName}-checked`);\n  } else {\n    classNames.push('border border-neutral-dark');\n  }\n  if (props.class) {\n    classNames.push(props.class);\n  }\n\n  const attributes = {\n    key: props.key,\n    id: props.id,\n    class: classNames.join(' '),\n    part: parts.join(' '),\n    'aria-checked': props.checked.toString(),\n    'aria-label': props.ariaLabel ?? props.text,\n    value: props.text,\n    ref: props.ref,\n  };\n\n  return (\n    <button\n      {...attributes}\n      role=\"checkbox\"\n      onClick={() => props.onToggle?.(!props.checked)}\n      onMouseDown={(e) => props.onMouseDown?.(e)}\n    >\n      <atomic-icon\n        style={{stroke: 'white'}}\n        class={`w-3/5 ${props.checked ? 'block' : 'hidden'}`}\n        icon={Tick}\n        part={props.iconPart}\n      ></atomic-icon>\n    </button>\n  );\n};\n"],"version":3}