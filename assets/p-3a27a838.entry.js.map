{"version":3,"names":["atomicIconCss","AtomicIconStyle0","IconFetchError","Error","fromStatusCode","url","statusCode","statusText","fromError","error","constructor","errorMessage","errorObject","super","this","AtomicIcon","svg","fetchIcon","response","fetch","catch","e","status","text","forceUpdate","validateSVG","test","bindings","engine","logger","warn","icon","getIcon","parseAssetURL","store","getIconAssetsPath","sanitizedSvg","sanitize","USE_PROFILES","svgFilters","updateIcon","svgPromise","initialize","render","console","host","remove","h","Host","innerHTML","__decorate","InitializeBindings"],"sources":["src/components/common/atomic-icon/atomic-icon.pcss?tag=atomic-icon","src/components/common/atomic-icon/atomic-icon.tsx"],"sourcesContent":["@import '../../../global/polyfills.pcss';\r\n\r\natomic-icon {\r\n  display: inline-block;\r\n  fill: currentColor;\r\n  @mixin aspect-ratio-h 1 / 1, auto;\r\n\r\n  > svg {\r\n    width: 100%;\r\n    max-height: 100%;\r\n    @mixin aspect-ratio-h 1 / 1, auto;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  forceUpdate,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport {sanitize} from 'dompurify';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {parseAssetURL} from '../../../utils/utils';\r\nimport {AnyBindings} from '../interface/bindings';\r\n\r\nclass IconFetchError extends Error {\r\n  static fromStatusCode(url: string, statusCode: number, statusText: string) {\r\n    return new IconFetchError(url, `status code ${statusCode} (${statusText})`);\r\n  }\r\n\r\n  static fromError(url: string, error: unknown) {\r\n    return new IconFetchError(url, 'an error', error);\r\n  }\r\n\r\n  private constructor(\r\n    public readonly url: string,\r\n    errorMessage: string,\r\n    public readonly errorObject?: unknown\r\n  ) {\r\n    super(`Could not fetch icon from ${url}, got ${errorMessage}.`);\r\n  }\r\n}\r\n\r\n/**\r\n * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.\r\n *\r\n * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.\r\n */\r\n@Component({\r\n  tag: 'atomic-icon',\r\n  styleUrl: 'atomic-icon.pcss',\r\n  shadow: false,\r\n  assetsDirs: ['assets'],\r\n})\r\nexport class AtomicIcon implements InitializableComponent<AnyBindings> {\r\n  @Element() host!: HTMLElement;\r\n\r\n  @InitializeBindings() public bindings!: AnyBindings;\r\n\r\n  /**\r\n   * The SVG icon to display.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   */\r\n  @Prop({reflect: true}) icon!: string;\r\n\r\n  public error!: Error;\r\n  @State() private svg: string | null = null;\r\n\r\n  private async fetchIcon(url: string) {\r\n    try {\r\n      const response = await fetch(url).catch((e) => {\r\n        throw IconFetchError.fromError(url, e);\r\n      });\r\n      if (response.status !== 200 && response.status !== 304) {\r\n        throw IconFetchError.fromStatusCode(\r\n          url,\r\n          response.status,\r\n          response.statusText\r\n        );\r\n      }\r\n      return await response.text();\r\n    } catch (e) {\r\n      this.error = e as Error;\r\n      forceUpdate(this);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private validateSVG(svg: string) {\r\n    if (!/^<svg[\\s\\S]+<\\/svg>$/gm.test(svg)) {\r\n      this.bindings.engine.logger.warn(\r\n        'The inline \"icon\" prop is not an svg element. You may encounter rendering issues.',\r\n        this.icon\r\n      );\r\n    }\r\n  }\r\n\r\n  private async getIcon() {\r\n    const url = parseAssetURL(\r\n      this.icon,\r\n      this.bindings.store.getIconAssetsPath()\r\n    );\r\n    const svg = url ? await this.fetchIcon(url) : this.icon;\r\n\r\n    if (svg) {\r\n      this.validateSVG(svg);\r\n    }\r\n    const sanitizedSvg = svg\r\n      ? sanitize(svg, {\r\n          USE_PROFILES: {svg: true, svgFilters: true},\r\n        })\r\n      : null;\r\n    return sanitizedSvg;\r\n  }\r\n\r\n  @Watch('icon')\r\n  public async updateIcon() {\r\n    const svgPromise = this.getIcon();\r\n    this.svg = await svgPromise;\r\n  }\r\n\r\n  public initialize() {\r\n    this.updateIcon();\r\n  }\r\n\r\n  public render() {\r\n    if (this.error) {\r\n      console.error(this.error, this.host);\r\n      this.host.remove();\r\n      return;\r\n    }\r\n    return <Host innerHTML={this.svg} aria-hidden=\"true\"></Host>;\r\n  }\r\n}\r\n"],"mappings":"+LAAA,MAAMA,EAAgB,6RACtB,MAAAC,EAAeD,E,2WCiBf,MAAME,UAAuBC,MAC3B,qBAAOC,CAAeC,EAAaC,EAAoBC,GACrD,OAAO,IAAIL,EAAeG,EAAK,eAAeC,MAAeC,K,CAG/D,gBAAOC,CAAUH,EAAaI,GAC5B,OAAO,IAAIP,EAAeG,EAAK,WAAYI,E,CAG7C,WAAAC,CACkBL,EAChBM,EACgBC,GAEhBC,MAAM,6BAA6BR,UAAYM,MAJ/BG,KAAAT,MAEAS,KAAAF,a,QAiBPG,EAAU,M,yBAeJD,KAAAE,IAAqB,K,6BAAA,I,CAE9B,eAAMC,CAAUZ,GACtB,IACE,MAAMa,QAAiBC,MAAMd,GAAKe,OAAOC,IACvC,MAAMnB,EAAeM,UAAUH,EAAKgB,EAAE,IAExC,GAAIH,EAASI,SAAW,KAAOJ,EAASI,SAAW,IAAK,CACtD,MAAMpB,EAAeE,eACnBC,EACAa,EAASI,OACTJ,EAASX,W,CAGb,aAAaW,EAASK,M,CACtB,MAAOF,GACPP,KAAKL,MAAQY,EACbG,EAAYV,MACZ,OAAO,I,EAIH,WAAAW,CAAYT,GAClB,IAAK,yBAAyBU,KAAKV,GAAM,CACvCF,KAAKa,SAASC,OAAOC,OAAOC,KAC1B,oFACAhB,KAAKiB,K,EAKH,aAAMC,GACZ,MAAM3B,EAAM4B,EACVnB,KAAKiB,KACLjB,KAAKa,SAASO,MAAMC,qBAEtB,MAAMnB,EAAMX,QAAYS,KAAKG,UAAUZ,GAAOS,KAAKiB,KAEnD,GAAIf,EAAK,CACPF,KAAKW,YAAYT,E,CAEnB,MAAMoB,EAAepB,EACjBqB,mBAASrB,EAAK,CACZsB,aAAc,CAACtB,IAAK,KAAMuB,WAAY,QAExC,KACJ,OAAOH,C,CAIF,gBAAMI,GACX,MAAMC,EAAa3B,KAAKkB,UACxBlB,KAAKE,UAAYyB,C,CAGZ,UAAAC,GACL5B,KAAK0B,Y,CAGA,MAAAG,GACL,GAAI7B,KAAKL,MAAO,CACdmC,QAAQnC,MAAMK,KAAKL,MAAOK,KAAK+B,MAC/B/B,KAAK+B,KAAKC,SACV,M,CAEF,OAAOC,EAACC,EAAI,CAACC,UAAWnC,KAAKE,IAAG,cAAc,Q,wHA7EnBkC,EAAA,CAA5BC,K"}