{"version":3,"names":["atomicRatingFacetCss","AtomicRatingFacetStyle0","AtomicRatingFacet","this","label","numberOfIntervals","maxValueInIndex","minValueInIndex","displayValuesAs","icon","Star","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","validateProps","Schema","StringValue","constrainTo","validate","initialize","searchStatus","buildSearchStatus","bindings","engine","initializeFacet","initializeDependenciesManager","options","facetId","field","numberOfValues","currentValues","generateCurrentValues","sortCriteria","generateAutomaticRanges","facet","buildNumericFacet","state","facetInfo","i18n","t","element","host","isHidden","store","registerFacet","format","value","formatFacetValue","content","ratingContent","initializePopover","hasValues","valuesToRender","length","numberOfActiveValues","numberOfSelectedValues","disconnectedCallback","isConnected","_a","dependenciesManager","stopWatching","searchStatusState","hasError","enabled","scaleFactor","facetState","values","filter","buildFacetConditionsManager","conditions","parseDependsOn","i","push","buildNumericRange","start","Math","round","end","endInclusive","facetValue","count","max","h","Rating","numberOfTotalIcons","numberOfActiveIcons","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","onToggleCollapse","headerRef","el","setTarget","renderValue","onClick","displayValue","isSelected","FacetValueCheckbox","numberOfResults","FacetValueLink","renderValuesContainer","children","FacetValuesGroup","class","part","renderValues","map","toggleSingleSelect","toggleSelect","render","Hidden","firstSearchExecuted","FacetPlaceholder","FacetContainer","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-rating-facet/atomic-rating-facet.pcss?tag=atomic-rating-facet&encapsulation=shadow","src/components/search/facets/atomic-rating-facet/atomic-rating-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\r\n@import '../../../common/atomic-rating/atomic-rating.pcss';\r\n","import {Schema, StringValue} from '@coveo/bueno';\r\nimport {\r\n  NumericFacet,\r\n  buildNumericFacet,\r\n  NumericFacetState,\r\n  NumericFacetOptions,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildSearchStatus,\r\n  NumericFacetValue,\r\n  NumericRangeRequest,\r\n  buildNumericRange,\r\n  buildFacetConditionsManager,\r\n  FacetConditionsManager,\r\n  FacetValueRequest,\r\n  CategoryFacetValueRequest,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\r\nimport Star from '../../../../images/star.svg';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {Rating} from '../../../common/atomic-rating/atomic-rating';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\r\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/facet-value-link';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {initializePopover} from '../atomic-popover/popover-type';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\r\n * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.\r\n * It only supports numeric fields.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and toggles to expand or collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-count - The facet value count, common for all displays.\r\n * @part value-rating - The facet value rating, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n * @part value-link - The facet value when display is 'link'.\r\n * @part value-link-selected - The selected facet value when display is 'link'.\r\n */\r\n@Component({\r\n  tag: 'atomic-rating-facet',\r\n  styleUrl: 'atomic-rating-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicRatingFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facet!: NumericFacet;\r\n  private dependenciesManager?: FacetConditionsManager;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: NumericFacetState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.\r\n   */\r\n  @Prop({reflect: true}) public numberOfIntervals = 5;\r\n  /**\r\n   * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.\r\n   */\r\n  @Prop({reflect: true}) public maxValueInIndex = this.numberOfIntervals;\r\n  /**\r\n   * The minimum value of the field.\r\n   */\r\n  @Prop({reflect: true}) public minValueInIndex = 1;\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\r\n   * Possible values are 'checkbox' and 'link'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\r\n    'checkbox';\r\n  /**\r\n   * The SVG icon to use to display the rating.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   *\r\n   * When using a custom icon, at least part of your icon should have the color set to `fill=\"currentColor\"`.\r\n   * This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\r\n   *\r\n   * - `--atomic-rating-icon-active-color`\r\n   * - `--atomic-rating-icon-inactive-color`\r\n\r\n   */\r\n  @Prop({reflect: true}) public icon = Star;\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-rating-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-rating-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-rating-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-rating-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n  private validateProps() {\r\n    new Schema({\r\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\r\n    }).validate({\r\n      displayValuesAs: this.displayValuesAs,\r\n    });\r\n  }\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.initializeFacet();\r\n    this.initializeDependenciesManager();\r\n  }\r\n\r\n  private initializeFacet() {\r\n    const options: NumericFacetOptions = {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfIntervals,\r\n      currentValues: this.generateCurrentValues(),\r\n      sortCriteria: 'descending',\r\n      generateAutomaticRanges: false,\r\n      filterFacetCount: this.filterFacetCount,\r\n      injectionDepth: this.injectionDepth,\r\n    };\r\n    this.facet = buildNumericFacet(this.bindings.engine, {options});\r\n    this.facetId = this.facet.state.facetId;\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n    this.bindings.store.registerFacet('numericFacets', {\r\n      ...facetInfo,\r\n      format: (value) => this.formatFacetValue(value),\r\n      content: (value) => this.ratingContent(value),\r\n    });\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => !!this.valuesToRender.length,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    if (this.host.isConnected) {\r\n      return;\r\n    }\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private get isHidden() {\r\n    return (\r\n      this.searchStatusState.hasError ||\r\n      !this.facet.state.enabled ||\r\n      !this.valuesToRender.length\r\n    );\r\n  }\r\n\r\n  private get scaleFactor() {\r\n    return this.maxValueInIndex / this.numberOfIntervals;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facetState.values.filter(({state}) => state === 'selected')\r\n      .length;\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private generateCurrentValues() {\r\n    const currentValues: NumericRangeRequest[] = [];\r\n    for (let i = this.minValueInIndex; i <= this.numberOfIntervals; i++) {\r\n      currentValues.push(\r\n        buildNumericRange({\r\n          start: Math.round(i * this.scaleFactor * 100) / 100,\r\n          end: Math.round((i + 1) * this.scaleFactor * 100) / 100,\r\n          endInclusive: false,\r\n        })\r\n      );\r\n    }\r\n    return currentValues;\r\n  }\r\n\r\n  private formatFacetValue(facetValue: NumericFacetValue) {\r\n    if (facetValue.start === this.maxValueInIndex) {\r\n      return this.bindings.i18n.t('stars-only', {count: facetValue.start});\r\n    }\r\n    return this.bindings.i18n.t('stars', {\r\n      count: facetValue.start,\r\n      max: this.maxValueInIndex,\r\n    });\r\n  }\r\n\r\n  private ratingContent(facetValue: NumericFacetValue) {\r\n    return (\r\n      <Rating\r\n        i18n={this.bindings.i18n}\r\n        numberOfTotalIcons={this.maxValueInIndex}\r\n        numberOfActiveIcons={facetValue.start}\r\n        icon={this.icon}\r\n      ></Rating>\r\n    );\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTarget.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={this.headingLevel}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTarget.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\r\n    const displayValue = this.formatFacetValue(facetValue);\r\n    const isSelected = facetValue.state === 'selected';\r\n    switch (this.displayValuesAs) {\r\n      case 'checkbox':\r\n        return (\r\n          <FacetValueCheckbox\r\n            displayValue={displayValue}\r\n            numberOfResults={facetValue.numberOfResults}\r\n            isSelected={isSelected}\r\n            i18n={this.bindings.i18n}\r\n            onClick={onClick}\r\n          >\r\n            {this.ratingContent(facetValue)}\r\n          </FacetValueCheckbox>\r\n        );\r\n      case 'link':\r\n        return (\r\n          <FacetValueLink\r\n            displayValue={displayValue}\r\n            numberOfResults={facetValue.numberOfResults}\r\n            isSelected={isSelected}\r\n            i18n={this.bindings.i18n}\r\n            onClick={onClick}\r\n          >\r\n            {this.ratingContent(facetValue)}\r\n          </FacetValueLink>\r\n        );\r\n    }\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[]) {\r\n    return (\r\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\r\n        <ul class=\"mt-3\" part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.valuesToRender.map((value) =>\r\n        this.renderValue(value, () =>\r\n          this.displayValuesAs === 'link'\r\n            ? this.facet.toggleSingleSelect(value)\r\n            : this.facet.toggleSelect(value)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  private get valuesToRender() {\r\n    return this.facet.state.values.filter(\r\n      (value) => value.numberOfResults || value.state !== 'idle'\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    if (!this.searchStatusState.firstSearchExecuted) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfIntervals}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n\r\n    if (!this.valuesToRender.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && this.renderValues()}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}