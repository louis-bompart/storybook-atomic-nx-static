{"version":3,"names":["AtomicFocusDetector","constructor","hostRef","this","focusWasContained","containsFocus","focusedElement","getFocusedElement","isAncestorOf","host","onFocusIn","onFocusChanged","onFocusOut","focusEnter","emit","focusExit","render","h","Host","key","style","display"],"sources":["src/components/common/atomic-focus-detector.tsx"],"sourcesContent":["import {\n  h,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  Host,\n} from '@stencil/core';\nimport {getFocusedElement, isAncestorOf} from '../../utils/utils';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-focus-detector',\n  shadow: false,\n})\nexport class AtomicFocusDetector {\n  @Element() private host!: HTMLElement;\n\n  @Event() focusEnter!: EventEmitter;\n  @Event() focusExit!: EventEmitter;\n\n  private focusWasContained = this.containsFocus;\n\n  private get containsFocus() {\n    const focusedElement = getFocusedElement();\n\n    return !!focusedElement && isAncestorOf(this.host, focusedElement);\n  }\n\n  @Listen('focusin', {target: 'document'})\n  onFocusIn() {\n    this.onFocusChanged();\n  }\n\n  @Listen('focusout', {target: 'document'})\n  onFocusOut() {\n    this.onFocusChanged();\n  }\n\n  private onFocusChanged() {\n    const containsFocus = this.containsFocus;\n    if (containsFocus === this.focusWasContained) {\n      return;\n    }\n\n    this.focusWasContained = containsFocus;\n    containsFocus ? this.focusEnter.emit() : this.focusExit.emit();\n  }\n\n  render() {\n    return <Host style={{display: 'contents'}}></Host>;\n  }\n}\n"],"mappings":"yIAkBaA,EAAmB,MAJhC,WAAAC,CAAAC,G,sFAUUC,KAAAC,kBAAoBD,KAAKE,a,CAEjC,iBAAYA,GACV,MAAMC,EAAiBC,IAEvB,QAASD,GAAkBE,EAAaL,KAAKM,KAAMH,E,CAIrD,SAAAI,GACEP,KAAKQ,gB,CAIP,UAAAC,GACET,KAAKQ,gB,CAGC,cAAAA,GACN,MAAMN,EAAgBF,KAAKE,cAC3B,GAAIA,IAAkBF,KAAKC,kBAAmB,CAC5C,M,CAGFD,KAAKC,kBAAoBC,EACzBA,EAAgBF,KAAKU,WAAWC,OAASX,KAAKY,UAAUD,M,CAG1D,MAAAE,GACE,OAAOC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAO,CAACC,QAAS,a"}