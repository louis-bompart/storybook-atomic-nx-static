{"file":"atomic-ipx-modal.entry.cjs.js","mappings":";;;;;;;;;;;AAAA,MAAM,iBAAiB,GAAG,83uCAA83uC,CAAC;AACz5uC,6BAAe,iBAAiB;;;;;;;;;;;;MC2BnB,cAAc;;;;QAYa,WAAM,GAAG,KAAK,CAAC;QAIpC,0BAAqB,GAAG,IAAI,CAAC;QA2CtC,sBAAiB,GAAGA,UAAI,CAAC,MAAMC,mCAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;;;sBA/CtB,KAAK;qCAIX,IAAI;;IAG7C,MAAM,eAAe,CAAC,MAAe;QACnC,MAAM,gBAAgB,GAAG,yBAAyB,CAAC;QAEnD,IAAI,MAAM,EAAE;;YAEV,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC/D,OAAO;SACR;;QAED,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;KACnE;IAEO,UAAU;QAChB,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;QAED,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvB,OAAO,OAAO,CAAC;KAChB;IAGD,iBAAiB,CAAC,CAAQ;QACxB,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;KACnC;IAEM,iBAAiB;QACtB,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;KAC3E;IAEM,gBAAgB;QACrB,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,IAAIC,cAAQ,CAAC,mBAAmB,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACnC;IAIM,MAAM;QACX,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,MAAM,IAAI,GAAG,OACXC,8EACE,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,IAE7CA,mEAAM,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,GAAG,EACpCA,mEAAM,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,MAAM,GAAG,EAChCA,mEAAM,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,GAAG,CACpB,CACnB,CAAC;QAEF,QACEA,QAACC,UAAI,qDAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAC,kBAAkB,IAC/DD,kEAAK,IAAI,EAAC,UAAU,IAClBA,QAAC,IAAI,sDAAG,CACJ,CACD,EACP;KACH;;;;;;AAjF4B;IAA5BE,sCAAkB,EAAE;gDAA+B;;;;;","names":["once","updateBreakpoints","randomID","h","Host","InitializeBindings"],"sources":["src/components/ipx/atomic-ipx-modal/atomic-ipx-modal.pcss?tag=atomic-ipx-modal&encapsulation=shadow","src/components/ipx/atomic-ipx-modal/atomic-ipx-modal.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\natomic-focus-trap {\r\n  @apply contents;\r\n  height: inherit;\r\n}\r\n\r\n:host {\r\n  width: var(--atomic-ipx-width, 31.25rem);\r\n  height: var(--atomic-ipx-height, 43.75rem);\r\n  box-shadow: rgb(0 0 0 / 50%) 0 0 0.5rem;\r\n  inset: auto 3rem 4.25rem auto;\r\n  position: fixed;\r\n  z-index: 2147483647;\r\n}\r\n\r\n:host(.open) {\r\n  display: block;\r\n\r\n  &::part(backdrop) {\r\n    @apply pointer-events-auto;\r\n    height: inherit;\r\n  }\r\n}\r\n\r\n:host {\r\n  display: none;\r\n\r\n  &::part(backdrop) {\r\n    @apply pointer-events-none;\r\n    height: inherit;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  State,\r\n  Prop,\r\n  Element,\r\n  Watch,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {updateBreakpoints} from '../../../utils/replace-breakpoint';\r\nimport {once, randomID} from '../../../utils/utils';\r\nimport {AnyBindings} from '../../common/interface/bindings';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-ipx-modal',\r\n  styleUrl: 'atomic-ipx-modal.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicIPXModal implements InitializableComponent<AnyBindings> {\r\n  @InitializeBindings() public bindings!: AnyBindings;\r\n  @Element() public host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  @Prop({mutable: true}) source?: HTMLElement;\r\n\r\n  /**\r\n   * The container to hide from the tabindex and accessibility DOM when the modal is closed.\r\n   */\r\n  @Prop({mutable: true}) container?: HTMLElement;\r\n  @Prop({reflect: true, mutable: true}) isOpen = false;\r\n\r\n  @Event() animationEnded!: EventEmitter<never>;\r\n\r\n  @State() private hasFooterSlotElements = true;\r\n\r\n  @Watch('isOpen')\r\n  async watchToggleOpen(isOpen: boolean) {\r\n    const modalOpenedClass = 'atomic-ipx-modal-opened';\r\n\r\n    if (isOpen) {\r\n      //TODO: remove the addition of a class to the body in atomicV3\r\n      document.body.classList.add(modalOpenedClass);\r\n      this.bindings.interfaceElement.classList.add(modalOpenedClass);\r\n      return;\r\n    }\r\n    //TODO: remove the removal of a class to the body in atomicV3\r\n    document.body.classList.remove(modalOpenedClass);\r\n    this.bindings.interfaceElement.classList.remove(modalOpenedClass);\r\n  }\r\n\r\n  private getClasses() {\r\n    const classes: string[] = [];\r\n    if (this.isOpen) {\r\n      classes.push('open');\r\n    }\r\n\r\n    classes.push('dialog');\r\n\r\n    return classes;\r\n  }\r\n\r\n  @Listen('touchmove', {passive: false})\r\n  onWindowTouchMove(e: Event) {\r\n    this.isOpen && e.preventDefault();\r\n  }\r\n\r\n  public componentWillLoad(): void | Promise<void> {\r\n    this.hasFooterSlotElements = !!this.host.querySelector('[slot=\"footer\"]');\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    const id = this.host.id || randomID('atomic-ipx-modal-');\r\n    this.host.id = id;\r\n    this.watchToggleOpen(this.isOpen);\r\n  }\r\n\r\n  private updateBreakpoints = once(() => updateBreakpoints(this.host));\r\n\r\n  public render() {\r\n    this.updateBreakpoints();\r\n\r\n    const Body = () => (\r\n      <atomic-ipx-body\r\n        isOpen={this.isOpen}\r\n        displayFooterSlot={this.hasFooterSlotElements}\r\n      >\r\n        <slot name=\"header\" slot=\"header\" />\r\n        <slot name=\"body\" slot=\"body\" />\r\n        <slot name=\"footer\" slot=\"footer\" />\r\n      </atomic-ipx-body>\r\n    );\r\n\r\n    return (\r\n      <Host class={this.getClasses().join(' ')} part=\"atomic-ipx-modal\">\r\n        <div part=\"backdrop\">\r\n          <Body />\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}