{"file":"atomic-insight-numeric-facet.entry.js","mappings":"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","names":["buildInsightNumericFacet","buildInsightNumericRange","buildInsightNumericFilter","buildInsightFacetConditionsManager","buildInsightSearchStatus","loadInsightNumericFacetSetActions"],"sources":["src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.pcss?tag=atomic-insight-numeric-facet&encapsulation=shadow","src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.tsx"],"sourcesContent":["@import '../../common/facets/numeric-facet-common.pcss';\r\n","import {Schema, StringValue} from '@coveo/bueno';\r\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightFacetConditionsManager,\r\n  buildInsightNumericFacet,\r\n  buildInsightNumericFilter,\r\n  buildInsightNumericRange,\r\n  buildInsightSearchStatus,\r\n  InsightCategoryFacetValueRequest,\r\n  InsightFacetConditionsManager,\r\n  InsightFacetValueRequest,\r\n  InsightNumericFacet,\r\n  InsightNumericFacetState,\r\n  InsightNumericFilter,\r\n  InsightNumericFilterState,\r\n  InsightNumericRangeRequest,\r\n  InsightRangeFacetRangeAlgorithm,\r\n  InsightRangeFacetSortCriterion,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n  loadInsightNumericFacetSetActions,\r\n} from '..';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../utils/props-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {parseDependsOn} from '../../common/facets/depends-on';\r\nimport {shouldDisplayInputForFacetRange} from '../../common/facets/facet-common';\r\nimport {FacetInfo} from '../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../common/facets/facet-container/facet-container';\r\nimport {FacetGuard} from '../../common/facets/facet-guard';\r\nimport {FacetHeader} from '../../common/facets/facet-header/facet-header';\r\nimport {NumberInputType} from '../../common/facets/facet-number-input/number-input-type';\r\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {formatHumanReadable} from '../../common/facets/numeric-facet/formatter';\r\nimport {NumericFacetValueLink} from '../../common/facets/numeric-facet/value-link';\r\nimport {NumericFacetValuesContainer} from '../../common/facets/numeric-facet/values-container';\r\nimport {\r\n  defaultNumberFormatter,\r\n  NumberFormatter,\r\n} from '../../common/formats/format-common';\r\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-numeric-facet',\r\n  styleUrl: './atomic-insight-numeric-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightNumericFacet\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public facetForRange?: InsightNumericFacet;\r\n  public facetForInput?: InsightNumericFacet;\r\n  public filter?: InsightNumericFilter;\r\n  public searchStatus!: InsightSearchStatus;\r\n  private manualRanges: (InsightNumericRangeRequest & {label?: string})[] = [];\r\n  private dependenciesManager?: InsightFacetConditionsManager;\r\n\r\n  @Element() private host!: HTMLElement;\r\n  private formatter: NumberFormatter = defaultNumberFormatter;\r\n  @BindStateToController('facetForRange')\r\n  @State()\r\n  public facetState!: InsightNumericFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: InsightNumericFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() public error!: Error;\r\n  @BindStateToController('facetForInput')\r\n  @State()\r\n  public facetForInputState?: InsightNumericFacetState;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of values to request for this facet, when there are no manual ranges.\r\n   * If the number of values is 0, no ranges will be displayed.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n  /**\r\n   * Whether this facet should contain an input allowing users to set custom ranges.\r\n   * Depending on the field, the input can allow either decimal or integer values.\r\n   */\r\n  @Prop({reflect: true}) public withInput?: NumberInputType;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\r\n    'ascending';\r\n  /**\r\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\r\n   */\r\n  @Prop({reflect: true})\r\n  public rangeAlgorithm: InsightRangeFacetRangeAlgorithm = 'equiprobable';\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\r\n   * Possible values are 'checkbox' and 'link'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\r\n    'checkbox';\r\n  /**\r\n   * Specifies if the facet is collapsed.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-numeric-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-insight-numeric-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-numeric-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-insight-numeric-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.computeFacetId();\r\n    this.initializeFacetForInput();\r\n    this.initializeFacetForRange();\r\n    this.initializeFilter();\r\n    this.initializeDependenciesManager();\r\n    this.initializeSearchStatus();\r\n    this.registerFacetToStore();\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private initializeFacetForInput() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n    this.facetForInput = buildInsightNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input_range`,\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        field: this.field,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForInput;\r\n  }\r\n\r\n  private initializeFacetForRange() {\r\n    if (this.numberOfValues <= 0) {\r\n      return;\r\n    }\r\n\r\n    this.manualRanges = Array.from(\r\n      this.host.querySelectorAll('atomic-numeric-range')\r\n    ).map(({start, end, endInclusive, label}) => ({\r\n      ...buildInsightNumericRange({start, end, endInclusive}),\r\n      label,\r\n    }));\r\n\r\n    this.facetForRange = buildInsightNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        numberOfValues: this.numberOfValues,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        currentValues: this.manualRanges,\r\n        generateAutomaticRanges: !this.manualRanges.length,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n\r\n    this.filter = buildInsightNumericFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildInsightFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId:\r\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\r\n        conditions: parseDependsOn<\r\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private initializeSearchStatus() {\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  private registerFacetToStore() {\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n\r\n    this.bindings.store.registerFacet('numericFacets', {\r\n      ...facetInfo,\r\n      format: (value) =>\r\n        formatHumanReadable({\r\n          facetValue: value,\r\n          logger: this.bindings.engine.logger,\r\n          i18n: this.bindings.i18n,\r\n          field: this.field,\r\n          manualRanges: this.manualRanges,\r\n          formatter: this.formatter,\r\n        }),\r\n    });\r\n\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => this.hasValues,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n\r\n    if (this.filter) {\r\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\r\n        this.bindings.store.state.numericFacets[this.facetId!];\r\n    }\r\n  }\r\n\r\n  @Listen('atomic/numberFormat')\r\n  public setFormat(event: CustomEvent<NumberFormatter>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.formatter = event.detail;\r\n  }\r\n\r\n  @Listen('atomic/numberInputApply')\r\n  public applyNumberInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadInsightNumericFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllNumericFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      searchStatusState: {firstSearchExecuted, hasError},\r\n      bindings: {i18n},\r\n      label,\r\n      numberOfSelectedValues,\r\n      isCollapsed,\r\n      headingLevel,\r\n      focusTarget,\r\n      withInput,\r\n      filter,\r\n    } = this;\r\n    return (\r\n      <FacetGuard\r\n        enabled={this.enabled}\r\n        firstSearchExecuted={firstSearchExecuted}\r\n        hasError={hasError}\r\n        hasResults={this.shouldRenderFacet}\r\n      >\r\n        {firstSearchExecuted ? (\r\n          <FacetContainer>\r\n            <FacetHeader\r\n              i18n={i18n}\r\n              label={label}\r\n              onClearFilters={() => {\r\n                focusTarget.focusAfterSearch();\r\n                if (this.filterState?.range) {\r\n                  this.filter?.clear();\r\n                  return;\r\n                }\r\n                this.facetForRange?.deselectAll();\r\n              }}\r\n              numberOfActiveValues={numberOfSelectedValues}\r\n              isCollapsed={isCollapsed}\r\n              headingLevel={headingLevel}\r\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n              headerRef={(el) => focusTarget.setTarget(el)}\r\n            />\r\n            {!isCollapsed && [\r\n              this.shouldRenderValues && this.renderValues(),\r\n              this.shouldRenderInput && (\r\n                <atomic-facet-number-input\r\n                  type={withInput!}\r\n                  bindings={this.bindings}\r\n                  label={label}\r\n                  filter={filter!}\r\n                  filterState={filter!.state}\r\n                ></atomic-facet-number-input>\r\n              ),\r\n            ]}\r\n          </FacetContainer>\r\n        ) : (\r\n          <FacetPlaceholder\r\n            isCollapsed={this.isCollapsed}\r\n            numberOfValues={this.numberOfValues}\r\n          />\r\n        )}\r\n      </FacetGuard>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    const {\r\n      displayValuesAs,\r\n      field,\r\n      manualRanges,\r\n      label,\r\n      bindings: {\r\n        i18n,\r\n        engine: {logger},\r\n      },\r\n    } = this;\r\n\r\n    return (\r\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\r\n        {this.valuesToRender.map((value) => (\r\n          <NumericFacetValueLink\r\n            formatter={this.formatter}\r\n            displayValuesAs={displayValuesAs}\r\n            facetValue={value}\r\n            field={field}\r\n            i18n={i18n}\r\n            logger={logger}\r\n            manualRanges={manualRanges}\r\n            onClick={() =>\r\n              this.displayValuesAs === 'link'\r\n                ? this.facetForRange!.toggleSingleSelect(value)\r\n                : this.facetForRange!.toggleSelect(value)\r\n            }\r\n          />\r\n        ))}\r\n      </NumericFacetValuesContainer>\r\n    );\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    if (this.filter?.state.range) {\r\n      return 1;\r\n    }\r\n\r\n    return (\r\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\r\n        .length || 0\r\n    );\r\n  }\r\n\r\n  private get shouldRenderValues() {\r\n    return (\r\n      !this.hasInputRange &&\r\n      this.numberOfValues > 0 &&\r\n      !!this.valuesToRender.length\r\n    );\r\n  }\r\n\r\n  private get hasInputRange() {\r\n    return !!this.filter?.state.range;\r\n  }\r\n\r\n  private get valuesToRender() {\r\n    return (\r\n      this.facetForRange?.state.values.filter(\r\n        (value) => value.numberOfResults || value.state !== 'idle'\r\n      ) || []\r\n    );\r\n  }\r\n\r\n  private get shouldRenderInput() {\r\n    return shouldDisplayInputForFacetRange({\r\n      hasInputRange: this.hasInputRange,\r\n      searchStatusState: this.searchStatusState,\r\n      facetValues: this.facetForInput?.state.values || [],\r\n      hasInput: !!this.withInput,\r\n    });\r\n  }\r\n\r\n  private computeFacetId() {\r\n    if (this.facetId) {\r\n      return;\r\n    }\r\n\r\n    if (this.bindings.store.get('numericFacets')[this.field]) {\r\n      this.facetId = randomID(`${this.field}_`);\r\n    }\r\n\r\n    this.facetId = this.field;\r\n  }\r\n\r\n  private get isHidden() {\r\n    return !this.shouldRenderFacet || !this.facetState.enabled;\r\n  }\r\n\r\n  private get shouldRenderFacet() {\r\n    return this.shouldRenderInput || this.shouldRenderValues;\r\n  }\r\n\r\n  private get hasValues() {\r\n    if (this.facetForInput?.state.values.length) {\r\n      return true;\r\n    }\r\n\r\n    return !!this.valuesToRender.length;\r\n  }\r\n\r\n  private get enabled() {\r\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\r\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\r\n    }).validate({\r\n      displayValuesAs: this.displayValuesAs,\r\n      withInput: this.withInput,\r\n    });\r\n  }\r\n}\r\n"],"version":3}