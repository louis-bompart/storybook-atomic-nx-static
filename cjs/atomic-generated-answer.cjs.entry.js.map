{"file":"atomic-generated-answer.entry.cjs.js","mappings":"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","names":["GeneratedAnswerCommon","buildInteractiveCitation","buildGeneratedAnswer","buildSearchStatus","debounce","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/search/atomic-generated-answer/atomic-generated-answer.pcss?tag=atomic-generated-answer&encapsulation=shadow","src/components/search/atomic-generated-answer/atomic-generated-answer.tsx"],"sourcesContent":["@import '../../common/generated-answer/styles/generated-answer.pcss';\n","import {\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildGeneratedAnswer,\n  GeneratedAnswer,\n  GeneratedAnswerState,\n  GeneratedAnswerStyle,\n  buildInteractiveCitation,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Watch} from '@stencil/core';\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {GeneratedAnswerCommon} from '../../common/generated-answer/generated-answer-common';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.\n * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)\n *\n * @part container - The container displaying the generated answer.\n * @part header-label - The header of the generated answer container.\n * @part feedback-button - The \"like\" and \"dislike\" buttons.\n * @part toggle - The switch to toggle the visibility of the generated answer.\n * @part copy-button - The \"Copy answer\" button.\n * @part retry-container - The container for the \"retry\" section.\n * @part generated-text - The text of the generated answer.\n * @part citations-label - The header of the citations list.\n * @part rephrase-label - The header of the rephrase options.\n * @part rephrase-buttons - The container of the rephrase buttons section.\n * @part rephrase-button - The button for each of the rephrase options (step-by-step instructions, bulleted list, and summary).\n * @part rephrase-buttons-container - The container of the rephrase buttons.\n * @part rephrase-button-label - The label of the rephrase button.\n *\n * @part answer-code-block - The generated answer multi-line code blocks.\n * @part answer-emphasis - The generated answer emphasized text elements.\n * @part answer-inline-code - The generated answer inline code elements.\n * @part answer-heading-1 - The generated answer level 1 heading elements.\n * @part answer-heading-2 - The generated answer level 2 heading elements.\n * @part answer-heading-3 - The generated answer level 3 heading elements.\n * @part answer-heading-4 - The generated answer level 4 heading elements.\n * @part answer-heading-5 - The generated answer level 5 heading elements.\n * @part answer-heading-6 - The generated answer level 6 heading elements.\n * @part answer-list-item - The generated answer list item elements for both ordered and unordered lists.\n * @part answer-ordered-list - The generated answer ordered list elements.\n * @part answer-paragraph - The generated answer paragraph elements.\n * @part answer-quote-block - The generated answer quote block elements.\n * @part answer-unordered-list - The generated answer unordered list elements.\n * @part answer-strong - The generated answer strong text elements.\n * @part answer-table - The generated answer table elements.\n * @part answer-table-container - The generated answer table container elements.\n * @part answer-table-content - The generated answer table content cell elements.\n * @part answer-table-header - The generated answer table header cell elements.\n *\n * @part citation - The link that allows the user to navigate to the item.\n * @part citation-popover - The pop-up that shows an item preview when the user hovers over the citation.\n * @part citation-index - The content of the citation item.\n */\n@Component({\n  tag: 'atomic-generated-answer',\n  styleUrl: 'atomic-generated-answer.pcss',\n  shadow: true,\n})\nexport class AtomicGeneratedAnswer implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public generatedAnswer!: GeneratedAnswer;\n  public searchStatus!: SearchStatus;\n  private resizeObserver?: ResizeObserver;\n\n  @BindStateToController('generatedAnswer', {\n    onUpdateCallbackMethod: 'onGeneratedAnswerStateUpdate',\n  })\n  @State()\n  private generatedAnswerState!: GeneratedAnswerState;\n\n  @BindStateToController('searchStatus')\n  @State()\n  private searchStatusState!: SearchStatusState;\n\n  @State()\n  public error!: Error;\n\n  @Element() private host!: HTMLElement;\n\n  @State()\n  copied = false;\n\n  @State()\n  copyError = false;\n\n  /**\n   * The answer style to apply when the component first loads.\n   * Options:\n   *   - `default`: Generate the answer without specific formatting instructions.\n   *   - `bullet`: Generate the answer as a bulleted list.\n   *   - `step`: Generate the answer as step-by-step instructions.\n   *   - `concise`: Generate the answer as briefly as possible.\n   */\n  @Prop() answerStyle: GeneratedAnswerStyle = 'default';\n\n  /**\n   * Whether to render a toggle button that lets the user hide or show the answer.\n   */\n  @Prop() withToggle?: boolean;\n\n  /**\n   * Whether to allow the answer to be collapsed when the text is taller than 250px.\n   */\n  @Prop() collapsible?: boolean;\n\n  @AriaLiveRegion('generated-answer')\n  protected ariaMessage!: string;\n\n  private generatedAnswerCommon!: GeneratedAnswerCommon;\n  private fullAnswerHeight?: number;\n  private maxCollapsedHeight = 250;\n\n  public initialize() {\n    this.generatedAnswerCommon = new GeneratedAnswerCommon({\n      host: this.host,\n      withToggle: this.withToggle,\n      collapsible: this.collapsible,\n      getGeneratedAnswer: () => this.generatedAnswer,\n      getGeneratedAnswerState: () => this.generatedAnswerState,\n      getSearchStatusState: () => this.searchStatusState,\n      getBindings: () => this.bindings,\n      getCopied: () => this.copied,\n      setCopied: this.setCopied,\n      getCopyError: () => this.copyError,\n      setCopyError: this.setCopyError,\n      setAriaMessage: this.setAriaMessage,\n      buildInteractiveCitation: (props) =>\n        buildInteractiveCitation(this.bindings.engine, props),\n    });\n    this.generatedAnswer = buildGeneratedAnswer(this.bindings.engine, {\n      initialState: {\n        isVisible: this.generatedAnswerCommon.data.isVisible,\n        responseFormat: {\n          answerStyle: this.answerStyle,\n          contentFormat: ['text/markdown', 'text/plain'],\n        },\n      },\n    });\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.generatedAnswerCommon.insertFeedbackModal();\n\n    if (window.ResizeObserver && this.collapsible) {\n      const debouncedAdaptAnswerHeight = debounce(\n        () => this.adaptAnswerHeight(),\n        100\n      );\n      this.resizeObserver = new ResizeObserver(debouncedAdaptAnswerHeight);\n      this.resizeObserver.observe(this.host);\n    }\n  }\n\n  @Watch('generatedAnswerState')\n  public updateAnswerCollapsed(\n    newState: GeneratedAnswerState,\n    oldState: GeneratedAnswerState\n  ) {\n    const newExpanded = newState.expanded;\n    const oldExpanded = oldState ? oldState.expanded : undefined;\n\n    if (newExpanded !== oldExpanded) {\n      const container = this.getAnswerContainer();\n\n      if (!container) {\n        return;\n      }\n\n      this.toggleClass(container, 'answer-collapsed', !newExpanded);\n    }\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  // @ts-expect-error: This function is used by BindStateToController.\n  private onGeneratedAnswerStateUpdate = () => {\n    if (\n      this.generatedAnswerState.isVisible !==\n      this.generatedAnswerCommon?.data?.isVisible\n    ) {\n      this.generatedAnswerCommon.data = {\n        ...this.generatedAnswerCommon.data,\n        isVisible: this.generatedAnswerState.isVisible,\n      };\n      this.generatedAnswerCommon.writeStoredData(\n        this.generatedAnswerCommon.data\n      );\n    }\n\n    this.setAriaMessage(this.generatedAnswerCommon.getGeneratedAnswerStatus());\n  };\n\n  private setCopied = (isCopied: boolean) => {\n    this.copied = isCopied;\n  };\n\n  private setCopyError = (copyError: boolean) => {\n    this.copyError = copyError;\n  };\n\n  private setAriaMessage = (message: string) => {\n    this.ariaMessage = message;\n  };\n\n  private toggleClass(element: Element, className: string, condition: boolean) {\n    element.classList.toggle(className, condition);\n  }\n\n  private adaptAnswerHeight() {\n    this.fullAnswerHeight = this.host?.shadowRoot\n      ?.querySelector('[part=\"generated-text\"]')\n      ?.getBoundingClientRect().height;\n    this.updateAnswerHeight();\n  }\n\n  private getAnswerContainer() {\n    return this.host?.shadowRoot?.querySelector('[part=\"generated-container\"]');\n  }\n\n  private getAnswerFooter() {\n    return this.host?.shadowRoot?.querySelector(\n      '[part=\"generated-answer-footer\"]'\n    );\n  }\n\n  private updateAnswerHeight() {\n    const container = this.getAnswerContainer();\n    const footer = this.getAnswerFooter();\n\n    if (!container || !footer) {\n      return;\n    }\n\n    if (this.fullAnswerHeight! > this.maxCollapsedHeight) {\n      this.toggleClass(\n        container,\n        'answer-collapsed',\n        !this.generatedAnswerState.expanded\n      );\n      this.toggleClass(footer, 'is-collapsible', true);\n      this.toggleClass(\n        footer,\n        'generating-label-visible',\n        this.generatedAnswerState.isStreaming\n      );\n    } else {\n      this.toggleClass(container, 'answer-collapsed', false);\n      this.toggleClass(footer, 'is-collapsible', false);\n      this.toggleClass(footer, 'generating-label-visible', false);\n    }\n  }\n\n  public render() {\n    return this.generatedAnswerCommon.render();\n  }\n}\n"],"version":3}