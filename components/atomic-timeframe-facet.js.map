{"file":"atomic-timeframe-facet.js","mappings":"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","names":["AtomicTimeframeFacet","buildFacetConditionsManager","buildDateRange","deserializeRelativeDate","buildSearchStatus","buildDateFacet","buildDateFilter","loadDateFacetSetActions"],"sources":["src/components/search/facets/atomic-timeframe-facet/atomic-timeframe-facet.pcss?tag=atomic-timeframe-facet&encapsulation=shadow","src/components/search/facets/atomic-timeframe-facet/atomic-timeframe-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\r\n","import {\r\n  buildDateFacet,\r\n  buildDateFilter,\r\n  buildDateRange,\r\n  buildFacetConditionsManager,\r\n  buildSearchStatus,\r\n  DateFacet,\r\n  DateFacetState,\r\n  DateFilter,\r\n  DateFilterState,\r\n  DateRangeRequest,\r\n  deserializeRelativeDate,\r\n  RangeFacetSortCriterion,\r\n  loadDateFacetSetActions,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  FacetValueRequest,\r\n  CategoryFacetValueRequest,\r\n} from '@coveo/headless';\r\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {TimeframeFacetCommon} from '../../../common/facets/timeframe-facet-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results.\r\n * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n * @part value-link - The facet value when display is 'link'.\r\n * @part value-link-selected - The selected facet value when display is 'link'.\r\n *\r\n * @part input-start - The input for the starting value of the custom date range.\r\n * @part input-end - The input for the ending value of the custom date range.\r\n * @part input-label - The label for both the start and end input.\r\n * @part input-apply-button - The apply button for the custom range.\r\n */\r\n@Component({\r\n  tag: 'atomic-timeframe-facet',\r\n  styleUrl: './atomic-timeframe-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicTimeframeFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facetForDateRange?: DateFacet;\r\n  public facetForDatePicker?: DateFacet;\r\n\r\n  private timeframeFacetCommon?: TimeframeFacetCommon;\r\n  public filter?: DateFilter;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facetForDateRange')\r\n  @State()\r\n  public facetState!: DateFacetState;\r\n  @BindStateToController('facetForDatePicker')\r\n  @State()\r\n  public facetForDatePickerState?: DateFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: DateFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the atomic-breadbox component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field = 'date';\r\n  /**\r\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\r\n   */\r\n  @Prop({reflect: true}) public withDatePicker = false;\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-timeframe-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-timeframe-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-timeframe-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-timeframe-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  /**\r\n   * The earliest date to accept from user input when the `withDatepicker` option is enabled.\r\n   *\r\n   * This value must be a valid date string in the format `YYYY-MM-DD`.\r\n   *\r\n   * If this format is not respected, the date picker ignores this property, behaving as if no `min` value had been set.\r\n   *\r\n   * See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#min).\r\n   */\r\n  @Prop({reflect: true}) public min?: string;\r\n\r\n  /**\r\n   * The latest date to accept from user input when the `withDatepicker` option is enabled.\r\n   *\r\n   * This value must be a valid date string in the format `YYYY-MM-DD`.\r\n   *\r\n   * If this format is not respected, the date picker ignores this property, behaving as if no `max` value had been set.\r\n   *\r\n   * See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#max).\r\n   */\r\n  @Prop({reflect: true}) public max?: string;\r\n\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: RangeFacetSortCriterion =\r\n    'descending';\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public initialize() {\r\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\r\n      facetId: this.facetId,\r\n      host: this.host,\r\n      bindings: this.bindings,\r\n      label: this.label,\r\n      field: this.field,\r\n      headingLevel: this.headingLevel,\r\n      dependsOn: parseDependsOn(this.dependsOn) && this.dependsOn,\r\n      withDatePicker: this.withDatePicker,\r\n      setFacetId: (id: string) => (this.facetId = id),\r\n      buildDependenciesManager: () =>\r\n        buildFacetConditionsManager(this.bindings.engine, {\r\n          facetId:\r\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\r\n          conditions: parseDependsOn<\r\n            FacetValueRequest | CategoryFacetValueRequest\r\n          >(this.dependsOn),\r\n        }),\r\n      buildDateRange,\r\n      getSearchStatusState: () => this.searchStatusState,\r\n      deserializeRelativeDate,\r\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\r\n      initializeFacetForDateRange: (values: DateRangeRequest[]) =>\r\n        this.initializeFacetForDateRange(values),\r\n      initializeFilter: () => this.initializeFilter(),\r\n      min: this.min,\r\n      max: this.max,\r\n      sortCriteria: this.sortCriteria,\r\n    });\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.timeframeFacetCommon?.disconnectedCallback();\r\n  }\r\n\r\n  private initializeFacetForDatePicker() {\r\n    this.facetForDatePicker = buildDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input_range`,\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        field: this.field,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n    return this.facetForDatePicker;\r\n  }\r\n\r\n  private initializeFacetForDateRange(values: DateRangeRequest[]) {\r\n    this.facetForDateRange = buildDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        currentValues: values,\r\n        generateAutomaticRanges: false,\r\n        sortCriteria: this.sortCriteria,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n    return this.facetForDateRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    this.filter = buildDateFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n\r\n    return this.filter;\r\n  }\r\n\r\n  @Listen('atomic/dateInputApply')\r\n  public applyDateInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadDateFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllDateFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.timeframeFacetCommon) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={5}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n    return this.timeframeFacetCommon.render({\r\n      hasError: this.searchStatusState.hasError,\r\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\r\n      isCollapsed: this.isCollapsed,\r\n      headerFocus: this.focusTarget,\r\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\r\n    });\r\n  }\r\n}\r\n"],"version":3}