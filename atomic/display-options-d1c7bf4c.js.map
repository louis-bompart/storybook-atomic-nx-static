{"file":"display-options-d1c7bf4c.js","mappings":";;AAQA,SAAS,eAAe,CAAC,OAA0B;IACjD,QAAQ,OAAO;QACb,KAAK,MAAM;YACT,OAAO,cAAc,CAAC;QACxB,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,cAAc,CAAC;QACxB,KAAK,OAAO;YACV,OAAO,eAAe,CAAC;KAC1B;AACH,CAAC;AAED,SAAS,eAAe,CAAC,OAA2B;IAClD,QAAQ,OAAO;QACb,KAAK,aAAa;YAChB,OAAO,qBAAqB,CAAC;QAC/B,KAAK,QAAQ,CAAC;QACd;YACE,OAAO,gBAAgB,CAAC;QAC1B,KAAK,SAAS;YACZ,OAAO,iBAAiB,CAAC;KAC5B;AACH,CAAC;AAED,SAAS,aAAa,CAAC,KAA2B;IAChD,QAAQ,KAAK;QACX,KAAK,OAAO;YACV,OAAO,aAAa,CAAC;QACvB,KAAK,OAAO;YACV,OAAO,aAAa,CAAC;QACvB,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,YAAY,CAAC;QACtB,KAAK,MAAM;YACT,OAAO,YAAY,CAAC;KACvB;AACH,CAAC;SAEe,yBAAyB,CACvC,OAA0B,EAC1B,OAA2B,EAC3B,KAA2B,EAC3B,SAAkB,EAClB,YAAqB;IAErB,MAAM,OAAO,GAAG,qBAAqB,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAE/D,IAAI,SAAS,EAAE;QACb,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACzB;IAED,IAAI,YAAY,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC7B;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;SAEe,qBAAqB,CACnC,OAA0B,EAC1B,OAA2B,EAC3B,KAA2B;IAE3B,MAAM,OAAO,GAAG;QACd,eAAe,CAAC,OAAO,CAAC;QACxB,eAAe,CAAC,OAAO,CAAC;QACxB,aAAa,CAAC,KAAK,CAAC;KACrB,CAAC;IACF,OAAO,OAAO,CAAC;AACjB,CAAC;MAEY,UAAU;IAMrB,YACE,QAAwB,EACxB,OAA0B,EAC1B,OAA2B,EAC3B,SAA+B;QAE/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;IAEO,wBAAwB;;QAC9B,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,UAAU,CAC/B,8BAA8B,CAC/B,0CAAE,YAAY,CAAC,YAAY,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,SAAiC,CAAC;KAC1C;IAEO,UAAU,CAAC,OAA2B;QAC5C,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CACnC,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CACvD,CAAC;KACH;IAEM,UAAU,CAAC,WAAoB;;QACpC,MAAM,OAAO,GAAG,qBAAqB,CACnC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,EACZ,MAAA,IAAI,CAAC,wBAAwB,EAAE,mCAAI,IAAI,CAAC,SAAS,CAClD,CAAC;QACF,IACE,WAAW;cACP,gBAAgB,CAAC,WAAW,CAAC;cAC7B,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EACnC;YACA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC/B;QACD,OAAO,OAAO,CAAC;KAChB;;;;;","names":[],"sources":["src/components/common/layout/display-options.ts"],"sourcesContent":["import {containsSections, ItemSectionTagName} from './sections';\r\n\r\nexport type ItemDisplayBasicLayout = 'list' | 'grid';\r\nexport type ItemDisplayLayout = ItemDisplayBasicLayout | 'table';\r\nexport type ItemDisplayDensity = 'comfortable' | 'normal' | 'compact';\r\nexport type ItemDisplayImageSize = 'large' | 'small' | 'icon' | 'none';\r\nexport type ItemTarget = '_self' | '_blank' | '_parent' | '_top';\r\n\r\nfunction getDisplayClass(display: ItemDisplayLayout) {\r\n  switch (display) {\r\n    case 'grid':\r\n      return 'display-grid';\r\n    case 'list':\r\n    default:\r\n      return 'display-list';\r\n    case 'table':\r\n      return 'display-table';\r\n  }\r\n}\r\n\r\nfunction getDensityClass(density: ItemDisplayDensity) {\r\n  switch (density) {\r\n    case 'comfortable':\r\n      return 'density-comfortable';\r\n    case 'normal':\r\n    default:\r\n      return 'density-normal';\r\n    case 'compact':\r\n      return 'density-compact';\r\n  }\r\n}\r\n\r\nfunction getImageClass(image: ItemDisplayImageSize) {\r\n  switch (image) {\r\n    case 'large':\r\n      return 'image-large';\r\n    case 'small':\r\n      return 'image-small';\r\n    case 'icon':\r\n    default:\r\n      return 'image-icon';\r\n    case 'none':\r\n      return 'image-none';\r\n  }\r\n}\r\n\r\nexport function getItemListDisplayClasses(\r\n  display: ItemDisplayLayout,\r\n  density: ItemDisplayDensity,\r\n  image: ItemDisplayImageSize,\r\n  isLoading: boolean,\r\n  isAppLoading: boolean\r\n) {\r\n  const classes = getItemDisplayClasses(display, density, image);\r\n\r\n  if (isLoading) {\r\n    classes.push('loading');\r\n  }\r\n\r\n  if (isAppLoading) {\r\n    classes.push('placeholder');\r\n  }\r\n  return classes.join(' ');\r\n}\r\n\r\nexport function getItemDisplayClasses(\r\n  display: ItemDisplayLayout,\r\n  density: ItemDisplayDensity,\r\n  image: ItemDisplayImageSize\r\n) {\r\n  const classes = [\r\n    getDisplayClass(display),\r\n    getDensityClass(density),\r\n    getImageClass(image),\r\n  ];\r\n  return classes;\r\n}\r\n\r\nexport class ItemLayout {\r\n  private children: HTMLCollection;\r\n  private density: ItemDisplayDensity;\r\n  private imageSize: ItemDisplayImageSize;\r\n  private display: ItemDisplayLayout;\r\n\r\n  constructor(\r\n    children: HTMLCollection,\r\n    display: ItemDisplayLayout,\r\n    density: ItemDisplayDensity,\r\n    imageSize: ItemDisplayImageSize\r\n  ) {\r\n    this.children = children;\r\n    this.display = display;\r\n    this.density = density;\r\n    this.imageSize = imageSize;\r\n  }\r\n\r\n  private getImageSizeFromSections() {\r\n    const imageSize = this.getSection(\r\n      'atomic-result-section-visual'\r\n    )?.getAttribute('image-size');\r\n    if (!imageSize) {\r\n      return undefined;\r\n    }\r\n    return imageSize as ItemDisplayImageSize;\r\n  }\r\n\r\n  private getSection(section: ItemSectionTagName) {\r\n    return Array.from(this.children).find(\r\n      (element) => element.tagName.toLowerCase() === section\r\n    );\r\n  }\r\n\r\n  public getClasses(HTMLContent?: string) {\r\n    const classes = getItemDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.getImageSizeFromSections() ?? this.imageSize\r\n    );\r\n    if (\r\n      HTMLContent\r\n        ? containsSections(HTMLContent)\r\n        : containsSections(this.children)\r\n    ) {\r\n      classes.push('with-sections');\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n"],"version":3}