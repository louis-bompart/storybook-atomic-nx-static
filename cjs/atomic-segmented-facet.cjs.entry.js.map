{"file":"atomic-segmented-facet.entry.cjs.js","mappings":"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","names":["h","Button","buildSearchStatus","buildFacet","buildFacetConditionsManager","parseDependsOn","FacetValuesGroup","getFieldValueCaption","Hidden","InitializeBindings","BindStateToController","MapProp","ArrayProp"],"sources":["src/components/search/facets/facet-segmented-value/facet-segmented-value.tsx","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.pcss?tag=atomic-segmented-facet&encapsulation=shadow","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {Button} from '../../../common/button';\nimport {FacetValueProps} from '../../../common/facets/facet-common';\n\nexport const FacetSegmentedValue: FunctionalComponent<FacetValueProps> = (\n  props\n) => {\n  const compactCount = new Intl.NumberFormat(props.i18n.language, {\n    notation: 'compact',\n  }).format(props.numberOfResults);\n\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\n\n  const ariaLabel = props.i18n.t('facet-value', {\n    value: props.displayValue,\n    count: props.numberOfResults,\n  });\n\n  return (\n    <li key={props.displayValue}>\n      <Button\n        style=\"square-neutral\"\n        part={`value-box${props.isSelected ? ' value-box-selected' : ''}`}\n        onClick={() => props.onClick()}\n        class={`value-box flex box-border h-full items-center p-2 group ${\n          props.isSelected\n            ? 'selected border-primary shadow-inner-primary'\n            : 'hover:border-primary-light focus-visible:border-primary-light'\n        }`}\n        ariaPressed={props.isSelected.toString()}\n        ariaLabel={ariaLabel}\n      >\n        <span\n          title={props.displayValue}\n          part=\"value-label\"\n          class={`value-label truncate ${\n            props.isSelected\n              ? 'text-primary'\n              : 'group-hover:text-primary-light group-focus:text-primary'\n          }`}\n        >\n          {props.displayValue}\n        </span>\n        <span\n          title={count}\n          part=\"value-count\"\n          class={`value-box-count truncate pl-1 w-auto mt-0 text-sm ${\n            props.isSelected\n              ? 'text-primary'\n              : 'text-neutral-dark group-hover:text-primary-light group-focus:text-primary'\n          }`}\n        >\n          {props.i18n.t('between-parentheses', {\n            text: compactCount,\n          })}\n        </span>\n      </Button>\n    </li>\n  );\n};\n","@import '../../../common/facets/facet-common.pcss';\n@import '../facet-segmented-value/facet-segmented-value.pcss';\n","import {\n  buildFacet,\n  buildFacetConditionsManager,\n  buildSearchStatus,\n  CategoryFacetValueRequest,\n  Facet,\n  FacetConditionsManager,\n  FacetOptions,\n  FacetSortCriterion,\n  FacetState,\n  FacetValue,\n  FacetValueRequest,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, h, Prop, State, VNode} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {FacetSegmentedValue} from '../facet-segmented-value/facet-segmented-value';\n\n/**\n * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.\n * @part segmented-container - The container that holds the segmented facets.\n * @part label - The facet value label.\n * @part values - The facet values container.\n * @part value-box - The facet value.\n * @part value-box-selected - The selected facet value.\n * @part placeholder - The placeholder displayed when the facet is loading.\n */\n@Component({\n  tag: 'atomic-segmented-facet',\n  styleUrl: 'atomic-segmented-facet.pcss',\n  shadow: true,\n})\nexport class AtomicSegmentedFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public searchStatus!: SearchStatus;\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  public facet!: Facet;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label?: string;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 6;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-segmented-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-segmented-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-segmented-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-segmented-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-segmented-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\n   *\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\n   * them.\n   *\n   * ```html\n   * <atomic-segmented-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-segmented-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-segmented-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-segmented-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private dependenciesManager!: FacetConditionsManager;\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    this.facetId = this.facet.state.facetId;\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  disconnectedCallback() {\n    this.dependenciesManager.stopWatching();\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    const classes = 'box-container flex h-10';\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\n    const displayValue = getFieldValueCaption(\n      this.field,\n      facetValue.value,\n      this.bindings.i18n\n    );\n    const isSelected = facetValue.state !== 'idle';\n\n    return (\n      <FacetSegmentedValue\n        displayValue={displayValue}\n        numberOfResults={facetValue.numberOfResults}\n        isSelected={isSelected}\n        i18n={this.bindings.i18n}\n        onClick={onClick}\n        searchQuery={this.facetState.facetSearch.query}\n      ></FacetSegmentedValue>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facetState.values.map((value) =>\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\n      )\n    );\n  }\n\n  private renderLabel() {\n    if (!this.label) {\n      return;\n    }\n    return (\n      <b class=\"mr-2\" part=\"label\">\n        {this.label}:\n      </b>\n    );\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      hasBreadcrumbs: false,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n\n  public render() {\n    if (this.searchStatus.state.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatus.state.firstSearchExecuted) {\n      return (\n        <div\n          part=\"placeholder\"\n          aria-hidden\n          class=\"h-8 w-48 bg-neutral animate-pulse rounded\"\n        ></div>\n      );\n    }\n\n    if (!this.facetState.values.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <div\n        part=\"segmented-container\"\n        class=\"flex whitespace-nowrap h-10 items-center\"\n      >\n        {this.renderLabel()}\n        {this.renderValues()}\n      </div>\n    );\n  }\n}\n"],"version":3}