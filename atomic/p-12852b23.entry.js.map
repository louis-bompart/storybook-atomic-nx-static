{"version":3,"names":["atomicInsightSearchBoxCss","AtomicInsightSearchBoxStyle0","AtomicInsightSearchBox","this","isExpanded","disableSearch","numberOfSuggestions","initialize","id","randomID","searchBoxOptions","highlightOptions","notMatchDelimiters","open","close","correctionDelimiters","fetchQuerySuggestions","registerQuerySuggest","loadInsightSearchActions","bindings","engine","searchBox","buildInsightSearchBox","options","dispatch","count","suggestionManager","SuggestionManager","getNumberOfSuggestionsToDisplay","updateQuery","query","updateText","getSearchBoxValue","searchBoxState","value","getSuggestionTimeout","getSuggestionDelay","getHost","host","getLogger","logger","registerSuggestions","position","renderItems","state","suggestions","map","suggestion","renderSuggestionItem","onInput","panel","onSubmit","activeDescendantElement","clickOnActiveElement","submit","clearSuggestions","onKeyDown","e","key","preventDefault","focusNextValue","announceNewActiveSuggestionToScreenReader","focusPreviousValue","triggerTextAreaChange","textAreaRef","dispatchEvent","window","Event","renderSuggestion","item","index","lastIndex","isSelected","activeDescendant","suggestedQuery","hideIfLast","h","ButtonSearchSuggestion","side","isDoubleList","onClick","onSuggestionClick","onMouseOver","onSuggestionMouseOver","hasQuery","partialItem","getPartialSearchBoxSuggestionElement","i18n","content","QuerySuggestionContainer","QuerySuggestionIcon","icon","SearchSlimIcon","hasSuggestion","length","QuerySuggestionText","onSelect","selectSuggestion","rawValue","renderPanel","elements","setRef","getRef","part","ref","class","onMouseDown","target","renderSuggestions","hasSuggestions","updateActiveDescendant","role","t","allSuggestionElements","el","leftPanel","getSearchInputLabel","isMacOS","hasKeyboard","onFocus","triggerSuggestions","announceNewSuggestionsToScreenReader","ariaLabel","_a","suggestionsAriaMessage","numberOfSuggestionsToAnnounce","filter","elementHasQuery","searchBoxAriaMessage","render","SearchBoxWrapper","disabled","textArea","style","display","onFocusExit","SearchTextArea","loading","isLoading","placeholder","onClear","clear","__decorate","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/insight/atomic-insight-search-box/atomic-insight-search-box.pcss?tag=atomic-insight-search-box&encapsulation=shadow","src/components/insight/atomic-insight-search-box/atomic-insight-search-box.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n@import '../../common/search-box/search-box.pcss';\r\n\r\n[part='wrapper'] {\r\n  @apply z-10;\r\n}\r\n\r\n:host {\r\n  position: relative;\r\n}\r\n\r\n[part='input'] {\r\n  padding-top: 0.675rem;\r\n  padding-bottom: 0.675rem;\r\n}\r\n\r\n[part='submit-icon'] {\r\n  color: var(--atomic-on-background);\r\n}\r\n\r\n[part='submit-button'] {\r\n  @apply w-10 flex justify-center items-center;\r\n}\r\n\r\n.loading::after {\r\n  content: '';\r\n  @apply absolute w-5/6 h-5/6 bg-background rounded-full;\r\n}\r\n\r\n[part='clear-button-wrapper'] {\r\n  @apply mr-2 py-0;\r\n}\r\n\r\n[part='clear-icon'] {\r\n  @apply w-3 h-3;\r\n}\r\n\r\n[part='textarea-expander'] {\r\n  &::after {\r\n    @apply px-4 p-2;\r\n  }\r\n}\r\n\r\n[part='textarea-expander'] {\r\n  [part='textarea'] {\r\n    @apply px-4 p-2;\r\n  }\r\n}\r\n","import {loadInsightSearchActions} from '@coveo/headless/insight';\r\nimport {Component, Element, h, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightSearchBox,\r\n  InsightSearchBox,\r\n  InsightSearchBoxState,\r\n  InsightSuggestion,\r\n} from '..';\r\nimport SearchSlimIcon from '../../../images/search-slim.svg';\r\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\r\nimport {hasKeyboard, isMacOS} from '../../../utils/device-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {SearchBoxWrapper} from '../../common/search-box/search-box-wrapper';\r\nimport {SearchTextArea} from '../../common/search-box/search-text-area';\r\nimport {\r\n  getPartialSearchBoxSuggestionElement,\r\n  QuerySuggestionContainer,\r\n  QuerySuggestionIcon,\r\n  QuerySuggestionText,\r\n} from '../../common/suggestions/query-suggestions';\r\nimport {SuggestionManager} from '../../common/suggestions/suggestion-manager';\r\nimport {\r\n  elementHasQuery,\r\n  SearchBoxSuggestionElement,\r\n} from '../../common/suggestions/suggestions-common';\r\nimport {ButtonSearchSuggestion} from '../../search/atomic-search-box/search-suggestion';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-search-box',\r\n  styleUrl: 'atomic-insight-search-box.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightSearchBox {\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n\r\n  private searchBox!: InsightSearchBox;\r\n  private id!: string;\r\n  private textAreaRef!: HTMLTextAreaElement;\r\n  private suggestionManager!: SuggestionManager<InsightSearchBox>;\r\n\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('searchBox')\r\n  @State()\r\n  private searchBoxState!: InsightSearchBoxState;\r\n  @State() public error!: Error;\r\n  @State() private isExpanded = false;\r\n\r\n  /**\r\n   * Whether to prevent the user from triggering a search from the component.\r\n   * Perfect for use cases where you need to disable the search conditionally, like when the input is empty.\r\n   */\r\n  @Prop({reflect: true}) public disableSearch = false;\r\n  /**\r\n   * The number of query suggestions to display when interacting with the search box.\r\n   */\r\n  @Prop({reflect: true}) public numberOfSuggestions = 5;\r\n\r\n  @AriaLiveRegion('search-box')\r\n  protected searchBoxAriaMessage!: string;\r\n\r\n  @AriaLiveRegion('search-suggestions', true)\r\n  protected suggestionsAriaMessage!: string;\r\n\r\n  public initialize() {\r\n    this.id = randomID('atomic-search-box-');\r\n\r\n    const searchBoxOptions = {\r\n      id: this.id,\r\n      numberOfSuggestions: 0,\r\n      highlightOptions: {\r\n        notMatchDelimiters: {\r\n          open: '<span class=\"font-bold\">',\r\n          close: '</span>',\r\n        },\r\n        correctionDelimiters: {\r\n          open: '<span class=\"font-normal\">',\r\n          close: '</span>',\r\n        },\r\n      },\r\n    };\r\n\r\n    const {fetchQuerySuggestions, registerQuerySuggest} =\r\n      loadInsightSearchActions(this.bindings.engine);\r\n\r\n    this.searchBox = buildInsightSearchBox(this.bindings.engine, {\r\n      options: searchBoxOptions,\r\n    });\r\n\r\n    this.bindings.engine.dispatch(\r\n      registerQuerySuggest({id: this.id, count: this.numberOfSuggestions})\r\n    );\r\n\r\n    this.suggestionManager = new SuggestionManager({\r\n      getNumberOfSuggestionsToDisplay: () => this.numberOfSuggestions,\r\n      updateQuery: (query) => this.searchBox.updateText(query),\r\n      getSearchBoxValue: () => this.searchBoxState.value,\r\n      getSuggestionTimeout: () => 500,\r\n      getSuggestionDelay: () => 0,\r\n      getHost: () => this.host,\r\n      getLogger: () => this.bindings.engine.logger,\r\n    });\r\n\r\n    this.suggestionManager.registerSuggestions({\r\n      position: 0,\r\n      renderItems: () =>\r\n        this.searchBox.state.suggestions.map((suggestion) =>\r\n          this.renderSuggestionItem(suggestion)\r\n        ),\r\n      onInput: () => {\r\n        this.bindings.engine.dispatch(fetchQuerySuggestions({id: this.id}));\r\n      },\r\n      panel: 'left',\r\n    });\r\n  }\r\n\r\n  private onSubmit() {\r\n    if (this.suggestionManager.activeDescendantElement) {\r\n      this.suggestionManager.clickOnActiveElement();\r\n      return;\r\n    }\r\n\r\n    this.searchBox.submit();\r\n    this.suggestionManager.clearSuggestions();\r\n  }\r\n\r\n  private onKeyDown(e: KeyboardEvent) {\r\n    if (this.disableSearch) {\r\n      return;\r\n    }\r\n\r\n    switch (e.key) {\r\n      case 'Enter':\r\n        this.onSubmit();\r\n        break;\r\n      case 'Escape':\r\n        this.suggestionManager.clearSuggestions();\r\n        break;\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        this.suggestionManager.focusNextValue();\r\n        this.announceNewActiveSuggestionToScreenReader();\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        this.suggestionManager.focusPreviousValue();\r\n        this.announceNewActiveSuggestionToScreenReader();\r\n        break;\r\n      case 'Tab':\r\n        this.suggestionManager.clearSuggestions();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private triggerTextAreaChange(value: string) {\r\n    this.textAreaRef.value = value;\r\n    this.textAreaRef.dispatchEvent(new window.Event('change'));\r\n  }\r\n\r\n  private renderSuggestion(\r\n    item: SearchBoxSuggestionElement,\r\n    index: number,\r\n    lastIndex: number\r\n  ) {\r\n    const id = `${this.id}-suggestion-${item.key}`;\r\n\r\n    const isSelected =\r\n      id === this.suggestionManager.activeDescendant ||\r\n      this.suggestionManager.suggestedQuery === item.query;\r\n\r\n    if (index === lastIndex && item.hideIfLast) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <ButtonSearchSuggestion\r\n        bindings={this.bindings}\r\n        id={id}\r\n        suggestion={item}\r\n        isSelected={isSelected}\r\n        side={'left'}\r\n        index={index}\r\n        lastIndex={lastIndex}\r\n        isDoubleList={false}\r\n        onClick={(e: Event) => {\r\n          this.suggestionManager.onSuggestionClick(item, e);\r\n        }}\r\n        onMouseOver={() => {\r\n          this.suggestionManager.onSuggestionMouseOver(item, 'left', id);\r\n        }}\r\n      ></ButtonSearchSuggestion>\r\n    );\r\n  }\r\n\r\n  private renderSuggestionItem(\r\n    suggestion: InsightSuggestion\r\n  ): SearchBoxSuggestionElement {\r\n    const hasQuery = this.searchBox.state.value !== '';\r\n    const partialItem = getPartialSearchBoxSuggestionElement(\r\n      suggestion,\r\n      this.bindings.i18n\r\n    );\r\n\r\n    return {\r\n      ...partialItem,\r\n      content: (\r\n        <QuerySuggestionContainer>\r\n          <QuerySuggestionIcon\r\n            icon={SearchSlimIcon}\r\n            hasSuggestion={this.searchBoxState.suggestions.length > 1}\r\n          />\r\n\r\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\r\n        </QuerySuggestionContainer>\r\n      ),\r\n      onSelect: () => {\r\n        this.searchBox.selectSuggestion(suggestion.rawValue);\r\n      },\r\n    };\r\n  }\r\n\r\n  private renderPanel(\r\n    elements: SearchBoxSuggestionElement[],\r\n    setRef: (el: HTMLElement | undefined) => void,\r\n    getRef: () => HTMLElement | undefined\r\n  ) {\r\n    if (!elements.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        part={'suggestions'}\r\n        ref={setRef}\r\n        class=\"flex flex-grow basis-1/2 flex-col\"\r\n        onMouseDown={(e) => {\r\n          if (e.target === getRef()) {\r\n            e.preventDefault();\r\n          }\r\n        }}\r\n      >\r\n        {elements.map((suggestion, index) =>\r\n          this.renderSuggestion(suggestion, index, elements.length - 1)\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderSuggestions() {\r\n    if (!this.suggestionManager.hasSuggestions) {\r\n      this.suggestionManager.updateActiveDescendant();\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`${this.id}-popup`}\r\n        part=\"suggestions-wrapper\"\r\n        class={`flex w-full z-10 absolute left-0 top-full rounded-md bg-background border border-neutral ${\r\n          this.suggestionManager.hasSuggestions && this.isExpanded\r\n            ? ''\r\n            : 'hidden'\r\n        }`}\r\n        role=\"application\"\r\n        aria-label={this.bindings.i18n.t('search-suggestions-single-list')}\r\n        {...(this.suggestionManager.activeDescendant && {\r\n          'aria-activedescendant': this.suggestionManager.activeDescendant,\r\n        })}\r\n      >\r\n        {this.renderPanel(\r\n          this.suggestionManager.allSuggestionElements,\r\n          (el) => (this.suggestionManager.leftPanel = el),\r\n          () => this.suggestionManager.leftPanel\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getSearchInputLabel() {\r\n    if (isMacOS()) {\r\n      return this.bindings.i18n.t('search-box-with-suggestions-macos');\r\n    }\r\n    if (!hasKeyboard()) {\r\n      return this.bindings.i18n.t('search-box-with-suggestions-keyboardless');\r\n    }\r\n    return this.bindings.i18n.t('search-box-with-suggestions');\r\n  }\r\n\r\n  private async onFocus() {\r\n    this.isExpanded = true;\r\n    await this.suggestionManager.triggerSuggestions();\r\n    this.announceNewSuggestionsToScreenReader();\r\n  }\r\n\r\n  private async onInput(value: string) {\r\n    this.searchBox.updateText(value);\r\n    this.isExpanded = true;\r\n    await this.suggestionManager.triggerSuggestions();\r\n    this.announceNewSuggestionsToScreenReader();\r\n  }\r\n\r\n  private announceNewActiveSuggestionToScreenReader() {\r\n    const ariaLabel = this.suggestionManager.activeDescendantElement?.ariaLabel;\r\n    if (isMacOS() && ariaLabel) {\r\n      this.suggestionsAriaMessage = ariaLabel;\r\n    }\r\n  }\r\n\r\n  private announceNewSuggestionsToScreenReader() {\r\n    const numberOfSuggestionsToAnnounce =\r\n      this.suggestionManager.allSuggestionElements.filter(\r\n        elementHasQuery\r\n      ).length;\r\n    this.searchBoxAriaMessage = numberOfSuggestionsToAnnounce\r\n      ? this.bindings.i18n.t('query-suggestions-available', {\r\n          count: numberOfSuggestionsToAnnounce,\r\n        })\r\n      : this.bindings.i18n.t('query-suggestions-unavailable');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <SearchBoxWrapper disabled={this.disableSearch} textArea>\r\n        <atomic-focus-detector\r\n          style={{display: 'contents'}}\r\n          onFocusExit={() => this.suggestionManager.clearSuggestions()}\r\n        >\r\n          <atomic-icon\r\n            part=\"submit-icon\"\r\n            icon={SearchSlimIcon}\r\n            class=\"w-4 h-4 my-auto mr-0 ml-4\"\r\n          />\r\n          <SearchTextArea\r\n            textAreaRef={this.textAreaRef}\r\n            loading={this.searchBoxState.isLoading}\r\n            ref={(el) => el && (this.textAreaRef = el)}\r\n            bindings={this.bindings}\r\n            value={this.searchBoxState.value}\r\n            ariaLabel={this.getSearchInputLabel()}\r\n            placeholder={this.bindings.i18n.t('search-ellipsis')}\r\n            onFocus={() => this.onFocus()}\r\n            onKeyDown={(e) => this.onKeyDown(e)}\r\n            onClear={() => {\r\n              this.searchBox.clear();\r\n              this.triggerTextAreaChange('');\r\n            }}\r\n            onInput={(e) => this.onInput((e.target as HTMLInputElement).value)}\r\n          />\r\n          {this.renderSuggestions()}\r\n        </atomic-focus-detector>\r\n      </SearchBoxWrapper>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}