{"version":3,"names":["atomicRatingRangeFacetCss","AtomicRatingRangeFacetStyle0","AtomicRatingRangeFacet","this","label","numberOfIntervals","maxValueInIndex","minValueInIndex","icon","Star","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","searchStatus","buildSearchStatus","bindings","engine","initializeFacet","initializeDependenciesManager","disconnectedCallback","host","isConnected","_a","dependenciesManager","stopWatching","isHidden","valuesToRender","length","searchStatusState","hasError","facet","state","enabled","options","facetId","field","numberOfValues","currentValues","generateCurrentValues","sortCriteria","generateAutomaticRanges","buildNumericFacet","facetInfo","i18n","t","element","store","registerFacet","format","value","formatFacetValue","content","ratingContent","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","scaleFactor","facetState","values","filter","buildFacetConditionsManager","conditions","parseDependsOn","i","push","buildNumericRange","start","Math","round","end","endInclusive","facetValue","count","h","class","Rating","numberOfTotalIcons","numberOfActiveIcons","renderLabelText","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","onToggleCollapse","headerRef","el","setTarget","part","renderValue","onClick","displayValue","isSelected","FacetValueLink","numberOfResults","renderValuesContainer","children","FacetValuesGroup","renderValues","map","toggleSingleSelect","render","Hidden","firstSearchExecuted","FacetPlaceholder","FacetContainer","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-rating-range-facet/atomic-rating-range-facet.pcss?tag=atomic-rating-range-facet&encapsulation=shadow","src/components/search/facets/atomic-rating-range-facet/atomic-rating-range-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\r\n@import '../../../common/atomic-rating/atomic-rating.pcss';\r\n","import {\r\n  NumericFacet,\r\n  buildNumericFacet,\r\n  NumericFacetState,\r\n  NumericFacetOptions,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildSearchStatus,\r\n  NumericFacetValue,\r\n  NumericRangeRequest,\r\n  buildNumericRange,\r\n  buildFacetConditionsManager,\r\n  FacetConditionsManager,\r\n  FacetValueRequest,\r\n  CategoryFacetValueRequest,\r\n} from '@coveo/headless';\r\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\r\nimport Star from '../../../../images/star.svg';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {Rating} from '../../../common/atomic-rating/atomic-rating';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/facet-value-link';\r\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\r\nimport {Hidden} from '../../../common/hidden';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {initializePopover} from '../atomic-popover/popover-type';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\r\n * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.\r\n * It only supports numeric fields.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and toggles to expand or collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-link - The facet value when display is 'link'.\r\n * @part value-link-selected - The selected facet value when display is 'link'.\r\n * @part value-box - The facet value when display is 'box'.\r\n * @part value-box-selected - The selected facet value when display is 'box'.\r\n */\r\n@Component({\r\n  tag: 'atomic-rating-range-facet',\r\n  styleUrl: 'atomic-rating-range-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicRatingRangeFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facet!: NumericFacet;\r\n  private dependenciesManager?: FacetConditionsManager;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facet')\r\n  @State()\r\n  public facetState!: NumericFacetState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.\r\n   */\r\n  @Prop({reflect: true}) public numberOfIntervals = 5;\r\n  /**\r\n   * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.\r\n   */\r\n  @Prop({reflect: true}) public maxValueInIndex = this.numberOfIntervals;\r\n  /**\r\n   * The minimum value of the field.\r\n   */\r\n  @Prop({reflect: true}) public minValueInIndex = 1;\r\n  /**\r\n   * The SVG icon to use to display the rating.\r\n   *\r\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\r\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\r\n   * - Use a stringified SVG to display it directly.\r\n   *\r\n   * When using a custom icon, at least part of your icon should have the color set to `fill=\"currentColor\"`.\r\n   * This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\r\n   *\r\n   * - `--atomic-rating-icon-active-color`\r\n   * - `--atomic-rating-icon-inactive-color`\r\n   */\r\n  @Prop({reflect: true}) public icon = Star;\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-rating-range-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-rating-range-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-rating-range-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-rating-range-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget() {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public initialize() {\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.initializeFacet();\r\n    this.initializeDependenciesManager();\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    if (this.host.isConnected) {\r\n      return;\r\n    }\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private get isHidden() {\r\n    return (\r\n      !this.valuesToRender.length ||\r\n      this.searchStatusState.hasError ||\r\n      !this.facet.state.enabled\r\n    );\r\n  }\r\n\r\n  private initializeFacet() {\r\n    const options: NumericFacetOptions = {\r\n      facetId: this.facetId,\r\n      field: this.field,\r\n      numberOfValues: this.numberOfIntervals,\r\n      currentValues: this.generateCurrentValues(),\r\n      sortCriteria: 'descending',\r\n      generateAutomaticRanges: false,\r\n      filterFacetCount: this.filterFacetCount,\r\n      injectionDepth: this.injectionDepth,\r\n    };\r\n    this.facet = buildNumericFacet(this.bindings.engine, {options});\r\n    this.facetId = this.facet.state.facetId;\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n    this.bindings.store.registerFacet('numericFacets', {\r\n      ...facetInfo,\r\n      format: (value) => this.formatFacetValue(value),\r\n      content: (value) => this.ratingContent(value),\r\n    });\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => !!this.valuesToRender.length,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n  }\r\n\r\n  private get scaleFactor() {\r\n    return this.maxValueInIndex / this.numberOfIntervals;\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    return this.facetState.values.filter(({state}) => state === 'selected')\r\n      .length;\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId: this.facetId!,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private generateCurrentValues() {\r\n    const currentValues: NumericRangeRequest[] = [];\r\n    for (let i = this.minValueInIndex; i <= this.numberOfIntervals; i++) {\r\n      currentValues.push(\r\n        buildNumericRange({\r\n          start: Math.round(i * this.scaleFactor * 100) / 100,\r\n          end: Math.round(this.maxValueInIndex * 100) / 100,\r\n          endInclusive: true,\r\n        })\r\n      );\r\n    }\r\n    return currentValues;\r\n  }\r\n\r\n  private formatFacetValue(facetValue: NumericFacetValue) {\r\n    if (facetValue.start === this.maxValueInIndex) {\r\n      return this.bindings.i18n.t('stars-only', {\r\n        count: facetValue.start,\r\n      });\r\n    }\r\n    return this.bindings.i18n.t('stars-range', {\r\n      value: facetValue.start,\r\n      count: this.maxValueInIndex,\r\n    });\r\n  }\r\n\r\n  private ratingContent(facetValue: NumericFacetValue) {\r\n    return (\r\n      <div class=\"flex items-center\">\r\n        <Rating\r\n          i18n={this.bindings.i18n}\r\n          numberOfTotalIcons={this.maxValueInIndex}\r\n          numberOfActiveIcons={facetValue.start}\r\n          icon={this.icon}\r\n        ></Rating>\r\n        {this.renderLabelText(facetValue)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderHeader() {\r\n    return (\r\n      <FacetHeader\r\n        i18n={this.bindings.i18n}\r\n        label={this.label}\r\n        onClearFilters={() => {\r\n          this.focusTarget.focusAfterSearch();\r\n          this.facet.deselectAll();\r\n        }}\r\n        numberOfActiveValues={this.numberOfSelectedValues}\r\n        isCollapsed={this.isCollapsed}\r\n        headingLevel={this.headingLevel}\r\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n        headerRef={(el) => this.focusTarget.setTarget(el)}\r\n      ></FacetHeader>\r\n    );\r\n  }\r\n\r\n  private renderLabelText(facetValue: NumericFacetValue) {\r\n    return (\r\n      <span\r\n        part=\"value-label\"\r\n        class={`ml-1 flex items-center truncate group-focus:text-primary group-hover:text-primary ${\r\n          facetValue.state === 'selected' ? 'font-bold' : ''\r\n        }`}\r\n      >\r\n        {facetValue.start === this.maxValueInIndex ? (\r\n          <span>{this.bindings.i18n.t('only')}</span>\r\n        ) : (\r\n          this.bindings.i18n.t('and-up')\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\r\n    const displayValue = this.formatFacetValue(facetValue);\r\n    const isSelected = facetValue.state === 'selected';\r\n    return (\r\n      <FacetValueLink\r\n        displayValue={displayValue}\r\n        numberOfResults={facetValue.numberOfResults}\r\n        isSelected={isSelected}\r\n        i18n={this.bindings.i18n}\r\n        onClick={onClick}\r\n      >\r\n        {this.ratingContent(facetValue)}\r\n      </FacetValueLink>\r\n    );\r\n  }\r\n\r\n  private renderValuesContainer(children: VNode[]) {\r\n    return (\r\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\r\n        <ul class=\"mt-3\" part=\"values\">\r\n          {children}\r\n        </ul>\r\n      </FacetValuesGroup>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    return this.renderValuesContainer(\r\n      this.valuesToRender.map((value) =>\r\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\r\n      )\r\n    );\r\n  }\r\n\r\n  private get valuesToRender() {\r\n    return this.facet.state.values.filter(\r\n      (value) => value.numberOfResults || value.state !== 'idle'\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    if (!this.searchStatusState.firstSearchExecuted) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfIntervals}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n\r\n    if (!this.valuesToRender.length) {\r\n      return <Hidden></Hidden>;\r\n    }\r\n\r\n    return (\r\n      <FacetContainer>\r\n        {this.renderHeader()}\r\n        {!this.isCollapsed && this.renderValues()}\r\n      </FacetContainer>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}