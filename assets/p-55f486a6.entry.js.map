{"version":3,"names":["getAnalyticsConfig","recsConfig","enabled","_a","analytics","analyticsMode","getNextAnalyticsConfig","getLegacyAnalyticsConfig","analyticsClientMiddleware","event","payload","augmentAnalytics","defaultAnalyticsConfig","augmentAnalyticsConfigWithDocument","augmentAnalyticsConfigWithAtomicVersion","result","augmentWithExternalMiddleware","augmentAnalyticsWithAtomicVersion","createAtomicRecsStore","commonStore","createAtomicCommonStore","loadingFlags","facets","numericFacets","dateFacets","categoryFacets","iconAssetsPath","facetElements","fieldsToInclude","getUniqueIDFromEngine","engine","state","recommendation","searchUid","FirstRecommendationExecutedFlag","AtomicRecsInterface","constructor","hostRef","this","store","initialized","i18n","i18next","createInstance","localizationCompatibilityVersion","language","languageAssetsPath","commonInterfaceHelper","CommonAtomicInterfaceHelper","bindings","interfaceElement","host","connectedCallback","setLoadingFlag","componentWillLoad","CspNonce","setNonce","initialize","options","internalInitialization","initEngine","initializeWithRecommendationEngine","pipeline","console","warn","mismatchedInterfaceAndEnginePropError","searchHub","getRecommendations","engineIsCreated","error","dispatch","loadRecommendationActions","getOrganizationEndpoints","organizationId","env","getOrganizationEndpointsHeadless","updateIconAssetsPath","set","handleInitialization","onComponentInitializing","updateLanguage","updateSearchConfiguration","loadSearchConfigurationActions","locale","onLanguageChange","toggleAnalytics","onAnalyticsChange","registerFieldsToInclude","fields","EcommerceDefaultFieldsToInclude","concat","filter","field","loadFieldActions","onInitialization","unsetLoadingFlag","analyticsConfig","buildRecommendationEngine","configuration","timezone","loggerOptions","level","logLevel","render","h","key","__decorate","ArrayProp"],"sources":["src/components/recommendations/atomic-recs-interface/analytics-config.ts","src/components/recommendations/atomic-recs-interface/store.ts","src/components/recommendations/atomic-recs-interface/atomic-recs-interface.tsx"],"sourcesContent":["import {\r\n  AnalyticsConfiguration,\r\n  RecommendationEngineConfiguration,\r\n} from '@coveo/headless/recommendation';\r\nimport {\r\n  AnalyticsPayload,\r\n  augmentAnalyticsWithAtomicVersion,\r\n  augmentWithExternalMiddleware,\r\n  augmentAnalyticsConfigWithDocument,\r\n  augmentAnalyticsConfigWithAtomicVersion,\r\n  getNextAnalyticsConfig,\r\n} from '../../common/interface/analytics-config';\r\n\r\nexport function getAnalyticsConfig(\r\n  recsConfig: RecommendationEngineConfiguration,\r\n  enabled: boolean\r\n): AnalyticsConfiguration {\r\n  switch (recsConfig.analytics?.analyticsMode) {\r\n    case 'next':\r\n      return getNextAnalyticsConfig(recsConfig, enabled);\r\n    case 'legacy':\r\n    default:\r\n      return getLegacyAnalyticsConfig(recsConfig, enabled);\r\n  }\r\n}\r\n\r\nfunction getLegacyAnalyticsConfig(\r\n  recsConfig: RecommendationEngineConfiguration,\r\n  enabled: boolean\r\n): AnalyticsConfiguration {\r\n  const analyticsClientMiddleware = (\r\n    event: string,\r\n    payload: AnalyticsPayload\r\n  ) => augmentAnalytics(event, payload, recsConfig);\r\n\r\n  const defaultAnalyticsConfig: AnalyticsConfiguration = {\r\n    analyticsClientMiddleware,\r\n    enabled,\r\n    ...augmentAnalyticsConfigWithDocument(),\r\n    ...augmentAnalyticsConfigWithAtomicVersion(),\r\n  };\r\n\r\n  if (recsConfig.analytics) {\r\n    return {\r\n      ...defaultAnalyticsConfig,\r\n      ...recsConfig.analytics,\r\n      analyticsClientMiddleware,\r\n    };\r\n  }\r\n  return defaultAnalyticsConfig;\r\n}\r\n\r\nfunction augmentAnalytics(\r\n  event: string,\r\n  payload: AnalyticsPayload,\r\n  recsConfig: RecommendationEngineConfiguration\r\n) {\r\n  let result = augmentWithExternalMiddleware(event, payload, recsConfig);\r\n  result = augmentAnalyticsWithAtomicVersion(result);\r\n  return result;\r\n}\r\n","import {RecommendationEngine} from '@coveo/headless/recommendation';\r\nimport {\r\n  AtomicCommonStore,\r\n  AtomicCommonStoreData,\r\n  createAtomicCommonStore,\r\n} from '../../common/interface/store';\r\n\r\nexport interface AtomicRecsStoreData extends AtomicCommonStoreData {}\r\nexport interface AtomicRecsStore\r\n  extends AtomicCommonStore<AtomicRecsStoreData> {}\r\n\r\nexport function createAtomicRecsStore(): AtomicRecsStore {\r\n  const commonStore = createAtomicCommonStore<AtomicRecsStoreData>({\r\n    loadingFlags: [],\r\n    facets: {},\r\n    numericFacets: {},\r\n    dateFacets: {},\r\n    categoryFacets: {},\r\n    iconAssetsPath: '',\r\n    facetElements: [],\r\n    fieldsToInclude: [],\r\n  });\r\n  return {\r\n    ...commonStore,\r\n    getUniqueIDFromEngine(engine: RecommendationEngine): string {\r\n      return engine.state.recommendation.searchUid;\r\n    },\r\n  };\r\n}\r\n","import {\r\n  RecommendationEngine,\r\n  RecommendationEngineConfiguration,\r\n  loadFieldActions,\r\n  EcommerceDefaultFieldsToInclude,\r\n  buildRecommendationEngine,\r\n  loadRecommendationActions,\r\n  loadSearchConfigurationActions,\r\n  getOrganizationEndpoints as getOrganizationEndpointsHeadless,\r\n  PlatformEnvironment,\r\n} from '@coveo/headless/recommendation';\r\nimport {\r\n  Component,\r\n  Element,\r\n  h,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  State,\r\n  setNonce,\r\n} from '@stencil/core';\r\nimport i18next, {i18n} from 'i18next';\r\nimport {RecsLogLevel} from '..';\r\nimport {i18nCompatibilityVersion} from '../../../components';\r\nimport {InitializeEvent} from '../../../utils/initialization-utils';\r\nimport {ArrayProp} from '../../../utils/props-utils';\r\nimport {CommonBindings} from '../../common/interface/bindings';\r\nimport {\r\n  BaseAtomicInterface,\r\n  CommonAtomicInterfaceHelper,\r\n  mismatchedInterfaceAndEnginePropError,\r\n} from '../../common/interface/interface-common';\r\nimport {getAnalyticsConfig} from './analytics-config';\r\nimport {createAtomicRecsStore, AtomicRecsStore} from './store';\r\n\r\nconst FirstRecommendationExecutedFlag = 'firstRecommendationExecuted';\r\nexport type RecsInitializationOptions = RecommendationEngineConfiguration;\r\nexport type RecsBindings = CommonBindings<\r\n  RecommendationEngine,\r\n  AtomicRecsStore,\r\n  HTMLAtomicRecsInterfaceElement\r\n>;\r\n\r\n/**\r\n * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.\r\n */\r\n@Component({\r\n  tag: 'atomic-recs-interface',\r\n  shadow: true,\r\n})\r\nexport class AtomicRecsInterface\r\n  implements BaseAtomicInterface<RecommendationEngine>\r\n{\r\n  private store = createAtomicRecsStore();\r\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<RecommendationEngine>;\r\n  private initialized = false;\r\n\r\n  @Element() public host!: HTMLAtomicRecsInterfaceElement;\r\n\r\n  @State() public error?: Error;\r\n\r\n  /**\r\n   * The recommendation interface [query pipeline](https://docs.coveo.com/en/180/).\r\n   *\r\n   * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the query pipeline should instead be configured in the target engine.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public pipeline?: string;\r\n\r\n  /**\r\n   * The recommendation interface [search hub](https://docs.coveo.com/en/1342/).\r\n   *\r\n   * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the search hub should instead be configured in the target engine.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public searchHub?: string;\r\n\r\n  /**\r\n   * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items.\r\n   * By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).\r\n   *\r\n   * @example: \"America/Montreal\"\r\n   */\r\n  @Prop({reflect: true}) public timezone?: string;\r\n\r\n  /**\r\n   * The recommendation interface headless engine.\r\n   */\r\n  @Prop({mutable: true}) public engine?: RecommendationEngine;\r\n\r\n  /**\r\n   * Whether analytics should be enabled.\r\n   */\r\n  @Prop({reflect: true}) public analytics = true;\r\n\r\n  /**\r\n   * The recommendation interface i18next instance.\r\n   */\r\n  @Prop() public i18n: i18n = i18next.createInstance();\r\n\r\n  /**\r\n   * The severity level of the messages to log in the console.\r\n   */\r\n  @Prop({reflect: true}) public logLevel?: RecsLogLevel;\r\n\r\n  /**\r\n   * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).\r\n   */\r\n  @Prop() public localizationCompatibilityVersion: i18nCompatibilityVersion =\r\n    'v3';\r\n\r\n  /**\r\n   * The recommendation interface language.\r\n   */\r\n  @Prop({reflect: true}) public language = 'en';\r\n\r\n  /**\r\n   * A list of non-default fields to include in the query results.\r\n   *\r\n   * Specify the property as an array using a JSON string representation:\r\n   * ```html\r\n   * <atomic-recs-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-recs-interface>\r\n   * ```\r\n   */\r\n  @ArrayProp()\r\n  @Prop({mutable: true})\r\n  public fieldsToInclude: string[] | string = '[]';\r\n\r\n  /**\r\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\r\n   *\r\n   * @example: \"/mypublicpath/languages\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\r\n\r\n  /**\r\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\r\n   *\r\n   * @example: \"/mypublicpath/icons\"\r\n   *\r\n   */\r\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\r\n\r\n  /**\r\n   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.\r\n   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,\r\n   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers\r\n   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').\r\n   * Otherwise you may see console errors such as\r\n   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]\r\n   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].\r\n   * @example\r\n   * ```html\r\n   * <script nonce=\"<YOUR_GENERATED_NONCE>\">\r\n   *  import {setNonce} from '@coveo/atomic';\r\n   *  setNonce('<YOUR_GENERATED_NONCE>');\r\n   * </script>\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) public CspNonce?: string;\r\n\r\n  public constructor() {\r\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\r\n      this,\r\n      'CoveoAtomicRecs'\r\n    );\r\n  }\r\n\r\n  public get bindings(): RecsBindings {\r\n    return {\r\n      engine: this.engine!,\r\n      i18n: this.i18n,\r\n      store: this.store,\r\n      interfaceElement: this.host,\r\n    };\r\n  }\r\n\r\n  public connectedCallback() {\r\n    this.store.setLoadingFlag(FirstRecommendationExecutedFlag);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    if (this.CspNonce) {\r\n      setNonce(this.CspNonce);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with the headless recommendation engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.\r\n   */\r\n  @Method() public initialize(options: RecsInitializationOptions) {\r\n    return this.internalInitialization(() => this.initEngine(options));\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection with an already preconfigured headless recommendation engine.\r\n   * This bypasses the properties set on the component, such as analytics, recommendation, searchHub, language, timezone & logLevel.\r\n   */\r\n  @Method() public initializeWithRecommendationEngine(\r\n    engine: RecommendationEngine\r\n  ) {\r\n    if (this.pipeline && this.pipeline !== engine.state.pipeline) {\r\n      console.warn(\r\n        mismatchedInterfaceAndEnginePropError(\r\n          'recommendation',\r\n          'query pipeline'\r\n        )\r\n      );\r\n    }\r\n    if (this.searchHub && this.searchHub !== engine.state.searchHub) {\r\n      console.warn(\r\n        mismatchedInterfaceAndEnginePropError('recommendation', 'search hub')\r\n      );\r\n    }\r\n    return this.internalInitialization(() => (this.engine = engine));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Fetches new recommendations.\r\n   */\r\n  @Method() public async getRecommendations() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.initialized) {\r\n      console.error(\r\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\r\n        this.host\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.engine!.dispatch(\r\n      loadRecommendationActions(this.engine!).getRecommendations()\r\n    );\r\n  }\r\n\r\n  @Method() public async getOrganizationEndpoints(\r\n    organizationId: string,\r\n    env: PlatformEnvironment = 'prod'\r\n  ) {\r\n    return getOrganizationEndpointsHeadless(organizationId, env);\r\n  }\r\n\r\n  @Watch('iconAssetsPath')\r\n  public updateIconAssetsPath() {\r\n    this.store.set('iconAssetsPath', this.iconAssetsPath);\r\n  }\r\n\r\n  @Listen('atomic/initializeComponent')\r\n  public handleInitialization(event: InitializeEvent) {\r\n    this.commonInterfaceHelper.onComponentInitializing(event);\r\n  }\r\n\r\n  @Watch('language')\r\n  public updateLanguage() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n\r\n    const {updateSearchConfiguration} = loadSearchConfigurationActions(\r\n      this.engine\r\n    );\r\n    this.engine.dispatch(\r\n      updateSearchConfiguration({\r\n        locale: this.language,\r\n      })\r\n    );\r\n    this.commonInterfaceHelper.onLanguageChange();\r\n  }\r\n\r\n  @Watch('analytics')\r\n  public toggleAnalytics() {\r\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\r\n      return;\r\n    }\r\n\r\n    this.commonInterfaceHelper.onAnalyticsChange();\r\n  }\r\n\r\n  public registerFieldsToInclude() {\r\n    const fields = EcommerceDefaultFieldsToInclude.concat(\r\n      [...this.fieldsToInclude].filter((field) => !!field)\r\n    );\r\n    this.engine!.dispatch(\r\n      loadFieldActions(this.engine!).registerFieldsToInclude(fields)\r\n    );\r\n  }\r\n\r\n  private async internalInitialization(initEngine: () => void) {\r\n    await this.commonInterfaceHelper.onInitialization(initEngine);\r\n    this.pipeline = this.engine!.state.pipeline;\r\n    this.searchHub = this.engine!.state.searchHub;\r\n    this.store.unsetLoadingFlag(FirstRecommendationExecutedFlag);\r\n    this.initialized = true;\r\n  }\r\n\r\n  private initEngine(options: RecsInitializationOptions) {\r\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\r\n    try {\r\n      this.engine = buildRecommendationEngine({\r\n        configuration: {\r\n          pipeline: this.pipeline,\r\n          searchHub: this.searchHub ?? 'default',\r\n          locale: this.language,\r\n          timezone: this.timezone,\r\n          ...options,\r\n          analytics: analyticsConfig,\r\n        },\r\n        loggerOptions: {\r\n          level: this.logLevel,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      this.error = error as Error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.engine && <slot></slot>;\r\n  }\r\n}\r\n"],"mappings":"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"}