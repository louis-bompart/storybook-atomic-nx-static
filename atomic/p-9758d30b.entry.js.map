{"version":3,"names":["atomicFacetCss","AtomicFacetStyle0","AtomicFacet","this","label","numberOfValues","withSearch","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","enableExclusion","injectionDepth","dependsOn","allowedValues","customSort","initialize","facet","buildFacet","bindings","engine","options","facetOptions","facetId","state","searchStatus","buildSearchStatus","initAriaLive","initConditionManager","initPopover","registerFacet","disconnectedCallback","_a","facetConditionsManager","stopWatching","componentShouldUpdate","next","prev","propName","isFacetState","shouldUpdateFacetSearchComponent","facetSearch","render","h","FacetGuard","key","enabled","facetState","hasError","searchStatusState","firstSearchExecuted","hasResults","values","length","FacetContainer","FacetHeader","i18n","definedLabel","onClearFilters","focusTargets","header","focusAfterSearch","deselectAll","numberOfActiveValues","activeValues","onToggleCollapse","headerRef","el","setTarget","renderBody","FacetPlaceholder","Fragment","FacetSearchInputGuard","canShowMoreValues","numberOfDisplayedValues","FacetSearchInput","onChange","value","clear","updateCaptions","getFieldCaptions","field","updateText","search","onClear","query","shouldDisplaySearchResults","renderSearchResults","renderMatches","renderValues","renderShowMoreLess","renderValuesContainer","children","classes","FacetValuesGroup","class","part","map","FacetSearchValue","facetValueProps","facetCount","count","onExclude","exclude","onSelect","singleSelect","select","facetValue","rawValue","i","shouldFocusOnShowLessAfterInteraction","shouldFocusOnShowMoreAfterInteraction","FacetValue","numberOfResults","toggleExclude","toggleSingleSelect","toggleSelect","setRef","btn","showLessFocus","_b","showMoreFocus","FacetShowMoreLess","onShowMore","showMore","showMoreValues","onShowLess","showLess","showLessValues","canShowLessValues","FacetSearchMatches","numberOfMatches","hasMoreMatches","moreValuesAvailable","filter","undefined","facetSearchQuery","isHidden","buildFacetConditionsManager","conditions","parseDependsOn","store","facetInfo","initializePopover","host","hasValues","announceFacetSearchResultsWithAriaLive","msg","facetSearchAriaMessage","t","element","FocusTargetController","headerFocus","__decorate","InitializeBindings","BindStateToController","MapProp","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/facets/atomic-facet/atomic-facet.pcss?tag=atomic-facet&encapsulation=shadow","src/components/search/facets/atomic-facet/atomic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildFacetConditionsManager,\n  FacetResultsMustMatch,\n  FacetConditionsManager,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {\n  Component,\n  h,\n  State,\n  Prop,\n  Element,\n  VNode,\n  Fragment,\n} from '@stencil/core';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {getFieldCaptions} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetSearchInput} from '../../../common/facets/facet-search/facet-search-input';\nimport {FacetSearchInputGuard} from '../../../common/facets/facet-search/facet-search-input-guard';\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/facet-search-matches';\nimport {\n  shouldDisplaySearchResults,\n  shouldUpdateFacetSearchComponent,\n} from '../../../common/facets/facet-search/facet-search-utils';\nimport {FacetSearchValue} from '../../../common/facets/facet-search/facet-search-value';\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {\n  FacetValueProps,\n  FacetValue,\n} from '../../../common/facets/facet-value/facet-value';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-facet` displays a facet of the results for the current query.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n * @part value-exclude-button - The button to exclude a facet value, available when display is 'checkbox'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-facet',\n  styleUrl: 'atomic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: Facet;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain a search box.\n   *\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * Whether to allow excluding values from the facet.\n   */\n  @Prop({reflect: true}) public enableExclusion = false;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.\n   *\n   * If you specify a list of values for this option, the facet uses only these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use\n   * those other values.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n  private showMoreFocus?: FocusTargetController;\n  private headerFocus?: FocusTargetController;\n  private facetConditionsManager?: FacetConditionsManager;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    this.facetId = this.facet.state.facetId;\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.initAriaLive();\n    this.initConditionManager();\n    this.initPopover();\n    this.registerFacet();\n  }\n\n  public disconnectedCallback() {\n    this.facetConditionsManager?.stopWatching();\n  }\n\n  public componentShouldUpdate(\n    next: unknown,\n    prev: unknown,\n    propName: keyof AtomicFacet\n  ) {\n    if (\n      this.isFacetState(prev, propName) &&\n      this.isFacetState(next, propName)\n    ) {\n      return shouldUpdateFacetSearchComponent(\n        next.facetSearch,\n        prev.facetSearch\n      );\n    }\n    return true;\n  }\n\n  public render() {\n    return (\n      <FacetGuard\n        enabled={this.facetState.enabled}\n        hasError={this.searchStatusState.hasError}\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\n        hasResults={this.facetState.values.length > 0}\n      >\n        {this.searchStatusState.firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={this.bindings.i18n}\n              label={this.definedLabel}\n              onClearFilters={() => {\n                this.focusTargets.header.focusAfterSearch();\n                this.facet.deselectAll();\n              }}\n              numberOfActiveValues={this.activeValues.length}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\n            ></FacetHeader>\n            {this.renderBody()}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            numberOfValues={this.numberOfValues}\n            isCollapsed={this.isCollapsed}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderBody() {\n    if (this.isCollapsed) {\n      return;\n    }\n    return (\n      <Fragment>\n        <FacetSearchInputGuard\n          canShowMoreValues={this.facetState.canShowMoreValues}\n          numberOfDisplayedValues={this.facetState.values.length}\n          withSearch={this.withSearch}\n        >\n          <FacetSearchInput\n            i18n={this.bindings.i18n}\n            label={this.definedLabel}\n            onChange={(value) => {\n              if (value === '') {\n                this.facet.facetSearch.clear();\n                return;\n              }\n              this.facet.facetSearch.updateCaptions(\n                getFieldCaptions(this.field, this.bindings.i18n)\n              );\n              this.facet.facetSearch.updateText(value);\n              this.facet.facetSearch.search();\n            }}\n            onClear={() => this.facet.facetSearch.clear()}\n            query={this.facetState.facetSearch.query}\n          />\n        </FacetSearchInputGuard>\n        {shouldDisplaySearchResults(this.facetState.facetSearch)\n          ? [this.renderSearchResults(), this.renderMatches()]\n          : [this.renderValues(), this.renderShowMoreLess()]}\n      </Fragment>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facet.state.facetSearch.values.map((value) => (\n        <FacetSearchValue\n          {...this.facetValueProps}\n          facetCount={value.count}\n          onExclude={() => this.facet.facetSearch.exclude(value)}\n          onSelect={() =>\n            this.displayValuesAs === 'link'\n              ? this.facet.facetSearch.singleSelect(value)\n              : this.facet.facetSearch.select(value)\n          }\n          facetValue={value.rawValue}\n        />\n      ))\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value, i) => {\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\n        const shouldFocusOnShowMoreAfterInteraction =\n          i ===\n          (this.sortCriteria === 'automatic'\n            ? 0\n            : this.facet.state.values.length - this.numberOfValues);\n\n        return (\n          <FacetValue\n            {...this.facetValueProps}\n            facetCount={value.numberOfResults}\n            onExclude={() => this.facet.toggleExclude(value)}\n            onSelect={() =>\n              this.displayValuesAs === 'link'\n                ? this.facet.toggleSingleSelect(value)\n                : this.facet.toggleSelect(value)\n            }\n            facetValue={value.value}\n            facetState={value.state}\n            setRef={(btn) => {\n              if (shouldFocusOnShowLessAfterInteraction) {\n                this.showLessFocus?.setTarget(btn);\n              }\n              if (shouldFocusOnShowMoreAfterInteraction) {\n                this.showMoreFocus?.setTarget(btn);\n              }\n            }}\n          />\n        );\n      })\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.focusTargets.showMore.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLess.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowMoreValues={this.facet.state.canShowMoreValues}\n        canShowLessValues={this.facet.state.canShowLessValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facet.state.facetSearch.query}\n        numberOfMatches={this.facet.state.facetSearch.values.length}\n        hasMoreMatches={this.facet.state.facetSearch.moreValuesAvailable}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private get activeValues() {\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n\n  private get facetValueProps(): Pick<\n    FacetValueProps,\n    | 'displayValuesAs'\n    | 'facetSearchQuery'\n    | 'enableExclusion'\n    | 'field'\n    | 'i18n'\n  > {\n    return {\n      facetSearchQuery: this.facetState.facetSearch.query,\n      displayValuesAs: this.displayValuesAs,\n      enableExclusion: this.enableExclusion,\n      field: this.field,\n      i18n: this.bindings.i18n,\n    };\n  }\n\n  private get isHidden() {\n    return !this.facet.state.enabled || !this.facet.state.values.length;\n  }\n\n  private initConditionManager() {\n    this.facetConditionsManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private registerFacet() {\n    this.bindings.store.registerFacet('facets', this.facetInfo);\n  }\n\n  private initPopover() {\n    initializePopover(this.host, {\n      ...this.facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.activeValues.length,\n    });\n  }\n\n  private initAriaLive() {\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n  }\n\n  private get facetInfo(): FacetInfo {\n    return {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n  }\n\n  private get definedLabel() {\n    return this.label === 'no-label' && this.facetState?.label\n      ? this.facetState.label\n      : this.label;\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  private isFacetState(state: unknown, propName: string): state is FacetState {\n    return (\n      propName === 'facetState' &&\n      typeof (state as FacetState)?.facetId === 'string'\n    );\n  }\n}\n"],"mappings":"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"}