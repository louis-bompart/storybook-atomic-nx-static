{"version":3,"names":["atomicInsightGeneratedAnswerCss","AtomicInsightGeneratedAnswerStyle0","AtomicInsightGeneratedAnswer","this","copied","copyError","answerStyle","maxCollapsedHeight","onGeneratedAnswerStateUpdate","generatedAnswerState","isVisible","_b","_a","generatedAnswerCommon","data","writeStoredData","setAriaMessage","getGeneratedAnswerStatus","setCopied","isCopied","setCopyError","message","ariaMessage","initialize","GeneratedAnswerCommon","host","withToggle","collapsible","getGeneratedAnswer","generatedAnswer","getGeneratedAnswerState","getSearchStatusState","searchStatusState","getBindings","bindings","getCopied","getCopyError","buildInteractiveCitation","props","buildInsightInteractiveCitation","engine","buildInsightGeneratedAnswer","initialState","responseFormat","searchStatus","buildInsightSearchStatus","insertFeedbackModal","window","ResizeObserver","debouncedAdaptAnswerHeight","debounce","adaptAnswerHeight","resizeObserver","observe","updateAnswerCollapsed","newState","oldState","newExpanded","expanded","oldExpanded","undefined","container","getAnswerContainer","toggleClass","disconnectedCallback","disconnect","element","className","condition","classList","toggle","fullAnswerHeight","_c","shadowRoot","querySelector","getBoundingClientRect","height","updateAnswerHeight","getAnswerFooter","footer","isStreaming","render","__decorate","InitializeBindings","BindStateToController","onUpdateCallbackMethod","AriaLiveRegion"],"sources":["src/components/insight/atomic-insight-generated-answer/atomic-insight-generated-answer.pcss?tag=atomic-insight-generated-answer&encapsulation=shadow","src/components/insight/atomic-insight-generated-answer/atomic-insight-generated-answer.tsx"],"sourcesContent":["@import '../../common/generated-answer/styles/generated-answer.pcss';\n","import {Component, Element, State, Prop, Watch} from '@stencil/core';\nimport {\n  InsightSearchStatus,\n  InsightSearchStatusState,\n  buildInsightGeneratedAnswer,\n  buildInsightInteractiveCitation,\n  buildInsightSearchStatus,\n  InsightGeneratedAnswer,\n  InsightGeneratedAnswerState,\n  InsightGeneratedAnswerStyle,\n} from '..';\nimport {AriaLiveRegion} from '../../../utils/accessibility-utils';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {GeneratedAnswerCommon} from '../../common/generated-answer/generated-answer-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n * The `atomic-insight-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.\n * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)\n *\n * @part container - The container displaying the generated answer.\n * @part header-label - The header of the generated answer container.\n * @part feedback-button - The \"like\" and \"dislike\" buttons.\n * @part toggle - The switch to toggle the visibility of the generated answer.\n * @part copy-button - The \"Copy answer\" button.\n * @part retry-container - The container for the \"retry\" section.\n * @part generated-text - The text of the generated answer.\n * @part citations-label - The header of the citations list.\n * @part rephrase-label - The header of the rephrase options.\n * @part rephrase-buttons - The container of the rephrase buttons section.\n * @part rephrase-button - The button for each of the rephrase options (step-by-step instructions, bulleted list, and summary).\n * @part rephrase-buttons-container - The container of the rephrase buttons.\n * @part rephrase-button-label - The label of the rephrase button.\n *\n * @part answer-code-block - The generated answer multi-line code blocks.\n * @part answer-emphasis - The generated answer emphasized text elements.\n * @part answer-inline-code - The generated answer inline code elements.\n * @part answer-heading-1 - The generated answer level 1 heading elements.\n * @part answer-heading-2 - The generated answer level 2 heading elements.\n * @part answer-heading-3 - The generated answer level 3 heading elements.\n * @part answer-heading-4 - The generated answer level 4 heading elements.\n * @part answer-heading-5 - The generated answer level 5 heading elements.\n * @part answer-heading-6 - The generated answer level 6 heading elements.\n * @part answer-list-item - The generated answer list item elements for both ordered and unordered lists.\n * @part answer-ordered-list - The generated answer ordered list elements.\n * @part answer-paragraph - The generated answer paragraph elements.\n * @part answer-quote-block - The generated answer quote block elements.\n * @part answer-unordered-list - The generated answer unordered list elements.\n * @part answer-strong - The generated answer strong text elements.\n * @part answer-table - The generated answer table elements.\n * @part answer-table-container - The generated answer table container elements.\n * @part answer-table-content - The generated answer table content cell elements.\n * @part answer-table-header - The generated answer table header cell elements.\n *\n * @part citation - The link that allows the user to navigate to the item.\n * @part citation-popover - The pop-up that shows an item preview when the user hovers over the citation.\n * @part citation-index - The content of the citation item.\n */\n@Component({\n  tag: 'atomic-insight-generated-answer',\n  styleUrl: 'atomic-insight-generated-answer.pcss',\n  shadow: true,\n})\nexport class AtomicInsightGeneratedAnswer\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public generatedAnswer!: InsightGeneratedAnswer;\n  public searchStatus!: InsightSearchStatus;\n  private resizeObserver?: ResizeObserver;\n\n  @BindStateToController('generatedAnswer', {\n    onUpdateCallbackMethod: 'onGeneratedAnswerStateUpdate',\n  })\n  @State()\n  private generatedAnswerState!: InsightGeneratedAnswerState;\n\n  @BindStateToController('searchStatus')\n  @State()\n  private searchStatusState!: InsightSearchStatusState;\n\n  @State()\n  public error!: Error;\n\n  @Element() private host!: HTMLElement;\n\n  @State()\n  copied = false;\n\n  @State()\n  copyError = false;\n\n  /**\n   * The answer style to apply when the component first loads.\n   * Options:\n   *   - `default`: Generate the answer without specific formatting instructions.\n   *   - `bullet`: Generate the answer as a bulleted list.\n   *   - `step`: Generate the answer as step-by-step instructions.\n   *   - `concise`: Generate the answer as briefly as possible.\n   */\n  @Prop() answerStyle: InsightGeneratedAnswerStyle = 'default';\n\n  /**\n   * Whether to render a toggle button that lets the user hide or show the answer.\n   */\n  @Prop() withToggle?: boolean;\n\n  /**\n   * Whether to allow the answer to be collapsed when the text is taller than 250px.\n   */\n  @Prop() collapsible?: boolean;\n\n  @AriaLiveRegion('generated-answer')\n  protected ariaMessage!: string;\n\n  private generatedAnswerCommon!: GeneratedAnswerCommon;\n  private fullAnswerHeight?: number;\n  private maxCollapsedHeight = 250;\n\n  public initialize() {\n    this.generatedAnswerCommon = new GeneratedAnswerCommon({\n      host: this.host,\n      withToggle: this.withToggle,\n      collapsible: this.collapsible,\n      getGeneratedAnswer: () => this.generatedAnswer,\n      getGeneratedAnswerState: () => this.generatedAnswerState,\n      getSearchStatusState: () => this.searchStatusState,\n      getBindings: () => this.bindings,\n      getCopied: () => this.copied,\n      setCopied: this.setCopied,\n      getCopyError: () => this.copyError,\n      setCopyError: this.setCopyError,\n      setAriaMessage: this.setAriaMessage,\n      buildInteractiveCitation: (props) =>\n        buildInsightInteractiveCitation(this.bindings.engine, props),\n    });\n    this.generatedAnswer = buildInsightGeneratedAnswer(this.bindings.engine, {\n      initialState: {\n        isVisible: this.generatedAnswerCommon.data.isVisible,\n        responseFormat: {\n          answerStyle: this.answerStyle,\n        },\n      },\n    });\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n    this.generatedAnswerCommon.insertFeedbackModal();\n\n    if (window.ResizeObserver && this.collapsible) {\n      const debouncedAdaptAnswerHeight = debounce(\n        () => this.adaptAnswerHeight(),\n        100\n      );\n      this.resizeObserver = new ResizeObserver(debouncedAdaptAnswerHeight);\n      this.resizeObserver.observe(this.host);\n    }\n  }\n\n  @Watch('generatedAnswerState')\n  public updateAnswerCollapsed(\n    newState: InsightGeneratedAnswerState,\n    oldState: InsightGeneratedAnswerState\n  ) {\n    const newExpanded = newState.expanded;\n    const oldExpanded = oldState ? oldState.expanded : undefined;\n\n    if (newExpanded !== oldExpanded) {\n      const container = this.getAnswerContainer();\n\n      if (!container) {\n        return;\n      }\n\n      this.toggleClass(container, 'answer-collapsed', !newExpanded);\n    }\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  // @ts-expect-error: This function is used by BindStateToController.\n  private onGeneratedAnswerStateUpdate = () => {\n    if (\n      this.generatedAnswerState.isVisible !==\n      this.generatedAnswerCommon?.data?.isVisible\n    ) {\n      this.generatedAnswerCommon.data = {\n        ...this.generatedAnswerCommon.data,\n        isVisible: this.generatedAnswerState.isVisible,\n      };\n      this.generatedAnswerCommon.writeStoredData(\n        this.generatedAnswerCommon.data\n      );\n    }\n\n    this.setAriaMessage(this.generatedAnswerCommon.getGeneratedAnswerStatus());\n  };\n\n  private setCopied = (isCopied: boolean) => {\n    this.copied = isCopied;\n  };\n\n  private setCopyError = (copyError: boolean) => {\n    this.copyError = copyError;\n  };\n\n  private setAriaMessage = (message: string) => {\n    this.ariaMessage = message;\n  };\n\n  private toggleClass(element: Element, className: string, condition: boolean) {\n    element.classList.toggle(className, condition);\n  }\n\n  private adaptAnswerHeight() {\n    this.fullAnswerHeight = this.host?.shadowRoot\n      ?.querySelector('[part=\"generated-text\"]')\n      ?.getBoundingClientRect().height;\n    this.updateAnswerHeight();\n  }\n\n  private getAnswerContainer() {\n    return this.host?.shadowRoot?.querySelector('[part=\"generated-container\"]');\n  }\n\n  private getAnswerFooter() {\n    return this.host?.shadowRoot?.querySelector(\n      '[part=\"generated-answer-footer\"]'\n    );\n  }\n\n  private updateAnswerHeight() {\n    const container = this.getAnswerContainer();\n    const footer = this.getAnswerFooter();\n\n    if (!container || !footer) {\n      return;\n    }\n\n    if (this.fullAnswerHeight! > this.maxCollapsedHeight) {\n      this.toggleClass(\n        container,\n        'answer-collapsed',\n        !this.generatedAnswerState.expanded\n      );\n      this.toggleClass(footer, 'is-collapsible', true);\n      this.toggleClass(\n        footer,\n        'generating-label-visible',\n        this.generatedAnswerState.isStreaming\n      );\n    } else {\n      this.toggleClass(container, 'answer-collapsed', false);\n      this.toggleClass(footer, 'is-collapsible', false);\n      this.toggleClass(footer, 'generating-label-visible', false);\n    }\n  }\n\n  public render() {\n    return this.generatedAnswerCommon.render();\n  }\n}\n"],"mappings":"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"}