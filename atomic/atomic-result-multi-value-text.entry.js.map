{"file":"atomic-result-multi-value-text.entry.esm.js","mappings":"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","names":[],"sources":["src/components/search/result-template-components/atomic-result-multi-value-text/atomic-result-multi-value-text.pcss?tag=atomic-result-multi-value-text&encapsulation=shadow","src/components/search/result-template-components/atomic-result-multi-value-text/atomic-result-multi-value-text.tsx"],"sourcesContent":[":host {\r\n  > ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    li {\r\n      display: inline-block;\r\n    }\r\n  }\r\n}\r\n\r\n.separator {\r\n  &::before {\r\n    display: inline;\r\n    content: ',\\00a0';\r\n  }\r\n}\r\n","import {\r\n  BreadcrumbManager,\r\n  buildBreadcrumbManager,\r\n  Result,\r\n  ResultTemplatesHelpers,\r\n} from '@coveo/headless';\r\nimport {Component, Element, Prop, h, State, VNode} from '@stencil/core';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\r\nimport {titleToKebab} from '../../../../utils/utils';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.\r\n * @part result-multi-value-text-list - The list of field values.\r\n * @part result-multi-value-text-separator - The separator to display between each of the field values.\r\n * @part result-multi-value-text-value - A field value.\r\n * @part result-multi-value-text-value-more - A label indicating some values were omitted.\r\n * @slot result-multi-value-text-value-* - A custom caption value that's specified for a given part of a multi-text field value. For example, if you want to use `Off-Campus Resident` as a caption value for `Off-campus apartment` in `Off-campus apartment;On-campus apartment`, you'd use `<span slot=\"result-multi-value-text-value-off-campus-apartment\">Off-Campus Resident</span>`). The suffix of this slot corresponds with the field value, written in kebab case.\r\n */\r\n@Component({\r\n  tag: 'atomic-result-multi-value-text',\r\n  styleUrl: 'atomic-result-multi-value-text.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicResultMultiText {\r\n  public breadcrumbManager!: BreadcrumbManager;\r\n\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * The field that the component should use.\r\n   * The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first.\r\n   * Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n\r\n  /**\r\n   * The maximum number of field values to display.\r\n   * If there are _n_ more values than the specified maximum, the last displayed value will be \"_n_ more...\".\r\n   */\r\n  @Prop({reflect: true}) public maxValuesToDisplay = 3;\r\n\r\n  /**\r\n   * The delimiter used to separate values when the field isn't indexed as a multi value field.\r\n   */\r\n  @Prop({reflect: true}) public delimiter: string | null = null;\r\n\r\n  private sortedValues: string[] | null = null;\r\n\r\n  public initialize() {\r\n    this.breadcrumbManager = buildBreadcrumbManager(this.bindings.engine);\r\n  }\r\n\r\n  private get resultValues() {\r\n    const value = ResultTemplatesHelpers.getResultProperty(\r\n      this.result,\r\n      this.field\r\n    );\r\n\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      return value.map((v) => `${v}`.trim());\r\n    }\r\n\r\n    if (typeof value !== 'string' || value.trim() === '') {\r\n      this.error = new Error(\r\n        `Could not parse \"${value}\" from field \"${this.field}\" as a string array.`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    return this.delimiter\r\n      ? value.split(this.delimiter).map((value) => value.trim())\r\n      : [value];\r\n  }\r\n\r\n  private get facetSelectedValues() {\r\n    return this.breadcrumbManager.state.facetBreadcrumbs\r\n      .filter((facet) => facet.field === this.field)\r\n      .reduce(\r\n        (values, facet) => [\r\n          ...values,\r\n          ...facet.values.map(({value}) => value.value),\r\n        ],\r\n        [] as string[]\r\n      );\r\n  }\r\n\r\n  private updateSortedValues() {\r\n    const allValues = this.resultValues;\r\n    if (allValues === null) {\r\n      this.sortedValues = null;\r\n      return;\r\n    }\r\n    const allValuesSet = new Set(allValues);\r\n    const firstValues = this.facetSelectedValues.filter((value) =>\r\n      allValuesSet.has(value)\r\n    );\r\n    this.sortedValues = Array.from(\r\n      allValues.reduce((set, value) => set.add(value), new Set(firstValues))\r\n    );\r\n  }\r\n\r\n  private getShouldDisplayLabel(values: string[]) {\r\n    return (\r\n      this.maxValuesToDisplay > 0 && values.length > this.maxValuesToDisplay\r\n    );\r\n  }\r\n\r\n  private getNumberOfValuesToDisplay(values: string[]) {\r\n    if (values.length <= this.maxValuesToDisplay) {\r\n      return values.length;\r\n    }\r\n    if (this.maxValuesToDisplay < 2) {\r\n      return this.maxValuesToDisplay;\r\n    }\r\n    return Math.min(values.length - 2, this.maxValuesToDisplay);\r\n  }\r\n\r\n  private renderValue(value: string) {\r\n    const label = getFieldValueCaption(this.field, value, this.bindings.i18n);\r\n    const kebabValue = titleToKebab(value);\r\n    return (\r\n      <li key={value} part=\"result-multi-value-text-value\">\r\n        <slot name={`result-multi-value-text-value-${kebabValue}`}>\r\n          {label}\r\n        </slot>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSeparator(beforeValue: string, afterValue: string) {\r\n    return (\r\n      <li\r\n        aria-hidden=\"true\"\r\n        part=\"result-multi-value-text-separator\"\r\n        key={`${beforeValue}~${afterValue}`}\r\n        class=\"separator\"\r\n      ></li>\r\n    );\r\n  }\r\n\r\n  private renderMoreLabel(value: number) {\r\n    return (\r\n      <li key=\"more-field-values\" part=\"result-multi-value-text-value-more\">\r\n        {this.bindings.i18n.t('n-more', {value})}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderListItems(values: string[]) {\r\n    const numberOfValuesToDisplay = this.getNumberOfValuesToDisplay(values);\r\n\r\n    const nodes: VNode[] = [];\r\n    for (let i = 0; i < numberOfValuesToDisplay; i++) {\r\n      if (i > 0) {\r\n        nodes.push(this.renderSeparator(values[i - 1], values[i]));\r\n      }\r\n      nodes.push(this.renderValue(values[i]));\r\n    }\r\n    if (this.getShouldDisplayLabel(values)) {\r\n      nodes.push(\r\n        this.renderSeparator(\r\n          values[numberOfValuesToDisplay - 1],\r\n          'more-field-values'\r\n        )\r\n      );\r\n      nodes.push(this.renderMoreLabel(values.length - numberOfValuesToDisplay));\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  public componentWillRender() {\r\n    this.updateSortedValues();\r\n  }\r\n\r\n  public render() {\r\n    if (this.sortedValues === null) {\r\n      this.host.remove();\r\n      return;\r\n    }\r\n    return (\r\n      <ul part=\"result-multi-value-text-list\">\r\n        {...this.renderListItems(this.sortedValues)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n"],"version":3}