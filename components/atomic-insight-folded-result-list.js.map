{"file":"atomic-insight-folded-result-list.js","mappings":"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","names":["AtomicInsightFoldedResultList","buildInsightResultsPerPage","buildInsightFoldedResultList","buildInsightInteractiveResult"],"sources":["src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.pcss?tag=atomic-insight-folded-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.tsx"],"sourcesContent":["@import '../../../common/item-list/styles/placeholders.pcss';\r\n@import '../styles/list-display.pcss';\r\n","import {\r\n  Component,\r\n  Element,\r\n  State,\r\n  Prop,\r\n  Listen,\r\n  Method,\r\n  h,\r\n} from '@stencil/core';\r\nimport {\r\n  InsightResultsPerPageState,\r\n  InsightResultsPerPage,\r\n  buildInsightFoldedResultList,\r\n  InsightFoldedResultList,\r\n  InsightFoldedResultListState,\r\n  buildInsightResultsPerPage,\r\n  InsightFoldedCollection,\r\n  buildInsightInteractiveResult,\r\n} from '../..';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/placeholders';\r\nimport {extractUnfoldedItem} from '../../../common/interface/item';\r\nimport {DisplayWrapper} from '../../../common/item-list/display-wrapper';\r\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\r\nimport {\r\n  ItemListCommon,\r\n  ItemRenderingFunction,\r\n} from '../../../common/item-list/item-list-common';\r\nimport {FoldedItemListStateContextEvent} from '../../../common/item-list/item-list-decorators';\r\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\r\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\r\nimport {\r\n  ItemDisplayDensity,\r\n  ItemDisplayImageSize,\r\n  ItemDisplayLayout,\r\n  getItemListDisplayClasses,\r\n} from '../../../common/layout/display-options';\r\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-folded-result-list',\r\n  styleUrl: 'atomic-insight-folded-result-list.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightFoldedResultList\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public foldedResultList!: InsightFoldedResultList;\r\n  public resultsPerPage!: InsightResultsPerPage;\r\n  private itemRenderingFunction: ItemRenderingFunction;\r\n  private loadingFlag = randomID('firstResultLoaded-');\r\n  private itemTemplateProvider!: ItemTemplateProvider;\r\n  private nextNewResultTarget?: FocusTargetController;\r\n  private display: ItemDisplayLayout = 'list';\r\n  private itemListCommon!: ItemListCommon;\r\n\r\n  @Element() public host!: HTMLDivElement;\r\n\r\n  @BindStateToController('foldedResultList')\r\n  @State()\r\n  public foldedResultListState!: InsightFoldedResultListState;\r\n  @BindStateToController('resultsPerPage')\r\n  @State()\r\n  public resultsPerPageState!: InsightResultsPerPageState;\r\n  @State() private resultTemplateRegistered = false;\r\n  @State() public error!: Error;\r\n  @State() private templateHasError = false;\r\n\r\n  /**\r\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\r\n   */\r\n  @Prop({reflect: true}) density: ItemDisplayDensity = 'normal';\r\n  /**\r\n   * The expected size of the image displayed in the results.\r\n   */\r\n  @Prop({reflect: true}) imageSize: ItemDisplayImageSize = 'icon';\r\n  /**\r\n   * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.\r\n   *\r\n   * @defaultValue `foldingcollection`\r\n   */\r\n  @Prop({reflect: true}) public collectionField?: string;\r\n  /**\r\n   * The name of the field that determines whether a certain result is a top result containing other child results within a collection.\r\n   *\r\n   * @defaultValue `foldingparent`\r\n   */\r\n  @Prop({reflect: true}) public parentField?: string;\r\n  /**\r\n   * The name of the field that uniquely identifies a result within a collection.\r\n   *\r\n   * @defaultValue `foldingchild`\r\n   */\r\n  @Prop({reflect: true}) public childField?: string;\r\n\r\n  /**\r\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\r\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\r\n   *\r\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\r\n   */\r\n  @Method() public async setRenderFunction(\r\n    resultRenderingFunction: ItemRenderingFunction\r\n  ) {\r\n    this.itemRenderingFunction = resultRenderingFunction;\r\n  }\r\n\r\n  @Listen('atomic/resolveFoldedResultList')\r\n  resolveFoldedResultList(event: FoldedItemListStateContextEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.detail(this.foldedResultList);\r\n  }\r\n\r\n  @Listen('atomic/loadCollection')\r\n  loadCollection(event: CustomEvent<InsightFoldedCollection>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.foldedResultList.loadCollection(event.detail);\r\n  }\r\n\r\n  public initialize() {\r\n    try {\r\n      this.foldedResultList = this.initFolding();\r\n      this.resultsPerPage = buildInsightResultsPerPage(this.bindings.engine);\r\n    } catch (e) {\r\n      this.error = e as Error;\r\n    }\r\n\r\n    this.itemTemplateProvider = new ItemTemplateProvider({\r\n      includeDefaultTemplate: true,\r\n      templateElements: Array.from(\r\n        this.host.querySelectorAll('atomic-insight-result-template')\r\n      ),\r\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\r\n      getTemplateHasError: () => this.templateHasError,\r\n      setResultTemplateRegistered: (value: boolean) => {\r\n        this.resultTemplateRegistered = value;\r\n      },\r\n      setTemplateHasError: (value: boolean) => {\r\n        this.templateHasError = value;\r\n      },\r\n      bindings: this.bindings,\r\n    });\r\n\r\n    this.itemListCommon = new ItemListCommon({\r\n      engineSubscribe: this.bindings.engine.subscribe,\r\n      getCurrentNumberOfItems: () => this.foldedResultListState.results.length,\r\n      getIsLoading: () => this.foldedResultListState.isLoading,\r\n      host: this.host,\r\n      loadingFlag: this.loadingFlag,\r\n      nextNewItemTarget: this.focusTarget,\r\n      store: this.bindings.store,\r\n    });\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.nextNewResultTarget) {\r\n      this.nextNewResultTarget = new FocusTargetController(this);\r\n    }\r\n    return this.nextNewResultTarget;\r\n  }\r\n\r\n  private initFolding(props = {options: {}}): InsightFoldedResultList {\r\n    return buildInsightFoldedResultList(this.bindings.engine, {\r\n      options: {\r\n        ...props.options,\r\n        folding: {\r\n          collectionField: this.collectionField,\r\n          parentField: this.parentField,\r\n          childField: this.childField,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    this.itemListCommon.updateBreakpoints();\r\n    const listClasses = this.computeListDisplayClasses();\r\n\r\n    return (\r\n      <ItemListGuard\r\n        firstRequestExecuted={this.foldedResultListState.firstSearchExecuted}\r\n        hasItems={this.foldedResultListState.hasResults}\r\n        hasTemplate={this.resultTemplateRegistered}\r\n        templateHasError={this.itemTemplateProvider.hasError}\r\n        hasError={this.foldedResultListState.hasError}\r\n      >\r\n        <DisplayWrapper listClasses={listClasses} display={this.display}>\r\n          <ResultsPlaceholdersGuard\r\n            displayPlaceholders={!this.bindings.store.isAppLoaded()}\r\n            numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\r\n            display={this.display}\r\n            density={this.density}\r\n            imageSize={this.imageSize}\r\n          ></ResultsPlaceholdersGuard>\r\n          <ItemDisplayGuard\r\n            firstRequestExecuted={\r\n              this.foldedResultListState.firstSearchExecuted\r\n            }\r\n            hasItems={this.foldedResultListState.hasResults}\r\n          >\r\n            {this.foldedResultListState.results.map((collection, i) => {\r\n              const atomicInsightResultProps =\r\n                this.getPropsForAtomicInsightResult(collection);\r\n              return (\r\n                <atomic-insight-result\r\n                  {...atomicInsightResultProps}\r\n                  part=\"outline\"\r\n                  ref={(element) =>\r\n                    element && this.itemListCommon.setNewResultRef(element, i)\r\n                  }\r\n                ></atomic-insight-result>\r\n              );\r\n            })}\r\n          </ItemDisplayGuard>\r\n        </DisplayWrapper>\r\n      </ItemListGuard>\r\n    );\r\n  }\r\n\r\n  private computeListDisplayClasses() {\r\n    const displayPlaceholders = !this.bindings.store.isAppLoaded();\r\n\r\n    return getItemListDisplayClasses(\r\n      this.display,\r\n      this.density,\r\n      this.imageSize,\r\n      this.foldedResultListState.firstSearchExecuted &&\r\n        this.foldedResultListState.isLoading,\r\n      displayPlaceholders\r\n    );\r\n  }\r\n\r\n  private getPropsForAtomicInsightResult(collection: InsightFoldedCollection) {\r\n    const result = extractUnfoldedItem(collection);\r\n\r\n    return {\r\n      interactiveResult: buildInsightInteractiveResult(this.bindings.engine, {\r\n        options: {result},\r\n      }),\r\n      result,\r\n      renderingFunction: this.itemRenderingFunction,\r\n      loadingFlag: this.loadingFlag,\r\n      key: this.itemListCommon.getResultId(\r\n        result.uniqueId,\r\n        this.foldedResultListState.searchResponseId,\r\n        this.density,\r\n        this.imageSize\r\n      ),\r\n      content: this.itemTemplateProvider.getTemplateContent(result),\r\n      store: this.bindings.store,\r\n      density: this.density,\r\n      display: this.display,\r\n      imageSize: this.imageSize,\r\n    };\r\n  }\r\n}\r\n"],"version":3}