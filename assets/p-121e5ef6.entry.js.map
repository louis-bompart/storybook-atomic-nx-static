{"version":3,"names":["atomicSmartSnippetCss","AtomicSmartSnippetStyle0","AtomicSmartSnippet","this","id","randomID","headingLevel","maximumHeight","collapsedHeight","feedbackSent","onSelectInlineLink","event","smartSnippet","selectInlineLink","detail","onBeginDelayedSelectInlineLink","beginDelayedSelectInlineLink","onCancelPendingSelectInlineLink","cancelPendingSelectInlineLink","initialize","buildSmartSnippet","bindings","engine","smartSnippetCommon","SmartSnippetCommon","modalTagName","getSourceAnchorAttributes","getAttributesFromLinkSlot","host","getHost","getBindings","getModalRef","modalRef","getHeadingLevel","getCollapsedHeight","getMaximumHeight","getSmartSnippetState","smartSnippetState","getSmartSnippet","getSnippetStyle","snippetStyle","getFeedbackSent","getSnippetMaximumHeight","snippetMaximumHeight","undefined","getSnippetCollapsedHeight","snippetCollapsedHeight","setModalRef","bind","setFeedbackSent","store","waitUntilAppLoaded","hideDuringRender","ref","isSent","componentWillUpdate","liked","disliked","componentDidRender","isAppLoaded","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss?tag=atomic-smart-snippet&encapsulation=shadow","src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\r\n","import {\r\n  buildSmartSnippet,\r\n  InlineLink,\r\n  SmartSnippet,\r\n  SmartSnippetState,\r\n} from '@coveo/headless';\r\nimport {Component, Prop, State, Element, Listen} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n  BindStateToController,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {getAttributesFromLinkSlot} from '../../../common/item-link/attributes-slot';\r\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.\r\n *\r\n * You can style the snippet by inserting a template element as follows:\r\n * ```html\r\n * <atomic-smart-snippet>\r\n *   <template>\r\n *     <style>\r\n *       b {\r\n *         color: blue;\r\n *       }\r\n *     </style>\r\n *   </template>\r\n * </atomic-smart-snippet>\r\n * ```\r\n *\r\n * @slot source-anchor-attributes - Lets you pass [attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) down to anchor elements, overriding other attributes.\r\n * To be used exclusively in anchor elements, such as: `<a slot=\"source-anchor-attributes\" target=\"_blank\"></a>`.\r\n *\r\n * @part smart-snippet - The wrapper of the entire smart snippet.\r\n * @part question - The header displaying the question that is answered by the found document excerpt.\r\n * @part answer - The container displaying the full document excerpt.\r\n * @part truncated-answer - The container displaying only part of the answer.\r\n * @part show-more-button - The show more button.\r\n * @part show-less-button - The show less button.\r\n * @part body - The body of the smart snippet, containing the truncated answer and the show more or show less button.\r\n * @part footer - The footer underneath the answer.\r\n * @part source-url - The URL to the document the excerpt is from.\r\n * @part source-title - The title of the document the excerpt is from.\r\n * @part feedback-banner - The feedback banner underneath the source.\r\n * @part feedback-inquiry-and-buttons - A wrapper around the feedback inquiry and the feedback buttons.\r\n * @part feedback-inquiry - The message asking the end user to provide feedback on whether the excerpt was useful.\r\n * @part feedback-buttons - The wrapper around the buttons after the inquiry.\r\n * @part feedback-like-button - The button allowing the end user to signal that the excerpt was useful.\r\n * @part feedback-dislike-button - The button allowing the end user to signal that the excerpt wasn't useful.\r\n * @part feedback-thank-you-container - The wrapper around the 'thank you' message and feedback button.\r\n * @part feedback-thank-you - The message thanking the end user for providing feedback.\r\n * @part feedback-explain-why-button - The button a user can press to provide detailed feedback.\r\n */\r\n@Component({\r\n  tag: 'atomic-smart-snippet',\r\n  styleUrl: 'atomic-smart-snippet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSmartSnippet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public smartSnippet!: SmartSnippet;\r\n  @BindStateToController('smartSnippet')\r\n  @State()\r\n  public smartSnippetState!: SmartSnippetState;\r\n  public error!: Error;\r\n  @Element() public host!: HTMLElement;\r\n  private id = randomID();\r\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\r\n\r\n  private smartSnippetCommon!: SmartSnippetCommon;\r\n\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n\r\n  /**\r\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\r\n   */\r\n  @Prop({reflect: true}) maximumHeight = 250;\r\n  /**\r\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\r\n   */\r\n  @Prop({reflect: true}) collapsedHeight = 180;\r\n\r\n  /**\r\n   * Sets the style of the snippet.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * smartSnippet.snippetStyle = `\r\n   *   b {\r\n   *     color: blue;\r\n   *   }\r\n   * `;\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) snippetStyle?: string;\r\n\r\n  @State() feedbackSent = false;\r\n\r\n  @Prop({reflect: true}) public snippetMaximumHeight?: number;\r\n\r\n  @Prop({reflect: true}) public snippetCollapsedHeight?: number;\r\n\r\n  @Listen('selectInlineLink')\r\n  onSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.selectInlineLink(event.detail);\r\n  }\r\n\r\n  @Listen('beginDelayedSelectInlineLink')\r\n  onBeginDelayedSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.beginDelayedSelectInlineLink(event.detail);\r\n  }\r\n\r\n  @Listen('cancelPendingSelectInlineLink')\r\n  onCancelPendingSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.cancelPendingSelectInlineLink(event.detail);\r\n  }\r\n\r\n  public initialize() {\r\n    this.smartSnippet = buildSmartSnippet(this.bindings.engine);\r\n    this.smartSnippetCommon = new SmartSnippetCommon({\r\n      id: this.id,\r\n      modalTagName: 'atomic-smart-snippet-feedback-modal',\r\n      getSourceAnchorAttributes: () =>\r\n        getAttributesFromLinkSlot(this.host, 'source-anchor-attributes'),\r\n      getHost: () => this.host,\r\n      getBindings: () => this.bindings,\r\n      getModalRef: () => this.modalRef,\r\n      getHeadingLevel: () => this.headingLevel,\r\n      getCollapsedHeight: () => this.collapsedHeight,\r\n      getMaximumHeight: () => this.maximumHeight,\r\n      getSmartSnippetState: () => this.smartSnippetState,\r\n      getSmartSnippet: () => this.smartSnippet,\r\n      getSnippetStyle: () => this.snippetStyle,\r\n      getFeedbackSent: () => this.feedbackSent,\r\n      getSnippetMaximumHeight: this.snippetMaximumHeight\r\n        ? () => this.snippetMaximumHeight!\r\n        : undefined,\r\n      getSnippetCollapsedHeight: this.snippetCollapsedHeight\r\n        ? () => this.snippetCollapsedHeight!\r\n        : undefined,\r\n      setModalRef: this.setModalRef.bind(this),\r\n      setFeedbackSent: this.setFeedbackSent.bind(this),\r\n    });\r\n    this.bindings.store.waitUntilAppLoaded(() =>\r\n      this.smartSnippetCommon.hideDuringRender(false)\r\n    );\r\n  }\r\n\r\n  private setModalRef(ref: HTMLElement) {\r\n    this.modalRef = ref as HTMLAtomicSmartSnippetFeedbackModalElement;\r\n  }\r\n\r\n  private setFeedbackSent(isSent: boolean) {\r\n    this.feedbackSent = isSent;\r\n  }\r\n\r\n  public componentWillUpdate() {\r\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\r\n      this.setFeedbackSent(false);\r\n    }\r\n  }\r\n\r\n  public componentDidRender() {\r\n    if (this.bindings.store.isAppLoaded()) {\r\n      this.smartSnippetCommon.hideDuringRender(false);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.smartSnippetCommon.render();\r\n  }\r\n}\r\n"],"mappings":"yYAAA,MAAMA,EAAwB,02wCAC9B,MAAAC,EAAeD,E,iXC4DFE,EAAkB,M,yBAQrBC,KAAAC,GAAKC,IAQiBF,KAAAG,aAAe,EAKtBH,KAAAI,cAAgB,IAIhBJ,KAAAK,gBAAkB,IAgBhCL,KAAAM,aAAe,M,mDAzBqB,E,mBAKN,I,qBAIE,I,8CAgBjB,M,0EAOxB,kBAAAC,CAAmBC,GACjBR,KAAKS,aAAaC,iBAAiBF,EAAMG,O,CAI3C,8BAAAC,CAA+BJ,GAC7BR,KAAKS,aAAaI,6BAA6BL,EAAMG,O,CAIvD,+BAAAG,CAAgCN,GAC9BR,KAAKS,aAAaM,8BAA8BP,EAAMG,O,CAGjD,UAAAK,GACLhB,KAAKS,aAAeQ,EAAkBjB,KAAKkB,SAASC,QACpDnB,KAAKoB,mBAAqB,IAAIC,EAAmB,CAC/CpB,GAAID,KAAKC,GACTqB,aAAc,sCACdC,0BAA2B,IACzBC,EAA0BxB,KAAKyB,KAAM,4BACvCC,QAAS,IAAM1B,KAAKyB,KACpBE,YAAa,IAAM3B,KAAKkB,SACxBU,YAAa,IAAM5B,KAAK6B,SACxBC,gBAAiB,IAAM9B,KAAKG,aAC5B4B,mBAAoB,IAAM/B,KAAKK,gBAC/B2B,iBAAkB,IAAMhC,KAAKI,cAC7B6B,qBAAsB,IAAMjC,KAAKkC,kBACjCC,gBAAiB,IAAMnC,KAAKS,aAC5B2B,gBAAiB,IAAMpC,KAAKqC,aAC5BC,gBAAiB,IAAMtC,KAAKM,aAC5BiC,wBAAyBvC,KAAKwC,qBAC1B,IAAMxC,KAAKwC,qBACXC,UACJC,0BAA2B1C,KAAK2C,uBAC5B,IAAM3C,KAAK2C,uBACXF,UACJG,YAAa5C,KAAK4C,YAAYC,KAAK7C,MACnC8C,gBAAiB9C,KAAK8C,gBAAgBD,KAAK7C,QAE7CA,KAAKkB,SAAS6B,MAAMC,oBAAmB,IACrChD,KAAKoB,mBAAmB6B,iBAAiB,Q,CAIrC,WAAAL,CAAYM,GAClBlD,KAAK6B,SAAWqB,C,CAGV,eAAAJ,CAAgBK,GACtBnD,KAAKM,aAAe6C,C,CAGf,mBAAAC,GACL,KAAMpD,KAAKkC,kBAAkBmB,OAASrD,KAAKkC,kBAAkBoB,UAAW,CACtEtD,KAAK8C,gBAAgB,M,EAIlB,kBAAAS,GACL,GAAIvD,KAAKkB,SAAS6B,MAAMS,cAAe,CACrCxD,KAAKoB,mBAAmB6B,iBAAiB,M,EAItC,MAAAQ,GACL,OAAOzD,KAAKoB,mBAAmBqC,Q,6BAjHJC,EAAA,CAA5BC,K,+BAIMD,EAAA,CAFNE,EAAsB,iB"}