{"file":"result-template-common-061a924c.js","mappings":"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","names":[],"sources":["src/components/common/result-templates/result-template-common.tsx"],"sourcesContent":["import {\r\n  ResultTemplate,\r\n  ResultTemplateCondition,\r\n  ResultTemplatesHelpers,\r\n} from '@coveo/headless';\r\nimport {h} from '@stencil/core';\r\nimport {aggregate, isElementNode, isVisualNode} from '../../../utils/utils';\r\nimport {tableElementTagName} from '../../search/atomic-table-result/table-element-utils';\r\nimport {isResultSectionNode} from '../layout/sections';\r\n\r\nexport type TemplateContent = DocumentFragment;\r\n\r\ninterface ResultTemplateCommonProps {\r\n  allowEmpty?: boolean;\r\n  host: HTMLDivElement;\r\n  validParents: string[];\r\n  setError: (error: Error) => void;\r\n}\r\n\r\ntype TemplateNodeType =\r\n  | 'section'\r\n  | 'metadata'\r\n  | 'table-column-definition'\r\n  | 'other';\r\n\r\nexport function getTemplateNodeType(node: Node): TemplateNodeType {\r\n  if (isResultSectionNode(node)) {\r\n    return 'section';\r\n  }\r\n  if (!isVisualNode(node)) {\r\n    return 'metadata';\r\n  }\r\n  if (\r\n    isElementNode(node) &&\r\n    node.tagName.toLowerCase() === tableElementTagName\r\n  ) {\r\n    return 'table-column-definition';\r\n  }\r\n  return 'other';\r\n}\r\n\r\nfunction groupNodesByType(nodes: NodeList) {\r\n  return aggregate(Array.from(nodes), (node) => getTemplateNodeType(node));\r\n}\r\n\r\nexport class ResultTemplateCommon {\r\n  private host: HTMLDivElement;\r\n  public matchConditions: ResultTemplateCondition[] = [];\r\n\r\n  constructor({\r\n    host,\r\n    setError,\r\n    validParents,\r\n    allowEmpty = false,\r\n  }: ResultTemplateCommonProps) {\r\n    this.host = host;\r\n    this.validateTemplate(host, setError, validParents, allowEmpty);\r\n  }\r\n\r\n  validateTemplate(\r\n    host: HTMLDivElement,\r\n    setError: (error: Error) => void,\r\n    validParents: string[],\r\n    allowEmpty = true\r\n  ) {\r\n    const hasValidParent = validParents\r\n      .map((p) => p.toUpperCase())\r\n      .includes(host.parentElement?.nodeName || '');\r\n    const tagName = host.nodeName.toLowerCase();\r\n\r\n    if (!hasValidParent) {\r\n      setError(\r\n        new Error(\r\n          `The \"${tagName}\" component has to be the child of one of the following: ${validParents\r\n            .map((p) => `\"${p.toLowerCase()}\"`)\r\n            .join(', ')}.`\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    const template = host.querySelector('template');\r\n    if (!template) {\r\n      setError(\r\n        new Error(\r\n          `The \"${tagName}\" component has to contain a \"template\" element as a child.`\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!allowEmpty && !template.innerHTML.trim()) {\r\n      setError(\r\n        new Error(`The \"template\" tag inside \"${tagName}\" cannot be empty.`)\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (template.content.querySelector('script')) {\r\n      console.warn(\r\n        'Any \"script\" tags defined inside of \"template\" elements are not supported and will not be executed when the results are rendered.',\r\n        host\r\n      );\r\n    }\r\n\r\n    const {section: sectionNodes, other: otherNodes} = groupNodesByType(\r\n      template.content.childNodes\r\n    );\r\n    if (sectionNodes?.length && otherNodes?.length) {\r\n      console.warn(\r\n        'Result templates should only contain section elements or non-section elements. Future updates could unpredictably affect this result template.',\r\n        host,\r\n        {sectionNodes, otherNodes}\r\n      );\r\n    }\r\n  }\r\n\r\n  getTemplate(\r\n    conditions: ResultTemplateCondition[],\r\n    error: Error\r\n  ): ResultTemplate<TemplateContent> | null {\r\n    if (error) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      conditions: conditions.concat(this.matchConditions),\r\n      content: getTemplateElement(this.host).content!,\r\n      priority: 1,\r\n    };\r\n  }\r\n\r\n  renderIfError(error: Error) {\r\n    if (error) {\r\n      return (\r\n        <atomic-component-error\r\n          element={this.host}\r\n          error={error}\r\n        ></atomic-component-error>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction getTemplateElement(host: HTMLElement) {\r\n  return host.querySelector('template')!;\r\n}\r\n\r\nexport function makeMatchConditions(\r\n  mustMatch: Record<string, string[]>,\r\n  mustNotMatch: Record<string, string[]>\r\n): ResultTemplateCondition[] {\r\n  const conditions: ResultTemplateCondition[] = [];\r\n  for (const field in mustMatch) {\r\n    conditions.push(\r\n      ResultTemplatesHelpers.fieldMustMatch(field, mustMatch[field])\r\n    );\r\n  }\r\n\r\n  for (const field in mustNotMatch) {\r\n    conditions.push(\r\n      ResultTemplatesHelpers.fieldMustNotMatch(field, mustNotMatch[field])\r\n    );\r\n  }\r\n  return conditions;\r\n}\r\n\r\nexport function makeDefinedConditions(\r\n  ifDefined?: string,\r\n  ifNotDefined?: string\r\n): ResultTemplateCondition[] {\r\n  const conditions: ResultTemplateCondition[] = [];\r\n  if (ifDefined) {\r\n    const fieldNames = ifDefined.split(',');\r\n    conditions.push(ResultTemplatesHelpers.fieldsMustBeDefined(fieldNames));\r\n  }\r\n\r\n  if (ifNotDefined) {\r\n    const fieldNames = ifNotDefined.split(',');\r\n    conditions.push(ResultTemplatesHelpers.fieldsMustNotBeDefined(fieldNames));\r\n  }\r\n  return conditions;\r\n}\r\n"],"version":3}