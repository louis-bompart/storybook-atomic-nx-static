{"file":"radio-button-3926146c.js","mappings":";;;;;;MAuBa,WAAW,GAA0C,CAAC,KAAK;;IACtE,MAAM,UAAU,GAAG,CAAC,WAAW,CAAC,CAAC;IACjC,IAAI,WAES,CAAC;IACd,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,MAAM,WAAW,GAAGA,wCAA4B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9D,UAAU,CAAC,IAAI,CAACC,sCAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzD,WAAW,GAAG,CAAC,CAAC,KAAKC,mBAAY,CAAC,CAAC,EAAE,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC;KAC5D;IACD,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC7B;IACD,IAAI,KAAK,CAAC,KAAK,EAAE;QACf,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,MAAM,UAAU,GAAG;QACjB,IAAI,EAAE,KAAK,CAAC,SAAS;QACrB,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;QAC3B,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,YAAY,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,KAAK,CAAC,IAAI;QAC3C,cAAc,EAAE,KAAK,CAAC,WAAW;QACjC,KAAK,EAAE,KAAK,CAAC,IAAI;QACjB,GAAG,EAAE,KAAK,CAAC,GAAG;KACf,CAAC;IAEF,QACEC,mBACE,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE,CAAC,CAAC,eACV,OAAC,CAAC,CAAC,aAAkC,CAAC,OAAO,KAAI,MAAA,KAAK,CAAC,SAAS,qDAAI,CAAA,CAAA,EAAA,EAEtE,WAAW,EAAE,WAAW,KACpB,UAAU,GACd,EACF;AACJ;;;;","names":["getRippleColorForButtonStyle","getClassNameForButtonStyle","createRipple","h"],"sources":["src/components/common/radio-button.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {createRipple} from '../../utils/ripple';\nimport {\n  ButtonStyle,\n  getClassNameForButtonStyle,\n  getRippleColorForButtonStyle,\n} from './button-style';\n\nexport interface RadioButtonProps {\n  groupName: string;\n  onChecked?(): void;\n  style?: ButtonStyle;\n  key?: string | number;\n  checked?: boolean;\n  class?: string;\n  text?: string;\n  part?: string;\n  ariaLabel?: string;\n  ariaCurrent?: string;\n  ref?(element?: HTMLInputElement): void;\n}\n\nexport const RadioButton: FunctionalComponent<RadioButtonProps> = (props) => {\n  const classNames = ['btn-radio'];\n  let onMouseDown:\n    | JSXBase.DOMAttributes<HTMLInputElement>['onMouseDown']\n    | undefined;\n  if (props.style) {\n    const rippleColor = getRippleColorForButtonStyle(props.style);\n    classNames.push(getClassNameForButtonStyle(props.style));\n\n    onMouseDown = (e) => createRipple(e, {color: rippleColor});\n  }\n  if (props.checked) {\n    classNames.push('selected');\n  }\n  if (props.class) {\n    classNames.push(props.class);\n  }\n\n  const attributes = {\n    name: props.groupName,\n    key: props.key,\n    checked: props.checked,\n    class: classNames.join(' '),\n    part: props.part,\n    'aria-label': props.ariaLabel ?? props.text,\n    'aria-current': props.ariaCurrent,\n    value: props.text,\n    ref: props.ref,\n  };\n\n  return (\n    <input\n      type=\"radio\"\n      onChange={(e) =>\n        (e.currentTarget as HTMLInputElement).checked && props.onChecked?.()\n      }\n      onMouseDown={onMouseDown}\n      {...attributes}\n    />\n  );\n};\n"],"version":3}