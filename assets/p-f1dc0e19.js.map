{"version":3,"names":["parseDependsOn","dependsOn","Object","keys","length","entries","map","parentFacetId","expectedValue","condition","values","some","value","isCategoryFacetValue","selectedValue","getSelectedCategoryFacetValueRequest","isSimpleFacetValue","state","request","requestAsRecord","children","Array","isArray","child","asRecord"],"sources":["src/components/common/facets/depends-on.ts"],"sourcesContent":["type GenericCondition<AnyFacetValueRequest> = {\r\n  parentFacetId: string;\r\n  condition(parentValues: AnyFacetValueRequest[]): boolean;\r\n};\r\n\r\ninterface SimpleFacetValue {\r\n  value: string;\r\n  state: string;\r\n}\r\n\r\ninterface CategoryFacetValue extends SimpleFacetValue {\r\n  children: SimpleFacetValue[];\r\n}\r\n\r\nexport function parseDependsOn<\r\n  FacetValue extends SimpleFacetValue | CategoryFacetValue,\r\n>(dependsOn: Record<string, string>): GenericCondition<FacetValue>[] {\r\n  if (Object.keys(dependsOn).length > 1) {\r\n    throw \"Depending on multiple facets isn't supported\";\r\n  }\r\n\r\n  return Object.entries(dependsOn).map(([parentFacetId, expectedValue]) => {\r\n    return {\r\n      parentFacetId,\r\n      condition: (values) => {\r\n        return values.some((value) => {\r\n          if (isCategoryFacetValue(value)) {\r\n            const selectedValue = getSelectedCategoryFacetValueRequest(value);\r\n            if (!selectedValue) {\r\n              return false;\r\n            }\r\n            if (!expectedValue) {\r\n              return true;\r\n            }\r\n            return selectedValue.value === expectedValue;\r\n          }\r\n          if (isSimpleFacetValue(value)) {\r\n            if (value.state !== 'selected') {\r\n              return false;\r\n            }\r\n            if (!expectedValue) {\r\n              return true;\r\n            }\r\n            return value.value === expectedValue;\r\n          }\r\n          return false;\r\n        });\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nfunction isCategoryFacetValue(request: unknown): request is CategoryFacetValue {\r\n  const requestAsRecord = request as Record<string, unknown>;\r\n  return (\r\n    (requestAsRecord?.children &&\r\n      Array.isArray(requestAsRecord.children) &&\r\n      requestAsRecord?.state &&\r\n      typeof requestAsRecord.state === 'string') === true\r\n  );\r\n}\r\n\r\nfunction getSelectedCategoryFacetValueRequest(\r\n  value: unknown\r\n): CategoryFacetValue | null {\r\n  if (!isCategoryFacetValue(value)) {\r\n    return null;\r\n  }\r\n  if (value.state === 'selected') {\r\n    return value;\r\n  }\r\n  for (const child of value.children) {\r\n    const selectedValue = getSelectedCategoryFacetValueRequest(child);\r\n    if (selectedValue !== null) {\r\n      return selectedValue;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction isSimpleFacetValue(value: unknown): value is SimpleFacetValue {\r\n  const asRecord = value as Record<string, unknown>;\r\n  return (\r\n    'value' in asRecord &&\r\n    typeof asRecord.value === 'string' &&\r\n    !('children' in asRecord)\r\n  );\r\n}\r\n"],"mappings":"SAcgBA,EAEdC,GACA,GAAIC,OAAOC,KAAKF,GAAWG,OAAS,EAAG,CACrC,KAAM,8C,CAGR,OAAOF,OAAOG,QAAQJ,GAAWK,KAAI,EAAEC,EAAeC,MAC7C,CACLD,gBACAE,UAAYC,GACHA,EAAOC,MAAMC,IAClB,GAAIC,EAAqBD,GAAQ,CAC/B,MAAME,EAAgBC,EAAqCH,GAC3D,IAAKE,EAAe,CAClB,OAAO,K,CAET,IAAKN,EAAe,CAClB,OAAO,I,CAET,OAAOM,EAAcF,QAAUJ,C,CAEjC,GAAIQ,EAAmBJ,GAAQ,CAC7B,GAAIA,EAAMK,QAAU,WAAY,CAC9B,OAAO,K,CAET,IAAKT,EAAe,CAClB,OAAO,I,CAET,OAAOI,EAAMA,QAAUJ,C,CAEzB,OAAO,KAAK,OAKtB,CAEA,SAASK,EAAqBK,GAC5B,MAAMC,EAAkBD,EACxB,QACGC,IAAe,MAAfA,SAAe,SAAfA,EAAiBC,WAChBC,MAAMC,QAAQH,EAAgBC,YAC9BD,IAAe,MAAfA,SAAe,SAAfA,EAAiBF,eACVE,EAAgBF,QAAU,YAAc,IAErD,CAEA,SAASF,EACPH,GAEA,IAAKC,EAAqBD,GAAQ,CAChC,OAAO,I,CAET,GAAIA,EAAMK,QAAU,WAAY,CAC9B,OAAOL,C,CAET,IAAK,MAAMW,KAASX,EAAMQ,SAAU,CAClC,MAAMN,EAAgBC,EAAqCQ,GAC3D,GAAIT,IAAkB,KAAM,CAC1B,OAAOA,C,EAGX,OAAO,IACT,CAEA,SAASE,EAAmBJ,GAC1B,MAAMY,EAAWZ,EACjB,MACE,UAAWY,UACJA,EAASZ,QAAU,YACxB,aAAcY,EAEpB,Q"}