{"version":3,"names":["getAnalyticsConfig","searchEngineConfig","enabled","_a","analytics","analyticsMode","getNextAnalyticsConfig","getLegacyAnalyticsConfig","analyticsClientMiddleware","event","payload","augmentAnalytics","defaultConfiguration","documentLocation","document","location","href","referrer","originLevel3","config","result","augmentWithExternalMiddleware","augmentAnalyticsWithAtomicVersion","createAtomicInsightStore","commonStore","createAtomicCommonStore","facets","numericFacets","dateFacets","categoryFacets","loadingFlags","iconAssetsPath","fieldsToInclude","facetElements","getUniqueIDFromEngine","engine","state","search","searchResponseId","atomicInsightInterfaceCss","AtomicInsightInterfaceStyle0","FirstInsightRequestExecutedFlag","AtomicInsightInterface","constructor","hostRef","this","initialized","i18n","i18next","createInstance","localizationCompatibilityVersion","language","languageAssetsPath","resultsPerPage","store","commonInterfaceHelper","CommonAtomicInterfaceHelper","connectedCallback","setLoadingFlag","componentWillLoad","CspNonce","setNonce","initResultsPerPage","engineIsCreated","buildInsightResultsPerPage","bindings","initialState","numberOfResults","registerFieldsToInclude","length","dispatch","loadFieldActions","getOrganizationEndpoints","organizationId","env","getOrganizationEndpointsInsight","initialize","options","internalInitialization","initEngine","initializeWithInsightEngine","executeFirstSearch","console","error","host","updateIconAssetsPath","set","handleInitialization","onComponentInitializing","updateLanguage","onLanguageChange","toggleAnalytics","onAnalyticsChange","interfaceElement","createStyleElement","styleTag","createElement","setAttribute","createScriptElement","analyticsConfig","buildInsightEngine","configuration","loggerOptions","level","logLevel","onInitialization","unsetLoadingFlag","render","h","key","name","__decorate","ArrayProp"],"sources":["src/components/insight/atomic-insight-interface/analytics-config.ts","src/components/insight/atomic-insight-interface/store.ts","src/components/insight/atomic-insight-interface/atomic-insight-interface.pcss?tag=atomic-insight-interface&encapsulation=shadow","src/components/insight/atomic-insight-interface/atomic-insight-interface.tsx"],"sourcesContent":["import {InsightAnalyticsConfiguration, InsightEngineConfiguration} from '..';\nimport {\n  AnalyticsPayload,\n  augmentAnalyticsWithAtomicVersion,\n  augmentWithExternalMiddleware,\n  getNextAnalyticsConfig,\n} from '../../common/interface/analytics-config';\n\nexport function getAnalyticsConfig(\n  searchEngineConfig: InsightEngineConfiguration,\n  enabled: boolean\n): InsightAnalyticsConfiguration {\n  switch (searchEngineConfig.analytics?.analyticsMode) {\n    case 'next':\n      return getNextAnalyticsConfig(searchEngineConfig, enabled);\n    case 'legacy':\n    default:\n      return getLegacyAnalyticsConfig(searchEngineConfig, enabled);\n  }\n}\n\nfunction getLegacyAnalyticsConfig(\n  searchEngineConfig: InsightEngineConfiguration,\n  enabled: boolean\n): InsightAnalyticsConfiguration {\n  const analyticsClientMiddleware = (\n    event: string,\n    payload: AnalyticsPayload\n  ) => augmentAnalytics(event, payload, searchEngineConfig);\n\n  const defaultConfiguration: InsightAnalyticsConfiguration = {\n    analyticsClientMiddleware,\n    enabled,\n    documentLocation: document.location.href,\n    ...(document.referrer && {originLevel3: document.referrer}),\n  };\n\n  if (searchEngineConfig.analytics) {\n    return {\n      ...defaultConfiguration,\n      ...searchEngineConfig.analytics,\n      analyticsClientMiddleware,\n    };\n  }\n  return defaultConfiguration;\n}\n\nfunction augmentAnalytics(\n  event: string,\n  payload: AnalyticsPayload,\n  config: InsightEngineConfiguration\n) {\n  let result = augmentWithExternalMiddleware(event, payload, config);\n  result = augmentAnalyticsWithAtomicVersion(result);\n  return result;\n}\n","import {\n  InsightDateFacetValue,\n  InsightEngine,\n  InsightNumericFacetValue,\n} from '..';\nimport {\n  FacetInfo,\n  FacetStore,\n  FacetValueFormat,\n} from '../../common/facets/facet-common-store';\nimport {\n  AtomicCommonStore,\n  AtomicCommonStoreData,\n  createAtomicCommonStore,\n} from '../../common/interface/store';\n\nexport interface AtomicInsightStoreData extends AtomicCommonStoreData {\n  fieldsToInclude: string[];\n  facets: FacetStore<FacetInfo>;\n  numericFacets: FacetStore<\n    FacetInfo & FacetValueFormat<InsightNumericFacetValue>\n  >;\n  dateFacets: FacetStore<FacetInfo & FacetValueFormat<InsightDateFacetValue>>;\n  categoryFacets: FacetStore<FacetInfo>;\n}\n\nexport interface AtomicInsightStore\n  extends AtomicCommonStore<AtomicInsightStoreData> {}\n\nexport function createAtomicInsightStore(): AtomicInsightStore {\n  const commonStore = createAtomicCommonStore<AtomicInsightStoreData>({\n    facets: {},\n    numericFacets: {},\n    dateFacets: {},\n    categoryFacets: {},\n    loadingFlags: [],\n    iconAssetsPath: '',\n    fieldsToInclude: [],\n    facetElements: [],\n  });\n  return {\n    ...commonStore,\n\n    getUniqueIDFromEngine(engine: InsightEngine): string {\n      return engine.state.search.searchResponseId;\n    },\n  };\n}\n","@import '../../../global/global.pcss';\n\n:host {\n  position: relative;\n}\n\nslot[name='full-search'] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: block;\n}\n","import {loadFieldActions} from '@coveo/headless/insight';\nimport {\n  Component,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  setNonce,\n  State,\n  Watch,\n} from '@stencil/core';\nimport i18next, {i18n} from 'i18next';\nimport {\n  InsightLogLevel,\n  InsightEngine,\n  InsightEngineConfiguration,\n  buildInsightEngine,\n  buildInsightResultsPerPage,\n  getOrganizationEndpointsInsight,\n  PlatformEnvironmentInsight,\n} from '..';\nimport {InitializeEvent} from '../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../utils/props-utils';\nimport {CommonBindings, NonceBindings} from '../../common/interface/bindings';\nimport {i18nCompatibilityVersion} from '../../common/interface/i18n';\nimport {\n  BaseAtomicInterface,\n  CommonAtomicInterfaceHelper,\n} from '../../common/interface/interface-common';\nimport {getAnalyticsConfig} from './analytics-config';\nimport {AtomicInsightStore, createAtomicInsightStore} from './store';\n\nconst FirstInsightRequestExecutedFlag = 'firstInsightRequestExecuted';\nexport type InsightInitializationOptions = InsightEngineConfiguration;\nexport type InsightBindings = CommonBindings<\n  InsightEngine,\n  AtomicInsightStore,\n  HTMLAtomicInsightInterfaceElement\n> &\n  NonceBindings;\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-interface',\n  styleUrl: 'atomic-insight-interface.pcss',\n  shadow: true,\n})\nexport class AtomicInsightInterface\n  implements BaseAtomicInterface<InsightEngine>\n{\n  private initialized = false;\n\n  @State() public error?: Error;\n\n  /**\n   * The service insight interface headless engine.\n   */\n  @Prop({mutable: true}) public engine?: InsightEngine;\n  /**\n   * Whether analytics should be enabled.\n   */\n  @Prop({reflect: true}) public analytics = true;\n\n  /**\n   * The service insight interface i18next instance.\n   */\n  @Prop() public i18n: i18n = i18next.createInstance();\n  /**\n   * The severity level of the messages to log in the console.\n   */\n  @Prop({reflect: true}) public logLevel?: InsightLogLevel;\n  /**\n   * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).\n   */\n  @Prop() public localizationCompatibilityVersion: i18nCompatibilityVersion =\n    'v3';\n  /**\n   * The service insight interface language.\n   */\n  @Prop({reflect: true}) public language = 'en';\n\n  /**\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\n   *\n   * Example: \"/mypublicpath/languages\"\n   *\n   */\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\n\n  /**\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\n   *\n   * Example: \"/mypublicpath/icons\"\n   *\n   */\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\n  /**\n   * A list of non-default fields to include in the query results.\n   *\n   * Specify the property as an array using a JSON string representation:\n   * ```html\n   * <atomic-insight-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-insight-interface>\n   * ```\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public fieldsToInclude: string[] | string = '[]';\n\n  /**\n   * The number of results per page. By default, this is set to `5`.\n   */\n  @Prop({reflect: true}) resultsPerPage = 5;\n\n  /**\n   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.\n   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,\n   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers\n   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').\n   * Otherwise you may see console errors such as\n   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]\n   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].\n   * When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.\n   * @example:\n   * ```html\n   * <script nonce=\"<YOUR_GENERATED_NONCE>\">\n   *  import {setNonce} from '@coveo/atomic';\n   *  setNonce('<YOUR_GENERATED_NONCE>');\n   * </script>\n   * ```\n   */\n  @Prop({reflect: true}) public CspNonce?: string;\n\n  @Element() public host!: HTMLAtomicInsightInterfaceElement;\n\n  private store = createAtomicInsightStore();\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<InsightEngine>;\n\n  public constructor() {\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\n      this,\n      'CoveoAtomic'\n    );\n  }\n\n  public connectedCallback() {\n    this.store.setLoadingFlag(FirstInsightRequestExecutedFlag);\n  }\n\n  public componentWillLoad() {\n    if (this.CspNonce) {\n      setNonce(this.CspNonce);\n    }\n  }\n\n  private initResultsPerPage() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n    buildInsightResultsPerPage(this.bindings.engine, {\n      initialState: {numberOfResults: this.resultsPerPage},\n    });\n  }\n\n  public registerFieldsToInclude() {\n    if (this.fieldsToInclude.length) {\n      this.engine!.dispatch(\n        loadFieldActions(this.engine!).registerFieldsToInclude([\n          ...this.fieldsToInclude,\n        ])\n      );\n    }\n  }\n\n  /**\n   * Returns the unique, organization-specific endpoint(s)\n   * @param {string} organizationId\n   * @param {'prod'|'hipaa'|'staging'|'dev'} [env=Prod]\n   */\n  @Method() public async getOrganizationEndpoints(\n    organizationId: string,\n    env: PlatformEnvironmentInsight = 'prod'\n  ) {\n    return getOrganizationEndpointsInsight(organizationId, env);\n  }\n\n  /**\n   * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.\n   */\n  @Method() public initialize(options: InsightInitializationOptions) {\n    return this.internalInitialization(() => this.initEngine(options));\n  }\n\n  /**\n   * Initializes the connection with an already preconfigured headless insight engine.\n   *\n   */\n  @Method() public initializeWithInsightEngine(engine: InsightEngine) {\n    return this.internalInitialization(() => (this.engine = engine));\n  }\n\n  /**\n   *\n   * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.\n   */\n  @Method() public async executeFirstSearch() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n    if (!this.initialized) {\n      console.error(\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\n        this.host\n      );\n      return;\n    }\n    this.engine.executeFirstSearch();\n  }\n\n  @Watch('iconAssetsPath')\n  public updateIconAssetsPath() {\n    this.store.set('iconAssetsPath', this.iconAssetsPath);\n  }\n\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    this.commonInterfaceHelper.onComponentInitializing(event);\n  }\n\n  @Watch('language')\n  public updateLanguage() {\n    this.commonInterfaceHelper.onLanguageChange();\n  }\n\n  @Watch('analytics')\n  public toggleAnalytics() {\n    this.commonInterfaceHelper.onAnalyticsChange();\n  }\n\n  public get bindings(): InsightBindings {\n    return {\n      engine: this.engine!,\n      i18n: this.i18n,\n      store: this.store,\n      interfaceElement: this.host,\n      createStyleElement: () => {\n        const styleTag = document.createElement('style');\n        if (this.CspNonce) {\n          styleTag.setAttribute('nonce', this.CspNonce);\n        }\n        return styleTag;\n      },\n      createScriptElement: () => {\n        const styleTag = document.createElement('script');\n        if (this.CspNonce) {\n          styleTag.setAttribute('nonce', this.CspNonce);\n        }\n        return styleTag;\n      },\n    };\n  }\n\n  private initEngine(options: InsightInitializationOptions) {\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\n    try {\n      this.engine = buildInsightEngine({\n        configuration: {\n          ...options,\n          analytics: analyticsConfig,\n        },\n        loggerOptions: {\n          level: this.logLevel,\n        },\n      });\n    } catch (error) {\n      this.error = error as Error;\n      throw error;\n    }\n  }\n\n  private async internalInitialization(initEngine: () => void) {\n    await this.commonInterfaceHelper.onInitialization(initEngine);\n    this.store.unsetLoadingFlag(FirstInsightRequestExecutedFlag);\n    this.initResultsPerPage();\n    this.initialized = true;\n  }\n\n  render() {\n    return (\n      this.engine && (\n        <host>\n          <slot name=\"full-search\"></slot>\n          <slot></slot>\n        </host>\n      )\n    );\n  }\n}\n"],"mappings":"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"}