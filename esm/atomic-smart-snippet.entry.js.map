{"file":"atomic-smart-snippet.entry.js","mappings":"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","names":["buildSmartSnippet"],"sources":["src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss?tag=atomic-smart-snippet&encapsulation=shadow","src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\r\n","import {\r\n  buildSmartSnippet,\r\n  InlineLink,\r\n  SmartSnippet,\r\n  SmartSnippetState,\r\n} from '@coveo/headless';\r\nimport {Component, Prop, State, Element, Listen} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n  BindStateToController,\r\n} from '../../../../utils/initialization-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {getAttributesFromLinkSlot} from '../../../common/item-link/attributes-slot';\r\nimport {SmartSnippetCommon} from '../../../common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.\r\n *\r\n * You can style the snippet by inserting a template element as follows:\r\n * ```html\r\n * <atomic-smart-snippet>\r\n *   <template>\r\n *     <style>\r\n *       b {\r\n *         color: blue;\r\n *       }\r\n *     </style>\r\n *   </template>\r\n * </atomic-smart-snippet>\r\n * ```\r\n *\r\n * @slot source-anchor-attributes - Lets you pass [attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) down to anchor elements, overriding other attributes.\r\n * To be used exclusively in anchor elements, such as: `<a slot=\"source-anchor-attributes\" target=\"_blank\"></a>`.\r\n *\r\n * @part smart-snippet - The wrapper of the entire smart snippet.\r\n * @part question - The header displaying the question that is answered by the found document excerpt.\r\n * @part answer - The container displaying the full document excerpt.\r\n * @part truncated-answer - The container displaying only part of the answer.\r\n * @part show-more-button - The show more button.\r\n * @part show-less-button - The show less button.\r\n * @part body - The body of the smart snippet, containing the truncated answer and the show more or show less button.\r\n * @part footer - The footer underneath the answer.\r\n * @part source-url - The URL to the document the excerpt is from.\r\n * @part source-title - The title of the document the excerpt is from.\r\n * @part feedback-banner - The feedback banner underneath the source.\r\n * @part feedback-inquiry-and-buttons - A wrapper around the feedback inquiry and the feedback buttons.\r\n * @part feedback-inquiry - The message asking the end user to provide feedback on whether the excerpt was useful.\r\n * @part feedback-buttons - The wrapper around the buttons after the inquiry.\r\n * @part feedback-like-button - The button allowing the end user to signal that the excerpt was useful.\r\n * @part feedback-dislike-button - The button allowing the end user to signal that the excerpt wasn't useful.\r\n * @part feedback-thank-you-container - The wrapper around the 'thank you' message and feedback button.\r\n * @part feedback-thank-you - The message thanking the end user for providing feedback.\r\n * @part feedback-explain-why-button - The button a user can press to provide detailed feedback.\r\n */\r\n@Component({\r\n  tag: 'atomic-smart-snippet',\r\n  styleUrl: 'atomic-smart-snippet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicSmartSnippet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public smartSnippet!: SmartSnippet;\r\n  @BindStateToController('smartSnippet')\r\n  @State()\r\n  public smartSnippetState!: SmartSnippetState;\r\n  public error!: Error;\r\n  @Element() public host!: HTMLElement;\r\n  private id = randomID();\r\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\r\n\r\n  private smartSnippetCommon!: SmartSnippetCommon;\r\n\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n\r\n  /**\r\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\r\n   */\r\n  @Prop({reflect: true}) maximumHeight = 250;\r\n  /**\r\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\r\n   */\r\n  @Prop({reflect: true}) collapsedHeight = 180;\r\n\r\n  /**\r\n   * Sets the style of the snippet.\r\n   *\r\n   * Example:\r\n   * ```ts\r\n   * smartSnippet.snippetStyle = `\r\n   *   b {\r\n   *     color: blue;\r\n   *   }\r\n   * `;\r\n   * ```\r\n   */\r\n  @Prop({reflect: true}) snippetStyle?: string;\r\n\r\n  @State() feedbackSent = false;\r\n\r\n  @Prop({reflect: true}) public snippetMaximumHeight?: number;\r\n\r\n  @Prop({reflect: true}) public snippetCollapsedHeight?: number;\r\n\r\n  @Listen('selectInlineLink')\r\n  onSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.selectInlineLink(event.detail);\r\n  }\r\n\r\n  @Listen('beginDelayedSelectInlineLink')\r\n  onBeginDelayedSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.beginDelayedSelectInlineLink(event.detail);\r\n  }\r\n\r\n  @Listen('cancelPendingSelectInlineLink')\r\n  onCancelPendingSelectInlineLink(event: CustomEvent<InlineLink>) {\r\n    this.smartSnippet.cancelPendingSelectInlineLink(event.detail);\r\n  }\r\n\r\n  public initialize() {\r\n    this.smartSnippet = buildSmartSnippet(this.bindings.engine);\r\n    this.smartSnippetCommon = new SmartSnippetCommon({\r\n      id: this.id,\r\n      modalTagName: 'atomic-smart-snippet-feedback-modal',\r\n      getSourceAnchorAttributes: () =>\r\n        getAttributesFromLinkSlot(this.host, 'source-anchor-attributes'),\r\n      getHost: () => this.host,\r\n      getBindings: () => this.bindings,\r\n      getModalRef: () => this.modalRef,\r\n      getHeadingLevel: () => this.headingLevel,\r\n      getCollapsedHeight: () => this.collapsedHeight,\r\n      getMaximumHeight: () => this.maximumHeight,\r\n      getSmartSnippetState: () => this.smartSnippetState,\r\n      getSmartSnippet: () => this.smartSnippet,\r\n      getSnippetStyle: () => this.snippetStyle,\r\n      getFeedbackSent: () => this.feedbackSent,\r\n      getSnippetMaximumHeight: this.snippetMaximumHeight\r\n        ? () => this.snippetMaximumHeight!\r\n        : undefined,\r\n      getSnippetCollapsedHeight: this.snippetCollapsedHeight\r\n        ? () => this.snippetCollapsedHeight!\r\n        : undefined,\r\n      setModalRef: this.setModalRef.bind(this),\r\n      setFeedbackSent: this.setFeedbackSent.bind(this),\r\n    });\r\n    this.bindings.store.waitUntilAppLoaded(() =>\r\n      this.smartSnippetCommon.hideDuringRender(false)\r\n    );\r\n  }\r\n\r\n  private setModalRef(ref: HTMLElement) {\r\n    this.modalRef = ref as HTMLAtomicSmartSnippetFeedbackModalElement;\r\n  }\r\n\r\n  private setFeedbackSent(isSent: boolean) {\r\n    this.feedbackSent = isSent;\r\n  }\r\n\r\n  public componentWillUpdate() {\r\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\r\n      this.setFeedbackSent(false);\r\n    }\r\n  }\r\n\r\n  public componentDidRender() {\r\n    if (this.bindings.store.isAppLoaded()) {\r\n      this.smartSnippetCommon.hideDuringRender(false);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.smartSnippetCommon.render();\r\n  }\r\n}\r\n"],"version":3}