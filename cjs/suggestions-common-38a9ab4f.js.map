{"file":"suggestions-common-38a9ab4f.js","mappings":";;;;;AA2HA,MAAM,iBAAiB,GAAG;IACxB,mBAAmB;IACnB,2BAA2B;IAC3B,4BAA4B;CAC7B,CAAC;AAoDF;;;;;MAKa,iCAAiC,GAAG,CAI/C,KAA+D,EAC/D,OAAoB;IAEpB,OAAO,CAAC,aAAa,CACnBA,2BAAgB,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAC/D,CAAC;IAEF,IAAI,CAACC,aAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;QACnD,MAAM,IAAI,KAAK,CACb,QAAQ,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,gFAAgF,iBAAiB,CAAC,IAAI,CAC1I,IAAI,CACL,EAAE,CACJ,CAAC;KACH;AACH,EAAE;SAEc,iBAAiB,CAAC,EAA8B;IAC9D,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC;AACnB,CAAC;SAEe,eAAe,CAAC,EAA8B;IAC5D,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;AACpB;;;;;;","names":["buildCustomEvent","closest"],"sources":["src/components/common/suggestions/suggestions-common.ts"],"sourcesContent":["import {VNode} from '@stencil/core';\r\nimport {buildCustomEvent} from '../../../utils/event-utils';\r\nimport {closest} from '../../../utils/utils';\r\nimport {AnyBindings} from '../interface/bindings';\r\n\r\n/**\r\n * Element which will be rendered in the list of suggestions.\r\n */\r\nexport interface SearchBoxSuggestionElement {\r\n  /**\r\n   * Stable identity which enables Stencil to reuse DOM elements for better performance.\r\n   * The best way to pick a key is to use a string that uniquely identifies that list item among its siblings (often your data will already have IDs).\r\n   */\r\n  key: string;\r\n  /**\r\n   * Rendered content of the element.\r\n   */\r\n  content: Element | VNode;\r\n  /**\r\n   * Hook called when the suggestion is selected.\r\n   * @param e DOM event.\r\n   */\r\n  onSelect?(e: Event): void;\r\n  /**\r\n   * The query associated with the suggestion which will replace the query in the search box if the suggestion is selected.\r\n   */\r\n  query?: string;\r\n  /**\r\n   * For improved accessibility, set this property with additional information.\r\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label\r\n   */\r\n  ariaLabel?: string;\r\n  /**\r\n   * Adds a specific shadow part attribute that can be selected with the CSS ::part pseudo-element.\r\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/::part\r\n   */\r\n  part?: string;\r\n  /**\r\n   * Whether to hide the suggestion when it's the last one in the list.\r\n   */\r\n  hideIfLast?: boolean;\r\n}\r\n\r\n/**\r\n * Element which will be rendered in the list of suggestions.\r\n */\r\nexport interface SearchBoxSuggestionElement {\r\n  /**\r\n   * Stable identity which enables Stencil to reuse DOM elements for better performance.\r\n   * The best way to pick a key is to use a string that uniquely identifies that list item among its siblings (often your data will already have IDs).\r\n   */\r\n  key: string;\r\n  /**\r\n   * Rendered content of the element.\r\n   */\r\n  content: Element | VNode;\r\n  /**\r\n   * Hook called when the selection is selected.\r\n   * @param e DOM event.\r\n   */\r\n  onSelect?(e: Event): void;\r\n  /**\r\n   * The query associated with the suggestion which will replace the query in the search box if the suggestion is selected.\r\n   */\r\n  query?: string;\r\n  /**\r\n   * For improved accessibility, provide this property with additional information.\r\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label\r\n   */\r\n  ariaLabel?: string;\r\n  /**\r\n   * Adds a specific shadow part attribute that can be selected with the CSS ::part pseudo-element.\r\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/::part\r\n   */\r\n  part?: string;\r\n  /**\r\n   * Hide the suggestion if it's the last in the list.\r\n   */\r\n  hideIfLast?: boolean;\r\n}\r\n\r\n/**\r\n * List of suggestions that will be displayed along other lists (e.g recent queries) when the search box's input is selected.\r\n */\r\nexport interface SearchBoxSuggestions {\r\n  /**\r\n   * The search box will sort the position of suggestions using this value. The lowest value being first.\r\n   * By default, the DOM position will be used.\r\n   */\r\n  position: number;\r\n  /**\r\n   * Whether the suggestions should be listed in the right or left panel. By default, the suggestions are listed in the right panel.\r\n   */\r\n  panel?: 'left' | 'right';\r\n  /**\r\n   * Method that returns the list of elements which will be rendered in the list of suggestions.\r\n   */\r\n  renderItems(): SearchBoxSuggestionElement[];\r\n  /**\r\n   * Hook called when the user changes the search box's input value. This can lead to all the query suggestions being updated.\r\n   */\r\n  onInput?(): Promise<unknown> | void;\r\n  /**\r\n   * Hook called when the suggested query changes as a user traverses through the list of suggestions.\r\n   * This is used for instant results, which are rendered based on the current suggested query.\r\n   * @param q The new suggested query.\r\n   */\r\n  onSuggestedQueryChange?(q: string): Promise<unknown> | void;\r\n}\r\n\r\n/**\r\n * Event sent from the registered query suggestions to the parent search box.\r\n */\r\nexport type SearchBoxSuggestionsEvent<\r\n  SearchBoxController,\r\n  Bindings = AnyBindings,\r\n> = (\r\n  /**\r\n   * The bindings passed from the search box to the suggestions.\r\n   */\r\n  bindings: SearchBoxSuggestionsBindings<SearchBoxController, Bindings>\r\n) => SearchBoxSuggestions;\r\n\r\nconst searchBoxElements = [\r\n  'atomic-search-box',\r\n  'atomic-insight-search-box',\r\n  'atomic-commerce-search-box',\r\n];\r\n\r\n/**\r\n * The bindings passed from the search box to the suggestions.\r\n */\r\nexport type SearchBoxSuggestionsBindings<\r\n  SearchBoxController,\r\n  Bindings = AnyBindings,\r\n> = Bindings & {\r\n  /**\r\n   * The unique id of the search box.\r\n   */\r\n  id: string;\r\n  /**\r\n   * Whether the search box is [standalone](https://docs.coveo.com/en/atomic/latest/usage/ssb/).\r\n   */\r\n  isStandalone: boolean;\r\n  /**\r\n   * The search box headless controller.\r\n   */\r\n  searchBoxController: SearchBoxController;\r\n  /**\r\n   * The number of queries to display when the user interacts with the search box.\r\n   */\r\n  numberOfQueries: number;\r\n  /**\r\n   * Whether to clear all active query filters when the end user submits a new query from the search box.\r\n   */\r\n  clearFilters: boolean;\r\n  /**\r\n   * Retrieves the suggested query, meaning the query that would be sent if the search is executed.\r\n   * The suggested query changes as a user traverses through the list of suggestions.\r\n   */\r\n  suggestedQuery(): string;\r\n  /**\r\n   * Removes the current suggestions.\r\n   */\r\n  clearSuggestions(): void;\r\n  /**\r\n   * Triggers update & retrieval of all suggestions.\r\n   */\r\n  triggerSuggestions(): void;\r\n  /**\r\n   * Retrieves the current suggestions.\r\n   */\r\n  getSuggestions(): SearchBoxSuggestions[];\r\n  /**\r\n   * Retrieves the current suggestions elements.\r\n   */\r\n  getSuggestionElements(): SearchBoxSuggestionElement[];\r\n};\r\n\r\n/**\r\n * Dispatches an event which retrieves the `SearchBoxSuggestionsBindings` on a configured parent search box.\r\n * @param event Event sent from the registered query suggestions to the parent search box.\r\n * @param element Element on which to dispatch the event, which must be the child of a configured search box.\r\n */\r\nexport const dispatchSearchBoxSuggestionsEvent = <\r\n  SearchBoxController,\r\n  Bindings = AnyBindings,\r\n>(\r\n  event: SearchBoxSuggestionsEvent<SearchBoxController, Bindings>,\r\n  element: HTMLElement\r\n) => {\r\n  element.dispatchEvent(\r\n    buildCustomEvent('atomic/searchBoxSuggestion/register', event)\r\n  );\r\n\r\n  if (!closest(element, searchBoxElements.join(', '))) {\r\n    throw new Error(\r\n      `The \"${element.nodeName.toLowerCase()}\" component was not handled, as it is not a child of the following elements: ${searchBoxElements.join(\r\n        ', '\r\n      )}`\r\n    );\r\n  }\r\n};\r\n\r\nexport function elementHasNoQuery(el: SearchBoxSuggestionElement) {\r\n  return !el.query;\r\n}\r\n\r\nexport function elementHasQuery(el: SearchBoxSuggestionElement) {\r\n  return !!el.query;\r\n}\r\n"],"version":3}