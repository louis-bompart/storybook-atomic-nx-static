{"version":3,"names":["atomicNumericFacetCss","AtomicNumericFacetStyle0","AtomicNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","validateProps","computeFacetId","initializeFacetForInput","initializeFacetForRange","initializeFilter","initializeDependenciesManager","initializeSearchStatus","registerFacetToStore","disconnectedCallback","_a","dependenciesManager","stopWatching","searchStatus","buildSearchStatus","bindings","engine","withInput","facetForInput","buildNumericFacet","options","generateAutomaticRanges","facetId","field","Array","from","host","querySelectorAll","map","start","end","endInclusive","buildNumericRange","facetForRange","currentValues","length","filter","buildNumericFilter","buildFacetConditionsManager","_b","state","conditions","parseDependsOn","facetInfo","i18n","t","element","isHidden","store","registerFacet","format","value","formatHumanReadable","facetValue","logger","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","numericFacets","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadNumericFacetSetActions","deselectAllNumericFacetValues","render","searchStatusState","firstSearchExecuted","hasError","h","FacetGuard","key","enabled","hasResults","shouldRenderFacet","FacetContainer","FacetHeader","onClearFilters","focusAfterSearch","filterState","range","clear","_c","deselectAll","onToggleCollapse","headerRef","el","setTarget","shouldRenderValues","renderValues","shouldRenderInput","type","FacetPlaceholder","NumericFacetValuesContainer","valuesToRender","NumericFacetValueLink","onClick","toggleSingleSelect","toggleSelect","values","hasInputRange","numberOfResults","shouldDisplayInputForFacetRange","facetValues","hasInput","get","randomID","_d","facetState","Schema","StringValue","constrainTo","validate","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.pcss?tag=atomic-numeric-facet&encapsulation=shadow","src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.tsx"],"sourcesContent":["@import '../../../common/facets/numeric-facet-common.pcss';\r\n","import {Schema, StringValue} from '@coveo/bueno';\r\nimport {\r\n  buildFacetConditionsManager,\r\n  FacetConditionsManager,\r\n  buildNumericFacet,\r\n  buildNumericFilter,\r\n  buildNumericRange,\r\n  buildSearchStatus,\r\n  CategoryFacetValueRequest,\r\n  FacetValueRequest,\r\n  loadNumericFacetSetActions,\r\n  NumericFacet,\r\n  NumericFacetState,\r\n  NumericFilter,\r\n  NumericFilterState,\r\n  RangeFacetRangeAlgorithm,\r\n  RangeFacetSortCriterion,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  NumericRangeRequest,\r\n} from '@coveo/headless';\r\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {randomID} from '../../../../utils/utils';\r\nimport {parseDependsOn} from '../../../common/facets/depends-on';\r\nimport {shouldDisplayInputForFacetRange} from '../../../common/facets/facet-common';\r\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\r\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\r\nimport {FacetGuard} from '../../../common/facets/facet-guard';\r\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\r\nimport {NumberInputType} from '../../../common/facets/facet-number-input/number-input-type';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {formatHumanReadable} from '../../../common/facets/numeric-facet/formatter';\r\nimport {NumericFacetValueLink} from '../../../common/facets/numeric-facet/value-link';\r\nimport {NumericFacetValuesContainer} from '../../../common/facets/numeric-facet/values-container';\r\nimport {\r\n  defaultNumberFormatter,\r\n  NumberFormatter,\r\n} from '../../../common/formats/format-common';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\nimport {initializePopover} from '../atomic-popover/popover-type';\r\n\r\n/**\r\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).\r\n * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.\r\n *\r\n * @part facet - The wrapper for the entire facet.\r\n * @part placeholder - The placeholder shown before the first search is executed.\r\n *\r\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\r\n * @part label-button-icon - The label button icon.\r\n * @part clear-button - The button that resets the actively selected facet values.\r\n * @part clear-button-icon - The clear button icon.\r\n *\r\n * @part values - The facet values container.\r\n * @part value-label - The facet value label, common for all displays.\r\n * @part value-count - The facet value count, common for all displays.\r\n *\r\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\r\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\r\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\r\n * @part value-link - The facet value when display is 'link'.\r\n * @part value-link-selected - The selected facet value when display is 'link'.\r\n\r\n * @part input-form - The form that comprises the labels, inputs, and 'apply' button for the custom numeric range.\r\n * @part label-start - The label for the starting value of the custom numeric range.\r\n * @part label-end - The label for the ending value of the custom numeric range.\r\n * @part input-start - The input for the starting value of the custom numeric range.\r\n * @part input-end - The input for the ending value of the custom numeric range.\r\n * @part input-apply-button - The apply button for the custom range.\r\n */\r\n@Component({\r\n  tag: 'atomic-numeric-facet',\r\n  styleUrl: './atomic-numeric-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicNumericFacet implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  public facetForRange?: NumericFacet;\r\n  public facetForInput?: NumericFacet;\r\n  public filter!: NumericFilter;\r\n  public searchStatus!: SearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n  private manualRanges: (NumericRangeRequest & {label?: string})[] = [];\r\n  private formatter: NumberFormatter = defaultNumberFormatter;\r\n  private dependenciesManager?: FacetConditionsManager;\r\n\r\n  @BindStateToController('facetForRange')\r\n  @State()\r\n  public facetState!: NumericFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: NumericFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n  @State() public error!: Error;\r\n  @BindStateToController('facetForInput')\r\n  @State()\r\n  public facetForInputState?: NumericFacetState;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the `atomic-breadbox` component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field!: string;\r\n  /**\r\n   * The number of values to request for this facet, when there are no manual ranges.\r\n   * If the number of values is 0, no ranges will be displayed.\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n  /**\r\n   * Whether this facet should contain an input allowing users to set custom ranges.\r\n   * Depending on the field, the input can allow either decimal or integer values.\r\n   */\r\n  @Prop({reflect: true}) public withInput?: NumberInputType;\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: RangeFacetSortCriterion =\r\n    'ascending';\r\n  /**\r\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\r\n   */\r\n  @Prop({reflect: true}) public rangeAlgorithm: RangeFacetRangeAlgorithm =\r\n    'equiprobable';\r\n  /**\r\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\r\n   * Possible values are 'checkbox' and 'link'.\r\n   */\r\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\r\n    'checkbox';\r\n  /**\r\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * @example\r\n   * ```html\r\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-numeric-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-numeric-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-numeric-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-numeric-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.computeFacetId();\r\n    this.initializeFacetForInput();\r\n    this.initializeFacetForRange();\r\n    this.initializeFilter();\r\n    this.initializeDependenciesManager();\r\n    this.initializeSearchStatus();\r\n    this.registerFacetToStore();\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.dependenciesManager?.stopWatching();\r\n  }\r\n\r\n  private initializeSearchStatus() {\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  private initializeFacetForInput() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n    this.facetForInput = buildNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        facetId: `${this.facetId}_input_range`,\r\n        field: this.field,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForInput;\r\n  }\r\n\r\n  private initializeFacetForRange() {\r\n    if (this.numberOfValues <= 0) {\r\n      return;\r\n    }\r\n\r\n    this.manualRanges = Array.from(\r\n      this.host.querySelectorAll('atomic-numeric-range')\r\n    ).map(({start, end, endInclusive, label}) => ({\r\n      ...buildNumericRange({start, end, endInclusive}),\r\n      label,\r\n    }));\r\n\r\n    this.facetForRange = buildNumericFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        numberOfValues: this.numberOfValues,\r\n        sortCriteria: this.sortCriteria,\r\n        rangeAlgorithm: this.rangeAlgorithm,\r\n        currentValues: this.manualRanges,\r\n        generateAutomaticRanges: !this.manualRanges.length,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    if (!this.withInput) {\r\n      return;\r\n    }\r\n    this.filter = buildNumericFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n  }\r\n\r\n  private initializeDependenciesManager() {\r\n    this.dependenciesManager = buildFacetConditionsManager(\r\n      this.bindings.engine,\r\n      {\r\n        facetId:\r\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\r\n        conditions: parseDependsOn<\r\n          FacetValueRequest | CategoryFacetValueRequest\r\n        >(this.dependsOn),\r\n      }\r\n    );\r\n  }\r\n\r\n  private registerFacetToStore() {\r\n    const facetInfo: FacetInfo = {\r\n      label: () => this.bindings.i18n.t(this.label),\r\n      facetId: this.facetId!,\r\n      element: this.host,\r\n      isHidden: () => this.isHidden,\r\n    };\r\n\r\n    this.bindings.store.registerFacet('numericFacets', {\r\n      ...facetInfo,\r\n      format: (value) =>\r\n        formatHumanReadable({\r\n          facetValue: value,\r\n          logger: this.bindings.engine.logger,\r\n          i18n: this.bindings.i18n,\r\n          field: this.field,\r\n          manualRanges: this.manualRanges,\r\n          formatter: this.formatter,\r\n        }),\r\n    });\r\n\r\n    initializePopover(this.host, {\r\n      ...facetInfo,\r\n      hasValues: () => this.hasValues,\r\n      numberOfActiveValues: () => this.numberOfSelectedValues,\r\n    });\r\n\r\n    if (this.filter) {\r\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\r\n        this.bindings.store.state.numericFacets[this.facetId!];\r\n    }\r\n  }\r\n\r\n  @Listen('atomic/numberFormat')\r\n  public setFormat(event: CustomEvent<NumberFormatter>) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.formatter = event.detail;\r\n  }\r\n\r\n  @Listen('atomic/numberInputApply')\r\n  public applyNumberInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadNumericFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllNumericFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      searchStatusState: {firstSearchExecuted, hasError},\r\n      bindings: {i18n},\r\n    } = this;\r\n    return (\r\n      <FacetGuard\r\n        enabled={this.enabled}\r\n        firstSearchExecuted={firstSearchExecuted}\r\n        hasError={hasError}\r\n        hasResults={this.shouldRenderFacet}\r\n      >\r\n        {firstSearchExecuted ? (\r\n          <FacetContainer>\r\n            <FacetHeader\r\n              i18n={i18n}\r\n              label={this.label}\r\n              onClearFilters={() => {\r\n                this.focusTarget.focusAfterSearch();\r\n                if (this.filterState?.range) {\r\n                  this.filter?.clear();\r\n                  return;\r\n                }\r\n                this.facetForRange?.deselectAll();\r\n              }}\r\n              numberOfActiveValues={this.numberOfSelectedValues}\r\n              isCollapsed={this.isCollapsed}\r\n              headingLevel={this.headingLevel}\r\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\r\n              headerRef={(el) => this.focusTarget.setTarget(el)}\r\n            />\r\n            {!this.isCollapsed && [\r\n              this.shouldRenderValues && this.renderValues(),\r\n              this.shouldRenderInput && (\r\n                <atomic-facet-number-input\r\n                  type={this.withInput!}\r\n                  bindings={this.bindings}\r\n                  label={this.label}\r\n                  filter={this.filter!}\r\n                  filterState={this.filter!.state}\r\n                ></atomic-facet-number-input>\r\n              ),\r\n            ]}\r\n          </FacetContainer>\r\n        ) : (\r\n          <FacetPlaceholder\r\n            isCollapsed={this.isCollapsed}\r\n            numberOfValues={this.numberOfValues}\r\n          />\r\n        )}\r\n      </FacetGuard>\r\n    );\r\n  }\r\n\r\n  private renderValues() {\r\n    const {\r\n      displayValuesAs,\r\n      field,\r\n      manualRanges,\r\n      label,\r\n      bindings: {\r\n        i18n,\r\n        engine: {logger},\r\n      },\r\n      formatter,\r\n    } = this;\r\n\r\n    return (\r\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\r\n        {this.valuesToRender.map((value) => (\r\n          <NumericFacetValueLink\r\n            formatter={formatter}\r\n            displayValuesAs={displayValuesAs}\r\n            facetValue={value}\r\n            field={field}\r\n            i18n={i18n}\r\n            logger={logger}\r\n            manualRanges={manualRanges}\r\n            onClick={() =>\r\n              this.displayValuesAs === 'link'\r\n                ? this.facetForRange!.toggleSingleSelect(value)\r\n                : this.facetForRange!.toggleSelect(value)\r\n            }\r\n          />\r\n        ))}\r\n      </NumericFacetValuesContainer>\r\n    );\r\n  }\r\n\r\n  private get numberOfSelectedValues() {\r\n    if (this.filter?.state.range) {\r\n      return 1;\r\n    }\r\n\r\n    return (\r\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\r\n        .length || 0\r\n    );\r\n  }\r\n\r\n  private get shouldRenderValues() {\r\n    return (\r\n      !this.hasInputRange &&\r\n      this.numberOfValues > 0 &&\r\n      !!this.valuesToRender.length\r\n    );\r\n  }\r\n\r\n  private get hasInputRange() {\r\n    return !!this.filter?.state.range;\r\n  }\r\n\r\n  private get valuesToRender() {\r\n    return (\r\n      this.facetForRange?.state.values.filter(\r\n        (value) => value.numberOfResults || value.state !== 'idle'\r\n      ) || []\r\n    );\r\n  }\r\n\r\n  private get shouldRenderInput() {\r\n    return shouldDisplayInputForFacetRange({\r\n      hasInputRange: this.hasInputRange,\r\n      searchStatusState: this.searchStatusState,\r\n      facetValues: this.facetForInput?.state.values || [],\r\n      hasInput: !!this.withInput,\r\n    });\r\n  }\r\n\r\n  private computeFacetId() {\r\n    if (this.facetId) {\r\n      return;\r\n    }\r\n\r\n    if (this.bindings.store.get('numericFacets')[this.field]) {\r\n      this.facetId = randomID(`${this.field}_`);\r\n    }\r\n\r\n    this.facetId = this.field;\r\n  }\r\n\r\n  private get enabled() {\r\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\r\n  }\r\n\r\n  private get isHidden() {\r\n    return !this.shouldRenderFacet || !this.enabled;\r\n  }\r\n\r\n  private get shouldRenderFacet() {\r\n    return this.shouldRenderInput || this.shouldRenderValues;\r\n  }\r\n\r\n  private get hasValues() {\r\n    if (this.facetForInput?.state.values.length) {\r\n      return true;\r\n    }\r\n\r\n    return !!this.valuesToRender.length;\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\r\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\r\n    }).validate({\r\n      displayValuesAs: this.displayValuesAs,\r\n      withInput: this.withInput,\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"}