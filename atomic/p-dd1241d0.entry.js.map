{"version":3,"names":["atomicInsightTimeframeFacetCss","AtomicInsightTimeframeFacetStyle0","AtomicInsightTimeframeFacet","this","label","field","withDatePicker","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","sortCriteria","initialize","timeframeFacetCommon","TimeframeFacetCommon","facetId","host","bindings","setFacetId","id","buildDependenciesManager","buildInsightFacetConditionsManager","engine","_b","_a","facetForDateRange","state","filter","conditions","parseDependsOn","buildDateRange","buildInsightDateRange","getSearchStatusState","searchStatusState","deserializeRelativeDate","deserializeInsightRelativeDate","initializeFacetForDatePicker","initializeFacetForDateRange","values","initializeFilter","searchStatus","buildInsightSearchStatus","focusTarget","headerFocus","FocusTargetController","disconnectedCallback","facetForDatePicker","buildInsightDateFacet","options","numberOfValues","generateAutomaticRanges","currentValues","buildInsightDateFilter","applyDateInput","dispatch","loadInsightDateFacetSetActions","deselectAllDateFacetValues","render","h","FacetPlaceholder","hasError","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.pcss?tag=atomic-insight-timeframe-facet&encapsulation=shadow","src/components/insight/atomic-insight-timeframe-facet/atomic-insight-timeframe-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\r\n","import {Component, Element, h, Listen, Prop, State} from '@stencil/core';\r\nimport {\r\n  buildInsightDateFacet,\r\n  buildInsightDateFilter,\r\n  buildInsightDateRange,\r\n  buildInsightFacetConditionsManager,\r\n  buildInsightSearchStatus,\r\n  deserializeInsightRelativeDate,\r\n  InsightDateFacet,\r\n  InsightDateFacetState,\r\n  InsightDateFilter,\r\n  InsightDateFilterState,\r\n  InsightDateRangeRequest,\r\n  InsightSearchStatus,\r\n  InsightSearchStatusState,\r\n  loadInsightDateFacetSetActions,\r\n  InsightRangeFacetSortCriterion,\r\n  InsightFacetValueRequest,\r\n  InsightCategoryFacetValueRequest,\r\n} from '..';\r\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {MapProp} from '../../../utils/props-utils';\r\nimport {parseDependsOn} from '../../common/facets/depends-on';\r\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {TimeframeFacetCommon} from '../../common/facets/timeframe-facet-common';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-timeframe-facet',\r\n  styleUrl: './atomic-insight-timeframe-facet.pcss',\r\n  shadow: true,\r\n})\r\nexport class AtomicInsightTimeframeFacet\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  public facetForDateRange?: InsightDateFacet;\r\n  public facetForDatePicker?: InsightDateFacet;\r\n\r\n  private timeframeFacetCommon?: TimeframeFacetCommon;\r\n  public filter?: InsightDateFilter;\r\n  public searchStatus!: InsightSearchStatus;\r\n  @Element() private host!: HTMLElement;\r\n\r\n  @BindStateToController('facetForDateRange')\r\n  @State()\r\n  public facetState!: InsightDateFacetState;\r\n  @BindStateToController('facetForDatePicker')\r\n  @State()\r\n  public facetForDatePickerState?: InsightDateFacetState;\r\n  @BindStateToController('filter')\r\n  @State()\r\n  public filterState?: InsightDateFilterState;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: InsightSearchStatusState;\r\n  @State() public error!: Error;\r\n\r\n  /**\r\n   * Specifies a unique identifier for the facet.\r\n   */\r\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\r\n  /**\r\n   * The non-localized label for the facet.\r\n   * Used in the atomic-breadbox component through the bindings store.\r\n   */\r\n  @Prop({reflect: true}) public label = 'no-label';\r\n  /**\r\n   * The field whose values you want to display in the facet.\r\n   */\r\n  @Prop({reflect: true}) public field = 'date';\r\n  /**\r\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\r\n   */\r\n  @Prop({reflect: true}) public withDatePicker = false;\r\n  /**\r\n   * Specifies if the facet is collapsed.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\r\n  /**\r\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\r\n   */\r\n  @Prop({reflect: true}) public headingLevel = 0;\r\n  /**\r\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\r\n   */\r\n  @Prop({reflect: true}) public filterFacetCount = true;\r\n  /**\r\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\r\n   * Note: A high injectionDepth may negatively impact the facet request performance.\r\n   * Minimum: `0`\r\n   * Default: `1000`\r\n   */\r\n  @Prop({reflect: true}) public injectionDepth = 1000;\r\n\r\n  /**\r\n   * The required facets and values for this facet to be displayed.\r\n   * Examples:\r\n   * ```html\r\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\r\n   *\r\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-timeframe-facet\r\n   *   depends-on-abc\r\n   *   ...\r\n   * ></atomic-insight-timeframe-facet>\r\n   *\r\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\r\n   * <atomic-insight-timeframe-facet\r\n   *   depends-on-abc=\"doc\"\r\n   *   ...\r\n   * ></atomic-insight-timeframe-facet>\r\n   * ```\r\n   */\r\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\r\n\r\n  /**\r\n   * The sort criterion to apply to the returned facet values.\r\n   * Possible values are 'ascending' and 'descending'.\r\n   */\r\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\r\n    'descending';\r\n\r\n  private headerFocus?: FocusTargetController;\r\n\r\n  public initialize() {\r\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\r\n      facetId: this.facetId,\r\n      host: this.host,\r\n      bindings: this.bindings,\r\n      label: this.label,\r\n      field: this.field,\r\n      headingLevel: this.headingLevel,\r\n      dependsOn: this.dependsOn,\r\n      withDatePicker: this.withDatePicker,\r\n      setFacetId: (id: string) => (this.facetId = id),\r\n      buildDependenciesManager: () =>\r\n        buildInsightFacetConditionsManager(this.bindings.engine, {\r\n          facetId:\r\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\r\n          conditions: parseDependsOn<\r\n            InsightFacetValueRequest | InsightCategoryFacetValueRequest\r\n          >(this.dependsOn),\r\n        }),\r\n      buildDateRange: buildInsightDateRange,\r\n      getSearchStatusState: () => this.searchStatusState,\r\n      deserializeRelativeDate: deserializeInsightRelativeDate,\r\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\r\n      initializeFacetForDateRange: (values: InsightDateRangeRequest[]) =>\r\n        this.initializeFacetForDateRange(values),\r\n      initializeFilter: () => this.initializeFilter(),\r\n      sortCriteria: this.sortCriteria,\r\n    });\r\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\r\n  }\r\n\r\n  private get focusTarget(): FocusTargetController {\r\n    if (!this.headerFocus) {\r\n      this.headerFocus = new FocusTargetController(this);\r\n    }\r\n    return this.headerFocus;\r\n  }\r\n\r\n  public disconnectedCallback() {\r\n    this.timeframeFacetCommon?.disconnectedCallback();\r\n  }\r\n\r\n  private initializeFacetForDatePicker() {\r\n    this.facetForDatePicker = buildInsightDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input_range`,\r\n        numberOfValues: 1,\r\n        generateAutomaticRanges: true,\r\n        field: this.field,\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n    return this.facetForDatePicker;\r\n  }\r\n\r\n  private initializeFacetForDateRange(values: InsightDateRangeRequest[]) {\r\n    this.facetForDateRange = buildInsightDateFacet(this.bindings.engine, {\r\n      options: {\r\n        facetId: this.facetId,\r\n        field: this.field,\r\n        currentValues: values,\r\n        generateAutomaticRanges: false,\r\n        sortCriteria: 'descending',\r\n        filterFacetCount: this.filterFacetCount,\r\n        injectionDepth: this.injectionDepth,\r\n      },\r\n    });\r\n\r\n    return this.facetForDateRange;\r\n  }\r\n\r\n  private initializeFilter() {\r\n    this.filter = buildInsightDateFilter(this.bindings.engine, {\r\n      options: {\r\n        facetId: `${this.facetId}_input`,\r\n        field: this.field,\r\n      },\r\n    });\r\n\r\n    return this.filter;\r\n  }\r\n\r\n  @Listen('atomic/dateInputApply')\r\n  public applyDateInput() {\r\n    this.facetId &&\r\n      this.bindings.engine.dispatch(\r\n        loadInsightDateFacetSetActions(\r\n          this.bindings.engine\r\n        ).deselectAllDateFacetValues(this.facetId)\r\n      );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.timeframeFacetCommon) {\r\n      return (\r\n        <FacetPlaceholder\r\n          numberOfValues={5}\r\n          isCollapsed={this.isCollapsed}\r\n        ></FacetPlaceholder>\r\n      );\r\n    }\r\n    return this.timeframeFacetCommon.render({\r\n      hasError: this.searchStatusState.hasError,\r\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\r\n      isCollapsed: this.isCollapsed,\r\n      headerFocus: this.focusTarget,\r\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\r\n    });\r\n  }\r\n}\r\n"],"mappings":"02BAAA,MAAMA,EAAiC,u3vCACvC,MAAAC,EAAeD,E,iXCuCFE,EAA2B,M,yBAkCRC,KAAAC,MAAQ,WAIRD,KAAAE,MAAQ,OAIRF,KAAAG,eAAiB,MAIFH,KAAAI,YAAc,MAI7BJ,KAAAK,aAAe,EAIfL,KAAAM,iBAAmB,KAOnBN,KAAAO,eAAiB,IAqBrBP,KAAAQ,UAAoC,GAMhCR,KAAAS,aAC5B,a,oLAvDoC,W,WAIA,O,oBAIS,M,iBAIY,M,kBAId,E,sBAII,K,oBAOF,I,eAqBe,G,kBAO5D,Y,CAIK,UAAAC,GACLV,KAAKW,qBAAuB,IAAIC,EAAqB,CACnDC,QAASb,KAAKa,QACdC,KAAMd,KAAKc,KACXC,SAAUf,KAAKe,SACfd,MAAOD,KAAKC,MACZC,MAAOF,KAAKE,MACZG,aAAcL,KAAKK,aACnBG,UAAWR,KAAKQ,UAChBL,eAAgBH,KAAKG,eACrBa,WAAaC,GAAgBjB,KAAKa,QAAUI,EAC5CC,yBAA0B,K,QACxB,OAAAC,EAAmCnB,KAAKe,SAASK,OAAQ,CACvDP,SACEQ,GAAAC,EAAAtB,KAAKuB,qBAAiB,MAAAD,SAAA,SAAAA,EAAEE,MAAMX,WAAO,MAAAQ,SAAA,EAAAA,EAAIrB,KAAKyB,OAAQD,MAAMX,QAC9Da,WAAYC,EAEV3B,KAAKQ,YACP,EACJoB,eAAgBC,EAChBC,qBAAsB,IAAM9B,KAAK+B,kBACjCC,wBAAyBC,EACzBC,6BAA8B,IAAMlC,KAAKkC,+BACzCC,4BAA8BC,GAC5BpC,KAAKmC,4BAA4BC,GACnCC,iBAAkB,IAAMrC,KAAKqC,mBAC7B5B,aAAcT,KAAKS,eAErBT,KAAKsC,aAAeC,EAAyBvC,KAAKe,SAASK,O,CAG7D,eAAYoB,GACV,IAAKxC,KAAKyC,YAAa,CACrBzC,KAAKyC,YAAc,IAAIC,EAAsB1C,K,CAE/C,OAAOA,KAAKyC,W,CAGP,oBAAAE,G,OACLrB,EAAAtB,KAAKW,wBAAoB,MAAAW,SAAA,SAAAA,EAAEqB,sB,CAGrB,4BAAAT,GACNlC,KAAK4C,mBAAqBC,EAAsB7C,KAAKe,SAASK,OAAQ,CACpE0B,QAAS,CACPjC,QAAS,GAAGb,KAAKa,sBACjBkC,eAAgB,EAChBC,wBAAyB,KACzB9C,MAAOF,KAAKE,MACZI,iBAAkBN,KAAKM,iBACvBC,eAAgBP,KAAKO,kBAGzB,OAAOP,KAAK4C,kB,CAGN,2BAAAT,CAA4BC,GAClCpC,KAAKuB,kBAAoBsB,EAAsB7C,KAAKe,SAASK,OAAQ,CACnE0B,QAAS,CACPjC,QAASb,KAAKa,QACdX,MAAOF,KAAKE,MACZ+C,cAAeb,EACfY,wBAAyB,MACzBvC,aAAc,aACdH,iBAAkBN,KAAKM,iBACvBC,eAAgBP,KAAKO,kBAIzB,OAAOP,KAAKuB,iB,CAGN,gBAAAc,GACNrC,KAAKyB,OAASyB,EAAuBlD,KAAKe,SAASK,OAAQ,CACzD0B,QAAS,CACPjC,QAAS,GAAGb,KAAKa,gBACjBX,MAAOF,KAAKE,SAIhB,OAAOF,KAAKyB,M,CAIP,cAAA0B,GACLnD,KAAKa,SACHb,KAAKe,SAASK,OAAOgC,SACnBC,EACErD,KAAKe,SAASK,QACdkC,2BAA2BtD,KAAKa,S,CAIjC,MAAA0C,GACL,IAAKvD,KAAKW,qBAAsB,CAC9B,OACE6C,EAACC,EAAgB,CACfV,eAAgB,EAChB3C,YAAaJ,KAAKI,a,CAIxB,OAAOJ,KAAKW,qBAAqB4C,OAAO,CACtCG,SAAU1D,KAAK+B,kBAAkB2B,SACjCC,oBAAqB3D,KAAK+B,kBAAkB4B,oBAC5CvD,YAAaJ,KAAKI,YAClBqC,YAAazC,KAAKwC,YAClBoB,iBAAkB,IAAO5D,KAAKI,aAAeJ,KAAKI,a,6BArMzByD,EAAA,CAA5BC,K,+BAWMD,EAAA,CAFNE,EAAsB,sB,iCAKhBF,EAAA,CAFNE,EAAsB,uB,8CAKhBF,EAAA,CAFNE,EAAsB,W,kCAKhBF,EAAA,CAFNE,EAAsB,iB,wCA6DGF,EAAA,CAAzBG,K"}