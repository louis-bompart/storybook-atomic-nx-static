{"version":3,"names":["tabsSelector","refineModalSelector","searchBoxSelector","toggleSelectors","smartSnippetSelectors","generatedAnswerSelector","buildInsightLayout","element","widget","id","layoutSelector","hasTabs","Boolean","_a","findSection","querySelector","interfaceStyle","search","sectionSelector","map","toggleSelector","facets","results","join","filter","declaration","AtomicInsightLayout","this","updateStyles","styleTag","innerHTML","host","makeStyleTag","bindings","createStyleElement","appendChild","componentDidLoad","randomID","__decorate","InitializeBindings"],"sources":["src/components/insight/atomic-insight-layout/insight-layout.ts","src/components/insight/atomic-insight-layout/atomic-insight-layout.tsx"],"sourcesContent":["import {\r\n  sectionSelector,\r\n  findSection,\r\n} from '../../common/atomic-layout-section/sections';\r\n\r\nconst tabsSelector = 'atomic-insight-tabs';\r\nconst refineModalSelector = 'atomic-insight-refine-modal';\r\nconst searchBoxSelector = 'atomic-insight-search-box';\r\nconst toggleSelectors = [\r\n  'atomic-insight-refine-toggle',\r\n  'atomic-insight-edit-toggle',\r\n  'atomic-insight-history-toggle',\r\n];\r\nconst smartSnippetSelectors = [\r\n  'atomic-insight-smart-snippet-suggestions',\r\n  'atomic-insight-smart-snippet',\r\n];\r\nconst generatedAnswerSelector = 'atomic-insight-generated-answer';\r\n\r\nexport function buildInsightLayout(element: HTMLElement, widget: boolean) {\r\n  const id = element.id;\r\n  const layoutSelector = `atomic-insight-layout#${id}`;\r\n\r\n  const hasTabs = Boolean(\r\n    findSection(element, 'search')?.querySelector(tabsSelector)\r\n  );\r\n\r\n  const interfaceStyle = widget\r\n    ? `\r\n  ${layoutSelector} {\r\n    display: grid;\r\n    grid-template-rows: auto auto 8fr 1fr;\r\n    max-height: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  ${layoutSelector} ${refineModalSelector} {\r\n    grid-row-start: 5;\r\n  }`\r\n    : '';\r\n\r\n  const search = `${sectionSelector('search')} {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      grid-gap: 0.5rem;\r\n      background: var(--atomic-neutral-light);\r\n      padding-top: 1.5rem;\r\n      padding-left: 1.5rem;\r\n      padding-right: 1.5rem;\r\n      box-sizing: border-box;\r\n      min-width: 0;\r\n      ${!hasTabs ? 'padding-bottom: 1.5rem;' : ''}\r\n    }\r\n\r\n    ${sectionSelector('search')} ${searchBoxSelector} {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    ${toggleSelectors.map(\r\n      (toggleSelector) => `${sectionSelector('search')} ${toggleSelector} {\r\n      flex-shrink: 0;\r\n    }`\r\n    )}\r\n\r\n    ${sectionSelector('search')} ${tabsSelector} {\r\n      width: 100%;\r\n    }\r\n    `;\r\n\r\n  const facets = `${sectionSelector('facets')} {\r\n      display: none;\r\n    }\r\n    `;\r\n\r\n  const results = `\r\n    ${sectionSelector('results')} {\r\n      overflow: auto;\r\n    }\r\n\r\n    ${sectionSelector('results')} ${smartSnippetSelectors.join(',')} {\r\n      padding: 1.5rem 1.5rem 0px;\r\n    }\r\n\r\n    ${sectionSelector('results')} ${generatedAnswerSelector} {\r\n      margin-left: 1.5rem;\r\n      margin-right: 1.5rem;\r\n    }\r\n    `;\r\n\r\n  return [interfaceStyle, search, facets, results]\r\n    .filter((declaration) => declaration !== '')\r\n    .join('\\n\\n');\r\n}\r\n","import {Component, Element, Prop, Watch} from '@stencil/core';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {randomID} from '../../../utils/utils';\r\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\r\nimport {buildInsightLayout} from './insight-layout';\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-layout',\r\n  shadow: false,\r\n})\r\nexport class AtomicInsightLayout\r\n  implements InitializableComponent<InsightBindings>\r\n{\r\n  public error!: Error;\r\n  private styleTag?: HTMLStyleElement;\r\n  @Element() private host!: HTMLElement;\r\n  /**\r\n   * Whether the interface should be shown in widget format.\r\n   */\r\n  @Prop({reflect: true, mutable: true}) public widget = false;\r\n  @InitializeBindings() public bindings!: InsightBindings;\r\n  @Watch('widget')\r\n  public updateStyles() {\r\n    if (this.styleTag) {\r\n      this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\r\n    } else {\r\n      this.makeStyleTag();\r\n    }\r\n  }\r\n\r\n  private makeStyleTag() {\r\n    this.styleTag = this.bindings.createStyleElement();\r\n    this.styleTag.innerHTML = buildInsightLayout(this.host, this.widget);\r\n    this.host.appendChild(this.styleTag);\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    const id = this.host.id || randomID('atomic-insight-layout-');\r\n    this.host.id = id;\r\n\r\n    this.makeStyleTag();\r\n  }\r\n}\r\n"],"mappings":"8MAKA,MAAMA,EAAe,sBACrB,MAAMC,EAAsB,8BAC5B,MAAMC,EAAoB,4BAC1B,MAAMC,EAAkB,CACtB,+BACA,6BACA,iCAEF,MAAMC,EAAwB,CAC5B,2CACA,gCAEF,MAAMC,EAA0B,kC,SAEhBC,EAAmBC,EAAsBC,G,MACvD,MAAMC,EAAKF,EAAQE,GACnB,MAAMC,EAAiB,yBAAyBD,IAEhD,MAAME,EAAUC,SACdC,EAAAC,EAAYP,EAAS,aAAS,MAAAM,SAAA,SAAAA,EAAEE,cAAcf,IAGhD,MAAMgB,EAAiBR,EACnB,OACFE,mIAMAA,KAAkBT,mCAGhB,GAEJ,MAAMgB,EAAS,GAAGC,EAAgB,6SAW3BP,EAAU,0BAA4B,oBAGzCO,EAAgB,aAAahB,0CAI7BC,EAAgBgB,KACfC,GAAmB,GAAGF,EAAgB,aAAaE,gDAKpDF,EAAgB,aAAalB,uCAKjC,MAAMqB,EAAS,GAAGH,EAAgB,iDAKlC,MAAMI,EAAU,SACZJ,EAAgB,qDAIhBA,EAAgB,cAAcd,EAAsBmB,KAAK,2DAIzDL,EAAgB,cAAcb,4EAMlC,MAAO,CAACW,EAAgBC,EAAQI,EAAQC,GACrCE,QAAQC,GAAgBA,IAAgB,KACxCF,KAAK,OACV,C,iXC5EaG,EAAmB,M,yBASeC,KAAAnB,OAAS,M,YAAA,K,CAG/C,YAAAoB,GACL,GAAID,KAAKE,SAAU,CACjBF,KAAKE,SAASC,UAAYxB,EAAmBqB,KAAKI,KAAMJ,KAAKnB,O,KACxD,CACLmB,KAAKK,c,EAID,YAAAA,GACNL,KAAKE,SAAWF,KAAKM,SAASC,qBAC9BP,KAAKE,SAASC,UAAYxB,EAAmBqB,KAAKI,KAAMJ,KAAKnB,QAC7DmB,KAAKI,KAAKI,YAAYR,KAAKE,S,CAGtB,gBAAAO,GACL,MAAM3B,EAAKkB,KAAKI,KAAKtB,IAAM4B,EAAS,0BACpCV,KAAKI,KAAKtB,GAAKA,EAEfkB,KAAKK,c,mFApBsBM,EAAA,CAA5BC,K"}