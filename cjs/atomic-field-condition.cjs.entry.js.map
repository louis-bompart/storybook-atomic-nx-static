{"file":"atomic-field-condition.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,wCAAwC,CAAC;AACzE,mCAAe,uBAAuB;;;;;;;;;;;;MCoBzB,oBAAoB;;;QAYD,cAAS,GAA6B,EAAE,CAAC;QAEzC,iBAAY,GAA6B,EAAE,CAAC;QAElE,eAAU,GAA8B,EAAE,CAAC;QAC3C,oBAAe,GAAG,KAAK,CAAC;;;;IAIzB,iBAAiB;QACtB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,CAAC,IAAI,CAClBA,eAAsB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CACvD,CAAC;SACH;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAClBA,eAAsB,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAC1D,CAAC;SACH;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAClB,GAAGC,wCAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAC1D,CAAC;KACH;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;YACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,OAAO,EAAE,CAAC;SACX;QAED,OAAOC,qBAAQ,CAAC;KACjB;IAEM,gBAAgB;QACrB,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KAC5C;;;AAxC6B;IAA7BC,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;uDAA0C;AAEzC;IAA7BA,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;0DAA6C;AAKjD;IAAxBC,sCAAa,EAAE;oDAAyB;;;;;","names":["ResultTemplatesHelpers","makeMatchConditions","h","MapProp","ResultContext"],"sources":["src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.pcss?tag=atomic-field-condition","src/components/search/result-template-components/atomic-field-condition/atomic-field-condition.tsx"],"sourcesContent":["atomic-field-condition {\r\n  max-width: 100%;\r\n}\r\n","import {\r\n  Result,\r\n  ResultTemplateCondition,\r\n  ResultTemplatesHelpers,\r\n} from '@coveo/headless';\r\nimport {Component, Prop, h, Element} from '@stencil/core';\r\nimport {MapProp} from '../../../../utils/props-utils';\r\nimport {makeMatchConditions} from '../../../common/result-templates/result-template-common';\r\nimport {ResultContext} from '../result-template-decorators';\r\n\r\n/**\r\n * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.\r\n * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).\r\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\r\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\r\n */\r\n@Component({\r\n  tag: 'atomic-field-condition',\r\n  styleUrl: 'atomic-field-condition.pcss',\r\n  shadow: false,\r\n})\r\nexport class AtomicFieldCondition {\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * Verifies whether the specified fields are defined.\r\n   */\r\n  @Prop({reflect: true}) ifDefined?: string;\r\n  /**\r\n   * Verifies whether the specified fields are not defined.\r\n   */\r\n  @Prop({reflect: true}) ifNotDefined?: string;\r\n\r\n  @MapProp({splitValues: true}) mustMatch: Record<string, string[]> = {};\r\n\r\n  @MapProp({splitValues: true}) mustNotMatch: Record<string, string[]> = {};\r\n\r\n  private conditions: ResultTemplateCondition[] = [];\r\n  private shouldBeRemoved = false;\r\n\r\n  @ResultContext() private result!: Result;\r\n\r\n  public componentWillLoad() {\r\n    if (this.ifDefined) {\r\n      const fieldNames = this.ifDefined.split(',');\r\n      this.conditions.push(\r\n        ResultTemplatesHelpers.fieldsMustBeDefined(fieldNames)\r\n      );\r\n    }\r\n\r\n    if (this.ifNotDefined) {\r\n      const fieldNames = this.ifNotDefined.split(',');\r\n      this.conditions.push(\r\n        ResultTemplatesHelpers.fieldsMustNotBeDefined(fieldNames)\r\n      );\r\n    }\r\n\r\n    this.conditions.push(\r\n      ...makeMatchConditions(this.mustMatch, this.mustNotMatch)\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    if (!this.conditions.every((condition) => condition(this.result))) {\r\n      this.shouldBeRemoved = true;\r\n      return '';\r\n    }\r\n\r\n    return <slot />;\r\n  }\r\n\r\n  public componentDidLoad() {\r\n    this.shouldBeRemoved && this.host.remove();\r\n  }\r\n}\r\n"],"version":3}