{"file":"atomic-automatic-facet-generator2.js","mappings":";;;;;;;;;AAAA,MAAM,gCAAgC,GAAG,u+tCAAu+tC,CAAC;AACjhuC,4CAAe,gCAAgC;;;;;;;;;;;;MCgClC,6BAA6B;;;;;;;;;;;QAqBV,iBAAY,GAAG,CAAC,CAAC;;;;;;;QAQjB,mBAAc,GAAG,CAAC,CAAC;QAEhC,wBAAmB,GAAG,CAAC,CAAC,CAAC;;;;4BAVG,CAAC;8BAQC,CAAC;mCAET,CAAC,CAAC;;IAElC,UAAU;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,GAAGA,EAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,uBAAuB,GAAGC,EAA4B,CACzD,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB;YACE,OAAO,EAAE;gBACP,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,cAAc,EAAE,IAAI,CAAC,cAAc;aACpC;SACF,CACF,CAAC;KACH;IAGM,MAAM,+CAA+C,CAC1D,aAAqB,EACrB,qBAA6B;QAE7B,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;YACxB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;YAC9B,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CACjC,CAAC,EACD,aAAa,GAAG,qBAAqB,CACtC,CAAC;KACH;IAEO,aAAa;QACnB,IAAI,MAAM,CAAC;YACT,kBAAkB,EAAE,IAAI,WAAW,CAAC,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;SAChE,CAAC,CAAC,QAAQ,CAAC;YACV,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;SAC7C,CAAC,CAAC;KACJ;IAEO,mBAAmB,CAAC,KAAa;QACvC,IAAI,IAAI,CAAC,mBAAmB,KAAK,CAAC,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,mBAAmB;cAC3B,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB;cACpC,IAAI,CAAC;KACV;IAEM,MAAM;QACX,MAAM,eAAe,GACnB,IAAI,CAAC,4BAA4B,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK;YACjE,QACE,8BACE,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EACtB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EACxB,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EAC1B,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GACpB,EAC1B;SACH,CAAC,CAAC;QACL,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE;YAChD,OAAO,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAC,EAAE,CAAC,CAAC,EAAE,KAAK,MACtD,EAAC,gBAAgB,IACf,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAC5C,CACH,CAAC,CAAC;SACJ;QAED,OAAO,eAAe,CAAC;KACxB;;;;;;;;;;;AAtG4B;IAA5B,kBAAkB,EAAE;+DAA4B;AAMzC;IAFP,qBAAqB,CAAC,yBAAyB,CAAC;mFAEmB;AAK7D;IAFN,qBAAqB,CAAC,cAAc,CAAC;wEAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["buildSearchStatus","buildAutomaticFacetGenerator"],"sources":["src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.pcss?tag=atomic-automatic-facet-generator","src/components/search/facets/atomic-automatic-facet-generator/atomic-automatic-facet-generator.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\r\n","import {NumberValue, Schema} from '@coveo/bueno';\r\nimport {\r\n  AutomaticFacetGenerator,\r\n  AutomaticFacetGeneratorState,\r\n  SearchStatus,\r\n  SearchStatusState,\r\n  buildAutomaticFacetGenerator,\r\n  buildSearchStatus,\r\n} from '@coveo/headless';\r\nimport {Component, Method, Prop, State, h} from '@stencil/core';\r\nimport {\r\n  BindStateToController,\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../../utils/initialization-utils';\r\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\r\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\r\n\r\n/**\r\n * The `atomic-automatic-facet-generator` is a component that renders the facets from\r\n * the automatic facets feature. Unlike regular facets, which need to be explicitly defined\r\n * and requested in the query, automatic facets are dynamically generated by the index\r\n * in response to the search query.\r\n *\r\n * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.\r\n *\r\n * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).\r\n */\r\n@Component({\r\n  tag: 'atomic-automatic-facet-generator',\r\n  styleUrl: 'atomic-automatic-facet-generator.pcss',\r\n  shadow: false,\r\n})\r\nexport class AtomicAutomaticFacetGenerator implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @State() public error!: Error;\r\n\r\n  public automaticFacetGenerator!: AutomaticFacetGenerator;\r\n  @BindStateToController('automaticFacetGenerator')\r\n  @State()\r\n  private automaticFacetGeneratorState!: AutomaticFacetGeneratorState;\r\n\r\n  public searchStatus!: SearchStatus;\r\n  @BindStateToController('searchStatus')\r\n  @State()\r\n  public searchStatusState!: SearchStatusState;\r\n\r\n  /**\r\n   * The desired count of automatic facets.\r\n   *\r\n   * Minimum: `1`\r\n   * Maximum: `20`\r\n   * @defaultValue `5`\r\n   */\r\n  @Prop({reflect: true}) public desiredCount = 5;\r\n\r\n  /**\r\n   * The desired number of automatically generated facet values.\r\n   *\r\n   * Minimum: `1`\r\n   * @defaultValue `8`\r\n   */\r\n  @Prop({reflect: true}) public numberOfValues = 8;\r\n\r\n  @State() private collapseFacetsAfter = -1;\r\n\r\n  public initialize() {\r\n    this.validateProps();\r\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\r\n    this.automaticFacetGenerator = buildAutomaticFacetGenerator(\r\n      this.bindings.engine,\r\n      {\r\n        options: {\r\n          desiredCount: this.desiredCount,\r\n          numberOfValues: this.numberOfValues,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  @Method()\r\n  public async updateCollapseFacetsDependingOnFacetsVisibility(\r\n    collapseAfter: number,\r\n    numberOfVisibleFacets: number\r\n  ) {\r\n    if (collapseAfter === -1) {\r\n      this.collapseFacetsAfter = -1;\r\n      return;\r\n    }\r\n    this.collapseFacetsAfter = Math.max(\r\n      0,\r\n      collapseAfter - numberOfVisibleFacets\r\n    );\r\n  }\r\n\r\n  private validateProps() {\r\n    new Schema({\r\n      collapseFacetAfter: new NumberValue({min: -1, required: false}),\r\n    }).validate({\r\n      collapseFacetAfter: this.collapseFacetsAfter,\r\n    });\r\n  }\r\n\r\n  private shouldCollapseFacet(index: number): boolean {\r\n    if (this.collapseFacetsAfter === -1) {\r\n      return false;\r\n    }\r\n    return this.collapseFacetsAfter\r\n      ? index + 1 > this.collapseFacetsAfter\r\n      : true;\r\n  }\r\n\r\n  public render() {\r\n    const automaticFacets =\r\n      this.automaticFacetGeneratorState.automaticFacets.map((facet, index) => {\r\n        return (\r\n          <atomic-automatic-facet\r\n            key={facet.state.field}\r\n            field={facet.state.field}\r\n            facetId={facet.state.field}\r\n            facet={facet}\r\n            searchStatus={this.searchStatus}\r\n            isCollapsed={this.shouldCollapseFacet(index)}\r\n          ></atomic-automatic-facet>\r\n        );\r\n      });\r\n    if (!this.searchStatus.state.firstSearchExecuted) {\r\n      return Array.from({length: this.desiredCount}, (_, index) => (\r\n        <FacetPlaceholder\r\n          numberOfValues={this.numberOfValues}\r\n          isCollapsed={this.shouldCollapseFacet(index)}\r\n        />\r\n      ));\r\n    }\r\n\r\n    return automaticFacets;\r\n  }\r\n}\r\n"],"version":3}