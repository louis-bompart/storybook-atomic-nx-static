{"file":"atomic-rating-facet.js","mappings":"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","names":["AtomicRatingFacet","buildSearchStatus","buildNumericFacet","buildFacetConditionsManager","buildNumericRange"],"sources":["src/components/search/facets/atomic-rating-facet/atomic-rating-facet.pcss?tag=atomic-rating-facet&encapsulation=shadow","src/components/search/facets/atomic-rating-facet/atomic-rating-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/atomic-rating/atomic-rating.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  NumericFacet,\n  buildNumericFacet,\n  NumericFacetState,\n  NumericFacetOptions,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  NumericFacetValue,\n  NumericRangeRequest,\n  buildNumericRange,\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\nimport Star from '../../../../images/star.svg';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {Rating} from '../../../common/atomic-rating/atomic-rating';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {FacetValueCheckbox} from '../../../common/facets/facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/facet-value-link';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.\n * It only supports numeric fields.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and toggles to expand or collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-count - The facet value count, common for all displays.\n * @part value-rating - The facet value rating, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n */\n@Component({\n  tag: 'atomic-rating-facet',\n  styleUrl: 'atomic-rating-facet.pcss',\n  shadow: true,\n})\nexport class AtomicRatingFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: NumericFacet;\n  private dependenciesManager?: FacetConditionsManager;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.\n   */\n  @Prop({reflect: true}) public numberOfIntervals = 5;\n  /**\n   * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.\n   */\n  @Prop({reflect: true}) public maxValueInIndex = this.numberOfIntervals;\n  /**\n   * The minimum value of the field.\n   */\n  @Prop({reflect: true}) public minValueInIndex = 1;\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * The SVG icon to use to display the rating.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   *\n   * When using a custom icon, at least part of your icon should have the color set to `fill=\"currentColor\"`.\n   * This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\n   *\n   * - `--atomic-rating-icon-active-color`\n   * - `--atomic-rating-icon-inactive-color`\n\n   */\n  @Prop({reflect: true}) public icon = Star;\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-rating-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-rating-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-rating-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-rating-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n    });\n  }\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.initializeFacet();\n    this.initializeDependenciesManager();\n  }\n\n  private initializeFacet() {\n    const options: NumericFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfIntervals,\n      currentValues: this.generateCurrentValues(),\n      sortCriteria: 'descending',\n      generateAutomaticRanges: false,\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n    this.facet = buildNumericFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n      content: (value) => this.ratingContent(value),\n    });\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => !!this.valuesToRender.length,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return (\n      this.searchStatusState.hasError ||\n      !this.facet.state.enabled ||\n      !this.valuesToRender.length\n    );\n  }\n\n  private get scaleFactor() {\n    return this.maxValueInIndex / this.numberOfIntervals;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facetState.values.filter(({state}) => state === 'selected')\n      .length;\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private generateCurrentValues() {\n    const currentValues: NumericRangeRequest[] = [];\n    for (let i = this.minValueInIndex; i <= this.numberOfIntervals; i++) {\n      currentValues.push(\n        buildNumericRange({\n          start: Math.round(i * this.scaleFactor * 100) / 100,\n          end: Math.round((i + 1) * this.scaleFactor * 100) / 100,\n          endInclusive: false,\n        })\n      );\n    }\n    return currentValues;\n  }\n\n  private formatFacetValue(facetValue: NumericFacetValue) {\n    if (facetValue.start === this.maxValueInIndex) {\n      return this.bindings.i18n.t('stars-only', {count: facetValue.start});\n    }\n    return this.bindings.i18n.t('stars', {\n      count: facetValue.start,\n      max: this.maxValueInIndex,\n    });\n  }\n\n  private ratingContent(facetValue: NumericFacetValue) {\n    return (\n      <Rating\n        i18n={this.bindings.i18n}\n        numberOfTotalIcons={this.maxValueInIndex}\n        numberOfActiveIcons={facetValue.start}\n        icon={this.icon}\n      ></Rating>\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={this.headingLevel}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    switch (this.displayValuesAs) {\n      case 'checkbox':\n        return (\n          <FacetValueCheckbox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n          >\n            {this.ratingContent(facetValue)}\n          </FacetValueCheckbox>\n        );\n      case 'link':\n        return (\n          <FacetValueLink\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.bindings.i18n}\n            onClick={onClick}\n          >\n            {this.ratingContent(facetValue)}\n          </FacetValueLink>\n        );\n    }\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) =>\n        this.renderValue(value, () =>\n          this.displayValuesAs === 'link'\n            ? this.facet.toggleSingleSelect(value)\n            : this.facet.toggleSelect(value)\n        )\n      )\n    );\n  }\n\n  private get valuesToRender() {\n    return this.facet.state.values.filter(\n      (value) => value.numberOfResults || value.state !== 'idle'\n    );\n  }\n\n  public render() {\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatusState.firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfIntervals}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.valuesToRender.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && this.renderValues()}\n      </FacetContainer>\n    );\n  }\n}\n"],"version":3}