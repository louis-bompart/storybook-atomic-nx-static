{"file":"atomic-insight-result-action.entry.esm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,4BAA4B,GAAG,uluCAAuluC;;;;;;;;;;;;ACoB5nuC,IAAK,OAMJ;AAND,WAAK,OAAO;IACV,8CAAmC,CAAA;IACnC,wCAA6B,CAAA;IAC7B,kCAAuB,CAAA;IACvB,oCAAyB,CAAA;IACzB,sCAA2B,CAAA;AAC7B,CAAC,EANI,OAAO,KAAP,OAAO,QAMX;MASY,yBAAyB;;;;;;;QAgBN,SAAI,GAAG,EAAE,CAAC;;;;QAKV,YAAO,GAAG,EAAE,CAAC;;;;QAKb,WAAM,GAAqB,EAAE,CAAC;;oBAVvB,EAAE;uBAKC,EAAE;sBAKe,EAAE;;IAEnD,OAAO;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC,CAAC;KACrE;IAEO,OAAO;QACb,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;QAED,QAAQ,IAAI,CAAC,MAAM;YACjB,KAAK,OAAO,CAAC,eAAe;gBAC1B,OAAO,QAAQ,CAAC;YAClB,KAAK,OAAO,CAAC,YAAY;gBACvB,OAAO,UAAU,CAAC;YACpB,KAAK,OAAO,CAAC,SAAS;gBACpB,OAAO,aAAa,CAAC;YACvB,KAAK,OAAO,CAAC,UAAU;gBACrB,OAAO,QAAQ,CAAC;YAClB,KAAK,OAAO,CAAC,WAAW;gBACtB,OAAO,SAAS,CAAC;YACnB;gBACE,OAAO,aAAa,CAAC;SACxB;KACF;IAEM,MAAM;QACX,QACE,EAAC,UAAU,qDACT,UAAU,EAAC,eAAe,EAC1B,KAAK,EAAC,iBAAiB,EACvB,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EACpB,KAAK,EAAE,IAAI,CAAC,OAAO,EACnB,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,EACF;KACH;;AA9D4B;IAA5B,kBAAkB,EAAE;2DAA4B;AACxB;IAAxB,aAAa,EAAE;yDAAyB;;;;;","names":[],"sources":["src/components/insight/atomic-insight-result-action/atomic-insight-result-action.pcss?tag=atomic-insight-result-action","src/components/insight/atomic-insight-result-action/atomic-insight-result-action.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\r\n\r\n:host {\r\n  &::part(result-action-button) {\r\n    @apply flex items-center justify-center;\r\n    @apply h-8 w-8;\r\n  }\r\n}\r\n","import {Result} from '@coveo/headless';\r\nimport {Component, Event, EventEmitter, Prop, State, h} from '@stencil/core';\r\nimport AttachIcon from '../../../images/attach.svg';\r\nimport CopyIcon from '../../../images/copy-dark.svg';\r\nimport EmailIcon from '../../../images/email.svg';\r\nimport QuickviewIcon from '../../../images/preview.svg';\r\nimport FeedIcon from '../../../images/share-post.svg';\r\nimport {\r\n  InitializableComponent,\r\n  InitializeBindings,\r\n} from '../../../utils/initialization-utils';\r\nimport {IconButton} from '../../common/iconButton';\r\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\r\nimport {ResultContext} from '../../search/result-template-components/result-template-decorators';\r\n\r\nexport interface InsightResultActionClickedEvent {\r\n  action: string;\r\n  result: Result;\r\n}\r\n\r\nenum Actions {\r\n  CopyToClipboard = 'copyToClipboard',\r\n  AttachToCase = 'attachToCase',\r\n  Quickview = 'quickview',\r\n  PostToFeed = 'postToFeed',\r\n  SendAsEmail = 'sendAsEmail',\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'atomic-insight-result-action',\r\n  styleUrl: 'atomic-insight-result-action.pcss',\r\n})\r\nexport class AtomicInsightResultAction implements InitializableComponent {\r\n  @InitializeBindings() public bindings!: Bindings;\r\n  @ResultContext() private result!: Result;\r\n  @State() public error!: Error;\r\n\r\n  @Event({\r\n    eventName: 'atomicInsightResultActionClicked',\r\n    composed: true,\r\n    cancelable: true,\r\n    bubbles: true,\r\n  })\r\n  private actionClicked!: EventEmitter<InsightResultActionClickedEvent>;\r\n\r\n  /**\r\n   * Specify the result action icon to display.\r\n   */\r\n  @Prop({mutable: true}) public icon = '';\r\n\r\n  /**\r\n   * The text tooltip to show on the result action icon.\r\n   */\r\n  @Prop({mutable: true}) public tooltip = '';\r\n\r\n  /**\r\n   * The type of action to perform when the result action is clicked. This will be sent along the event fired when the button is clicked.\r\n   */\r\n  @Prop({mutable: true}) public action: Actions | string = '';\r\n\r\n  private onClick() {\r\n    this.actionClicked.emit({action: this.action, result: this.result});\r\n  }\r\n\r\n  private getIcon() {\r\n    if (this.icon) {\r\n      return this.icon;\r\n    }\r\n\r\n    switch (this.action) {\r\n      case Actions.CopyToClipboard:\r\n        return CopyIcon;\r\n      case Actions.AttachToCase:\r\n        return AttachIcon;\r\n      case Actions.Quickview:\r\n        return QuickviewIcon;\r\n      case Actions.PostToFeed:\r\n        return FeedIcon;\r\n      case Actions.SendAsEmail:\r\n        return EmailIcon;\r\n      default:\r\n        return QuickviewIcon;\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <IconButton\r\n        partPrefix=\"result-action\"\r\n        style=\"outline-neutral\"\r\n        icon={this.getIcon()}\r\n        title={this.tooltip}\r\n        onClick={() => this.onClick()}\r\n      />\r\n    );\r\n  }\r\n}\r\n"],"version":3}