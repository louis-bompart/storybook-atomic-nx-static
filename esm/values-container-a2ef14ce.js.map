{"file":"values-container-a2ef14ce.js","mappings":";;;;;;;MAqBa,mBAAmB,GAAG,CAAC,EAClC,YAAY,EACZ,KAAK,EACL,IAAI,EACJ,UAAU,EACV,MAAM,EACN,SAAS,GACa;;IACtB,MAAM,gBAAgB,GAAG,MAAA,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,KAC/C,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAClC,0CAAE,KAAK,CAAC;IACT,OAAO,gBAAgB;UACnB,oBAAoB,CAAC,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAC;UACnD,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;YACX,KAAK,EAAE,qBAAqB,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC;YACvE,GAAG,EAAE,qBAAqB,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC;SACpE,CAAC,CAAC;AACT,EAAE;AAEK,MAAM,qBAAqB,GAAG,CACnC,KAAa,EACb,IAAmC,EACnC,MAAuC,EACvC,SAA6C;IAE7C,IAAI;QACF,OAAO,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAqB,CAAC,CAAC;KACrD;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CACV,qCAAqC,KAAK,qCAAqC,EAC/E,KAAK,CACN,CAAC;QACF,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CACrB,UAA2B,EAC3B,WAA4B;IAE5B,QACE,UAAU,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK;QACtC,UAAU,CAAC,GAAG,KAAK,WAAW,CAAC,GAAG;QAClC,UAAU,CAAC,YAAY,KAAK,WAAW,CAAC,YAAY,EACpD;AACJ,CAAC;;MCtDY,qBAAqB,GAE9B,CAAC,KAAK;IACR,MAAM,EAAC,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG,KAAK,CAAC;IAC3D,MAAM,YAAY,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAChD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC;IACnD,QAAQ,eAAe;QACrB,KAAK,UAAU;YACb,QACE,EAAC,kBAAkB,IACjB,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,CAAC,eAAe,EAC3C,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,MAAM,OAAO,EAAE;gBAExB,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,GACI,CACT,EACrB;QACJ,KAAK,MAAM;YACT,QACE,EAAC,cAAc,IACb,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,CAAC,eAAe,EAC3C,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,OAAO;gBAEhB,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,GACI,CACb,EACjB;KACL;AACH;;MC1Ca,2BAA2B,GAEpC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,EAAE,QAAQ;IAC1B,QACE,EAAC,gBAAgB,IAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK;QACxC,UAAI,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,QAAQ,IAC3B,QAAQ,CACN,CACY,EACnB;AACJ;;;;","names":[],"sources":["src/components/common/facets/numeric-facet/formatter.ts","src/components/common/facets/numeric-facet/value-link.tsx","src/components/common/facets/numeric-facet/values-container.tsx"],"sourcesContent":["import {i18n} from 'i18next';\r\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\r\nimport {NumberFormatter} from '../../formats/format-common';\r\n\r\nexport interface FacetValueRange {\r\n  endInclusive: boolean;\r\n  start: number;\r\n  end: number;\r\n  label?: string;\r\n  state: 'selected' | 'idle' | 'excluded';\r\n}\r\n\r\nexport interface FormatFacetValueRange {\r\n  field: string;\r\n  facetValue: FacetValueRange & {numberOfResults: number};\r\n  manualRanges: FacetValueRange[];\r\n  i18n: i18n;\r\n  logger: Pick<Console, 'error'>;\r\n  formatter: NumberFormatter;\r\n}\r\n\r\nexport const formatHumanReadable = ({\r\n  manualRanges,\r\n  field,\r\n  i18n,\r\n  facetValue,\r\n  logger,\r\n  formatter,\r\n}: FormatFacetValueRange) => {\r\n  const manualRangeLabel = manualRanges.find((range) =>\r\n    areRangesEqual(range, facetValue)\r\n  )?.label;\r\n  return manualRangeLabel\r\n    ? getFieldValueCaption(field, manualRangeLabel, i18n)\r\n    : i18n.t('to', {\r\n        start: formatNumberLocalized(facetValue.start, i18n, logger, formatter),\r\n        end: formatNumberLocalized(facetValue.end, i18n, logger, formatter),\r\n      });\r\n};\r\n\r\nexport const formatNumberLocalized = (\r\n  value: number,\r\n  i18n: FormatFacetValueRange['i18n'],\r\n  logger: FormatFacetValueRange['logger'],\r\n  formatter: FormatFacetValueRange['formatter']\r\n) => {\r\n  try {\r\n    return formatter(value, i18n.languages as string[]);\r\n  } catch (error) {\r\n    logger.error(\r\n      `atomic-numeric-facet facet value \"${value}\" could not be formatted correctly.`,\r\n      error\r\n    );\r\n    return value;\r\n  }\r\n};\r\n\r\nconst areRangesEqual = (\r\n  firstRange: FacetValueRange,\r\n  secondRange: FacetValueRange\r\n) => {\r\n  return (\r\n    firstRange.start === secondRange.start &&\r\n    firstRange.end === secondRange.end &&\r\n    firstRange.endInclusive === secondRange.endInclusive\r\n  );\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {FacetValueCheckbox} from '../facet-value-checkbox/facet-value-checkbox';\r\nimport {FacetValueLabelHighlight} from '../facet-value-label-highlight/facet-value-label-highlight';\r\nimport {FacetValueLink} from '../facet-value-link/facet-value-link';\r\nimport {FormatFacetValueRange, formatHumanReadable} from './formatter';\r\n\r\ninterface NumericFacetValueLinkProps extends FormatFacetValueRange {\r\n  onClick: () => void;\r\n  logger: Pick<Console, 'error'>;\r\n  displayValuesAs: 'checkbox' | 'link';\r\n}\r\n\r\nexport const NumericFacetValueLink: FunctionalComponent<\r\n  NumericFacetValueLinkProps\r\n> = (props) => {\r\n  const {facetValue, displayValuesAs, i18n, onClick} = props;\r\n  const displayValue = formatHumanReadable(props);\r\n  const isSelected = facetValue.state === 'selected';\r\n  switch (displayValuesAs) {\r\n    case 'checkbox':\r\n      return (\r\n        <FacetValueCheckbox\r\n          displayValue={displayValue}\r\n          numberOfResults={facetValue.numberOfResults}\r\n          isSelected={isSelected}\r\n          i18n={i18n}\r\n          onClick={() => onClick()}\r\n        >\r\n          <FacetValueLabelHighlight\r\n            displayValue={displayValue}\r\n            isSelected={isSelected}\r\n          ></FacetValueLabelHighlight>\r\n        </FacetValueCheckbox>\r\n      );\r\n    case 'link':\r\n      return (\r\n        <FacetValueLink\r\n          displayValue={displayValue}\r\n          numberOfResults={facetValue.numberOfResults}\r\n          isSelected={isSelected}\r\n          i18n={i18n}\r\n          onClick={onClick}\r\n        >\r\n          <FacetValueLabelHighlight\r\n            displayValue={displayValue}\r\n            isSelected={isSelected}\r\n          ></FacetValueLabelHighlight>\r\n        </FacetValueLink>\r\n      );\r\n  }\r\n};\r\n","import {FunctionalComponent, h} from '@stencil/core';\r\nimport {i18n} from 'i18next';\r\nimport {FacetValuesGroup} from '../facet-values-group/facet-values-group';\r\n\r\ninterface NumericFacetValuesContainerProps {\r\n  i18n: i18n;\r\n  label: string;\r\n}\r\nexport const NumericFacetValuesContainer: FunctionalComponent<\r\n  NumericFacetValuesContainerProps\r\n> = ({i18n, label}, children) => {\r\n  return (\r\n    <FacetValuesGroup i18n={i18n} label={label}>\r\n      <ul class=\"mt-3\" part=\"values\">\r\n        {children}\r\n      </ul>\r\n    </FacetValuesGroup>\r\n  );\r\n};\r\n"],"version":3}