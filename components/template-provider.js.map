{"file":"template-provider.js","mappings":"AAeA,SAAS,eAAe;IACtB,MAAM,OAAO,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;IAClD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;IAC5D,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC5B,OAAO;QACL,OAAO;QACP,UAAU,EAAE,EAAE;KACf,CAAC;AACJ,CAAC;MAEY,gBAAgB;IAG3B,YACU,KAAsC,EACtC,YAAgE,EAChE,sBAGJ,eAAe;QALX,UAAK,GAAL,KAAK,CAAiC;QACtC,iBAAY,GAAZ,YAAY,CAAoD;QAChE,wBAAmB,GAAnB,mBAAmB,CAGR;QAEnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC3C,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IAEO,MAAM,uBAAuB;QACnC,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACvC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,qBAAqB;YAC1D,MAAM,QAAQ,GAAG,MAAM,qBAAqB,CAAC,WAAW,EAAE,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACtC;YACD,OAAO,QAAQ,CAAC;SACjB,CAAC,CACH,CAAC;QAEF,MAAM,SAAS,GAAG,CAChB,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB;cACxD,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;cAC5B,EAAE,EACN,MAAM,CACN,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAG1C,CACJ,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,GAAG,SAAS,CAAC,CAAC;QACrD,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;KAC9C;IAEM,kBAAkB,CAAC,IAAc;QACtC,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAE,CAAC;KACnD;IAED,IAAW,mBAAmB;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC;KACjD;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;KACzC;;;;;","names":[],"sources":["src/components/common/template-provider/template-provider.ts"],"sourcesContent":["import {Template, TemplatesManager} from '@coveo/headless';\r\n\r\nexport interface TemplateElement<ItemType> extends HTMLElement {\r\n  getTemplate(): Promise<Template<ItemType, DocumentFragment> | null>;\r\n}\r\n\r\nexport interface TemplateProviderProps<ItemType> {\r\n  getResultTemplateRegistered(): boolean;\r\n  setResultTemplateRegistered(value: boolean): void;\r\n  getTemplateHasError(): boolean;\r\n  setTemplateHasError(value: boolean): void;\r\n  templateElements: TemplateElement<ItemType>[];\r\n  includeDefaultTemplate: boolean;\r\n}\r\n\r\nfunction defaultTemplate() {\r\n  const content = document.createDocumentFragment();\r\n  const linkEl = document.createElement('atomic-result-link');\r\n  content.appendChild(linkEl);\r\n  return {\r\n    content,\r\n    conditions: [],\r\n  };\r\n}\r\n\r\nexport class TemplateProvider<ItemType> {\r\n  private templateManager: TemplatesManager<ItemType, DocumentFragment>;\r\n\r\n  constructor(\r\n    private props: TemplateProviderProps<ItemType>,\r\n    private buildManager: () => TemplatesManager<ItemType, DocumentFragment>,\r\n    private makeDefaultTemplate: () => Template<\r\n      ItemType,\r\n      DocumentFragment\r\n    > = defaultTemplate\r\n  ) {\r\n    this.templateManager = this.buildManager();\r\n    this.registerResultTemplates();\r\n  }\r\n\r\n  private async registerResultTemplates() {\r\n    const customTemplates = await Promise.all(\r\n      this.props.templateElements.map(async (resultTemplateElement) => {\r\n        const template = await resultTemplateElement.getTemplate();\r\n        if (!template) {\r\n          this.props.setTemplateHasError(true);\r\n        }\r\n        return template;\r\n      })\r\n    );\r\n\r\n    const templates = (\r\n      !customTemplates.length && this.props.includeDefaultTemplate\r\n        ? [this.makeDefaultTemplate()]\r\n        : []\r\n    ).concat(\r\n      customTemplates.filter((template) => template) as Template<\r\n        ItemType,\r\n        DocumentFragment\r\n      >[]\r\n    );\r\n\r\n    this.templateManager.registerTemplates(...templates);\r\n    this.props.setResultTemplateRegistered(true);\r\n  }\r\n\r\n  public getTemplateContent(item: ItemType) {\r\n    return this.templateManager.selectTemplate(item)!;\r\n  }\r\n\r\n  public get templatesRegistered() {\r\n    return this.props.getResultTemplateRegistered();\r\n  }\r\n\r\n  public get hasError() {\r\n    return this.props.getTemplateHasError();\r\n  }\r\n}\r\n"],"version":3}